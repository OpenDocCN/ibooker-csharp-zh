- en: 'Chapter 1\. Start Building with c#: *Build something great…fast!*'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。用C#开始构建：*快速构建一些伟大的东西……*
- en: '![Images](assets/001fig01.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/001fig01.png)'
- en: '**Want to build great apps…right now?**'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**想立即构建出色的应用程序吗？**'
- en: With C#, you’ve got a **modern programming language** and a **valuable tool**
    at your fingertips. And with **Visual Studio**, you’ve got an **amazing development
    environment** with highly intuitive features that make coding as easy as possible.
    Not only is Visual Studio a great tool for writing code, it’s also a **really
    valuable learning tool** for exploring C#. Sound appealing? Turn the page, and
    let’s get coding.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用C#，你拥有一个**现代编程语言**和一个**有价值的工具**在你的指尖。而且有了**Visual Studio**，你拥有一个**令人惊叹的开发环境**，具有高度直观的功能，使编码变得尽可能简单。Visual
    Studio不仅是一个编写代码的好工具，它还是一个探索C#的**非常有价值的学习工具**。听起来吸引人吗？翻页吧，让我们开始编码吧。
- en: Why you should learn C#
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么你应该学习C#
- en: C# is a simple, modern language that lets you do incredible things. When you
    learn C#, you’re learning more than just a language. C# unlocks the whole world
    of .NET, an incredibly powerful open source platform for building all sorts of
    applications.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: C#是一种简单、现代的语言，让你可以做很多令人惊讶的事情。当你学习C#时，你不仅仅是在学习一门语言。C#为你打开了整个.NET世界，这是一个非常强大的开源平台，可以构建各种应用程序。
- en: Visual Studio is your gateway to C#
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Visual Studio是你进入C#的门户
- en: If you haven’t installed Visual Studio 2019 yet, this is the time to do it.
    Go to [https://visualstudio.microsoft.com](https://visualstudio.microsoft.com/)
    and **download the Visual Studio Community edition**. (If it’s already installed,
    run the Visual Studio Installer to update your installed options.)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有安装Visual Studio 2019，现在就是时候了。访问[https://visualstudio.microsoft.com](https://visualstudio.microsoft.com/)并**下载Visual
    Studio Community版**。（如果已经安装，请运行Visual Studio Installer更新已安装的选项。）
- en: Note
  id: totrans-8
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure you’re installing Visual Studio, and not installing Visual Studio
    Code.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你正在安装Visual Studio，而不是安装Visual Studio Code。
- en: Visual Studio Code is an amazing open source, cross-platform code editor, but
    it’s not tailored to .NET development the way Visual Studio is. That’s why we
    can use Visual Studio throughout this book as a tool for learning and exploration.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code是一个了不起的开源跨平台代码编辑器，但它没有像Visual Studio那样专门针对.NET开发。这就是为什么我们可以在本书中始终使用Visual
    Studio作为学习和探索的工具。
- en: If you’re on Windows...
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果你在Windows上……
- en: Make sure to check the options to install support for .NET Core cross-platform
    development and .NET desktop development. But don’t check the *Game development
    with Unity* option—you’ll be doing 3D game development with Unity later in the
    book, but you’ll install Unity separately.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 确保选中安装支持.NET Core跨平台开发和.NET桌面开发的选项。但不要勾选*使用Unity进行游戏开发*选项——稍后在本书中你将会进行Unity的3D游戏开发，但你需要单独安装Unity。
- en: '![Images](assets/002fig01.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/002fig01.png)'
- en: If you’re on a Mac...
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果你在Mac上……
- en: Download and run the Visual Studio for Mac installer. Make sure the .NET Core
    target is checked.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 下载并运行Visual Studio for Mac安装程序。确保勾选.NET Core目标。
- en: '![Images](assets/002fig02.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/002fig02.png)'
- en: Note
  id: totrans-17
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You can do the ASP.NET projects on Windows too! Just make sure that the “ASP.NET
    and web development” option is checked when you install Visual Studio.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在Windows上进行ASP.NET项目！只需在安装Visual Studio时确保勾选“ASP.NET和Web开发”选项。
- en: '**Most projects in this book are .NET Core console apps, which work on both
    Windows and Mac. Some chapters have a project—like the animal matching game later
    in this chapter—that are Windows desktop projects. For these projects, use the
    ASP.NET Core Blazor projects appendix. It has a *complete replacement* for [#start_building_with_chash_build_somethin](#start_building_with_chash_build_somethin),
    and ASP.NET Core Blazor versions of the other WPF projects.**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**本书中大多数项目都是.NET Core控制台应用程序，在Windows和Mac上都可以运行。一些章节有特定项目——比如本章后面的动物匹配游戏——这些是Windows桌面项目。对于这些项目，请使用ASP.NET
    Core Blazor项目附录。它提供了一个*完整替代*的[#start_building_with_chash_build_somethin](#start_building_with_chash_build_somethin)，以及其他WPF项目的ASP.NET
    Core Blazor版本。**'
- en: Visual Studio is a tool for writing code and exploring C#
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Visual Studio是一个编写代码和探索C#的工具
- en: You could use Notepad or another text editor to write your C# code, but there’s
    a better way. An **IDE**—that’s short for ***integrated development environment***—is
    a text editor, visual designer, file manager, debugger…it’s like a multitool for
    everything you need to write code.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用记事本或其他文本编辑器编写你的C#代码，但有更好的选择。一个**集成开发环境（IDE）**——简称***集成开发环境***——是一个文本编辑器、视觉设计工具、文件管理器、调试器……它就像是一个多功能工具，可以满足你编写代码的所有需求。
- en: 'These are just a few of the things that Visual Studio helps you do:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是 Visual Studio 帮助您完成的一些事情：
- en: '**Build an application, FAST.** The C# language is flexible and easy to learn,
    and the Visual Studio IDE makes it easier by doing a lot of manual work for you
    automatically. Here are just a few things that Visual Studio does for you:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**快速构建应用程序。** C# 语言灵活且易学，Visual Studio IDE通过自动完成大量手动工作，使其更容易。以下是 Visual Studio
    为您做的一些事情：'
- en: Manages all your project files
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理您所有的项目文件
- en: Makes it easy to edit your project’s code
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使得编辑项目代码变得更加容易
- en: Keeps track of your project’s graphics, audio, icons, and other resources
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理项目的图形、音频、图标和其他资源
- en: Helps you debug your code by stepping through it line by line
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过逐行调试来帮助你调试代码
- en: '![Images](assets/003fig01.png)'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/003fig01.png)'
- en: '**Design a great-looking user interface.** The Visual Designer in the Visual
    Studio IDE is one of the easiest-to-use design tools out there. It does so much
    for you that you’ll find that creating user interfaces for your programs is one
    of the most satisfying parts of developing a C# application. You can build full-featured
    professional programs without having to spend hours tweaking your user interface
    (unless you want to).'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**设计一个外观出色的用户界面。** Visual Studio IDE 中的可视化设计器是其中一个最易于使用的设计工具。它为您做了很多工作，以至于您会发现为您的程序创建用户界面是开发
    C# 应用程序中最令人满意的部分之一。您可以构建完整功能的专业程序，而无需花费数小时调整用户界面（除非您愿意）。'
- en: '**Build visually stunning programs.** When you **combine C# with XAML**, the
    visual markup language for designing user interfaces for WPF desktop applications,
    you’re using one of the most effective tools around for creating visual programs...
    and you’ll use it to build software that looks as great as it acts.'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**构建视觉上令人惊叹的程序。** 当您**结合 C# 和 XAML**，用于设计 WPF 桌面应用程序用户界面的视觉标记语言时，您正在使用最有效的工具之一来创建视觉程序……
    您将使用它来构建看起来既好看又能正常运行的软件。'
- en: Note
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: If you’re using Visual Studio for Mac, you’ll build the same great-looking apps,
    but instead of using XAML you’ll do it by combining C# with HTML.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您使用的是 Visual Studio for Mac，您将构建相同外观的应用程序，但是不是使用 XAML，而是通过将 C# 与 HTML 结合使用。
- en: Note
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Visual Studio is an amazing development environment, but we’re also going to
    use it as a learning tool to explore C#.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Visual Studio 是一个令人惊叹的开发环境，但我们也将把它作为一个学习工具来探索 C#。
- en: Note
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**The** user interface **(or** UI**) for any WPF is built with XAML (which
    stands for eXtensible** **Application** **Markup** **Language). Visual Studio
    makes it really easy to work with XAML.**'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**任何 WPF 的用户界面**(或**UI**)都是使用 XAML 构建的（XAML 代表可扩展应用标记语言）。Visual Studio 让使用
    XAML 变得非常容易。'
- en: '**Learn and explore C# and .NET.** Visual Studio is a world-class development
    tool, but lucky for us it’s also a fantastic learning tool. ***We’re going to
    use the IDE to explore C#***, which gives us a fast track for getting important
    programming concepts into your brain *fast*.'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**学习和探索 C# 和 .NET。** Visual Studio 是一个世界级的开发工具，但幸运的是，它也是一个很棒的学习工具。***我们将使用
    IDE 探索 C#***，这让我们快速掌握重要的编程概念*。'
- en: Note
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: We’ll often refer to Visual Studio as just “the IDE” throughout this book.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在本书中我们经常将 Visual Studio 简称为“IDE”。
- en: Create your first project in Visual Studio
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中创建您的第一个项目
- en: The best way to learn C# is to start writing code, so we’re going to use Visual
    Studio to **create a new project**…and start writing code immediately!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 学习 C# 最好的方法是开始编写代码，所以我们将使用 Visual Studio **创建一个新项目**……并立即开始编写代码！
- en: '**Create a new Console App (.NET Core) project.**'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建一个新的控制台应用程序 (.NET Core) 项目。**'
- en: Start up Visual Studio 2019\. When it first starts up, it shows you a “Create
    a new project” window with a few different options. Choose **Create a new project**.
    Don’t worry if you dismiss the window—you can always get it back by choosing File
    >> New >> Project from the menu.
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 启动 Visual Studio 2019。当它首次启动时，会显示一个“创建新项目”的窗口，其中有几个不同的选项。选择**创建一个新项目**。如果您关闭了该窗口也不必担心——您可以通过选择“文件”>>“新建”>>“项目”来随时再次打开它。
- en: '![Images](assets/004fig01.png)'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/004fig01.png)'
- en: Choose the **Console App (.NET Core)** project type by clicking on it, then
    press the **Next** button.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击**控制台应用程序 (.NET Core)**项目类型，然后点击**下一步**按钮。
- en: '![Images](assets/004fig02.png)'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/004fig02.png)'
- en: Name your project **MyFirstConsoleApp** and click the **Create** button.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将项目命名为**MyFirstConsoleApp**，然后点击**创建**按钮。
- en: '![Images](assets/004fig03.png)'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/004fig03.png)'
- en: Note
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '*If you’re using **Visual Studio for Mac**, the code for this project—and all
    .NET Core Console App projects in this book—will be the same, but some IDE features
    will be different. Go to the* **Visual Studio for Mac Learner’s Guide** *appendix
    for the Mac version of this chapter.*'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*如果您使用的是**Visual Studio for Mac**，本项目的代码——以及本书中的所有.NET Core控制台应用程序项目——都将是相同的，但一些IDE功能将会有所不同。请参阅*
    **Visual Studio for Mac学习指南** *附录，以获取本章的Mac版本。*'
- en: '**Look at the code for your new app.**'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**查看您的新应用程序的代码。**'
- en: 'When Visual Studio creates a new project, it gives you a starting point that
    you can build on. As soon as it finishes creating the new files for the app, it
    should open a file called *Program.cs* with this code:'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当Visual Studio创建一个新项目时，它会为您提供一个可以构建的起点。一旦完成为应用程序创建新文件，它应该会打开一个名为*Program.cs*的文件，并显示以下代码：
- en: '![Images](assets/004fig05.png)'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/004fig05.png)'
- en: '**Run your new app.**'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**运行你的新应用。**'
- en: 'The app Visual Studio created for you is ready to run. At the top of the Visual
    Studio IDE, find the button with a green triangle and your app’s name and click
    it:'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Visual Studio为您创建的应用程序已经准备就绪。在Visual Studio IDE的顶部找到带有绿色三角形和您的应用程序名称的按钮，然后单击它：
- en: '![Images](assets/005fig01.png)'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/005fig01.png)'
- en: '**Look at your program’s output.**'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**查看您程序的输出。**'
- en: 'When you run your program, the **Microsoft Visual Studio Debug Console window**
    will pop up and show you the output of the program:'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当您运行程序时，**Microsoft Visual Studio调试控制台窗口**将弹出并显示程序的输出：
- en: '![Images](assets/005fig02.png)'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/005fig02.png)'
- en: The best way to learn a language is to write a lot of code in it, so you’re
    going to build a lot programs in this book. Many of them will be .NET Core Console
    App projects, so let’s have a closer look at what you just did.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 学习一门语言的最佳方式是大量编写代码，所以你将在本书中构建许多程序。其中许多将是.NET Core控制台应用项目，所以让我们仔细看看你刚刚做了什么。
- en: 'At the top of the window is the **output of the program**:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口顶部是程序的**输出**：
- en: '**Hello World!**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**Hello World!**'
- en: 'Then there’s a line break, followed by some additional text:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然后有一个换行，接着是一些额外的文字：
- en: '[PRE0]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You’ll see the same message at the bottom of every Debug Console window. Your
    program printed a single line of text (`**Hello World!**`) and then exited. Visual
    Studio is keeping the output window open until you press a key to close it so
    you can see the output before the window disappears.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在每个调试控制台窗口的底部看到相同的消息。您的程序打印了一行文本（`**Hello World!**`），然后退出。Visual Studio会保持输出窗口打开，直到您按键关闭它，以便在窗口消失之前查看输出。
- en: Press a key to close the window. Then run your program again. This is how you’ll
    run all of the .NET Core Console App projects that you’ll build throughout the
    book.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 按下一个键来关闭窗口。然后再次运行您的程序。这是您在整本书中构建的所有.NET Core控制台应用程序的运行方式。
- en: Let’s build a game!
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们来构建一个游戏！
- en: You’ve built your first C# app, and that’s great! Now that you’ve done that,
    let’s build something a little more complex. We’re going to build an **animal
    matching game**, where a player is shown a grid of 16 animals and needs to click
    on pairs to make them disappear.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经构建了您的第一个C#应用程序，这太棒了！现在您已经做到了，让我们构建一些稍微复杂的东西。我们将构建一个**动物匹配游戏**，玩家将看到一个包含16只动物的网格，并需要点击成对的动物使它们消失。
- en: '![Images](assets/006fig01.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/006fig01.png)'
- en: Note
  id: totrans-70
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The Mac versions of the WPF projects use ASP.NET Core. You can build ASP.NET
    Core projects on Windows, too.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: WPF项目的Mac版本使用ASP.NET Core。您也可以在Windows上构建ASP.NET Core项目。
- en: Your animal matching game is a WPF app
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 您的动物匹配游戏是一个WPF应用程序。
- en: Console apps are great if you just need to input and output text. If you want
    a visual app that’s displayed in a window, you’ll need to use a different technology.
    That’s why your animal matching game will be a **WPF app**. WPF—or Windows Presentation
    Foundation—lets you create desktop applications that can run on any version of
    Windows. Most of the chapters in this book will feature one WPF app. The goal
    of this project is to introduce you to WPF and give you tools to build visually
    stunning desktop applications as well as console apps.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只需要输入和输出文本，控制台应用非常适合。如果您想要一个显示在窗口中的可视应用程序，则需要使用不同的技术。这就是为什么您的动物匹配游戏将是一个**WPF应用**。WPF（或Windows
    Presentation Foundation）允许您创建可以在任何Windows版本上运行的桌面应用程序。本书的大多数章节将包含一个WPF应用程序。这个项目的目标是介绍WPF，并为您提供构建视觉上令人惊叹的桌面应用程序以及控制台应用程序的工具。
- en: '**By the time you’re done with this project, you’ll be a lot more familiar
    with the tools that you’ll rely on throughout this book to learn and explore C#.**'
  id: totrans-74
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**完成这个项目时，你将更加熟悉在本书中学习和探索C#所依赖的工具。**'
- en: Here’s how you’ll build your game
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这是您将构建游戏的方式
- en: 'The rest of this chapter will walk you through building your animal matching
    game, and you’ll be doing it in a series of separate parts:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的其余部分将引导您逐步构建动物匹配游戏，您将分阶段完成：
- en: First you’ll create a new desktop application project in Visual Studio.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，您将在 Visual Studio 中创建一个新的桌面应用程序项目。
- en: Then you’ll use XAML to build the window.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后您将使用 XAML 来构建窗口。
- en: You’ll write C# code to add random animal emoji to the window.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将编写 C# 代码，向窗口添加随机动物表情符号。
- en: The game needs to let the user click on pairs of emoji to match them.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 游戏需要让用户点击一对表情符号以进行匹配。
- en: Finally, you’ll make the game more exciting by adding a timer.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，通过添加计时器使游戏变得更加刺激。
- en: Note
  id: totrans-82
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: This project can take anywhere from 15 minutes to an hour, depending on how
    quickly you type. We learn better when we don’t feel rushed, so give yourself
    plenty of time.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目可能需要 15 分钟到一小时不等，具体取决于您的输入速度。我们在不感到匆忙的情况下学得更好，所以请给自己充足的时间。
- en: '![Images](assets/007fig01.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/007fig01.png)'
- en: Note
  id: totrans-85
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Keep an eye out for these “Game design…and beyond” elements scattered throughout
    the book. We’ll use game design principles as a way to learn and explore important
    programming concepts and ideas that apply to any kind of project, not just video
    games.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意在整本书中散布的“游戏设计……及以上”元素。我们将使用游戏设计原则作为学习和探索重要编程概念和想法的方法，这些概念和想法适用于任何类型的项目，而不仅仅是视频游戏。
- en: Create a WPF project in Visual Studio
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中创建一个 WPF 项目
- en: 'Go ahead and **start up a new instance of Visual Studio 2019** and create a
    new project:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 继续**启动 Visual Studio 2019 的新实例**并创建一个新项目：
- en: Note
  id: totrans-89
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: We’re done with the Console App project you created in the first part of this
    chapter, so feel free to close that instance of Visual Studio.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了您在本章开头创建的控制台应用程序项目，因此可以随时关闭该 Visual Studio 实例。
- en: '![Images](assets/008fig01.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/008fig01.png)'
- en: 'We’re going to build our game as a desktop app using WPF, so **select WPF App
    (.NET Core)** and click Next:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建我们的游戏作为一个使用 WPF 的桌面应用程序，因此**选择 WPF 应用程序（.NET Core）**并点击“下一步”：
- en: '![Images](assets/008fig02.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/008fig02.png)'
- en: 'Visual Studio will ask you to configure your project. **Enter MatchGame as
    the project name** (and you can also change the location to create the project
    if you’d like):'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 将要求你配置你的项目。**将项目名称设为 MatchGame**（如果愿意，也可以更改位置以创建项目）：
- en: '![Images](assets/008fig03.png)![Images](assets/008fig03a.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/008fig03.png)![图片](assets/008fig03a.png)'
- en: Click the Create button. Visual Studio will create a new project called MatchGame.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“创建”按钮。Visual Studio 将创建一个名为 MatchGame 的新项目。
- en: Visual Studio created a project folder full of files for you
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Visual Studio 为您创建了一个项目文件夹，其中包含许多文件
- en: As soon as you created the new project, Visual Studio added a new folder called
    MatchGame and filled it with all of the files and folders that your project needs.
    You’ll be making changes to two of these files, *MainWindow.xaml* and *MainWindow.xaml.cs*.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您创建了新项目，Visual Studio 就会添加一个名为 MatchGame 的新文件夹，并填充所有项目所需的文件和文件夹。您将对其中的两个文件
    *MainWindow.xaml* 和 *MainWindow.xaml.cs* 进行更改。
- en: '![Images](assets/008fig04.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/008fig04.png)'
- en: '**If you run into any trouble with this project, go to our GitHub page and
    look for a link to a video walkthrough: [https://github.com/head-first-csharp/fourth-edition](https://github.com/head-first-csharp/fourth-edition).**'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果您在此项目中遇到任何问题，请访问我们的 GitHub 页面并查找指向视频演示的链接：[https://github.com/head-first-csharp/fourth-edition](https://github.com/head-first-csharp/fourth-edition)。**'
- en: Adjust your IDE to match the screenshot below. First, **open *MainWindow.xaml***
    by double-clicking on it in the Solution Explorer window. Then open the *Toolbox*
    and *Error List* windows by **choosing them from the View menu**. You can actually
    figure out the purpose of many of these windows and files based on their names
    and common sense! Take a minute and **fill in each of the blanks**—try to fill
    in a note about what each part of the Visual Studio IDE does. We’ve done one to
    get you started. See if you can take an educated guess at the others.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 调整您的 IDE 以匹配下面的屏幕截图。首先，通过在“解决方案资源管理器”窗口中双击打开 *MainWindow.xaml*，然后从“视图”菜单中选择
    *工具箱* 和 *错误列表* 窗口。您实际上可以根据它们的名称和常识来了解许多这些窗口和文件的用途！花点时间并**填写每个空白处**——试着填写有关 Visual
    Studio IDE 的每个部分的说明。我们已经开始了一个示例来帮助您入手。看看您是否能对其他部分进行合理猜测。
- en: '![Images](assets/009fig01.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/009fig01.png)'
- en: '![Images](assets/pencil.png) **Sharpen your pencil Solution**'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](assets/pencil.png) **磨尖你的铅笔解决方案**'
- en: We’ve filled in the annotations about the different sections of the Visual Studio
    C# IDE. You may have some different things written down, but hopefully you were
    able to figure out the basics of what each window and section of the IDE is used
    for. Don’t worry if you came up with a slightly different answer from us! You’ll
    get LOTS of practice using the IDE.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经填写了关于Visual Studio C# IDE不同部分的注解。你可能写下了一些不同的东西，但希望你能够理解每个窗口和IDE部分的基本用途。如果你的答案与我们略有不同，不要担心！你将有很多机会练习使用IDE。
- en: '*And just a quick reminder: we’ll use the terms “Visual Studio” and “the IDE”*
    ***interchangeably*** *throughout this book—including on this page.*'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '*还有一个快速提醒：我们将在本书中——包括本页——**交替使用**“Visual Studio”和“IDE”这两个术语。*'
- en: '![Images](assets/010fig01.png)![Images](assets/012fig01.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/010fig01.png)![图片](assets/012fig01.png)'
- en: Use XAML to design your window
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用XAML设计你的窗口
- en: Now that Visual Studio has created a WPF project for you, it’s time to start
    working with **XAML**.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Visual Studio已经为你创建了一个WPF项目，是时候开始使用**XAML**了。
- en: XAML, which stands for **Extensible Application Markup Language**, is a really
    flexible markup language that C# developers use to design user interfaces. You’ll
    be building an app with two different kinds of code. First you’ll design the user
    interface (or UI) with XAML. Then you’ll add C# code to make the game run.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: XAML代表**可扩展应用程序标记语言**，这是一种非常灵活的标记语言，C#开发人员用来设计用户界面。你将使用两种不同类型的代码构建应用程序。首先，你将使用XAML设计用户界面（UI）。然后，你将添加C#代码来使游戏运行。
- en: 'If you’ve ever used HTML to design a web page, then you’ll see a lot of similarities
    with XAML. Here’s a really quick example of a small window layout in XAML:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经使用HTML设计网页，那么你会发现XAML有很多相似之处。这里是一个在XAML中布局小窗口的快速示例：
- en: '![Images](assets/012fig02.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/012fig02.png)'
- en: Here’s what that window looks like when WPF **renders** it (or draws it on the
    screen). It draws a window with two visible **controls**, a TextBlock control
    that displays text and a Button control that the user can click on. They’re laid
    out using an invisible StackPanel control, which causes them to be rendered one
    on top of the other. Look at the controls in the screenshot of the window, then
    go back to the XAML and find the `TextBlock` and `Button` tags.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当WPF **渲染**（或在屏幕上绘制）这个窗口时，它看起来像这样。它绘制了一个窗口，有两个可见的**控件**，一个显示文本的TextBlock控件和一个用户可以点击的Button控件。它们使用不可见的StackPanel控件布局，导致它们在彼此之上渲染。看一下窗口截图中的控件，然后回到XAML，找到`TextBlock`和`Button`标签。
- en: '![Images](assets/012fig03.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/012fig03.png)'
- en: Design the window for your game
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计你的游戏窗口
- en: You’re going to need an application with a graphical user interface, objects
    to make the game work, and an executable to run. It sounds like a lot of work,
    but you’ll build all of this over the rest of the chapter, and by the end, you’ll
    have a pretty good handle on how to use Visual Studio to design a great-looking
    WPF app.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要一个具有图形用户界面的应用程序，用来使游戏运行，还需要一个可执行文件来运行。听起来工作量很大，但是在本章的其余部分，你将完成所有这些，并且最终，你将能够熟练使用Visual
    Studio设计出漂亮的WPF应用程序。
- en: 'Here’s the layout of the window for the app we’re going to create:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将要创建的应用程序窗口的布局：
- en: '![Images](assets/013fig01.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/013fig01.png)'
- en: Set the window size and title with XAML properties
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用XAML属性设置窗口大小和标题
- en: Let’s start building the UI for your animal matching game. The first thing you’ll
    do is make the window narrower and change its title. You’ll also get familiar
    with Visual Studio’s XAML designer, a powerful tool for designing great-looking
    user interfaces for your apps.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始为你的动物配对游戏构建用户界面。你要做的第一件事是让窗口变窄并更改其标题。你还将熟悉Visual Studio的XAML设计器，这是一个用于为应用程序设计出漂亮用户界面的强大工具。
- en: '**Select the main window.**'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**选择主窗口。**'
- en: Double-click on *MainWindow.xaml* in the Solution Explorer.
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 双击解决方案资源管理器中的*MainWindow.xaml*。
- en: '![Images](assets/014fig01.png)'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/014fig01.png)'
- en: As soon as you do, Visual Studio will open it up in the XAML designer.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦这样做，Visual Studio将在XAML设计器中打开它。
- en: '![Images](assets/014fig02.png)'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/014fig02.png)'
- en: '**Change the size of the window.**'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**改变窗口的大小。**'
- en: Move your mouse to the XAML editor and click anywhere in the first eight lines
    of the XAML code. As soon as you do, you should see the window’s properties displayed
    in the Properties window.
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将鼠标移到XAML编辑器，并点击XAML代码的前八行中的任意位置。一旦你这样做，你应该看到窗口的属性显示在属性窗口中。
- en: Expand the Layout section and **change the width to 400**. The window in the
    Design pane will immediately get narrower. Look closely at the XAML code­—the
    Width property is now 400.
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 展开布局部分，**将宽度更改为 400**。设计窗格中的窗口会立即变窄。仔细看 XAML 代码 —— 现在宽度属性是 400。
- en: '![Images](assets/015fig01.png)'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/015fig01.png)'
- en: '**Change the window title.**'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**更改窗口标题。**'
- en: 'Find this line in the XAML code at the very end of the `Window` tag:'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `Window` 标签的末尾找到这行 XAML 代码：
- en: '[PRE1]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'and change the title to **Find all of the matching animals** so it looks like
    this:'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 并将标题更改为 **查找所有匹配的动物**，使其看起来像这样：
- en: '[PRE2]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You’ll see the change appear in the Common section in the Properties window—and,
    more importantly, the title bar of the window now shows the new text.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您将在属性窗口的常见部分看到更改 —— 更重要的是，窗口的标题栏现在显示新文本。
- en: '**When you modify properties in your XAML tags, the changes immediately show
    up in the Properties window. When you use the Properties window to modify your
    UI, the IDE updates the XAML.**'
  id: totrans-135
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**当您修改 XAML 标记中的属性时，更改会立即显示在属性窗口中。当您使用属性窗口修改 UI 时，IDE 会更新 XAML。**'
- en: '![Images](assets/015fig02.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/015fig02.png)'
- en: Add rows and columns to the XAML grid
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向 XAML 网格添加行和列
- en: It might look like your main window is empty, but have a closer look at the
    bottom of the XAML. Notice how there’s a line with `<`**Grid**`>` followed by
    one with `</`**Grid**`>`? Your window actually has a **grid**—you just don’t see
    anything because it doesn’t have any rows or columns. Let’s go ahead and add a
    row.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 或许看起来你的主窗口是空的，但是仔细看看 XAML 底部。注意到有一个带有 `<`**Grid**`>` 的行，后面是一个带有 `</`**Grid**`>`
    的行？你的窗口实际上有一个 **grid** —— 只是因为它没有任何行或列而看不见。让我们继续添加一行。
- en: Move your mouse over the left side of the window in the designer. When a plus
    appears over the cursor, click the mouse to add a row.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 将鼠标移动到设计器窗口的左侧。当光标上出现加号时，点击鼠标以添加一行。
- en: Note
  id: totrans-140
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**Your WPF app’s UI is built with controls like buttons, labels, and checkboxes.
    A grid is a special kind of control—called a container—that can contain other
    controls. It uses rows and columns to define a layout.**'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**你的 WPF 应用程序的 UI 是由按钮、标签和复选框等控件构建的。网格是一种特殊的控件 —— 被称为容器 —— 它可以包含其他控件。它使用行和列来定义布局。**'
- en: '![Images](assets/016fig01.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/016fig01.png)'
- en: 'You’ll see a number appear followed by an asterisk, and a horizontal line across
    the window. You just added a row to your grid! Now add the rows and columns:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到一个数字后跟一个星号，并且窗口上出现了一条水平线。您刚刚在网格中添加了一行！现在添加行和列：
- en: Repeat four more times to add a total of five rows.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重复四次以添加总共五行。
- en: Hover over the top of the window and click to add four columns. Your window
    should look like the screenshot below (but your numbers will be different—that’s
    OK).
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将鼠标悬停在窗口顶部并点击以添加四列。您的窗口应该看起来像下面的屏幕截图（但您的数字可能不同 —— 没关系）。
- en: '![Images](assets/016fig03.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/016fig03.png)'
- en: Note
  id: totrans-147
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: These “Watch it!” elements give you a heads-up about important, but often confusing,
    things that may trip you up or slow you down.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这些“**注意事项**”元素提醒您关于重要但通常令人困惑的事项，可能会使您出错或减慢速度。
- en: Make the rows and columns equal size
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使行和列大小相等
- en: 'When our game displays the animals for the player to match, we want them to
    be evenly spaced. Each animal will be contained in a cell in the grid, and the
    grid will automatically adjust to the size of the window, so we need the rows
    and columns to all be the same size. Luckily, XAML makes it really easy for us
    to resize the rows and columns. **Click on the first `RowDefinition` tag in the
    XAML editor** to display its properties in the Properties window:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的游戏显示玩家要匹配的动物时，我们希望它们均匀间隔。每个动物都将包含在网格中的单元格中，而网格将根据窗口的大小自动调整大小，因此我们需要所有行和列的大小相同。幸运的是，XAML
    让我们非常容易调整行和列的大小。**单击 XAML 编辑器中的第一个 `RowDefinition` 标签**，以在属性窗口中显示其属性：
- en: '![Images](assets/017fig01.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/017fig01.png)'
- en: Go to the Properties window and **click the square** to the right of the Height
    propert, then **choose Reset from the menu** that pops up. Hey, wait a minute!
    As soon as you did that, the row disappeared from the designer. Well, actually,
    it didn’t quite disappear—it just became very narrow. Go ahead and **reset the
    Height property** for all of the rows. Then **reset the Width property** for all
    of the columns. Your grid should now have four equally sized columns and five
    equally sized rows.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 转到属性窗口，并**点击右侧的方形**到Height属性，然后从弹出菜单中选择**重置**。等等，等一下！当您这样做时，设计师中的行消失了。好吧，实际上，它并没有完全消失——它只是变得非常窄。继续**为所有行重置Height属性**。然后**为所有列重置Width属性**。您的网格现在应该有四个大小相等的列和五个大小相等的行。
- en: '![Images](assets/017fig02.png)![Images](assets/017fig03.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/017fig02.png)![图片](assets/017fig03.png)'
- en: Add a TextBlock control to your grid
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将一个TextBlock控件添加到您的网格中
- en: WPF apps use **TextBlock controls** to display text, and we’ll use them to display
    the animals to find and match. Let’s add one to the window.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: WPF应用程序使用**TextBlock控件**来显示文本，我们将使用它们来显示要查找和匹配的动物。让我们在窗口中添加一个。
- en: 'Expand the Common WPF Controls section in the Toolbox and **drag a TextBlock
    into the cell in the second column and second row**. The IDE will add a `TextBlock`
    tag between the `Grid` start and end tags:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在工具箱中展开Common WPF Controls部分，**将一个TextBlock拖放到第二列第二行的单元格中**。IDE将在`Grid`开始和结束标签之间添加一个`TextBlock`标记：
- en: '[PRE3]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The XAML for this TextBlock has five properties:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这个TextBlock的XAML具有五个属性：
- en: '`Text` tells the TextBlock what text to display in the window.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Text` 告诉TextBlock在窗口中显示什么文本。'
- en: '`HorizontalAlignment` justifies the text left, right, or center.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HorizontalAlignment` 将文本左对齐、右对齐或居中。'
- en: '`VerticalAlignment` aligns it to the top, middle, or bottom of its box.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VerticalAlignment` 将其对齐到其框的顶部、中部或底部。'
- en: '`Margin` sets its offset from the top, sides, or bottom of its container.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Margin` 设置其与其容器顶部、侧面或底部的偏移量。'
- en: '`TextWrapping` tells it whether or not to add line breaks to wrap the text.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TextWrapping` 告诉它是否添加换行符以包装文本。'
- en: '![Images](assets/018fig01.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/018fig01.png)'
- en: '***Your properties may be in a different order***, and the Margin property
    will have different numbers because they depend on where in the cell you dragged
    it. All of these properties can be modified or reset using the IDE’s Properties
    window.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '***你的属性可能以不同的顺序***排列，并且Margin属性将具有不同的数字，因为它们取决于您在单元格中拖动的位置。所有这些属性都可以使用IDE的属性窗口进行修改或重置。'
- en: We want each animal to be centered. **Click on the label** in the designer,
    then go to the Properties window and click ![Images](assets/018fig03.png) to expand
    the **Layout section**. Click **Center** for both the horizontal and vertical
    alignment properties, and then use the square at the right of the window **to
    reset the Margin property**.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望每个动物都居中。**单击设计师中的标签**，然后转到属性窗口并单击![图片](assets/018fig03.png)来展开**布局部分**。点击水平和垂直对齐属性的**中心**，然后使用窗口右侧的方形**重置Margin属性**。
- en: '![Images](assets/018fig04.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/018fig04.png)'
- en: We also want the animals to be bigger, so **expand the Text section** in the
    Properties window and **change the font size** to **36 px**. Then go to the Common
    section and change the Text property to `?` to make it display a question mark.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还希望动物更大，因此在属性窗口中**展开Text部分**并将字体大小更改为**36 px**。然后转到Common部分，并将Text属性更改为`?`以显示问号。
- en: '![Images](assets/018fig05.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/018fig05.png)'
- en: '**Click on the search box** at the top of the Properties window, then type
    the word `wrap` to find properties that match. Use the square on the right side
    of the window to reset the TextWrapping property.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '**点击属性窗口顶部的搜索框**，然后键入单词`wrap`以查找匹配的属性。使用窗口右侧的方形来重置TextWrapping属性。'
- en: '![Images](assets/018fig06.png)![Images](assets/019fig01.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/018fig06.png)![图片](assets/019fig01.png)'
- en: Note
  id: totrans-172
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You’ll see many exercises like this throughout the book. They give you a chance
    to work on your coding skills. And it’s always OK to peek at the solution!
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在整本书中看到许多这样的练习。它们为您提供了锻炼编码技能的机会。并且查看解决方案总是可以的！
- en: '![Images](assets/021fig01.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/021fig01.png)'
- en: Now you’re ready to start writing code for your game
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现在，您可以开始为您的游戏编写代码了。
- en: You’ve finished designing the main window—or at least enough of it to get the
    next part of your game working. Now it’s time to add C# code to make your game
    work.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经完成了设计主窗口的工作——至少足够使您的游戏的下一部分开始运行。现在是时候添加C#代码使您的游戏运行了。
- en: '![Images](assets/021fig02.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/021fig02.png)'
- en: Generate a method to set up the game
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成一个方法来设置游戏
- en: Now that the user interface is set up, it’s time to start writing code for the
    game. You’re going to do that by **generating a method** (just like the Main method
    you saw earlier), and then adding code to it.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在用户界面已经设置好了，是时候开始为游戏编写代码了。您将通过**生成一个方法**（就像您之前看到的 Main 方法一样），然后向其中添加代码。
- en: '**Open MainWindow.xaml.cs in the editor.**'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在编辑器中打开 MainWindow.xaml.cs。**'
- en: Click the triangle ![Images](assets/022fig02.png) next to *MainWindow.xaml*
    in the Solution Explorer and **double-click on *MainWindow.xaml.cs*** to open
    it in the IDE’s code editor. You’ll notice that there’s already code in that file.
    Visual Studio will help you add a method to it.
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在解决方案资源管理器中单击 *MainWindow.xaml* 旁边的三角形 ![图片](assets/022fig02.png) ，然后双击 *MainWindow.xaml.cs*
    以在IDE的代码编辑器中打开它。您会注意到该文件中已经有了一些代码。Visual Studio将帮助您向其中添加一个方法。
- en: '![Images](assets/022fig01.png)'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/022fig01.png)'
- en: '**Generate a method called SetUpGame.**'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**生成一个名为 SetUpGame 的方法。**'
- en: 'Find this part of the code that you opened:'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 找到您打开的代码的这一部分：
- en: Note
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: It’s OK if you’re not 100% clear on what a method is yet.
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您还不完全明白方法是什么，没关系。
- en: Note
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '![Images](assets/022fig03.png)![Images](assets/023fig01.png)'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/022fig03.png)![图片](assets/023fig01.png)'
- en: Any time you see the light bulb icon, it’s telling you that you’ve selected
    code that has a quick action available, which means there’s a task that Visual
    Studio can automate for you. You can either click the light bulb or press Alt+Enter
    or Ctrl+. (period) to see the available quick actions.
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每当您看到灯泡图标时，它都在告诉您选择的代码有一个快速操作可用，这意味着Visual Studio可以为您自动化任务。您可以单击灯泡图标，或按Alt+Enter或Ctrl+.（句号）来查看可用的快速操作。
- en: '**Try running your code.**'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**尝试运行您的代码。**'
- en: Click the button at the top of the IDE to start your program, just like you
    did with your console app earlier.
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击IDE顶部的按钮启动程序，就像您之前在控制台应用程序中做的那样。
- en: '![Images](assets/023fig02.png)'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/023fig02.png)'
- en: 'Uh-oh—something went wrong. Instead of showing you a window, it **threw an
    exception**:'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 哎呀，出了些问题。它没有显示窗口，而是**抛出了一个异常**：
- en: '![Images](assets/023fig03.png)'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/023fig03.png)'
- en: 'Things may seem like they’re broken, but this is actually exactly what we expected
    to happen! The IDE paused your program, and highlighted the most recent line of
    code that ran. Take a closer look at it:'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 看起来似乎有些东西出了问题，但这实际上正是我们预期会发生的！IDE暂停了您的程序，并突出显示了最近运行的代码行。仔细看看它：
- en: '[PRE4]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The method that the IDE generated literally told C# to throw an exception.
    Take a closer look at the message that came with the exception:'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: IDE生成的方法确实告诉C#抛出了一个异常。仔细看看异常消息：
- en: '[PRE5]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: That actually makes sense, because **it’s up to you to implement the method**
    that the IDE generated. If you forget to implement it, the exception is a nice
    reminder that you still have work to do. If you generate a lot of methods, it’s
    great to have that as a reminder!
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实际上这是有道理的，因为**你需要实现这个方法**，这是IDE生成的。如果你忘记实现它，异常会提醒你还有工作要做。如果你生成了很多方法，这种提醒就非常有用！
- en: Click the square Stop Debugging button ![Images](assets/023fig04.png) in the
    toolbar (or choose Stop Debugging (F5) from the Debug menu) to stop your program
    so you can finish implementing the SetUpGame method.
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在工具栏中点击方形的停止调试按钮 ![图片](assets/023fig04.png) （或者从调试菜单中选择停止调试（F5））以停止程序，这样您就可以完成实现
    SetUpGame 方法的工作。
- en: Note
  id: totrans-201
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: When you’re using the IDE to run your app, the Stop Debugging button immediately
    quits it.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用IDE运行应用程序时，停止调试按钮会立即退出它。
- en: Finish your SetUpGame method
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成您的 SetUpGame 方法
- en: You put your SetUpGame method inside the `public MainWindow()` method because
    everything inside that method is called as soon as your app starts.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 您将 SetUpGame 方法放在 `public MainWindow()` 方法中，因为该方法中的所有内容将在应用程序启动时立即调用。
- en: Note
  id: totrans-205
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: This is a special method called a constructor, and you’ll learn more about how
    it works in [#encapsulation_keep_your_privateshellippr](ch05.html#encapsulation_keep_your_privateshellippr).
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个特殊的方法，称为构造函数，您将在 [#encapsulation_keep_your_privateshellippr](ch05.html#encapsulation_keep_your_privateshellippr)
    中学习更多关于它的工作原理。
- en: '**Start adding code to your SetUpGame method.**'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**开始向 SetUpGame 方法添加代码。**'
- en: 'Your SetUpGame method will take eight pairs of animal emoji characters and
    randomly assign them to the TextBlock controls so the player can match them. So
    the first thing your method needs is a list of those emoji, and the IDE will help
    you write code for it. Select the `throw` statement that the IDE added, and delete
    it. Then put your cursor where that statement was and type `List`. The IDE will
    pop up an **IntelliSense window** with a bunch of keywords that start with “List”
    :'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您的 SetUpGame 方法将获取八对动物表情字符，并将它们随机分配给 TextBlock 控件，以便玩家进行匹配。因此，您的方法首先需要这些表情符号的列表，IDE
    将帮助您编写相关代码。选择 IDE 添加的 `throw` 语句，并将其删除。然后将光标放在该语句的位置，输入 `List`。IDE 将弹出一个以“List”开头的一堆关键字的
    IntelliSense 窗口：
- en: '![Images](assets/024fig01.png)'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/024fig01.png)'
- en: 'Choose `List` from the IntelliSense pop-up. Then type `<str`—another IntelliSense
    window will pop up with matching keywords:'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 IntelliSense 弹出窗口中选择 `List`。然后输入 `<str` —— 将会弹出另一个匹配关键字的 IntelliSense 窗口：
- en: '![Images](assets/024fig02.png)'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/024fig02.png)'
- en: 'Choose `string`. Finish typing this line of code, but **don’t hit Enter yet**:'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 选择 `string`。完成代码行的输入，但**暂时不要按 Enter 键**：
- en: '![Images](assets/024fig03.png)'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/024fig03.png)'
- en: '**Add values to your List.**'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**向您的列表添加值。**'
- en: 'Your C# statement isn’t done yet. Make sure your cursor is placed just after
    the `)` at the end of the line, then type an opening curly bracket `{`—the IDE
    will add the closing one for you, and your cursor will be positioned between the
    two brackets. **Press Enter**—the IDE will add line breaks for you automatically:'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您的 C# 语句还没有完成。确保光标放在行末的 `)` 后面，然后键入开括号 `{` —— IDE 将为您添加闭括号，并将光标放在两个括号之间。**按
    Enter 键** —— IDE 将自动为您添加换行：
- en: '![Images](assets/025fig01.png)'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/025fig01.png)'
- en: '**Finish your method.**'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**完成您的方法。**'
- en: 'Now **add the rest of the code** for the method—be *careful* with the periods,
    parentheses, and brackets:'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在**添加方法的其余部分** —— 要*小心*处理句点、括号和大括号：
- en: '![Images](assets/025fig02.png)'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/025fig02.png)'
- en: 'The red squiggly line under `mainGrid` is the IDE telling you there’s an error:
    your program won’t build because there’s nothing with that name anywhere in the
    code. **Go back to the XAML editor** and click on the `<Grid>` tag, then go to
    the Properties window and enter `mainGrid` in the Name box.'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 红色波浪线下的 `mainGrid` 表示 IDE 指出存在错误：因为在代码中找不到这个名称的任何东西，您的程序将无法构建。**返回 XAML 编辑器**，点击
    `<Grid>` 标签，然后转到属性窗口，在名称框中输入 `mainGrid`。
- en: Check the XAML—you’ll see `<Grid x:Name="mainGrid">` at the top of the grid.
    Now there shouldn’t be any errors in your code. If there are, ***carefully check
    every line***—it’s easy to miss something.
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 检查 XAML —— 您将在网格顶部看到 `<Grid x:Name="mainGrid">`。现在您的代码中不应该有任何错误。如果有错误，***请仔细检查每一行***
    —— 很容易漏掉一些细节。
- en: Note
  id: totrans-222
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: If you get an exception when you run your game, make sure you have exactly 8
    pairs of emoji in your animalEmoji list and 16 <TextBlock ... /> tags in your
    XAML.
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在运行游戏时出现异常，请确保 animalEmoji 列表中确实有 8 对表情符号，并且在您的 XAML 中有 16 个 `<TextBlock ...
    />` 标签。
- en: Run your program
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行您的程序
- en: 'Click the ![Images](assets/026fig01.png) button in the IDE’s toolbar to start
    your program running. A window will pop up with your eight pairs of animals in
    random positions:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 IDE 工具栏中的 ![图片](assets/026fig01.png) 按钮以启动程序。一个窗口将弹出，显示您的八对动物在随机位置上的状态：
- en: '![Images](assets/026fig02.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/026fig02.png)'
- en: 'The IDE goes into debugging mode while your program is running: the Start button
    is replaced by a grayed-out Continue, and **debug controls** ![Images](assets/026fig04.png)
    appear in the toolbar with buttons to pause, stop, and restart your program.'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的程序正在运行时，IDE 进入调试模式：开始按钮被灰色的“继续”按钮取代，工具栏中出现**调试控制** ![图片](assets/026fig04.png)，其中包括暂停、停止和重新启动程序的按钮。
- en: Stop your program by clicking `X` in the upper-right corner of the window or
    the square Stop button in the debug controls. Run it a few times—the animals will
    get shuffled each time.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击窗口右上角的 `X` 按钮或调试控件中的方形停止按钮来停止程序运行。多次运行程序 —— 动物将每次都被重新排列。
- en: '![Images](assets/026fig03.png)![Images](assets/026fig05.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/026fig03.png)![图片](assets/026fig05.png)'
- en: Note
  id: totrans-230
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**You’ve set the stage for the next part that you’ll add.**'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '**您已为下一步骤做好了准备。**'
- en: When you build a new game, you’re not just writing code. You’re also running
    a project. A really effective way to run a project is to build it in small increments,
    taking stock along the way to make sure things are going in a good direction.
    That way you have plenty of opportunities to change course.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 当你构建一个新的游戏时，你不仅仅是在写代码。你也在运行一个项目。一个非常有效的运行项目的方式是逐步构建它，沿途检查确保事情朝着正确的方向发展。这样你就有很多机会改变方向。
- en: Note
  id: totrans-233
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Here’s another pencil-and-paper exercise. It’s absolutely worth your time to
    do all of them because they’ll help get important C# concepts into your brain
    faster.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有另一个纸笔练习。做完它们绝对是值得的，因为它们会帮助你更快地掌握重要的 C# 概念。
- en: '![Images](assets/029fig01.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/029fig01.png)'
- en: Note
  id: totrans-236
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**Working on your code comprehension skills will make you a better developer.**'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '**提高你的代码理解能力将使你成为一名更好的开发者。**'
- en: 'The pencil-and-paper exercises are **not optional**. They give your brain a
    different way to absorb the information. But they do something even more important:
    they give you opportunities to ***make mistakes***. Making mistakes is a part
    of learning, and we’ve all made plenty of mistkaes (you may even find one or two
    typos in this book!). Nobody writes perfect code the first time—really good programmers
    always assume that the code that they write today will probably need to change
    tomorrow. In fact, later in the book you’ll learn about *refactoring*, or programming
    techniques that are all about improving your code after you’ve written it.'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 纸笔练习是**不可选的**。它们让你的大脑以不同的方式吸收信息。但它们做的更重要的事情是给了你***犯错误的机会***。犯错误是学习的一部分，我们都犯了很多错误（甚至你可能在这本书中找到一两个错别字！）。没有人一开始就写出完美的代码——真正优秀的程序员总是假设他们今天写的代码明天可能需要改变。事实上，在本书的后面你会学到关于*重构*的内容，即在编写代码之后改进它的编程技术。
- en: Note
  id: totrans-239
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: We’ll add bullet points like this to give a quick summary of many of the ideas
    and tools that you’ve seen so far.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加类似这样的项目总结，快速概述你迄今为止见过的许多想法和工具。
- en: Add your new project to source control
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将你的新项目添加到源代码控制
- en: 'You’re going to be building a lot of different projects in this book. Wouldn’t
    it be great if there was an easy way to back them up and access them from anywhere?
    What if you make a mistake—wouldn’t it be super convenient if you could roll back
    to a previous version of your code? Well, you’re in luck! That’s exactly what
    **source control** does: it gives you an easy way to back up all of your code,
    and keeps track of every change that you make. Visual Studio makes it easy for
    you to add your projects to source control.'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，你将会构建很多不同的项目。如果有一种简单的方式来备份它们并在任何地方访问它们，那将会多么棒！如果你犯了一个错误——如果你能够轻松地回滚到代码的早期版本，那不是非常方便吗？那么，你真是幸运！这正是
    **源代码控制** 所做的事情：它为你提供了一种简单的方式来备份你所有的代码，并跟踪你所做的每一个更改。Visual Studio 让你可以轻松地将你的项目添加到源代码控制中。
- en: '**Git** is a popular version control system, and Visual Studio will publish
    your source to any Git **repository** (or **repo**). We think **GitHub** is one
    of the easiest Git providers to use. You’ll need a GitHub account to push code
    to it, so if you don’t already have one, go to [https://github.com](https://github.com)
    and create it now.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '**Git** 是一种流行的版本控制系统，Visual Studio 将会把你的源代码发布到任何一个 Git **仓库**（或 **repo**）。我们认为
    **GitHub** 是使用最简单的 Git 提供商之一。你需要一个 GitHub 账号来向其推送代码，所以如果你还没有账号，请立即访问 [https://github.com](https://github.com)
    创建一个。'
- en: 'Find **Add to Source Control** in the status bar at the bottom of the IDE:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在 IDE 底部的状态栏中找到 **添加到源代码控制**：
- en: '![Images](assets/030fig01a.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/030fig01a.png)'
- en: 'Click on it—Visual Studio will prompt you to add your code to Git:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 点击它——Visual Studio 将提示你将代码添加到 Git 中：
- en: '![Images](assets/030fig01.png)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/030fig01.png)'
- en: '**Click Git.** Visual Studio may prompt you for your name and email address.
    Then it should show you this in the status bar:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '**点击 Git。** Visual Studio 可能会提示你输入你的姓名和电子邮件地址。然后它应该在状态栏中显示如下内容：'
- en: '![Images](assets/030fig02.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/030fig02.png)'
- en: 'Your code is now under source control. Now hover your mouse over ![Images](assets/030fig03.png):'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码已经在源代码控制下。现在将鼠标悬停在 ![图片](assets/030fig03.png) 上：
- en: '![Images](assets/030fig04.png)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/030fig04.png)'
- en: The IDE is telling you that you have two **commits**—or saved versions of your
    code—that haven’t been ***pushed*** to a location that’s outside of your computer.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: IDE 告诉你有两个 **提交** —— 或者说是你的代码的保存版本 —— 没有被推送到电脑外的位置。
- en: When you added your project to source control, the IDE opened the **Team Explorer
    window** in the same panel as the Solution Explorer. (If you don’t see it, select
    it from the View menu.) The Team Explorer helps you manage your source control.
    You’ll use it to publish your project to a **remote repo**.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将项目添加到源代码控制时，IDE 会在与 Solution Explorer 相同的面板中打开 **Team Explorer 窗口**。（如果看不到，请从“视图”菜单中选择。）Team
    Explorer 帮助你管理源代码控制。你将使用它来发布你的项目到 **远程存储库**。
- en: When you have local changes you’ll use the Team Explorer to push them to the
    remote repo. To do this, **click the Publish to GitHub** button in the Team Explorer
    window.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 当你有本地更改时，你将使用 Team Explorer 将它们推送到远程存储库。为此，请在 Team Explorer 窗口中点击 **发布到 GitHub**
    按钮。
- en: '![Images](assets/030fig05.png)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/030fig05.png)'
- en: Note
  id: totrans-256
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**Git is an open source version control system. There are multiple third-party
    services like GitHub that provide Git services (like storage space for your code
    and web access to your repositories). You can go to [https://git-scm.com](https://git-scm.com)
    to learn more about Git.**'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '**Git 是一个开源的版本控制系统。像 GitHub 这样的多个第三方服务提供了 Git 服务（例如为代码提供存储空间和访问权限）。你可以访问 [https://git-scm.com](https://git-scm.com)
    了解更多关于 Git 的信息。**'
- en: '![Images](assets/031fig01.png)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/031fig01.png)'
- en: Note
  id: totrans-259
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**Go to** [https://github.com/head-first-csharp/fourth-edition](https://github.com/head-first-csharp/fourth-edition)
    **to view and download the complete code for this project and all of the other
    projects in this book.**'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '**前往** [https://github.com/head-first-csharp/fourth-edition](https://github.com/head-first-csharp/fourth-edition)
    **查看和下载本项目以及本书中所有其他项目的完整代码。**'
- en: '![Images](assets/033fig01.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/033fig01.png)'
- en: The next step to build the game is handling mouse clicks
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下一个构建游戏的步骤是处理鼠标点击
- en: Now that the game is displaying the animals for the player to click on, we need
    to add code that makes the gameplay work. The player will click on animals in
    pairs. The first animal the player clicks on disappears. If the second animal
    the player clicks on matches the first, that one disappears too. If it doesn’t,
    the first animal reappears. We’ll make all of this work by adding an **event handler**,
    which is just a name for a method that gets called when certain actions (like
    mouse clicks, double-clicks, windows getting resized, etc.) happen in the app.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 现在游戏显示了供玩家点击的动物，我们需要添加使游戏运行的代码。玩家将按对点击动物。玩家首先点击的动物消失。如果玩家点击的第二个动物与第一个匹配，则第二个动物也消失。如果不匹配，则第一个动物重新出现。我们将通过添加一个
    **事件处理程序** 来实现所有这些功能，这只是当应用程序中发生某些操作（如鼠标点击、双击、窗口调整大小等）时调用的方法的名称。
- en: '![Images](assets/033fig02.png)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/033fig02.png)'
- en: Make your TextBlocks respond to mouse clicks
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使你的 TextBlocks 响应鼠标点击
- en: Your SetUpGame method changes the TextBlocks to show animal emoji, so you’ve
    seen how your code can modify controls in your application. Now you need to write
    code that goes in the other direction—your controls need to call your code, and
    the IDE can help.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 SetUpGame 方法会更改 TextBlocks 以显示动物表情符号，这样你就看到了你的代码如何修改应用程序中的控件。现在你需要编写反向操作的代码，即你的控件需要调用你的代码，而
    IDE 可以帮助你。
- en: Go back to the XAML editor window and **click the first** `**TextBlock**` **tag**—this
    will cause the IDE to select it in the designer so you can edit its properties.
    Then go to the Properties window and click the Event Handlers button (![Images](assets/034fig01.png)).
    An **event handler** is a method that your application calls when a specific event
    happens. These events include keypresses, drag and drop, window resizing, and
    of course, mouse movement and clicks. Scroll down the Properties window and look
    through the names of the different events your TextBlock can add event handlers
    for. **Double-click inside the box to the right of the event called MouseDown.**
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到 XAML 编辑器窗口，**点击第一个** `**TextBlock**` **标签** —— 这将导致 IDE 在设计器中选择它，以便你可以编辑其属性。然后转到属性窗口并点击事件处理程序按钮
    (![图片](assets/034fig01.png))。**事件处理程序** 是当应用程序发生特定事件时调用的方法。这些事件包括按键、拖放、窗口调整大小，当然还有鼠标移动和点击。滚动属性窗口并查看
    TextBlock 可为其添加事件处理程序的不同事件名称。**在名为 MouseDown 的事件右侧的框内双击。**
- en: '![Images](assets/034fig02.png)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/034fig02.png)'
- en: 'The IDE filled in the MouseDown box with a method name, TextBlock_MouseDown,
    and the XAML for the TextBlock now has a MouseDown property:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: IDE 在 MouseDown 框中填写了一个方法名 TextBlock_MouseDown，并且 TextBlock 的 XAML 现在有了 MouseDown
    属性：
- en: '[PRE6]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You might not have noticed that, because the IDE also **added a new method**
    to the code-behind—the code that’s joined with the XAML—and immediately switched
    to the C# editor to display it. You can always jump right back to it from the
    XAML editor by right-clicking on TextBlock_MouseDown in the XAML editor and choosing
    View Code. Here’s the method it added:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能没有注意到，因为 IDE 还向代码后台添加了一个新方法——即与 XAML 代码结合的代码——并立即切换到 C# 编辑器显示它。你可以通过在 XAML
    编辑器中右键点击 TextBlock_MouseDown 并选择“查看代码”来随时跳转回去。这是它添加的方法：
- en: '![Images](assets/034fig04.png)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/034fig04.png)'
- en: Whenever the player clicks on the TextBlock, the app will automatically call
    the TextBlock_MouseDown method. So now we just need to add code to it. Then we’ll
    need to hook up all of the other TextBlocks so they call it, too.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 每当玩家点击 TextBlock 时，应用程序将自动调用 TextBlock_MouseDown 方法。现在我们只需要为其添加代码。然后我们需要连接所有其他
    TextBlock，以便它们也调用它。
- en: Note
  id: totrans-274
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**An event handler is a method that your app calls in response to an event
    like a mouse click, keypress, or window resize.**'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '**事件处理程序是应用程序响应鼠标点击、键盘按键或窗口调整等事件时调用的方法。**'
- en: Add the TextBlock_MouseDown code
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加 TextBlock_MouseDown 代码
- en: 'Now that you’ve read through the code for TextBlock_MouseDown, it’s time to
    add it to your program. Here’s what you’ll do next:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经阅读了 TextBlock_MouseDown 的代码，是时候将其添加到你的程序中了。接下来要做的是：
- en: Add the first two lines with `lastTextBlockClicked` and `findingMatch` **above
    the first line** of the TextBlock_MouseDown method that the IDE added for you.
    Make sure you put them between the closing curly bracket at the end of SetUpGame
    and the new code the IDE just added.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 IDE 为你添加的 TextBlock_MouseDown 方法的第一行之前，添加前两行代码，分别是 `lastTextBlockClicked`
    和 `findingMatch`，确保将它们放在 SetUpGame 结束的右花括号和 IDE 刚刚添加的新代码之间。
- en: '**Fill in the code** for TextBlock_MouseDown. Be really careful about equals
    signs—there’s a big difference between = and == (which you’ll learn about in the
    next chapter).'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**填写** TextBlock_MouseDown 的代码。在等号（=）和双等号（==）之间要特别小心——这是你将在下一章中学到的一个重要区别。'
- en: 'Here’s what it looks like in the IDE:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在 IDE 中看起来是这样的：
- en: '![Images](assets/037fig01.png)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/037fig01.png)'
- en: Make the rest of the TextBlocks call the same MouseDown event handler
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让其余的 TextBlock 调用同一个 MouseDown 事件处理程序
- en: Right now only the first TextBlock has an event handler hooked up to its MouseDown
    event. Let’s hook up the other 15 TextBlocks to it, too. You *could* do it by
    selecting each one in the designer and entering TextBlock_MouseDown into the box
    next to MouseDown. We already know that just adds a property to the XAML code,
    so let’s take a shortcut.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 目前只有第一个 TextBlock 的 MouseDown 事件与事件处理程序关联。让我们也将其他 15 个 TextBlock 与它关联起来。你*可以*通过在设计器中选择每个文本块并在
    MouseDown 旁边输入 TextBlock_MouseDown 来完成。我们已经知道这只是向 XAML 代码添加一个属性，所以让我们采取一种捷径。
- en: '**Select the last 15 TextBlocks in the XAML editor.**'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**选择 XAML 编辑器中的最后 15 个 TextBlock。**'
- en: Go to the XAML editor, click to the left of the second `TextBlock` tag, and
    drag down to the end of the TextBlocks, just above the closing `</``**Grid**``>`
    tag. You should now have the last 15 TextBlocks selected (but not the first one).
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 转到 XAML 编辑器，在第二个 `TextBlock` 标签的左侧点击，然后向下拖动到 TextBlocks 的末尾，位于闭合 `</``**Grid**``>`
    标签的上方。现在应该已选择了最后 15 个 TextBlock（但不包括第一个）。
- en: '**Use Quick Replace to add MouseDown event handlers.**'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用快速替换添加 MouseDown 事件处理程序。**'
- en: Choose **Find and Replace >> Quick Replace** from the Edit menu. Search for
    `/>` and replace it with `MouseDown="``*TextBlock_MouseDown*``"/>`—make sure that
    there’s a space before `MouseDown` and that the search range is *Selection* so
    it only adds the property to the selected TextBlocks.
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从编辑菜单选择“**查找和替换 >> 快速替换**”。搜索 `/>` 并替换为 `MouseDown="``*TextBlock_MouseDown*``"/>`——确保在
    `MouseDown` 前有一个空格，并且搜索范围是 *选择*，这样只会向选定的 TextBlock 添加属性。
- en: '![Images](assets/038fig01.png)'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/038fig01.png)'
- en: '**Run the replace over all 15 selected TextBlocks.**'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**对所有选定的 15 个 TextBlock 运行替换。**'
- en: Click the Replace All button (![Images](assets/038fig02.png)) to add the MouseDown
    property to the TextBlocks—it should tell you that 15 occurrences were replaced.
    Carefully examine the XAML code to make sure they each have a MouseDown property
    that exactly matches the one in the first TextBlock.
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击“**全部替换**”按钮（![图片](assets/038fig02.png)）以向 TextBlocks 添加 MouseDown 属性——它应告诉你已替换了
    15 处。仔细检查 XAML 代码，确保它们每个都有一个与第一个 TextBlock 中完全匹配的 MouseDown 属性。
- en: Make sure that the method now shows **16 references** in the C# editor (choose
    Build Solution from the Build menu to update it). If you see 17 references, you
    accidentally attached the event handler to the Grid. You definitely don’t want
    that—if you do, you’ll get an exception when you click an animal.
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保方法在 C# 编辑器中现在显示 **16 个引用**（选择“从构建菜单中构建解决方案”以更新它）。如果看到 17 个引用，则意外地将事件处理程序附加到了
    Grid 上。绝对不要这样做——如果这样做，当您单击动物时会出现异常。
- en: Run your program. Now you can click on pairs of animals to make them disappear.
    The first animal you click will disappear. If you click on its match, that one
    disappears, too. If you click on an animal that doesn’t match, the first one will
    appear again. When all the animals are gone, restart or close the program.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 运行您的程序。现在，您可以点击动物对使它们消失。您点击的第一个动物将消失。如果您点击其匹配项，该项也将消失。如果点击一个不匹配的动物，则第一个动物将再次出现。当所有动物都消失时，请重新启动或关闭程序。
- en: Note
  id: totrans-293
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: When you see a Brain Power element, take a minute and really think about the
    question that it’s asking.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 当您看到脑力元素时，请花一分钟真正思考它所问的问题。
- en: '![Images](assets/039fig01.png)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/039fig01.png)'
- en: Finish the game by adding a timer
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过添加一个计时器来完成游戏
- en: Our animal match game will be more exciting if players can try to beat their
    best time. We’ll add a **timer** that “ticks” after a fixed interval by repeatedly
    calling a method.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 如果玩家可以尝试打败他们的最佳时间，我们的动物匹配游戏将更加令人兴奋。我们将添加一个 **计时器**，它通过反复调用方法在固定时间间隔后“tick”。
- en: '![Images](assets/039fig02.png)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/039fig02.png)'
- en: '![Images](assets/039fig03.png)'
  id: totrans-299
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![图片](assets/039fig03.png)'
- en: ''
  id: totrans-300
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Timers “tick” every time interval by calling methods over and over again.
    You’ll use a timer that starts when the player starts the game and ends when the
    last animal is matched.**'
  id: totrans-301
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**计时器“tick”每次间隔调用方法。您将使用一个计时器，该计时器在玩家开始游戏时开始，并在匹配到最后一个动物时结束。**'
- en: Add a timer to your game’s code
  id: totrans-302
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向您的游戏代码中添加一个计时器
- en: 'Start by finding the `namespace` keyword near the top of *MainWindow.xaml.cs*
    and add the line `using System.Windows.Threading;` directly underneath it:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 *MainWindow.xaml.cs* 文件的顶部附近找到 `namespace` 关键字，并在其下直接添加以下代码行：`using System.Windows.Threading;`
- en: '[PRE7]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-305
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**Add this!**'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**添加这个！**'
- en: 'Find `*public partial class MainWindow*` and **add this code** just after the
    opening curly bracket `**{**`:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到 `*public partial class MainWindow*` 并在左花括号 `**{**` 后立即添加以下代码：
- en: '[PRE8]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-309
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You’ll add these three lines of code to create a new timer and add two fields
    to keep track of the time elapsed and number of matches the player has found.
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您将添加这三行代码来创建一个新的计时器，并添加两个字段来跟踪经过的时间和玩家找到的匹配数。
- en: 'We need to tell our timer how frequently to “tick” and what method to call.
    Click at the beginning of the line where you call the SetUpGame method to move
    the editor’s cursor there. Press Enter, then type the two lines of code in the
    screenshot below that start with `**timer.**`—as soon as you type `+=` the IDE
    will display a message:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要告诉我们的计时器多频繁“tick”，以及调用什么方法。在调用 SetUpGame 方法的行的开头点击，将编辑器的光标移动到那里。按 Enter
    键，然后在下面屏幕截图中以 `**timer.**` 开头的两行代码：
- en: '![Images](assets/040fig03.png)'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/040fig03.png)'
- en: 'Press the Tab key. The IDE will finish the line of code and add a Timer_Tick
    method:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 Tab 键。IDE 将完成代码行并添加 Timer_Tick 方法：
- en: '![Images](assets/040fig04.png)'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/040fig04.png)'
- en: 'The Timer_Tick method will update a TextBlock that spans the entire bottom
    row of the grid. Here’s how to set it up:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Timer_Tick 方法将更新一个跨越整个网格底部行的 TextBlock。以下是设置方法：
- en: Drag a **TextBlock** into the lower-left square.
  id: totrans-316
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将一个 **TextBlock** 拖放到左下方的正方形中。
- en: Use the **Name box** at the top of the Properties window to give it the name
    `**timeTextBlock.**`
  id: totrans-317
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Properties 窗口顶部的 **Name box** 为其命名为 `**timeTextBlock.**`
- en: Reset its **margins**, **center** it in the cell, and set the **FontSize** property
    to 36px and **Text** property to “Elapsed time” (just like you did with other
    controls).
  id: totrans-318
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重设其 **margins**，将其 **居中** 在单元格中，并将 **FontSize** 属性设置为 36px，**Text** 属性设置为“已经过时间”（就像您对其他控件所做的一样）。
- en: Find the **ColumnSpan** property and set it to 4.
  id: totrans-319
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 找到 **ColumnSpan** 属性并将其设置为 4。
- en: Add a **MouseDown event handler** called TimeTextBlock_MouseDown.
  id: totrans-320
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加名为 TimeTextBlock_MouseDown 的 **MouseDown 事件处理程序**。
- en: '![Images](assets/041fig01.png)'
  id: totrans-321
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/041fig01.png)'
- en: 'Here’s what the XAML will look like—carefully compare it with your code in
    the IDE:'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面是 XAML 的外观，请仔细比较它与 IDE 中的代码：
- en: '[PRE9]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When you added the MouseDown event handler, Visual Studio created a method
    in the code-behind called TimeTextBlock_MouseDown, just like with the other TextBlocks.
    Add this code to it:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你添加了 `MouseDown` 事件处理程序时，Visual Studio 在代码后台创建了一个名为 `TimeTextBlock_MouseDown`
    的方法，就像其他的 `TextBlock` 一样。将以下代码添加到其中：
- en: '[PRE10]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-326
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: This resets the game if all 8 matched pairs have been found (otherwise it does
    nothing because the game is still running).
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果已经找到了所有 8 对匹配项，这将重置游戏（否则不执行任何操作，因为游戏仍在运行）。
- en: 'Now you have everything you need to finish the Timer_Tick method, which updates
    the new TextBlock with the elapsed time and stops the timer once the player has
    found all of the matches:'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你已经拥有完成 `Timer_Tick` 方法所需的一切内容，该方法会更新新的 `TextBlock`，显示经过的时间，并在玩家找到所有匹配项后停止计时器：
- en: '[PRE11]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '***But something’s not quite right here.*** Run your code... oops! You get
    an **exception**.'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '***但这里有些不对劲。*** 运行你的代码……哎呀！你得到了一个**异常**。'
- en: We’re about to fix this problem, but first look closely at the error message
    and highlighted line in the IDE.
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们即将修复这个问题，但首先要仔细查看 IDE 中的错误消息和突出显示的行。
- en: '***Can you guess what caused the error?***'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '***你能猜到是什么导致了这个错误吗？***'
- en: '![Images](assets/041fig04.png)'
  id: totrans-333
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/041fig04.png)'
- en: Use the debugger to troubleshoot the exception
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用调试器来解决异常。
- en: 'You might have heard the word “bug” before. You might have even said something
    like this to your friends at some point in the past: “That game is really buggy,
    it has so many glitches.” Every bug has an explanation—everything in your program
    happens for a reason—but not every bug is easy to track down.'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能之前听过“bug”这个词。你可能曾经在过去对你的朋友说过这样的话：“那个游戏真的很有 bug，有很多故障。”每个 bug 都有一个解释——你程序中的每件事都有原因——但并不是每个
    bug 都容易追踪。
- en: '***Understanding a bug is the first step in fixing it.*** Luckily, the Visual
    Studio debugger is a great tool for that. (That’s why it’s called a debugger:
    it’s a tool that helps you get rid of bugs!)'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '***理解 bug 是修复 bug 的第一步。*** 幸运的是，Visual Studio 调试器是一个很好的工具。（这就是为什么它被称为调试器：它是帮助你摆脱
    bug 的工具！）'
- en: '**Restart your game a few times.**'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**重新启动你的游戏几次。**'
- en: 'The first thing to notice is that your program always throws the same type
    of exception with the same message:'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 首先要注意的是，你的程序总是抛出相同类型和相同消息的异常：
- en: '![Images](assets/042fig01.png)'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/042fig01.png)'
- en: 'If you move the exception window out of the way, you’ll see that it always
    stops on the same line:'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果将异常窗口移开，你会发现它总是停在同一行上：
- en: '![Images](assets/042fig02.png)'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/042fig02.png)'
- en: 'This exception is **reproducible**: you can reliably get your program to throw
    the exact same exception, and you have a really good idea of where the problem
    is.'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个异常是**可复现的**：你可以可靠地使程序抛出完全相同的异常，并且你已经非常清楚问题所在。
- en: '**Add a breakpoint to the line that’s throwing the exception.**'
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在抛出异常的那一行添加断点。**'
- en: 'Run your program again so it halts on the exception. Before you stop it, choose
    **Toggle Breakpoint (F9)** from the Debug menu. As soon as you do, the line will
    be highlighted in red, and a red dot will appear in the left margin next to the
    line. Now **stop your app again**—the highlight and dot will still be there:'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 再次运行你的程序，使其在异常处中断。在停止它之前，从调试菜单中选择**切换断点（F9）**。一旦你这样做，该行将被标记为红色，并且左边的边距旁边将出现一个红点。现在**再次停止你的应用程序**
    —— 突出显示和点仍将存在：
- en: '![Images](assets/043fig02.png)'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/043fig02.png)'
- en: '***You’ve just placed a breakpoint on the line.*** Your program will now break
    every time it executes that line of code. Try that out now. Run your app again.
    The program will halt on that line, but this time *it won’t throw the exception*.
    Press Continue. It halts on the line again. Press Continue again. It halts again.
    Keep going until you see the exception. Now stop your app.'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '***你刚刚在该行上设置了断点。*** 现在每次执行该行代码时，你的程序都会中断。现在试一下。再次运行你的应用程序。程序将在该行处中断，但这次*不会抛出异常*。按继续。它再次在该行上中断。再次按继续。它又中断了。继续进行，直到看到异常。现在停止你的应用程序。'
- en: '**Gather evidence so you can figure out what’s causing the problem.**'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**收集证据，以便找出问题的原因。**'
- en: 'Did you notice anything interesting in the Locals window when you ran your
    app? Restart it and keep a really close eye on the `animalEmoji` variable. The
    first time your app breaks, you should see this in the Locals window:'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当你运行应用程序时，是否在 Locals 窗口中注意到任何有趣的内容？重新启动它，并且非常注意 `animalEmoji` 变量。第一次应用程序中断时，你应该在
    Locals 窗口中看到这个：
- en: '![Images](assets/044fig02.png)'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/044fig02.png)'
- en: 'Press Continue. It looks like the Count went down by 1, from 16 to 15:'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 按下继续。看起来计数从 16 减少到 15：
- en: '![Images](assets/044fig03.png)'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/044fig03.png)'
- en: The app is adding random emoji from the `animalEmoji` list to the TextBlocks
    and then removing them from the list, so its count should go down by 1 each time.
    Things go just fine until the `animalEmoji` list is empty (so Count is 0), then
    you get the exception. So that’s one piece of evidence! Another piece of evidence
    is that this is happening in a `**foreach loop**`. And the last piece of evidence
    is that ***this all started after we added a new TextBlock to the window***.
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 应用程序将随机从`animalEmoji`列表中添加表情符号到TextBlocks中，然后从列表中移除它们，因此其计数每次应减少1。一切顺利，直到`animalEmoji`列表为空（所以Count为0），然后你会收到异常。所以这是一个证据！另一个证据是这发生在`**foreach循环**`中。最后一个证据是***这一切都是在我们向窗口添加一个新的TextBlock之后开始的***。
- en: '**Time to put on your Sherlock Holmes cap. Can you sleuth out what’s causing
    the exception?**'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**是时候戴上你的福尔摩斯帽子了。你能找出是什么导致了异常吗？**'
- en: '**Figure out what’s actually causing the bug.**'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**找出实际导致错误的原因。**'
- en: The reason your program is crashing is because it’s trying to get the next emoji
    from the `animalEmoji` list but the list is empty, and that causes it to throw
    an ArgumentOutOfRange exception. What caused it to run out of emoji to add?
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你的程序崩溃的原因是它试图从`animalEmoji`列表中获取下一个表情符号，但列表为空，这导致它抛出ArgumentOutOfRange异常。是什么导致它耗尽了要添加的表情符号？
- en: Your program worked before you made the most recent change. Then you added a
    TextBlock…and then it stopped working. Right inside of a loop that iterates through
    all of the TextBlocks. A clue…how very, very interesting.
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在你最近做出最新更改之前，你的程序运行正常。然后你添加了一个TextBlock…然后它停止工作了。就在遍历所有TextBlock的循环中。一个线索…非常非常有趣。
- en: '![Images](assets/045fig01.png)'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/045fig01.png)'
- en: 'So when you run your app, ***it breaks on this line for every TextBlock in
    the window***. So for the first 16 TextBlocks, everything goes fine because there
    are enough emoji in the collection:'
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因此，当你运行你的应用程序时，***对于窗口中的每个TextBlock，它都会在这一行中断***。所以在前16个TextBlock中，一切都很顺利，因为集合中有足够的表情符号：
- en: '![Images](assets/045fig02.png)'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/045fig02.png)'
- en: 'But now that there’s a new TextBlock at the bottom of the window, it breaks
    a 17th time—and since the `**animalEmoji**` collection only had 16 emoji in it,
    it’s now empty:'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 但现在窗口底部有一个新的TextBlock，它第17次崩溃了——由于`**animalEmoji**`集合中只有16个表情符号，现在它是空的：
- en: '![Images](assets/045fig03.png)'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/045fig03.png)'
- en: So before you made the change, you had 16 TextBlocks and a list of 16 emoji,
    so there were just enough emoji to add one to each TextBlock. Now you have 17
    TextBlocks but still only 16 emoji, so your program runs out of emoji to add…and
    then it throws the exception.
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所以在你做出更改之前，你有16个TextBlock和一个包含16个表情符号的列表，所以刚好有足够的表情符号添加到每个TextBlock中。现在你有17个TextBlock，但仍然只有16个表情符号，所以你的程序耗尽了要添加的表情符号…然后它抛出异常。
- en: '**Fix the bug.**'
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**修复这个bug。**'
- en: Since the exception is being thrown because we’re running out of emoji in the
    loop that iterates through the TextBlocks, we can fix it by skipping the TextBlock
    we just added. We can do that by checking the TextBlock’s name and skipping the
    one that we added to show the time. Remove the breakpoint by toggling it again
    or choosing **Delete All Breakpoints (Ctrl+Shift+F9)** from the Debug menu.
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于异常是因为在遍历TextBlocks的循环中我们正在耗尽emoji，我们可以通过跳过我们刚刚添加的TextBlock来修复它。我们可以通过检查TextBlock的名称来做到这一点，并跳过显示时间的那个。再次切换以移除断点，或者从调试菜单中选择**删除所有断点（Ctrl+Shift+F9）**。
- en: '![Images](assets/045fig04.png)'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/045fig04.png)'
- en: Add the rest of the code and finish the game
  id: totrans-366
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加剩余的代码并完成游戏
- en: 'There’s one more thing you need to do. Your TimeTextBlock_MouseDown method
    checks the matchesFound field, but that field is never set anywhere. So add these
    three lines to the SetUpGame method immediately after the closing bracket of the
    foreach loop:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要做一件事。你的TimeTextBlock_MouseDown方法检查matchesFound字段，但这个字段从未在任何地方设置过。因此，在foreach循环的右大括号后立即在SetUpGame方法中添加这三行代码：
- en: '[PRE12]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-369
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Add these three lines of code to the very end of the SetUpGame method to start
    the timer and reset the fields.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 在SetUpGame方法的最后添加这三行代码，以启动计时器并重置字段。
- en: 'Then add this statement to the middle block of the `if/else` in TextBlock_MouseDown:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在TextBlock_MouseDown的if/else的中间块中添加这个语句：
- en: '[PRE13]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-373
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Add this line of code to increase matchesFound by one every time the player
    successfully finds a match.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 添加这行代码，每当玩家成功找到一对匹配项时，将matchesFound增加一。
- en: Now your game has a timer that stops when the player finishes matching animals,
    and when the game is over you can click it to play again. ***You’ve built your
    first game in C#. Congratulations!***
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的游戏有一个计时器，当玩家完成匹配动物时停止计时，游戏结束时可以点击它再玩一次。***你已经在C#中构建了你的第一个游戏。恭喜！***
- en: '![Images](assets/046fig01.png)'
  id: totrans-376
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/046fig01.png)'
- en: Note
  id: totrans-377
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**Go to** [https://github.com/head-first-csharp/fourth-edition](https://github.com/head-first-csharp/fourth-edition)
    **to view and download the complete code for this project and all of the other
    projects in this book.**'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '**去** [https://github.com/head-first-csharp/fourth-edition](https://github.com/head-first-csharp/fourth-edition)
    **查看和下载本项目及本书中所有其他项目的完整代码。**'
- en: Update your code in source control
  id: totrans-379
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在源代码控制中更新你的代码
- en: Now that your game is up and running, it’s a great time to **push your changes
    to Git**, and Visual Studio makes it easy to do that. All you need to do is *stage*
    your commits, enter a commit message, and then sync to the remote repo.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的游戏已经启动运行，现在是把你的更改推送到Git的绝佳时机，而Visual Studio使这一切变得非常简单。你只需要*暂存*你的提交，输入提交消息，然后同步到远程仓库。
- en: '![Images](assets/047fig01.png)'
  id: totrans-381
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/047fig01.png)'
- en: Choose **Commit Staged and Sync** from the commit dropdown (it’s right under
    the commit message box). It may take a few seconds to sync, and then you’ll see
    a success message in the Team Explorer window.
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从提交下拉菜单中选择 **提交已暂存项并同步**（就在提交消息框的下面）。同步可能需要几秒钟时间，然后你会在 Team Explorer 窗口看到成功消息。
- en: '![Images](assets/047fig02.png)'
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/047fig02.png)'
- en: '![Images](assets/047fig03.png)'
  id: totrans-384
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/047fig03.png)'
- en: '**Whenever you have a large project, it’s always a good idea to break it into
    smaller pieces.**'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '**每当你有一个大项目时，将其分解成更小的部分总是一个好主意。**'
- en: One of the most useful programming skills that you can develop is the ability
    to look at a large and difficult problem and break it down into smaller, easier
    problems.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以培养的最有用的编程技能之一是能够看待一个庞大而困难的问题，并将其分解为更小、更容易的问题。
- en: It’s really easy to be overwhelmed at the beginning of a big project and think,
    “Wow, that’s just so…big!” But if you can find a small piece that you can work
    on, then you can get started. Once you finish that piece, you can move on to another
    small piece, and then another, and then another. As you build each piece, you
    learn more and more about your big project along the way.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个大项目开始时很容易感到不知所措，并想：“哇，这个项目真的好大啊！”但如果你能找到一个小片段可以开始工作，那么你就能够着手了。一旦完成了这个片段，你可以继续下一个小片段，然后是另一个，再然后是另一个。随着你构建每个片段，你会在项目进展中学到更多。
- en: Even better ifs…
  id: totrans-388
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更好的条件语句……
- en: 'Your game is pretty good! But every game—in fact, pretty much every program—can
    be improved. Here are a few things that we thought of that could make the game
    better:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 你的游戏非常不错！但每个游戏——事实上，几乎每个程序——都可以改进。这里有一些我们认为可以使游戏变得更好的想法：
- en: Add different kinds of animals so the same ones don’t show up each time.
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加不同种类的动物，这样每次显示的都不一样。
- en: Keep track of the player’s best time so they can try to beat it.
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录玩家的最佳时间，以便他们可以尝试超越它。
- en: Make the timer count down instead of counting up so the player has a limited
    amount of time.
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让计时器倒计时而不是计时上升，这样玩家就有限定的时间。
- en: Note
  id: totrans-393
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: We’re serious—take a few minutes and do this. Stepping back and thinking about
    the project you just finished is a great way to seal the lessons you learned into
    your brain.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 我们是认真的——花几分钟时间去做这件事。退后一步，思考一下你刚刚完成的项目，这是将学到的经验教训牢固地印在你的大脑中的好方法。
- en: Note
  id: totrans-395
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'Just a quick reminder: we’ll refer to Visual Studio as “the IDE” a lot in this
    book.'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 只是一个快速提醒：在本书中，我们会经常将 Visual Studio 称为“IDE”。
- en: '![Images](assets/048fig02.png)'
  id: totrans-397
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/048fig02.png)'
