- en: Chapter 8\. Developing with AWS C# SDK
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。使用AWS C# SDK进行开发
- en: 'Throughout this book we have utilized many ways to interact with AWS from your
    development machine. We have been using the [AWS Management Console](https://aws.amazon.com/console),
    and we have been using the AWS CLI both through Cloud9 and locally by installing
    the CLI locally to our machine. In this last chapter, we will take a look at some
    tools and integrations that offer a third way to integrate with and control your
    AWS services, through integrated development environments (IDEs) you will most
    likely already be familiar with: Visual Studio and Visual Studio Code. Both of
    these IDEs have extensions for AWS that allow you to interrogate your AWS resources,
    and we will be covering both in this chapter.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本书始终通过多种方式与您的开发机器进行AWS交互。我们一直在使用[AWS管理控制台](https://aws.amazon.com/console)，并且通过在Cloud9上和本地安装CLI来使用AWS
    CLI。在本章中，我们将介绍一些工具和集成，提供第三种集成和控制AWS服务的方式，通过您可能已经熟悉的集成开发环境（IDEs）：Visual Studio和Visual
    Studio Code。这两个IDE都有AWS扩展，允许您查询AWS资源，本章我们将对两者进行详细介绍。
- en: After looking at some of the features of the UI toolkits for AWS, we will also
    be taking a closer look at the AWS C# SDK. We have been using the SDK extensively
    throughout this book, so you should be familiar with the basics, but there is
    a lot more this collection of NuGet packages has to offer.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看了AWS的UI工具包的一些特性后，我们还将更详细地了解AWS C# SDK。在本书的整个过程中，我们已广泛使用SDK，因此您应该对其基础知识很熟悉，但这些NuGet包的功能远不止这些。
- en: Lastly, we are going to round off this book by exploring some of the artificial
    intelligence (AI) services in AWS and how we can utilize these in .NET. So let’s
    jump straight in and talk about the AWS Toolkit for Visual Studio and how you
    can set up your Visual Studio workflow so that deployment to AWS feels seamless.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将通过探索AWS中的一些人工智能（AI）服务及如何在.NET中利用这些服务来结束本书。所以让我们直接进入话题，讨论AWS Toolkit for
    Visual Studio以及如何设置您的Visual Studio工作流，使得部署到AWS感觉无缝。
- en: Using AWS Toolkit for Visual Studio In Depth
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入使用AWS Toolkit for Visual Studio
- en: The AWS Toolkit is an extension that supplements the Visual Studio interface
    with various AWS-related functionality. The aim of the toolkit is to make Visual
    Studio feel as natively integrated into AWS as it does out of the box with Microsoft’s
    own cloud services. With the toolkit installed you will be able to quickly deploy
    your code to a multitude of AWS services with the same “publish” workflow you
    are probably already familiar with.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Toolkit是一个扩展，通过各种AWS相关功能增强了Visual Studio界面。工具包的目标是使Visual Studio在AWS中的集成感与其在微软云服务中的原生集成感一样强。安装了工具包后，您可以使用与“发布”工作流相同的方式快速部署代码到多种AWS服务上，这种工作流您可能已经非常熟悉了。
- en: The toolkit adds menu options, context menu options, project templates, and
    an AWS Explorer window, all of which we will cover in this chapter.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 工具包添加了菜单选项、上下文菜单选项、项目模板和AWS资源管理器窗口，本章我们将对所有这些功能进行介绍。
- en: Configuring Visual Studio for AWS Toolkit
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Visual Studio以使用AWS Toolkit
- en: 'We briefly covered installation of the toolkit in [“Using Visual Studio with
    AWS and AWS Toolkit for Visual Studio”](ch01.xhtml#one-aws-tookit-visual-studio),
    so just to recap: you can find the toolkit extension in the [Visual Studio Marketplace](https://oreil.ly/CuWwr),
    or through AWS’s web page for [AWS Toolkit for Visual Studio](https://aws.amazon.com/visualstudio),
    the latter of which also contains links to guides and documentation that can help
    you in getting the most out of AWS in Visual Studio.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在["使用Visual Studio与AWS和AWS Toolkit for Visual Studio"](ch01.xhtml#one-aws-tookit-visual-studio)中简要介绍了工具包的安装，因此简要回顾一下：您可以在[Visual
    Studio Marketplace](https://oreil.ly/CuWwr)找到工具包扩展，或者通过AWS的[AWS Toolkit for Visual
    Studio](https://aws.amazon.com/visualstudio)网页找到，后者还包含指南和文档的链接，帮助您充分利用Visual Studio中的AWS功能。
- en: 'There are three versions of the toolkit that span five versions of Visual Studio,
    so be sure to download the correct *.msi* installer file for your version of Visual
    Studio:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 工具包有三个版本，适用于五个版本的Visual Studio，请确保下载适合您版本的正确*.msi*安装文件。
- en: AWS Toolkit for Visual Studio 2013–2015
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS Toolkit for Visual Studio 2013–2015
- en: AWS Toolkit for Visual Studio 2017–2019
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS Toolkit for Visual Studio 2017–2019
- en: AWS Toolkit for Visual Studio 2022
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS Toolkit for Visual Studio 2022
- en: The examples in this book will be using AWS Toolkit for Visual Studio 2022;
    however, screens for earlier versions of Visual Studio are not radically dissimilar.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的示例将使用AWS Toolkit for Visual Studio 2022；但是，较早版本的Visual Studio屏幕并没有根本不同。
- en: Once you have installed the extension and opened up Visual Studio, you will
    be presented with the Getting Started page as shown in [Figure 8-1](#Figure-8-1).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 安装扩展并打开Visual Studio后，您将看到如[图8-1](#Figure-8-1)所示的入门页面。
- en: 'Before we can connect to AWS from Visual Studio, we need to configure the toolkit
    with some AWS credentials so it can make API calls to AWS services on our behalf.
    The toolkit uses the access key and secret key(s) from your AWS credentials file,
    stored against a profile. You can find your AWS credentials files under *~/.aws/credentials*
    (Linux or macOS) or *%USERPROFILE%\.aws\credentials* (Windows), with the profile
    name in square brackets. For example:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以从Visual Studio连接到AWS之前，我们需要使用一些AWS凭据配置工具包，以便它可以代表我们向AWS服务发出API调用。工具包使用存储在AWS凭据文件中的访问密钥和秘密密钥来配置，存储在方括号中的配置文件下。例如：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![doac 0801](assets/doac_0801.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0801](assets/doac_0801.png)'
- en: Figure 8-1\. Getting started with the AWS Toolkit
  id: totrans-18
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8-1\. 使用AWS Toolkit入门
- en: If you already have credentials stored on your machine, then you can skip this
    step as the toolkit will pick them up inside Visual Studio. If you do not have
    credentials stored, then you can create an IAM user and download credentials,
    then import into the Credential Setup section in [Figure 8-1](#Figure-8-1).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的计算机已经存储了凭据，那么您可以跳过此步骤，因为工具包将在Visual Studio内自动获取它们。如果您尚未存储凭据，则可以创建IAM用户并下载凭据，然后导入到[图8-1](#Figure-8-1)中的凭据设置部分。
- en: Once you have credentials stored on your machine, you can begin exploring the
    AWS Toolkit features inside Visual Studio, and what better place to start than
    the AWS Explorer, accessible from the new Tools → AWS Explorer menu option ([Figure 8-2](#Figure-8-2)).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您在计算机上存储了凭据，您就可以开始在Visual Studio内探索AWS Toolkit的功能，而最好的起点就是AWS资源管理器，可以通过新的“工具”
    → “AWS资源管理器”菜单选项访问（[图8-2](#Figure-8-2)）。
- en: '![doac 0802](assets/doac_0802.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0802](assets/doac_0802.png)'
- en: Figure 8-2\. AWS Explorer menu option
  id: totrans-22
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8-2\. AWS资源管理器菜单选项
- en: We introduced the AWS Explorer at the start of this book; you can see an example
    of the Explorer window in [Figure 1-14](ch01.xhtml#Figure-1-7) under [“Using Visual
    Studio with AWS and AWS Toolkit for Visual Studio”](ch01.xhtml#one-aws-tookit-visual-studio).
    Alongside AWS Explorer, the toolkit installs a handful of AWS-specific project
    templates and blueprints. These serve as an excellent way to both accelerate the
    creation of a new project and as a means of experimentation with different AWS
    deployment models for your code.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本书开始时介绍了AWS资源管理器；你可以在[图1-14](ch01.xhtml#Figure-1-7)中看到资源管理器窗口的示例，位于[“在Visual
    Studio中使用AWS和AWS Toolkit for Visual Studio”](ch01.xhtml#one-aws-tookit-visual-studio)下。除了AWS资源管理器外，工具包还安装了几个AWS特定的项目模板和蓝图。这些不仅可以加速新项目的创建，还可以用来尝试不同的AWS部署模型。
- en: Project Templates from AWS
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS的项目模板
- en: Select from one of the newly installed project templates by choosing “AWS” in
    the *Project type* filter, as shown in [Figure 8-3](#Figure-8-3). The project
    templates are for applications built on AWS Lambda, like many of the examples
    we have covered in this book.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在*项目类型*过滤器中选择“AWS”，从新安装的项目模板中选择一个。这些项目模板适用于基于AWS Lambda构建的应用程序，就像我们在本书中许多示例中所涵盖的那样。
- en: '![doac 0803](assets/doac_0803.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0803](assets/doac_0803.png)'
- en: Figure 8-3\. Project templates in Visual Studio
  id: totrans-27
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8-3\. Visual Studio中的项目模板
- en: If we select this template, “AWS Serverless Application with Tests (.NET Core
    - C#),” then we will be presented with another selection where we can choose from
    one of what AWS calls “blueprints” on the next screen. These blueprints are ways
    to further configure your template project to best reflect the project you are
    creating. In this case ([Figure 8-4](#Figure-8-4)), we selected Serverless Application
    in the preceding step, so we are offered several different blueprints for a serverless
    application.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择模板“AWS无服务器应用程序与测试（.NET Core - C#）”，那么我们将在下一步选择屏幕上再次选择，从中可以选择AWS称为“蓝图”的内容。这些蓝图可以进一步配置模板项目，以最好地反映您正在创建的项目。在这种情况下（[图8-4](#Figure-8-4)），我们在前一步中选择了无服务器应用程序，因此我们可以为无服务器应用程序提供几种不同的蓝图选项。
- en: '![doac 0804](assets/doac_0804.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0804](assets/doac_0804.png)'
- en: Figure 8-4\. AWS project blueprints
  id: totrans-30
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8-4\. AWS项目蓝图
- en: Choose the ASP.NET Core Web API blueprint and click “Finish” to create the project
    we will use in the next example.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 选择ASP.NET Core Web API蓝图，然后单击“完成”以创建我们将在下一个示例中使用的项目。
- en: Publishing to AWS from Visual Studio
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从Visual Studio发布到AWS
- en: 'With our serverless ASP.NET Core Web API project created from the blueprint,
    let’s open up the Solution Explorer and visit some of the files that have been
    created:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们从蓝图创建的无服务器 ASP.NET Core Web API 项目开始，让我们打开解决方案资源管理器并访问一些已创建的文件：
- en: serverless.template
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: serverless.template
- en: This file is the Serverless Application Model (SAM) template for our resources.
    This file allows us to configure our infrastructure from one file, which can be
    checked into version control. We covered SAM in [“Serverless Application Model
    (SAM)”](ch04.xhtml#4-serverless-application-model).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件是我们资源的 Serverless Application Model (SAM) 模板。这个文件允许我们从一个文件中配置我们的基础设施，可以提交到版本控制中。我们在
    [“Serverless Application Model (SAM)”](ch04.xhtml#4-serverless-application-model)
    中介绍了 SAM。
- en: AWSServerless1.Tests
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: AWSServerless1.Tests
- en: This test project has been created, including a single unit test in *ValuesControllerTests.cs*
    to serve as a starting point for writing unit tests for our API. The test project
    included in this AWS blueprint uses [xUnit](https://xunit.net), which has been
    brought in as a NuGet dependency.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此测试项目已创建，包括 *ValuesControllerTests.cs* 中的单个单元测试，作为撰写我们的 API 单元测试的起点。此 AWS 蓝图中包含的测试项目使用了
    [xUnit](https://xunit.net) 作为 NuGet 依赖项引入。
- en: aws-lambda-tools-defaults.json
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: aws-lambda-tools-defaults.json
- en: This stores the publish settings for our project. Settings added in the next
    step will be saved to this file as defaults, so you do not need to re-enter them
    each time.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这将保存我们项目的发布设置。在下一步添加的设置将作为默认值保存到此文件中，因此您无需每次重新输入它们。
- en: The new project that was created from this blueprint is ready to publish immediately—we
    don’t need to make any changes. We can use the AWS Toolkit to publish this serverless
    project directly from Visual Studio. To do this, open the context menu by right-clicking
    on the project name and selecting one of the “Publish to AWS…” options. As you
    can see in [Figure 8-5](#Figure-8-5), the AWS Toolkit has added two new menu items
    you can use to publish your project.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 从此蓝图创建的新项目已准备好立即发布 — 我们无需进行任何更改。我们可以使用 AWS Toolkit 直接从 Visual Studio 发布此无服务器项目。要执行此操作，请右键单击项目名称并选择其中一个“发布到
    AWS…”选项。如您在 [图 8-5](#Figure-8-5) 中所见，AWS Toolkit 已添加了两个新的菜单项，供您用于发布项目。
- en: '![doac 0805](assets/doac_0805.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0805](assets/doac_0805.png)'
- en: Figure 8-5\. New publish options added by the toolkit
  id: totrans-42
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-5\. 工具包新增的发布选项
- en: However you choose to publish your application, the toolkit will use the *serverless.template*
    file described previously to create a CloudFormation stack for your project and
    then build and push your code to AWS.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您选择如何发布您的应用程序，工具包都将使用之前描述的 *serverless.template* 文件为您的项目创建一个 CloudFormation
    栈，然后构建并将您的代码推送到 AWS。
- en: AWS Toolkit for Visual Studio Code
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Visual Studio Code 的 AWS Toolkit
- en: The rise of Visual Studio Code has been nothing short of meteoric. From public
    release in 2016 to being used by over [70% of professional software developers](https://oreil.ly/KJeur)
    in 2022, it is clear that Visual Studio Code has supplanted other IDEs for development
    across the industry. C# developers often turn to Visual Studio Code as a lightweight
    alternative to Visual Studio, and so in 2019 AWS announced the release of their
    [AWS Toolkit for Visual Studio Code](https://oreil.ly/spYbP).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code 的崛起简直是如同流星一般的。从 2016 年公开发布到 2022 年被超过 [70% 的专业软件开发人员](https://oreil.ly/KJeur)
    使用，很明显，Visual Studio Code 在开发行业中取代了其他 IDE。C# 开发人员通常将其视为 Visual Studio 的轻量替代品，因此在
    2019 年，AWS 宣布发布了他们的 [AWS Toolkit for Visual Studio Code](https://oreil.ly/spYbP)。
- en: The VS Code toolkit includes a version of the AWS Explorer found in Visual Studio,
    allowing you to browse and interact with your AWS services from a new “AWS” menu
    option under the side bar. [Figure 8-6](#Figure-8-6) shows how the AWS Explorer
    in VSCode allows you to browse and interact with your resources.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code 工具包包括在 Visual Studio 中找到的 AWS Explorer 版本，允许您从侧边栏的新“AWS”菜单选项下浏览和与您的
    AWS 服务交互。[图 8-6](#Figure-8-6) 显示了 VSCode 中的 AWS Explorer 允许您浏览和与您的资源交互的方式。
- en: '![doac 0806](assets/doac_0806.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0806](assets/doac_0806.png)'
- en: Figure 8-6\. AWS Explorer in Visual Studio Code
  id: totrans-48
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-6\. Visual Studio Code 中的 AWS Explorer
- en: Installing the toolkit is as simple as searching “AWS Toolkit” in the extensions
    marketplace from within Visual Studio Code (Ctrl+Shift+X on Windows, or ⌘-Shift-X
    on macOS).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 安装工具包就像在 Visual Studio Code 的扩展市场中搜索“AWS Toolkit”一样简单（在 Windows 上为 Ctrl+Shift+X，或在
    macOS 上为 ⌘-Shift-X）。
- en: 'As with the AWS Toolkit for Visual Studio, the VS Code extension uses your
    AWS credential profiles stored under *~/.aws/credentials* (Linux or macOS) or
    *%USERPROFILE%\.aws\credentials* (Windows). You can select which profile to use
    by opening the Command Palette (Ctrl+Shift+P on Windows, or ⌘-Shift-P on macOS)
    and selecting AWS: Choose AWS Profile. This will bring up the option to select
    a profile or, if you don’t have any profiles saved, set one up from within Visual
    Studio Code.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '与AWS Toolkit for Visual Studio类似，VS Code扩展使用存储在*~/.aws/credentials*（Linux或macOS）或*%USERPROFILE%\.aws\credentials*（Windows）下的AWS凭证配置文件。您可以通过打开命令面板（在Windows上是Ctrl+Shift+P，或在macOS上是⌘-Shift-P）并选择AWS:
    Choose AWS Profile来选择要使用的配置文件。这将显示选择配置文件的选项，或者如果您没有保存任何配置文件，则可以在Visual Studio
    Code内设置一个。'
- en: Alongside the AWS Explorer ([Figure 8-6](#Figure-8-6)), the AWS Toolkit for
    Visual Studio Code also provides an array of AWS commands you can invoke from
    the Command Palette. Simply search for “AWS:” to bring up all the commands with
    this prefix. A few of these are shown in [Figure 8-7](#Figure-8-7).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 除了AWS资源管理器（[图8-6](#Figure-8-6)），AWS Toolkit for Visual Studio Code还提供了一系列可以从命令面板中调用的AWS命令。只需搜索“AWS:”即可显示所有带有此前缀的命令。其中一些显示在[图8-7](#Figure-8-7)中。
- en: '![doac 0807](assets/doac_0807.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0807](assets/doac_0807.png)'
- en: Figure 8-7\. AWS commands in VS Code
  id: totrans-53
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8-7. 在VS Code中的AWS命令
- en: This brings us to the end of our overview of the AWS Toolkits for both Visual
    Studio and Visual Studio Code. Next, let’s take a quick look at the AWS Toolkit
    for Rider.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们对AWS Toolkits的Visual Studio和Visual Studio Code的概述。接下来，让我们快速看一下Rider的AWS
    Toolkit。
- en: AWS Toolkit for Rider
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Rider的AWS Toolkit
- en: The last AWS Toolkit extension to be aware of is that provided for JetBrains
    Rider. The [AWS Toolkit for Rider](https://aws.amazon.com/rider) provides similar
    functionality to the toolkits for the other IDEs we have seen here, including
    an AWS Lambda project template that integrates into Rider’s New Project dialog
    and creates a simple `Hello World` project and test project.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最后要了解的AWS Toolkit扩展是为JetBrains Rider提供的。[Rider的AWS Toolkit](https://aws.amazon.com/rider)提供类似于我们在此处看到的其他IDE工具包的功能，包括一个AWS
    Lambda项目模板，可以集成到Rider的“新项目”对话框中，并创建一个简单的`Hello World`项目和测试项目。
- en: The AWS Toolkit for Rider also supports running an AWS Lambda locally inside
    a Docker container, allowing you to debug AWS Lambda from within Rider. We also
    have a new Deploy Serverless Application context menu item on the *template.yaml*
    file in your solution that allows you to deploy your Lambda function from within
    Rider.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Toolkit for Rider还支持在Docker容器内本地运行AWS Lambda，允许您从Rider内部调试AWS Lambda。在解决方案中的*template.yaml*文件上还有一个新的“Deploy
    Serverless Application”上下文菜单项，允许您从Rider内部部署Lambda函数。
- en: Next in this chapter, we are going to take a closer look at the AWS SDK for
    .NET, and jump back into some C#.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的接下来部分，我们将更详细地查看AWS .NET SDK，并回顾一些C#内容。
- en: Key SDK Features
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SDK主要功能
- en: The [AWS SDK for .NET](https://aws.amazon.com/sdk-for-net) is a collection of
    over 300 NuGet packages that make it easy to call AWS services from applications
    running on .NET. The SDK libraries can be imported into any .NET project and used
    from your code to make authenticated calls to the various AWS APIs.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[AWS .NET SDK](https://aws.amazon.com/sdk-for-net)是一个包含300多个NuGet包的集合，可让您轻松从运行在.NET上的应用程序中调用AWS服务。SDK库可以导入到任何.NET项目中，并且可以从您的代码中进行身份验证调用各种AWS
    API。'
- en: Tip
  id: totrans-61
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: You can explore more tools, libraries, and other resources on the [.NET on AWS
    on GitHub](https://github.com/aws/dotnet) page, which contains links to GitHub
    repositories for all the open source tools maintained by AWS including the AWS
    SDK for .NET
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[.NET on AWS on GitHub](https://github.com/aws/dotnet)页面上探索更多工具、库和其他资源，该页面包含AWS维护的所有开源工具的GitHub存储库链接，包括AWS
    .NET SDK。
- en: 'All the SDK libraries follow a common pattern of service clients that wrap
    API calls to AWS. These are implemented in the SDK using strongly typed request
    and response classes available for use in your C# code. An example of one of these
    client classes is the `AmazonS3Client` from the [AWSSDK.S3](https://oreil.ly/xuwoj)
    package:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 所有SDK库都遵循包装AWS API调用的服务客户端的通用模式。这些客户端在SDK中使用强类型的请求和响应类来实现，可供您的C#代码使用。一个示例是来自[AWSSDK.S3](https://oreil.ly/xuwoj)包的`AmazonS3Client`客户端类：
- en: '[PRE1]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here we are invoking the `copy-object` on an AWS Simple Storage Service (S3)
    bucket to copy one key to another key. We start by creating a new instance of
    the service client (in this case `AmazonS3Client`) with some configuration values
    (`AmazonS3Config`). Then, with the instance of the service client, we invoke the
    asynchronous version of the method `CopyObjectAsync()`. The preceding code snippet
    is the equivalent of calling the following from the AWS command line:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们正在 AWS 简单存储服务 (S3) 存储桶上调用`copy-object`来复制一个键到另一个键。我们首先创建服务客户端的新实例（在本例中为`AmazonS3Client`），并使用一些配置值（`AmazonS3Config`）。然后，使用服务客户端的实例，我们调用方法`CopyObjectAsync()`的异步版本。上述代码片段相当于从
    AWS 命令行调用以下内容：
- en: '[PRE2]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This pattern is followed for the majority of AWS services, as all AWS service
    clients inherit from the base class [`Amazon.Runtime.AmazonServiceClient`](https://oreil.ly/5b17a).
    This gives all AWS service client objects access to common functionality such
    as credentials management, logging, metrics, retries, and timeouts, some of which
    we will cover later in this chapter.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 AWS 服务遵循此模式，因为所有 AWS 服务客户端都继承自基类[`Amazon.Runtime.AmazonServiceClient`](https://oreil.ly/5b17a)。这使得所有
    AWS 服务客户端对象都能访问共享功能，如凭据管理、日志记录、度量、重试和超时，本章后面将详细介绍其中一些功能。
- en: Authentication in the AWS .NET SDK
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS .NET SDK 中的身份验证
- en: In order to make calls to AWS APIs, you need to pass credentials to the AWS
    .NET SDK. There are several methods to do this, and different methods will be
    applicable in different scenarios. For example, if you are running your code locally
    for development purposes, you may want to authenticate with the access key and
    secret stored in one of your AWS profiles. When you deploy your code to AWS, however,
    you can use the IAM user configured for the specific EC2 instance, App Runner,
    or AWS Lambda function that is executing your code.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要调用 AWS API，您需要向 AWS .NET SDK 传递凭据。有几种方法可以实现这一点，不同的方法适用于不同的场景。例如，如果您在本地运行代码以进行开发，您可能希望使用存储在
    AWS 配置文件中的访问密钥和秘密密钥进行身份验证。然而，当您部署代码到 AWS 时，可以使用为特定 EC2 实例、App Runner 或执行代码的 AWS
    Lambda 函数配置的 IAM 用户。
- en: 'When you use a service client, the AWS SDK for .NET will look for credentials
    in the following places, in order:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用服务客户端时，AWS .NET SDK 会按以下顺序查找凭据：
- en: Credentials passed to the constructor of a service client object, for example
    `new AmazonS3Client(awsAccessKeyId, awsSecretAccessKey)`.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 凭据传递给服务客户端对象的构造函数，例如`new AmazonS3Client(awsAccessKeyId, awsSecretAccessKey)`。
- en: A named credentials profile on the local machine, as covered previously in [“Configuring
    Visual Studio for AWS Toolkit”](#VS-AWS-Toolkit), with the profile name coming
    from *appsettings.{env}.json*.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 本地计算机上的命名凭据配置文件，如前文所述，配置文件名称来自 *appsettings.{env}.json* 中的配置，有关详细信息请参见[“配置 Visual
    Studio 以使用 AWS Toolkit”](#VS-AWS-Toolkit)。
- en: A named credentials profile on the local machine, with the profile name stored
    in an environment variable called `AWS_PROFILE`.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 本地计算机上带有名称的凭据配置文件，配置文件名称存储在名为`AWS_PROFILE`的环境变量中。
- en: A named credentials profile with the name `[default]`, if it exists.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果存在带有名称`[default]`的命名凭据配置文件。
- en: Access key, secret, and session tokens stored in the environment variables `AWS_ACCESS_KEY_ID`,
    `AWS_SECRET_ACCESS_KEY`, and `AWS_SESSION_TOKEN`, respectively.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 存储在环境变量`AWS_ACCESS_KEY_ID`、`AWS_SECRET_ACCESS_KEY`和`AWS_SESSION_TOKEN`中的访问密钥、秘密密钥和会话令牌。
- en: Access key and secret only, in the environment variables `AWS_ACCESS_KEY_ID`
    and `AWS_SECRET_ACCESS_KEY`.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仅在环境变量`AWS_ACCESS_KEY_ID`和`AWS_SECRET_ACCESS_KEY`中包含访问密钥和秘密密钥。
- en: IAM role native to the EC2 task, EC2 instance, or other execution environment
    your .NET code is running on.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: EC2 任务、EC2 实例或其他 .NET 代码执行环境本地的 IAM 角色。
- en: The easiest and most flexible way to configure AWS credentials for the SDK,
    and the way that allows you to best manage multiple credentials for different
    environments, is to use the *appsettings.{env}.json* files, and load them in using
    `AWSSDK.Extensions.NETCore.Setup`, which we will look at next.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 配置 AWS SDK 的最简单和最灵活的方式，也是能够最好地管理不同环境下多个凭据的方式，是使用 *appsettings.{env}.json* 文件，并通过`AWSSDK.Extensions.NETCore.Setup`加载，接下来我们将详细了解它。
- en: Dependency Injection with the AWS SDK
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 AWS SDK 进行依赖注入
- en: Dependency injection is an extremely common pattern in .NET applications that
    allows you to configure all your dependencies in one place and inject them into
    your .NET controllers or other services, achieving inversion of control (IoC).
    If you are not familiar with dependency injection and IoC, a brief overview can
    be found on [YouTube](https://oreil.ly/rk9Ql).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖注入是.NET应用程序中极为常见的模式，它允许你在一个地方配置所有的依赖关系，并将它们注入到你的.NET控制器或其他服务中，实现控制反转（IoC）。如果你对依赖注入和IoC不太熟悉，可以在[YouTube](https://oreil.ly/rk9Ql)上找到简要概述。
- en: 'Versions of .NET from .NET Core onward support dependency injection as part
    of the framework, using the classes found in `Microsoft.Extensions.DependencyInjection`.
    Services (dependencies) are registered with the container in the *Program.cs*
    or *Startup.cs* files of your project. Here, an implementation of `MyDependency`
    is being registered against the interface `IMyDependency` in our .NET 6 *Program.cs*
    file:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 从.NET Core开始的各个版本支持依赖注入作为框架的一部分，使用在`Microsoft.Extensions.DependencyInjection`中找到的类。服务（依赖项）在项目的*Program.cs*或*Startup.cs*文件中与容器注册。在这里，在我们的.NET
    6 *Program.cs*文件中，将`MyDependency`的实现注册为接口`IMyDependency`的一部分：
- en: '[PRE3]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'When we use the AWS SDK for .NET, we can add AWS service clients into the .NET
    dependency injection container using similar syntax, with the help of the NuGet
    package AWSSDK.Extensions.NETCore.Setup. This package allows us to do two important
    things: register AWS service clients as dependencies, and use an *appsettings.json*
    file to store our AWS configuration, as previously mentioned.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在.NET中使用AWS SDK时，我们可以使用类似的语法将AWS服务客户端添加到.NET依赖注入容器中，借助NuGet包AWSSDK.Extensions.NETCore.Setup的帮助。这个包允许我们做两件重要的事情：注册AWS服务客户端作为依赖关系，并使用*appsettings.json*文件来存储我们的AWS配置，正如之前提到的那样。
- en: 'To load the configuration settings, add the AWSSDK.Extensions.NETCore.Setup
    NuGet package to your .NET Core / 6+ project and then add these two lines into
    your service registration code:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要加载配置设置，请将AWSSDK.Extensions.NETCore.Setup NuGet包添加到您的.NET Core / 6+项目中，然后将以下两行代码添加到您的服务注册代码中：
- en: '[PRE4]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Alternatively, if you are using a `Startup` class, then the code will look
    like this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果您使用`Startup`类，那么代码看起来会像这样：
- en: '[PRE5]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[![1](assets/1.png)](#co_developing_with_aws_c__sdk_CO1-1)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_developing_with_aws_c__sdk_CO1-1)'
- en: Add the configuration settings in for use in all resolved service clients.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 添加配置设置以供所有已解析的服务客户端使用。
- en: 'You can use your *appsettings.<env>.json* settings file(s) reference the name
    of your AWS credentials profile, among other settings. This allows you to have
    different AWS credentials for each environment, connecting to AWS under a different
    IAM user with roles and permissions bespoke to that environment. An example of
    *appsettings.Development.json* using a local profile called “my-profile-name”
    would look like this:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用您的*appsettings.<env>.json*设置文件引用您的AWS凭证配置文件的名称，以及其他设置。这允许您在每个环境下使用不同的AWS凭证，连接到AWS下不同IAM用户的角色和权限与该环境定制的内容。一个使用名为“my-profile-name”的本地配置文件*appsettings.Development.json*的示例如下：
- en: '[PRE6]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The settings under the AWS node map to the class `Amazon.AWSConfigs` and a full
    list of available properties can be found in the [documentation for Amazon.AWSConfigs](https://oreil.ly/38DIi).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在AWS节点下的设置映射到类`Amazon.AWSConfigs`，你可以在[Amazon.AWSConfigs的文档](https://oreil.ly/38DIi)中找到所有可用属性的完整列表。
- en: 'Once you have default AWS options added to your dependency injection container,
    you can go ahead and start to register AWS service clients as dependencies for
    use in your application. Service clients from the AWS SDK will have a concrete
    class and an interface you can register it against. This allows you to easily
    mock the interface for unit testing or to otherwise modify the behavior of your
    application without modifying any of the calling logic. Here is an example using
    the `AmazonLambdaClient` service client from `AWSSDK.Lambda`. This client allows
    us to invoke a function on AWS Lambda from our C# code:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您在依赖注入容器中添加了默认的AWS选项，您可以开始注册AWS服务客户端作为应用程序中的依赖关系使用。来自AWS SDK的服务客户端将有一个具体的类和一个您可以针对其注册的接口。这使您可以轻松地为单元测试模拟接口，或以其他方式修改您的应用程序的行为，而不需要修改任何调用逻辑。以下是一个使用`AWSSDK.Lambda`中的`AmazonLambdaClient`服务客户端的示例。该客户端允许我们从我们的C#代码调用AWS
    Lambda上的函数：
- en: '[PRE7]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[![1](assets/1.png)](#co_developing_with_aws_c__sdk_CO2-1)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_developing_with_aws_c__sdk_CO2-1)'
- en: Register the AWS Lambda service client using the interface. At runtime this
    will be injected as an instance of `AmazonLambdaClient`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 使用接口注册AWS Lambda服务客户端。在运行时，这将作为`AmazonLambdaClient`的实例注入。
- en: 'With this service registered, you can inject it into a .NET controller through
    the constructor:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个服务注册后，你可以通过构造函数将其注入到 .NET 控制器中：
- en: '[PRE8]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Notice how we are only referencing the abstraction `IAmazonLambda` in our code
    and calling `IAmazonLambda.InvokeAsync(...)` to invoke the AWS Lambda function.
    This allows us to unit test our `DoSomething()` method above by mocking out `IAmazonLambda`,
    either by implementing a mock version of this interface or using a tool such as
    [Moq](https://nugetmusthaves.com/Package/Moq) to automate the implementation.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们在代码中仅引用抽象 `IAmazonLambda` 并调用 `IAmazonLambda.InvokeAsync(...)` 来调用 AWS Lambda
    函数。这使我们能够通过模拟 `IAmazonLambda` 来单元测试上面的 `DoSomething()` 方法，要么通过实现此接口的模拟版本，要么使用
    [Moq](https://nugetmusthaves.com/Package/Moq) 等工具自动实现。
- en: The credentials to make this call to AWS Lambda and invoke our function will
    be retrieved via the use of credentials referenced by the profile in *appsettings.{env}.json*
    file, allowing us to configure separate credentials for each environment and/or
    local development user.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的凭证来调用 AWS Lambda 并调用我们的函数将通过在 *appsettings.{env}.json* 文件中引用的配置文件中的凭证进行检索，这允许我们为每个环境和/或本地开发用户配置单独的凭证。
- en: Retries and Timeouts
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重试和超时
- en: 'Since the methods in the AWS SDK make HTTP calls over the network to AWS APIs,
    there is always the chance that something can go wrong and a call can fail. The
    base `AmazonServiceClient` class that all the SDK service clients inherit from
    includes functionality to manage retries. Retry behavior can be configured by
    setting two properties on the service client configuration:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 AWS SDK 中的方法通过网络对 AWS API 进行 HTTP 调用，因此总会有可能出现问题和调用失败的可能性。所有 SDK 服务客户端继承自的基本
    `AmazonServiceClient` 类包括管理重试功能。可以通过在服务客户端配置上设置两个属性来配置重试行为：
- en: RetryMode
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 重试模式
- en: Set to one of three values from the `Amazon.Runtime.RequestRetryMode` enum.
    These are `Legacy`, `Standard`, or `Adaptive`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 设置为 `Amazon.Runtime.RequestRetryMode` 枚举中的三个值之一：`Legacy`、`Standard` 或 `Adaptive`。
- en: MaxErrorRetry
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: MaxErrorRetry
- en: The number of times to retry a failing call from the SDK service clients before
    throwing an exception in your code.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SDK 服务客户端中失败调用之前重试的次数。
- en: 'You can set these values individually when creating a new instance of any AWS
    service client, for example:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在创建任何 AWS 服务客户端的新实例时单独设置这些值，例如：
- en: 'To follow on from the previous example of dependency injection, however, you
    may want to set them globally for all service clients used in your application.
    You can do this by either setting the environment variables `AWS_RETRY_MODE` and
    `AWS_MAX_ATTEMPTS`, or by adding configuration keys into your AWS config file
    like this:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要继续之前依赖注入的示例，你可能希望为应用程序中使用的所有服务客户端全局设置它们。你可以通过设置环境变量 `AWS_RETRY_MODE` 和 `AWS_MAX_ATTEMPTS`，或者像这样向
    AWS 配置文件添加配置键来完成这一点：
- en: '[PRE9]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-110
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The AWS config file is located alongside your credentials file under *~/.aws/credentials*
    (Linux or macOS) or *%USERPROFILE%\.aws\credentials* (Windows).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 配置文件位于你的凭证文件 *~/.aws/credentials*（Linux 或 macOS）或 *%USERPROFILE%\.aws\credentials*（Windows）旁边。
- en: 'These values will be loaded into the `AWSOptions.DefaultClientConfig` property
    of your AWS options object:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这些值将加载到你的 AWS 选项对象的 `AWSOptions.DefaultClientConfig` 属性中：
- en: '[PRE10]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: From here we can use or modify the values in our code to fine-tune how retries
    are performed in the AWS SDK.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，我们可以使用或修改代码中的值来微调 AWS SDK 中的重试执行方式。
- en: Paginators
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分页器
- en: As well as retries and timeouts, the SDK service clients also include pagination
    functionality for services that may return large arrays of data. For services
    that support it, pagination is a really nice feature that replaces the continuation
    token approach with a new object-based approach that returns an async enumerable.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 除了重试和超时，SDK 服务客户端还包括用于返回大量数据数组的服务的分页功能。对于支持它的服务来说，分页是一个非常好的功能，它使用基于对象的新方法替代了继续令牌方法。
- en: 'First, let’s look at how we can paginate large results set *without* paginators,
    by using the `request.ContinuationToken` property. We are calling `s3Client.ListObjectsV2Async(...)`
    inside a `do...while` loop while there is a continuation token in the response:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看如何在没有分页器的情况下分页大结果集，通过使用 `request.ContinuationToken` 属性。我们在响应中有一个继续令牌时，会在
    `do...while` 循环中调用 `s3Client.ListObjectsV2Async(...)`：
- en: '[PRE11]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This is fine; however, despite the advantages we get from returning an `IAsyncEnumerable<T>`,
    this is still quite a lot of code to do something as simple as chaining the results
    from multiple pages. Since version 3.5 of the AWS SDK for .NET, we can now have
    access to the `Paginators` property on this `IAmazonS3` interface.^([1](ch08.xhtml#idm45599648642496))
    Here is the same method but using paginators. Notice how the call to `Paginators.ListObjectsV2`
    is *synchronous* whereas the call to `listObjectsV2Paginator.S3Objects` is asynchronous.
    The first call encapsulates our request object but does not actually call off
    to the API until we iterate over the `S3Objects` property on the paginator:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这很好；但是，尽管我们从返回`IAsyncEnumerable<T>`获得了优势，要做像链接多个页面结果这样简单的事情仍然需要大量代码。自AWS SDK
    for .NET版本3.5以来，我们现在可以在`IAmazonS3`接口上访问`Paginators`属性。^([1](ch08.xhtml#idm45599648642496))
    这里是同样的方法，但使用分页器。注意调用`Paginators.ListObjectsV2`是*同步*的，而调用`listObjectsV2Paginator.S3Objects`是异步的。第一次调用封装了我们的请求对象，但直到我们遍历分页器上的`S3Objects`属性时，才实际调用API：
- en: '[PRE12]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The paginator in this example returns `IPaginatedEnumerable<S3Object>`, which
    inherits `IAsyncEnumerable<S3Object>`, allowing us to `await foreach` over it.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例中的分页器返回`IPaginatedEnumerable<S3Object>`，它继承自`IAsyncEnumerable<S3Object>`，允许我们通过`await
    foreach`进行遍历。
- en: This concludes our look at the AWS SDK for .NET and how you can get the most
    out of the common features that AWS has included in its service client classes.
    Next we are going to round out this chapter—and this book—with a look at some
    of the ways AWS can bring AI into your C# codebase, through their various Artificial
    Intelligence as a service (AIaaS) products.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这结束了我们对AWS SDK for .NET的介绍，以及您如何充分利用AWS在其服务客户端类中包含的常用功能。接下来，我们将通过它们的各种AI作为服务（AIaaS）产品，来看看AWS如何将AI引入您的C#代码库。
- en: Using AWS AI Services
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AWS AI服务
- en: 'A natural next step in using AWS is to dive into high-level AI services. One
    of the enormous advantages of using the AWS platform is the high-level AI and
    ML services available. These services allow the developer to build solutions quickly
    in services ranging from computer vision to natural language processing. Here
    is a complete list of [AI services on AWS](https://oreil.ly/oxoiD). In this chapter,
    we are going to explore two of these AI services: Amazon Comprehend and Amazon
    Rekognition. These services offer analysis for text and images, respectively,
    using pretrained machine learning models. Between Comprehend and Rekognition we
    can cover many of the most common usages for AI that a typical .NET application
    may require.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在AWS中使用高级AI服务是一个自然的下一步。使用AWS平台的巨大优势之一是可用的高级AI和ML服务。这些服务允许开发人员快速构建解决方案，涵盖从计算机视觉到自然语言处理等多种服务。这里是[AWS上的AI服务完整列表](https://oreil.ly/oxoiD)。在本章中，我们将探索其中的两个AI服务：亚马逊理解和亚马逊识别。这些服务使用预训练的机器学习模型分析文本和图像，分别进行处理。理解和识别可以覆盖典型.NET应用程序可能需要的许多AI用途。
- en: AWS Comprehend
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS理解
- en: 'Let’s get started exploring these AI services by using Amazon Comprehend. Amazon
    Comprehend is a service that uses natural language processing (NLP) to find critical
    insights about the content of documents. This capability could be essential for
    a company looking to detect customer sentiment in reports. You can work with one
    or multiple documents at the same time. The services available include the following
    items:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过使用亚马逊理解服务开始探索这些AI服务。亚马逊理解是一种利用自然语言处理（NLP）来发现文档内容关键洞察的服务。这种能力对于希望在报告中检测客户情感的公司可能至关重要。您可以同时处理一个或多个文档。可用的服务包括以下项目：
- en: Entities
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 实体
- en: Amazon Comprehend returns document entities, including nouns like people, places,
    and locations.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊理解返回文档实体，包括人物、地点和位置等名词。
- en: Key phrases
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 关键短语
- en: Amazon Comprehend extracts vital phrases from a critical document to explain
    what is in the document.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊理解从关键文档中提取关键短语以解释文档内容。
- en: PII
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: PII
- en: This function detects the presence of [personally identifiable information (PII)](https://oreil.ly/GjsXC).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能检测到[个人可识别信息（PII）](https://oreil.ly/GjsXC)的存在。
- en: Language
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 语言
- en: This function can successfully classify up to 100 languages as the primary language
    in the document.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能可以成功地将文档中的主要语言分类为多达100种语言。
- en: Sentiment
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 情绪
- en: This function detects a document’s emotional sentiment, including positive,
    neutral, negative, or mixed.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能检测文档的情感倾向，包括积极的、中性的、消极的或混合的情绪。
- en: Syntax
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 语法
- en: This function extracts the parts of speech in a document, finding everything
    from adjectives to nouns.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数提取文档中的词性，从形容词到名词等各种词汇。
- en: 'One of the best ways to start any AI service on AWS is with the command line
    using AWS CloudShell. Let’s start with a snippet of code that you can paste into
    a CloudShell Bash terminal. The command uses the following style of `aws` followed
    by the name of the service `comprehend`, then the feature of the service `detect-sentiment`:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AWS 上启动任何 AI 服务的最佳方法之一是使用 AWS CloudShell 命令行。让我们从可以粘贴到 CloudShell Bash 终端的代码片段开始。该命令使用了
    `aws` 开头，接着是服务名 `comprehend`，然后是服务的功能 `detect-sentiment`：
- en: '[PRE13]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The output shown in [Figure 8-8](#Figure-1-10) returns a JSON payload that includes
    the `SentimentScore`, i.e., the emotion of the text.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '[Figure 8-8](#Figure-1-10) 中显示的输出返回了一个包含 `SentimentScore` 的 JSON 负载，即文本的情感。'
- en: '![doac 0808](assets/doac_0808.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0808](assets/doac_0808.png)'
- en: Figure 8-8\. Async listing buckets
  id: totrans-143
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-8\. 异步列出存储桶
- en: 'Another way to explore this API is by dynamically piping text from a website
    into our CLI. This step works through the use of `lynx`. Let’s run this to help
    us determine the sentiment around Albert Einstein on Wikipedia:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种探索此 API 的方法是通过动态地将网站上的文本输入到我们的 CLI 中。此步骤通过使用 `lynx` 实现。让我们运行这个命令来帮助我们确定维基百科上关于阿尔伯特·爱因斯坦的情感：
- en: 'First, install `lynx`:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，安装 `lynx`：
- en: '[PRE14]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, dump the page for Albert Einstein and pipe it into less to explore it:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，获取阿尔伯特·爱因斯坦的页面并将其导入到 less 中以便探索：
- en: '[PRE15]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'By using `wc -l`, we get a count of the lines:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用 `wc -l`，我们得到行数统计：
- en: '[PRE16]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To get the number of bytes, we can use `wc --bytes`:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取字节数，可以使用 `wc --bytes`：
- en: '[PRE17]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The result shows:'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果显示：
- en: '[PRE18]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If you run `aws comprehend detect-sentiment help`, it can only process 5000
    bytes. Because of this, we need to truncate the output. The truncation is done
    via `head` and then assigned to a Bash `TEXT` variable:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运行 `aws comprehend detect-sentiment help`，它只能处理 5000 字节。因此，我们需要截断输出。通过 `head`
    进行截断，然后将其分配给 Bash 的 `TEXT` 变量：
- en: '[PRE19]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, the command’s output using the `$TEXT` shows that Wikipedia content around
    Albert Einstein is generally `NEUTRAL` with a significant `POSITIVE` percentage
    of 34%:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用 `$TEXT` 的命令输出显示，维基百科围绕阿尔伯特·爱因斯坦的内容通常是 `NEUTRAL`，积极情感占 34%：
- en: '[PRE20]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The Bash command line also makes building one solution and pivoting into another
    common. In the following example, we switch to detecting entities from the same
    blob of Wikipedia text. Notice that we use `--output text` to use the power of
    Bash to filter the output:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: Bash 命令行也常用于构建一个解决方案，并迅速转入另一个常见操作。在下面的示例中，我们切换到从同一块维基百科文本中检测实体。请注意，我们使用 `--output
    text` 利用 Bash 的强大功能来过滤输出：
- en: '[PRE21]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The output of the command shows the following entities:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的输出显示以下实体：
- en: '[PRE22]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We could go even further and count the unique entities found using Bash. The
    following Bash pipeline converts entity column to lowercase then formats to easily
    count unusual occurrences. It isn’t perfect, but it gets us a close enough proof
    of concept to know how to prototype APIs with Bash before moving on to C#:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以进一步计算使用 Bash 找到的唯一实体的数量。下面的 Bash 管道将实体列转换为小写，然后格式化以便轻松计数不常见的出现。虽然不完美，但足以证明如何在进入
    C# 之前使用 Bash 原型 API：
- en: '[PRE23]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The output of the Bash pipeline shows us that several entities are worth exploring
    more, at least from the initial part of the text extracted:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Bash 管道的输出显示我们发现了几个值得进一步探索的实体，至少是从提取的文本的初始部分来看。
- en: '[PRE24]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Note
  id: totrans-167
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You can also watch a walk-through of using Bash to extract entities from scratch
    on [O’Reilly](https://oreil.ly/NzKhQ) or [YouTube](https://oreil.ly/DwlYG).
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以观看如何使用 Bash 从头开始提取实体的操作步骤，链接在 [O’Reilly](https://oreil.ly/NzKhQ) 或 [YouTube](https://oreil.ly/DwlYG)
    上。
- en: With those explorations out of the way, let’s move to code up a solution in
    C#.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些探索后，让我们开始用 C# 编写解决方案。
- en: Again, select a Visual Studio Console App and install Comprehend via NuGet as
    shown in [Figure 8-9](#Figure-1-11).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 再次选择 Visual Studio 控制台应用程序，并按照 [Figure 8-9](#Figure-1-11) 中所示的步骤通过 NuGet 安装
    Comprehend。
- en: '![doac 0809](assets/doac_0809.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0809](assets/doac_0809.png)'
- en: Figure 8-9\. NuGet Comprehend install
  id: totrans-172
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-9\. NuGet Comprehend 安装
- en: 'Here is the sentiment detection done using the `DetectSentimentAsync()` method
    of the service class found in the AWSSDK.Comprehend package:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 AWSSDK.Comprehend 包中服务类的 `DetectSentimentAsync()` 方法进行情感检测如下所示：
- en: '[PRE25]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Running the Console Application and entering some text, as illustrated in [Figure 8-10](#Figure-1-12),
    shows our statement is a `MIXED` sentiment.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 运行控制台应用程序并输入一些文本，如 [Figure 8-10](#Figure-1-12) 所示，显示我们的陈述是 `MIXED` 情感。
- en: '![doac 0810](assets/doac_0810.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0810](assets/doac_0810.png)'
- en: Figure 8-10\. Output of Comprehend Console App
  id: totrans-177
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-10\. Comprehend 控制台应用的输出
- en: Note
  id: totrans-178
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注
- en: You can also watch a walk-through of using C# with AWS Comprehend on [O’Reilly](https://oreil.ly/bNhVs)
    or [YouTube](https://youtu.be/zhiNMmg8FxA).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以观看使用 C# 和 AWS Comprehend 的实例在 [O’Reilly](https://oreil.ly/bNhVs) 或 [YouTube](https://youtu.be/zhiNMmg8FxA)
    上的演示。
- en: This example has used `DetectSentimentAsync()` to detect the *sentiment* (overall
    mood) of the text; however, we can just as easily perform entity detection on
    our text by calling `client.DetectEntities()` and inspecting the list of entities
    AWS detected in the text. Another service that offers entity detection, but this
    time in an image, is AWS Rekognition.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 本例中使用了 `DetectSentimentAsync()` 来检测文本的 *情感*（整体情绪）；然而，我们也可以通过调用 `client.DetectEntities()`
    在文本中执行实体检测。AWS 在图像中也提供了实体检测服务，名为 AWS Rekognition。
- en: AWS Rekognition
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS Rekognition
- en: Rekognition is AWS’s computer vision service for both images and video. It provides
    a number of pretrained machine learning models to fit a range of different image
    recognition needs, all in an easy-to-use API available through the .NET SDK and
    priced using a pay-as-you-go model. You can try the service out with your own
    image by searching for “Rekognition” in the AWS Management Console and clicking
    the Try Demo button. From here you can upload an image from your machine (or choose
    a sample image provided by AWS) and select from one of the pretrained models.
    [Figure 8-11](#Figure-8-X) shows the results of the *label detection* algorithm,
    as you can see AWS Rekognition has identified this image as 98.1% likely to contain
    a cat.^([2](ch08.xhtml#idm45599648023152))
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: Rekognition 是 AWS 的计算机视觉服务，适用于图像和视频。它提供了多个预训练的机器学习模型，以满足不同的图像识别需求，所有这些都可以通过易于使用的
    API 在 .NET SDK 中使用，并采用按使用量付费的模式定价。您可以在 AWS 管理控制台中搜索“Rekognition”，点击“尝试演示”按钮，尝试使用自己的图像测试该服务。从这里，您可以上传来自您的设备的图像（或选择
    AWS 提供的示例图像），并从预训练模型中选择一个。[图 8-11](#Figure-8-X) 显示了 *标签检测* 算法的结果，正如您所见，AWS Rekognition
    识别出这张图像中有 98.1% 的可能性是一只猫。^([2](ch08.xhtml#idm45599648023152))
- en: '![doac 0811](assets/doac_0811.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0811](assets/doac_0811.png)'
- en: Figure 8-11\. Testing out Rekognition through the Management Console
  id: totrans-184
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-11\. 通过管理控制台测试 Rekognition
- en: 'Calling AWS Rekognition from your C# code is as simple as installing the AWSSDK.Rekognition
    package from NuGet and utilizing the `Amazon.Rekognition.AmazonRekognitionClient`
    service class to call the API. You can inject or instantiate this service class
    in any of the ways we have seen earlier in this chapter; in this example, we have
    registered it with `services.AddAWSService<IAmazonRekognition>();`:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 从您的 C# 代码中调用 AWS Rekognition 就像安装 AWSSDK.Rekognition NuGet 包并利用 `Amazon.Rekognition.AmazonRekognitionClient`
    服务类来调用 API 一样简单。您可以在本章早些部分看到的任何方式中注入或实例化这个服务类；在本例中，我们已经通过 `services.AddAWSService<IAmazonRekognition>();`
    进行了注册：
- en: '[PRE26]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In this example, we are calling `IAmazonRekognitionDetectLabelsAsync(...)`
    and passing a reference to the image in an S3 bucket. The Rekognition API works
    by loading the image data from an S3 bucket over accepting image data in the HTTP
    call to invoke the function. Saving large data files like images to S3 first,
    and then calling services such as AWS Rekognition is a good pattern to follow
    in a cloud native AWS application as it allows you to architect an event-driven
    system. If you need to upload the image first, you could utilize an S3 trigger
    much like we did in [“C# Résumé Uploader example: event-driven”](ch04.xhtml#3-resume-example-event-driven).'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们正在调用 `IAmazonRekognitionDetectLabelsAsync(...)` 并传递一个指向 S3 存储桶中图像的引用。Rekognition
    API 的工作方式是从 S3 存储桶加载图像数据，而不是在 HTTP 调用中接受图像数据来调用函数。在云原生 AWS 应用程序中，保存像图片这样的大数据文件到
    S3，然后调用 AWS Rekognition 是一个良好的模式，因为它允许您设计一个事件驱动的系统。如果需要首先上传图像，您可以像我们在 [“C# 简历上传示例：事件驱动”](ch04.xhtml#3-resume-example-event-driven)
    中所做的那样利用 S3 触发器。
- en: Critical Thinking Discussion Questions
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 批判性思维讨论问题
- en: What are a few real-world consequences of using timeouts in communicating the
    AWS SDK in production code?
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在生产代码中调用 AWS SDK 的超时，会有哪些实际后果？
- en: What are a few real-world consequences of using retries in communicating the
    AWS SDK in production code?
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在生产系统中使用重试通信 AWS SDK 会有哪些实际后果？
- en: What new workflows are enabled by using async communication using the AWS SDK?
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 AWS SDK 进行异步通信可以启用哪些新的工作流程？
- en: What architecture patterns are most cost-effective to avoid duplicate API calls
    in production systems?
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在生产系统中，哪些架构模式最具成本效益，以避免重复的 API 调用？
- en: What unique advantages does .NET coupled with AWS give you?
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET与AWS结合给您带来了哪些独特的优势？
- en: Exercises
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: Set up the AWS Toolkit for Visual Studio if you haven’t already and use it to
    create a new S3 bucket, create a folder inside the bucket, and finally upload
    an image or file from your desktop.
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您尚未设置AWS Toolkit for Visual Studio，请进行设置，并使用它创建一个新的S3存储桶，在存储桶内创建一个文件夹，最后从您的桌面上传图像或文件。
- en: Expand on the AWS Rekognition example and convert it to a web service deployed
    on AWS App Runner.
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展AWS Rekognition示例，并将其转换为部署在AWS App Runner上的Web服务。
- en: Expand on the AWS Comprehend example and convert it to a web service deployed
    on AWS App Runner.
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展AWS Comprehend示例，并将其转换为部署在AWS App Runner上的Web服务。
- en: Create a portfolio project highlighting a complete master of .NET on AWS showing
    end-to-end development skills, including IaC and frontend.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个展示完全掌握.NET在AWS上的作品集项目，展示端到端的开发技能，包括IaC和前端。
- en: Conclusion
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: We have used the term cloud native several times in this book, and you have
    no doubt encountered it many times in the wild, but let’s think about what it
    really means and why it matters. Cloud native code runs either exclusively in,
    or at least is optimized for, the cloud. By writing our code with the intention
    of running it exclusively on AWS, we can adopt a much deeper level of integration
    with AWS services such as message queues, databases, logging, and reporting. If
    our C# code is born in the cloud (the dictionary definition of the word *native*),
    we can write it to best take advantage of the services around it. Sure, there
    are trade-offs. Local development is more difficult if you have architected your
    application to use exclusively AWS Lambda functions. Complexity can increase exponentially
    if you increasingly integrate AWS X-Ray tracing for performance monitoring into
    every execution path. There are trade-offs; however, the benefits you gain in
    performance, flexibility, and often cost, will often vastly outweigh these drawbacks.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中我们已经多次使用了“云原生”这个术语，而且您在实际应用中也无疑遇到过它，但是让我们想一想它真正意味着什么以及为什么它很重要。云原生代码要么完全在云中运行，要么至少是为云进行了优化。通过以在AWS上专用运行代码的意图来编写我们的代码，我们可以更深入地与AWS服务集成，例如消息队列、数据库、日志记录和报告。如果我们的C#代码是“云原生”的（即单词“本地”的词典定义），我们可以编写代码以最大程度地利用其周围的服务。当然，这其中存在一些权衡。如果您将应用程序架构为仅使用AWS
    Lambda函数，则本地开发将更加困难。如果您在每个执行路径中越来越多地集成AWS X-Ray跟踪以进行性能监控，则复杂性可能会呈指数增长。不过，通过性能、灵活性和通常情况下的成本获得的优势通常远远超过这些缺点。
- en: 'Remember, whether you prefer to develop in Visual Studio, VS Code, or Cloud9,
    there is a C# AWS workflow to suit you. The AWS Toolkit for Visual Studio has
    been around in one form or another since Visual Studio 2008 and is regularly updated
    to keep pace with additions to both AWS and Visual Studio itself. The latest version
    of the toolkit is even rolling out a new Publish to AWS experience that aims to
    make publishing your code to the cloud even simpler, allowing you to rapidly test
    your code in the environment it will be native to: the cloud. For us, we love
    Cloud9 for its seamless integration into AWS services and ability to access it
    from anywhere you have a web browser. Web-based IDEs may not be for everyone,
    but if you regularly change development machines or use portable or loaner devices
    for development, having your code accessible from anywhere in the cloud can be
    a game changer.'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，无论您喜欢在Visual Studio、VS Code还是Cloud9中进行开发，都有适合您的C# AWS工作流程。自Visual Studio
    2008以来，AWS Toolkit for Visual Studio已经以一种形式或另一种形式存在，并定期更新以跟上AWS和Visual Studio本身的增强。工具包的最新版本甚至正在推出一种新的“发布到AWS”体验，旨在使您将代码发布到云更加简单，允许您在将来要使用的环境中快速测试代码：云端。对于我们来说，我们喜欢Cloud9，因为它可以无缝集成到AWS服务中，并且可以通过任何具有Web浏览器的地方进行访问。基于Web的集成开发环境并非人人都适合，但是如果您经常更换开发设备或使用便携或借用设备进行开发，那么能够从云中的任何地方访问您的代码可能会改变游戏规则。
- en: Amazon Web Services is the most broadly adopted cloud platform in the world
    and has been supporting .NET in the cloud since 2008\. With over 200 services
    offering everything from a simple Windows virtual machine you can spin up for
    any task imaginable, to machine learning services like those we have visited in
    this chapter, AWS supports .NET on 485 instance types, 255 different AMIs for
    Windows workloads, and 40 different Linux AMIs with .NET or SQL Server preconfigured.
    This all means deploying to and integrating with AWS from your C# codebase has
    never been easier.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊网络服务是全球范围内使用最广泛的云平台，自2008年以来一直在云中支持.NET。通过提供超过200种服务，从可以为任何想象的任务创建的简单Windows虚拟机，到本章中访问的机器学习服务，AWS支持485种实例类型的.NET，255种不同的适用于Windows工作负载的AMI，以及40种预配置了.NET或SQL
    Server的不同Linux AMI。这意味着从您的C#代码库部署到AWS并与之集成从未如此简单过。
- en: In this book we have covered many of the ways you can leverage AWS in your application,
    but there are many more we have not had time to cover. There are open source .NET
    tools, Windows samples for AWS CodeBuild, an MQTT client for leveraging Internet
    of Things (IoT) services, and over 20 AWS services for machine learning alone.
    Among these, AWS SageMaker is a service that allows you to train and deploy your
    own ML models, a topic we could fill an entire book with by itself.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们涵盖了许多您可以在应用程序中利用 AWS 的方式，但还有许多我们没有时间涉及的方式。有开源的.NET工具，适用于AWS CodeBuild的Windows示例，用于利用物联网（IoT）服务的MQTT客户端，以及仅用于机器学习的20多种AWS服务。在这些服务中，AWS
    SageMaker是一项允许您训练和部署自己的ML模型的服务，这个话题本身就足以填写一整本书。
- en: What we have covered, however, should give you an entry point into Amazon’s
    cloud services and help you plan the next stage of development for your .NET codebase(s).
    Whether that be a migration, containerization, or rewrite from the ground up,
    we hope the topics on these pages have given you enough food for thought.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们所涵盖的内容应该为您进入亚马逊的云服务提供了一个入口，并帮助您规划您的.NET代码库的下一阶段开发。无论是迁移、容器化还是从头开始重写，我们希望这些页面上的主题能够为您提供足够的思考。
- en: ^([1](ch08.xhtml#idm45599648642496-marker)) The example here is just using the
    Simple Storage Service (S3) client; however, this same `Paginators` property is
    available on many different service clients for AWS services that have methods
    potentially returning a large number of items.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch08.xhtml#idm45599648642496-marker)) 此处的示例仅使用了简单存储服务（S3）客户端；然而，这个同样适用于许多不同的AWS服务客户端，这些服务可能返回大量项目的方法上有`Paginators`属性。
- en: ^([2](ch08.xhtml#idm45599648023152-marker)) We almost got to the end of this
    book without including a picture of James’s cat.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch08.xhtml#idm45599648023152-marker)) 我们几乎在没有包含詹姆斯的猫的照片的情况下完成了这本书。
