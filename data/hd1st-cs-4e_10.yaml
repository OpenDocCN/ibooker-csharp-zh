- en: 'Unity Lab #3: GameObject Instances'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Unity实验室 #3：GameObject实例'
- en: C# is an object-oriented language, and since these Head First C# Unity Labs
    are all **about getting practice writing C# code**, it makes sense that these
    labs will focus on creating objects.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: C#是一种面向对象的语言，因为这些Head First C# Unity实验室**都是关于练习编写C#代码**，所以这些实验室将专注于创建对象。
- en: You’ve been creating objects in C# since you learned about the `**new**` keyword
    in [#objectshellipget_orientedexclamation_mar](ch03.html#objectshellipget_orientedexclamation_mar).
    In this Unity Lab you’ll **create instances of a Unity GameObject** and use them
    in a complete, working game. This is a great jumping-off point for writing Unity
    games in C#.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 自从你了解了 `**new**` 关键字以来，你一直在C#中创建对象（详见 [#objectshellipget_orientedexclamation_mar](ch03.html#objectshellipget_orientedexclamation_mar)）。在这个Unity实验室中，你将**创建Unity
    GameObject的实例**并在一个完整的工作游戏中使用它们。这是编写Unity游戏的绝佳起点。
- en: The goal of the next two Unity Labs is to **create a simple game** using the
    familiar billiard ball from the last lab. In this lab, you’ll build on what you
    learned about C# objects and instances to start building the game. You’ll use
    a **prefab**—Unity’s tool for creating instances of GameObjects—to create lots
    of instances of a GameObject, and you’ll use scripts to make your GameObjects
    fly around your game’s 3D space.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来两个Unity实验室的目标是**创建一个简单的游戏**，使用你上次实验中熟悉的台球。在这个实验中，你将建立在你对C#对象和实例的理解上，开始构建游戏。你将使用一个**预制件**——Unity用来创建GameObject实例的工具，来创建大量的GameObject实例，并使用脚本使你的GameObject在游戏的3D空间中飞来飞去。
- en: Let’s build a game in Unity!
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们在Unity中构建一个游戏吧！
- en: 'Unity is all about building games. So in the next two Unity Labs, you’ll use
    what you’ve learned about C# to build a simple game. Here’s the game that you’re
    going to create:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Unity的核心是构建游戏。因此，在接下来的两个Unity实验室中，你将运用你在C#中学到的知识来构建一个简单的游戏。以下是你将要创建的游戏：
- en: '![Images](assets/344fig01.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/344fig01.png)'
- en: Note
  id: totrans-7
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: When you start the game, the scene slowly fills up with billiard balls. The
    player needs to keep clicking them to make them disappear. Once there are 15 balls
    in the scene, the game is over.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当你启动游戏时，场景会慢慢填满台球。玩家需要不断点击它们使它们消失。一旦场景中有15个球，游戏就结束了。
- en: 'So let’s get started. The first thing you’ll do is get your Unity project set
    up. This time we’ll keep the files a little more organized, so you’ll create separate
    folders for your materials and scripts—and one more folder for prefabs (which
    you’ll learn about later in the lab):'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。首先要做的是设置你的Unity项目。这一次我们将文件稍微整理一下，所以你会为你的材料和脚本创建单独的文件夹，并且为预制件再创建一个文件夹（稍后在实验中你会了解）：
- en: Before you begin, close any Unity project that you have open. Also close Visual
    Studio—you’ll let Unity open it for you.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在开始之前，请关闭任何已打开的Unity项目。同时关闭Visual Studio——Unity会为你打开它。
- en: '**Create a new Unity project** using the 3D template, just like you did for
    the previous Unity Labs. Give it a name to help you remember which labs it goes
    with (“Unity Labs 3 and 4”).'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建一个新的Unity项目**，使用3D模板，就像你之前在Unity实验室中做的那样。给它一个名称，以帮助你记住它属于哪些实验（“Unity Labs
    3和4”）。'
- en: Choose the Wide layout so your screen matches the screenshots.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择宽屏布局以便你的屏幕与截图匹配。
- en: Create a folder for your materials underneath the Assets folder. **Right-click
    on the Assets folder** in the Project window and choose Create >> Folder. Name
    it ***Materials***.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Assets** 文件夹下创建一个名为 ***Materials*** 的文件夹。在项目窗口中右键点击 **Assets** 文件夹，选择 **Create
    >> Folder**。将其命名为 ***Materials***。
- en: Create another folder under Assets named ***Scripts***.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Assets** 文件夹下创建另一个名为 ***Scripts*** 的文件夹。
- en: Create one more folder under Assets named ***Prefabs***.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Assets** 文件夹下创建另一个名为 ***Prefabs*** 的文件夹。
- en: '![Images](assets/344fig02.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/344fig02.png)'
- en: Create a new material inside the Materials folder
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 **Materials** 文件夹内创建一个新的材质。
- en: Double-click on your new Materials folder to open it. You’ll create a new material
    here.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 双击你的新 **Materials** 文件夹来打开它。你将在这里创建一个新的材质。
- en: Go to [https://github.com/head-first-csharp/fourth-edition](https://github.com/head-first-csharp/fourth-edition)
    and click on the Billiard Ball Textures link (just like you did in the first Unity
    lab) and download the texture file ***1 Ball Texture.png*** into a folder on your
    computer, then drag it into your Materials folder—just like you did with the downloaded
    file in the first Unity Lab, except this time drag it into the Materials folder
    you just created instead of the parent Assets folder.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 前往[https://github.com/head-first-csharp/fourth-edition](https://github.com/head-first-csharp/fourth-edition)，并点击球材质链接（就像你在第一个Unity实验中所做的那样），将***1
    Ball Texture.png***下载到计算机上的一个文件夹中，然后将其拖到你的材质文件夹中——就像你在第一个Unity实验中下载的文件一样，但这次将其拖到你刚刚创建的材质文件夹中，而不是父级Assets文件夹中。
- en: Now you can create the new material. Right-click on the Materials folder in
    the Project window and **choose Create >> Material**. Name your new material **1
    Ball**. You should see it appear in the Materials folder in the Project window.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以创建新的材质了。在项目窗口中右键点击材质文件夹，选择**创建 >> 材质**。将你的新材质命名为**1 Ball**。你会在项目窗口的材质文件夹中看到它。
- en: '![Images](assets/345fig01.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/345fig01.png)'
- en: Note
  id: totrans-22
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: In the previous Unity Labs we used a texture, or a bitmap image file that Unity
    can wrap around GameObjects. When you dragged the texture onto a sphere, Unity
    automatically created a material, which is what Unity uses to keep track of information
    about how a GameObject should be rendered that can have a reference to a texture.
    This time you’re creating the material manually. Just like last time, you may
    need to click the Download button on the GitHub page to download the texture PNG
    file.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的Unity实验中，我们使用了一个纹理，或者说Unity可以包裹在游戏对象周围的位图图像文件。当你将纹理拖放到球体上时，Unity会自动创建一个材质，这就是Unity用来跟踪关于如何渲染游戏对象的信息的方式，可以引用到一个纹理。这次你要手动创建材质。和上次一样，你可能需要在GitHub页面上点击下载按钮来下载纹理PNG文件。
- en: Make sure the 1 Ball material is selected in the Materials window, so it shows
    up in the Inspector. Click on the *1 Ball Texture* file and **drag it into the
    box to the left of the Albedo label**.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在材质窗口中选择了1 Ball材质，这样它就会显示在检视器中。点击*1 Ball Texture*文件，并**将其拖放到Albedo标签左侧的框中**。
- en: '![Images](assets/345fig02.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/345fig02.png)'
- en: You should now see a tiny little picture of the 1 Ball texture in the box to
    the left of Albedo in the Inspector.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该在检视器中Albedo标签左侧的框中看到一个小小的1 Ball纹理图像。
- en: '![Images](assets/345fig03.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/345fig03.png)'
- en: Now your material looks like a billiard ball when wrapped around a sphere.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当它包裹在一个球体周围时，你的材质看起来像一个台球。
- en: '![Images](assets/345fig04.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/345fig04.png)'
- en: Spawn a billiard ball at a random point in the scene
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在场景中的随机位置生成一个台球。
- en: 'Create a new Sphere GameObject with a script called OneBallBehaviour:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为OneBallBehaviour的新球体游戏对象：
- en: Choose 3D Object >> Sphere from the GameObject menu to **create a sphere**.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从游戏对象菜单中选择3D对象 >> 球体来**创建一个球体**。
- en: Drag your new **1 Ball material** onto it to make it look like a billiard ball.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将你的新**1 Ball材质**拖到球上，使其看起来像一个台球。
- en: Next, **right-click on the Scripts folder** that you created in the Project
    window and **create a new C# script** named OneBallBehaviour.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，**右键点击你在项目窗口中创建的脚本文件夹**，然后**创建一个新的C#脚本**，命名为OneBallBehaviour。
- en: '**Drag the script onto the Sphere** in the Hierarchy window. Select the sphere
    and make sure a Script component called “One Ball Behaviour” shows up in the Inspector
    window.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将脚本拖放到层次视图中的球体上**。选择球体，并确保检视器窗口中显示了名为“One Ball Behaviour”的脚本组件。'
- en: Double-click on your new script to edit it in Visual Studio. ***Add exactly
    the same code*** that you used in BallBehaviour in the first Unity Lab, then **comment
    out the Debug.DrawRay line** in the Update method.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 双击你的新脚本以在Visual Studio中进行编辑。***添加与BallBehaviour中使用的相同代码***，然后**注释掉Update方法中的Debug.DrawRay行**。
- en: 'Your OneBallBehaviour script should now look like this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的OneBallBehaviour脚本应该是这样的：
- en: '![Images](assets/346fig01.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/346fig01.png)'
- en: 'Now modify the Start method to move the sphere to a random position when it’s
    created. You’ll do this by setting **transform.position**, which changes the position
    of the GameObject in the scene. Here’s the code to position your ball at a random
    point—**add it to the Start** method of your OneBallBehaviour script:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在修改Start方法，在创建时将球移动到一个随机位置。你可以通过设置**transform.position**来实现这一点，它可以改变场景中游戏对象的位置。下面是将球放置在随机点的代码—**将其添加到你的OneBallBehaviour脚本的Start方法中**：
- en: '![Images](assets/346fig02.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/346fig02.png)'
- en: '**Use the Play button in Unity to run your game.** A ball should now be circling
    the Y axis at a random point. Stop and start the game a few times. The ball should
    spawn at a different point in the scene each time.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用 Unity 中的播放按钮来运行你的游戏。** 现在应该会有一个球围绕 Y 轴在一个随机点上旋转。停止并重新开始游戏几次。每次球应该在场景中的不同点生成。'
- en: Use the debugger to understand Random.value
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用调试器理解 Random.value
- en: You’ve used the Random class in the .NET System namespace a few times already.
    You used it to scatter the animals in the animal matching game in [#start_building_with_chash_build_somethin](ch01.html#start_building_with_chash_build_somethin)
    and to pick random cards in [#objectshellipget_orientedexclamation_mar](ch03.html#objectshellipget_orientedexclamation_mar).
    This Random class is different—try hovering over the Random keyword in Visual
    Studio.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经多次在 .NET System 命名空间中使用了 Random 类。你用它在动物匹配游戏中散布动物 [#start_building_with_chash_build_somethin](ch01.html#start_building_with_chash_build_somethin)，以及在随机选择卡牌
    [#objectshellipget_orientedexclamation_mar](ch03.html#objectshellipget_orientedexclamation_mar)。这个
    Random 类与以前的不同—试着在 Visual Studio 中将鼠标悬停在 Random 关键字上。
- en: '![Images](assets/347fig01.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/347fig01.png)'
- en: You can see from the code that this new Random class is different from the one
    you used before. Earlier you called Random.Next to get a random value, and that
    value was a whole number. This new code uses **Random.value**, but that’s not
    a method—it’s actually a property.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从代码中看出，这个新 Random 类与之前使用的不同。之前你调用 Random.Next 来获取一个随机值，而且那个值是一个整数。这段新代码使用了
    **Random.value**，但那不是一个方法—实际上它是一个属性。
- en: Use the Visual Studio debugger to see the kinds of values that this new Random
    class gives you. Click the “Attach to Unity” button ![Images](assets/347fig02.png)
    in Windows, ![Images](assets/347fig03.png) in macOS) to attach Visual Studio to
    Unity. Then **add a breakpoint** to the line you added to the Start method.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Visual Studio 调试器来查看这个新 Random 类给出的各种值。点击“Attach to Unity”按钮 ![图片](assets/347fig02.png)
    （在 Windows 上），![图片](assets/347fig03.png) （在 macOS 上），将 Visual Studio 与 Unity 连接起来。然后在你添加到
    Start 方法中的代码行上**添加一个断点**。
- en: Note
  id: totrans-47
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Unity may prompt you to enable debugging, just like in the last Unity Lab.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 可能会提示你启用调试，就像在上一个 Unity 实验室中一样。
- en: 'Now go back to Unity and **start your game**. It should break as soon as you
    press the Play button. Hover your cursor over Random.value—make sure it’s over
    `value`. Visual Studio will show you its value in a tooltip:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在返回 Unity 并**开始你的游戏**。一旦按下播放按钮，游戏应该会中断。将鼠标悬停在 Random.value 上—确保它悬停在 `value`
    上。Visual Studio 将在工具提示中显示它的值：
- en: '![Images](assets/347fig04.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/347fig04.png)'
- en: 'Keep Visual Studio attached to Unity, then go back to the Unity editor and
    **stop your game** (in the Unity editor, not in Visual Studio). Start your game
    again. Do it a few more times. You’ll get a different random value each time.
    That’s how UnityEngine.Random works: it gives you a new random value between 0
    and 1 each time you access its value property.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 保持 Visual Studio 连接到 Unity，然后回到 Unity 编辑器并**停止你的游戏**（在 Unity 编辑器中，不是在 Visual
    Studio 中）。再次启动你的游戏。多试几次。每次都会得到一个不同的随机值。这就是 UnityEngine.Random 的工作原理：每次访问其 value
    属性时，它会给你一个新的介于 0 和 1 之间的随机值。
- en: Press Continue (![Images](assets/347fig05.png)) to resume your game. It should
    keep running—the breakpoint was only in the Start method, which is just called
    once for each GameObject instance, so it won’t break again. Then go back to Unity
    and stop the game.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 按下继续 (![图片](assets/347fig05.png)) 来恢复你的游戏。它应该会继续运行—断点只在 Start 方法中，每个 GameObject
    实例仅调用一次，因此不会再次断开。然后返回 Unity 并停止游戏。
- en: Note
  id: totrans-53
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**You can’t edit scripts in Visual Studio while it’s attached to Unity, so
    click the square Stop Debugging button to detach the Visual Studio debugger from
    Unity.**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**当 Visual Studio 附加到 Unity 时，你无法在其中编辑脚本，所以点击方形停止调试按钮来将 Visual Studio 调试器与
    Unity 分离。**'
- en: Turn your GameObject into a prefab
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将你的 GameObject 转换为一个 prefab
- en: In Unity, a **prefab** is a GameObject that you can instantiate in your scene.
    Over the past few chapters you’ve been working with object instances, and creating
    objects by instantiating classes. Unity lets you take advantage of objects and
    instances, so you can build games that reuse the same GameObjects over and over
    again. Let’s turn your 1 ball GameObject into a prefab.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Unity 中，一个 **prefab** 是一个可以在场景中实例化的 GameObject。在过去的几章中，你一直在处理对象实例，并通过实例化类来创建对象。Unity
    允许你利用对象和实例，这样你可以构建重复使用相同 GameObject 的游戏。让我们把你的一个球 GameObject 变成一个 prefab。
- en: GameObjects have names.. Change the name of your GameObject to *OneBall*. Start
    by **selecting your sphere**, by clicking on it in the Hierarchy window or in
    the scene. Then use the Inspector window to **change its name to OneBall**.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: GameObjects有名称.. 将你的GameObject的名称更改为*OneBall*。首先**选择你的球**，通过在层次视图窗口或场景中单击它。然后使用检视器窗口**将其名称更改为OneBall**。
- en: '![Images](assets/348fig01.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/348fig01.png)'
- en: Now you can turn your GameObject into a prefab. **Drag OneBall from the Hierarchy
    window into the Prefabs folder**.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以将你的GameObject转换成预制件。**从层次视图窗口将OneBall拖放到预制文件夹中**。
- en: '![Images](assets/348fig02.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/348fig02.png)'
- en: OneBall should now appear in your Prefabs folder. Notice that ***OneBall is
    now blue in the Hierarchy window***. This indicates that it’s now a prefab—Unity
    turned it blue to tell you that an instance of a prefab is in your hierarchy.
    That’s fine for some games, but for this game we want all of the instances of
    the balls to be created by scripts.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: OneBall现在应该出现在你的预制文件夹中。注意***现在在层次视图窗口中，OneBall变成了蓝色***。这表示它现在是一个预制件——Unity将其变为蓝色以告诉你，在你的层次结构中有一个预制件的实例。对于某些游戏来说这很好，但对于这个游戏来说，我们希望所有的球都是由脚本创建的实例。
- en: Right-click on OneBall in the Hierarchy window **and delete the OneBall GameObject
    from the scene**. You should now only see it in the Project window, and not in
    the Hierarchy window or the scene.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在层次视图窗口中右键单击OneBall**并从场景中删除OneBall GameObject**。现在你只能在项目窗口中看到它，而不是在层次窗口或场景中看到。
- en: '![Images](assets/348fig03.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/348fig03.png)'
- en: Note
  id: totrans-64
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**Have you been saving your scene as you go? Save early, save often!**'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**你一直在保存场景吗？尽早保存，经常保存！**'
- en: Create a script to control the game
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个控制游戏的脚本
- en: The game needs a way to add balls to the scene (and eventually keep track of
    the score, and whether or not the game is over).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏需要一种方法来将球添加到场景中（并最终跟踪分数，以及游戏是否结束）。
- en: 'Right-click on the Scripts folder in the Project window and **create a new
    script called GameController**. Your new script will use two methods available
    in any GameObject script:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目窗口的Scripts文件夹上右键单击**创建一个名为GameController的新脚本**。你的新脚本将使用在任何GameObject脚本中都可用的两种方法：
- en: '**The Instantiate method creates a new instance of a GameObject.** When you’re
    instantiating GameObjects in Unity, you don’t typically use the `new` keyword
    like you saw in [#dive_into_chash_statementscomma_classesc](ch02.html#dive_into_chash_statementscomma_classesc).
    Instead, you’ll use the Instantiate method, which you’ll call from the AddABall
    method.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Instantiate方法创建一个GameObject的新实例。** 当你在Unity中实例化GameObject时，通常不会像在[#dive_into_chash_statementscomma_classesc](ch02.html#dive_into_chash_statementscomma_classesc)中看到的那样使用`new`关键字。相反，你将使用Instantiate方法，你会在AddABall方法中调用它。'
- en: '**The InvokeRepeating method calls another method in the script over and over
    again.** In this case, it will wait one and a half seconds, then call the AddABall
    method once a second for the rest of the game.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**InvokeRepeating方法一遍又一遍地调用脚本中的另一个方法。** 在这种情况下，它将等待一秒半，然后每秒调用一次AddABall方法，直到游戏结束。'
- en: 'Here’s the source code for it:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这是它的源代码：
- en: '![Images](assets/349fig01.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/349fig01.png)'
- en: Attach the script to the Main Camera
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将脚本附加到主摄像机上
- en: Your new GameController script needs to be attached to a GameObject to run.
    Luckily, the Main Camera is just another GameObject—it happens to be one with
    a Camera component and an AudioListener component—so let’s attach your new script
    to it. **Drag your GameController** script out of the Scripts folder in the Project
    window and **onto the Main Camera** in the Hierarchy window.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你的新GameController脚本需要附加到一个GameObject才能运行。幸运的是，主摄像机只是另一个GameObject——它恰好是一个带有摄像机组件和音频监听器组件的对象——所以让我们将你的新脚本附加到它上面。**从项目窗口的Scripts文件夹中拖拽你的GameController脚本**到层次视图窗口中的主摄像机上。
- en: '![Images](assets/350fig01.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/350fig01.png)'
- en: Note
  id: totrans-76
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**You learned all about public versus private fields in [#encapsulation_keep_your_privateshellippr](ch05.html#encapsulation_keep_your_privateshellippr).
    When a script class has a public field, the Unity editor shows that field in the
    Script component in the Inspector. It adds spaces between uppercase letters to
    make its name easier to read.**'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**你已经学习了在[#encapsulation_keep_your_privateshellippr](ch05.html#encapsulation_keep_your_privateshellippr)中公共与私有字段的区别。当脚本类有一个公共字段时，Unity编辑器会在检视器中的脚本组件中显示该字段。它在大写字母之间添加空格，以便更容易阅读其名称。**'
- en: Look in the Inspector—you’ll see a component for the script, exactly like you
    would for any other GameObject. The script has a ***public field called OneBallPrefab***,
    so Unity displays it in the Script component.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 查看检视器 —— 你会看到一个脚本的组件，与任何其他 GameObject 一样。这个脚本有一个***名为 OneBallPrefab 的公共字段***，所以
    Unity 在脚本组件中显示它。
- en: '![Images](assets/350fig02.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![Images](assets/350fig02.png)'
- en: The OneBallPrefab field still says None, so we need to set it. **Drag OneBall
    out of the Prefabs folder** and onto the **box next to the One Ball Prefab label.**
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: OneBallPrefab 字段仍然显示 None，所以我们需要设置它。**将 OneBall 从 Prefabs 文件夹中拖到 One Ball Prefab
    标签旁边的框中**。
- en: '![Images](assets/350fig03.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![Images](assets/350fig03.png)'
- en: 'Now the GameController’s OneBallPrefab field contains a ***reference*** to
    the OneBall prefab:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 GameController 的 OneBallPrefab 字段包含了一个***对 OneBall 预制体的引用***：
- en: '![Images](assets/350fig04.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![Images](assets/350fig04.png)'
- en: Go back to the code and **look closely the AddABall method**. It calls the Instantiate
    method, passing it the OneBallPrefab field as an argument. You just set that field
    so that it contains your prefab. So every time GameController calls its AddABall
    method, it will ***create a new instance of the OneBall prefab.***
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 回到代码，**仔细查看 AddABall 方法**。它调用 Instantiate 方法，并将 OneBallPrefab 字段作为参数传递给它。你刚刚设置了该字段，使其包含你的预制体。因此，每当
    GameController 调用其 AddABall 方法时，它将***创建 OneBall 预制体的一个新实例***。
- en: Press Play to run your code
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按下播放按钮来运行你的代码
- en: 'Your game is all ready to run. The GameController script attached to the Main
    Camera will wait 1.5 seconds, then instantiate a OneBall prefab every second.
    Each instantiated OneBall’s Start method will move it to a random position in
    the scene, and its Update method will rotate it around the Y axis every 2 seconds
    using OneBallBehaviour fields (just like in the last Lab). Watch as the play area
    slowly fills up with rotating balls:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你的游戏已经准备好运行了。附加到 Main Camera 的 GameController 脚本将等待 1.5 秒，然后每秒实例化一个 OneBall
    预制体。每个实例化的 OneBall 的 Start 方法将其移动到场景中的随机位置，并且其 Update 方法将每 2 秒围绕 Y 轴旋转，使用 OneBallBehaviour
    的字段（就像上次实验中一样）。观察当游戏区域慢慢填满旋转的球时：
- en: '![Images](assets/351fig01.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![Images](assets/351fig01.png)'
- en: Note
  id: totrans-88
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**Unity calls every GameObject’s Update method before each frame. That’s called
    the update loop.**'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**Unity 在每帧之前调用每个 GameObject 的 Update 方法。这被称为更新循环。**'
- en: Note
  id: totrans-90
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: When you instantiate GameObjects in your code, they show up in the Hierarchy
    window when you run your game.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在代码中实例化 GameObjects 时，它们会在你运行游戏时显示在层次视图中。
- en: Watch the live instances in the Hierarchy window
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在层次视图中观察实例的动态
- en: Each of the balls flying around the scene is an instance of the OneBall prefab.
    Each of the instances has its own instance of the OneBallBehaviour class. You
    can use the Hierarchy window to track all of the OneBall instances—as each one
    is created, a “OneBall(Clone)” entry is added to the Hierarchy.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 飞行在场景中的每个球都是 OneBall 预制体的一个实例。每个实例都有其自己的 OneBallBehaviour 类的实例。你可以使用层次视图来跟踪所有的
    OneBall 实例 —— 每创建一个，层次视图就会添加一个 “OneBall(Clone)” 条目。
- en: '![Images](assets/351fig02.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![Images](assets/351fig02.png)'
- en: '**Click on any of the OneBall(Clone) items** to view it in the Inspector. You’ll
    see its Transform values change as it rotates, just like in the last lab.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**点击任何一个 OneBall(Clone) 项**来在检视器中查看它。当它旋转时，你会看到它的 Transform 值发生变化，就像上次实验中一样。'
- en: Note
  id: totrans-96
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: We’ve included some coding exercises in the Unity Labs. They’re just like the
    exercises in the rest of the book—and remember, it’s not cheating to peek at the
    solution.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 Unity 实验室中包含了一些编码练习。它们和书中其他地方的练习一样 —— 记住，偷看解决方案并不算作弊。
- en: Use the Inspector to work with GameObject instances
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用检视器来操作 GameObject 实例
- en: Run your game. Once a few balls have been instantiated, click the Pause button—the
    Unity editor will jump back to the Scene view. Click one of the OneBall instances
    in the Hierarchy window to select it. The Unity editor will outline it in the
    Scene window to show you which object you selected. Go to the Transform component
    in the Inspector window and **set its Z scale value to 4** to make the ball stretch.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的游戏。一旦实例化了几个球，点击暂停按钮 —— Unity 编辑器将跳回到场景视图。点击层次视图中的 OneBall 实例中的任何一个来选择它。Unity
    编辑器会在场景视图中用轮廓线标出它，以显示你选择的对象。进入检视器窗口的 Transform 组件，并**将其 Z 缩放值设置为 4**，使球拉伸。
- en: '![Images](assets/352fig01.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![Images](assets/352fig01.png)'
- en: Start your simulation again—now you can track which ball you’re modifying. Try
    changing its DegreesPerSecond, XRotation, YRotation, and ZRotation fields like
    you did in the last lab.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 再次启动你的模拟 —— 现在你可以追踪修改的是哪个球了。尝试像上次实验中那样更改它的 DegreesPerSecond、XRotation、YRotation
    和 ZRotation 字段。
- en: While the game is running, switch between the Game and Scene views. You can
    use the Gizmos in the Scene view ***while the game is running***, even for GameObject
    instances that were created using the Instantiate method (rather than added to
    the Hierarchy window).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当游戏运行时，在游戏视图和场景视图之间切换。即使对于使用Instantiate方法创建的GameObject实例（而不是添加到层级窗口中的实例），你也可以在场景视图中**在游戏运行时**使用Gizmo工具。
- en: Try clicking the Gizmos button at the top of the toolbar to toggle them on and
    off. You can turn on the Gizmos in the Game view, and you can turn them off in
    the Scene view.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试点击工具栏顶部的Gizmos按钮以切换它们的显示。你可以在游戏视图中打开Gizmos，并且可以在场景视图中关闭它们。
- en: '![Images](assets/352fig02.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/352fig02.png)'
- en: Use physics to keep balls from overlapping
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用物理来防止球体重叠
- en: Did you notice that occasionally some of the balls overlap each other?
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你有没有注意到偶尔一些球会彼此重叠？
- en: Unity has a powerful **physics engine** that you can use to make your GameObjects
    behave like they’re real, solid bodies—and one thing that solid shapes don’t do
    is overlap each other. To prevent that overlap, you just need to tell Unity that
    your OneBall prefab is a solid object.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Unity有一个强大的**物理引擎**，你可以用它让你的GameObject表现得像真实的实体——而实体形状不会重叠。要防止重叠，你只需要告诉Unity你的OneBall预制体是一个实体对象。
- en: 'Stop your game, then **click on the OneBall prefab in the Project window**
    to select it. Then go to the Inspector and scroll all the way down to the bottom
    to the Add Component button:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 停止你的游戏，然后**在项目窗口中点击“OneBall”预制体**以选择它。然后在检查器中滚动到底部找到“添加组件”按钮：
- en: '![Images](assets/353fig01.png)![Images](assets/353fig02.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/353fig01.png)![图片](assets/353fig02.png)'
- en: Click the button to pop up the Component window. **Choose Physics** to view
    the physics components, then **select Rigidbody** to add the component.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 点击按钮弹出组件窗口。**选择Physics**查看物理组件，然后**选择Rigidbody**添加组件。
- en: '![Images](assets/353fig03.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/353fig03.png)'
- en: Note
  id: totrans-112
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: While you’re running physics experiments, here’s one Galileo would appreciate.
    Try checking the Use Gravity box while your game is running. New balls that get
    created will start falling, occasionally hitting another ball and knocking it
    out of the way.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在你运行物理实验时，这里有一个伽利略会欣赏的实验。尝试在游戏运行时勾选“使用重力”框。新创建的球会开始下落，偶尔会碰到另一个球并把它撞开。
- en: Run your game again—now you won’t see balls overlap. Occasionally one ball will
    get created on top of another one. When that happens, the new ball will knock
    the old one out of the way.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行游戏——现在你不会看到球体重叠。偶尔会有一个球体创建在另一个球体之上。当发生这种情况时，新球体会把旧球体撞开。
- en: '**Let’s run a little physics experiment** to prove that the balls really are
    rigid now. Start your game, then pause it as soon as there are more than two balls
    created. Go to the Hierarchy window. If it looks like this:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**让我们进行一个小的物理实验**，证明这些球现在真的是刚性的。启动游戏，然后一旦创建了两个以上的球就暂停游戏。转到层级窗口。如果看起来像这样：'
- en: '![Images](assets/353fig04.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/353fig04.png)'
- en: then you’re editing the prefab—click the back caret (![Images](assets/353fig05.png))
    in the top-right corner of the Hierarchy window to get back to the scene (you
    may need to expand SampleScene again).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当你编辑预制体时——点击层级窗口右上角的后退箭头（![图片](assets/353fig05.png)）返回场景（你可能需要再次展开SampleScene）。
- en: Hold down the Shift key, click the first OneBall instance in the Hierarchy window,
    and then click the second one so the first two OneBall instances are selected.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按住Shift键，点击层级窗口中的第一个OneBall实例，然后点击第二个实例，这样前两个OneBall实例就被选择了。
- en: You’ll see dashes (![Images](assets/353fig06.png)) in the Position boxes in
    the Transform panel. **Set the Position to (0, 0, 0)** to set both OneBall instances’
    positions at the same time.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你会在Transform面板的位置框中看到短线（![图片](assets/353fig06.png)）。将位置设置为（0，0，0）同时设置两个OneBall实例的位置。
- en: Use Shift-click to select any other instances of OneBall, right-click, and **choose
    Delete** to delete them from the scene so only the two overlapping balls are left.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Shift-click选择任何其他OneBall实例，右键点击，**选择删除**以将它们从场景中删除，只留下两个重叠的球体。
- en: Unpause your game—the balls can’t overlap now, so instead they’ll be rotating
    next to each other.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恢复游戏——现在球体不能重叠了，所以它们会旁边旋转。
- en: '![Images](assets/353fig07.png)'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/353fig07.png)'
- en: Note
  id: totrans-123
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**Stop the game in Unity and Visual Studio and save your scene. Save early,
    save often!**'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**在Unity和Visual Studio中停止游戏并保存场景。早保存，频繁保存！**'
- en: Note
  id: totrans-125
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**You can use the Hierarchy window to delete GameObjects from your scene while
    the game is running.**'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**在游戏运行时，您可以使用层级窗口删除场景中的游戏对象。**'
- en: Get creative!
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 充满创意！
- en: You’re halfway done with the game! You’ll finish it in the next Unity Lab. In
    the meantime, this is a great opportunity to practice your **paper prototyping**
    skills. We gave you a description of the game at the beginning of this Unity Lab.
    Try creating a paper prototype of the game. Can you come up with ways to make
    it more interesting?
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经完成了游戏的一半！你将在下一个Unity实验室完成它。与此同时，这是一个练习你**纸上原型**技能的绝佳机会。在本Unity实验室开始时，我们已经为您介绍了游戏的描述。试着创建一个纸上原型游戏。您能想出让它更有趣的方法吗？
- en: '![Images](assets/354fig01.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/354fig01.png)'
