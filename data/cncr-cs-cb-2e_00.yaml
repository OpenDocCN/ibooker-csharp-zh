- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: I think the animal on this cover, a common palm civet, is applicable to the
    subject of this book. I knew nothing about this animal until I saw the cover,
    so I looked it up. Common palm civets are considered pests because they defecate
    all over attics and make loud noises fighting with each other at the most inopportune
    times. Their anal scent glands emit a nauseating secretion. They have an endangered
    species rating of “Least Concern,” which is apparently the politically correct
    way of saying, “Kill as many of these as you want; no one will miss them.” Common
    palm civets enjoy eating coffee cherries, and they pass the coffee beans through.
    Kopi luwak, one of the most expensive coffees in the world, is made from the coffee
    beans extracted from civet excretions. According to the Specialty Coffee Association
    of America, “It just tastes bad.”
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为这本书封面上的动物，一只棕榈猫鼬，与本书的主题相关。在看到封面之前，我对这种动物一无所知，因此我查找了相关信息。棕榈猫鼬被认为是害虫，因为它们会在阁楼上随处排泄，并在最不合时宜的时候用嘈杂的声音互相争斗。它们的肛门臭腺会分泌出令人作呕的分泌物。它们的濒危物种评级是“无忧”，这显然是政治正确的说法，“你可以杀死尽可能多的这些动物，没有人会想念它们。”棕榈猫鼬喜欢吃咖啡果实，它们将咖啡豆排泄出来。鲁瓦克咖啡是世界上最昂贵的咖啡之一，由从猫鼬排泄物中提取的咖啡豆制成。根据美国特种咖啡协会的说法，“它的味道很糟糕。”
- en: This makes the common palm civet a perfect mascot for concurrent and multithreaded
    development. To the uninitiated, concurrency and multithreading are undesirable.
    They make well-behaved code act up in the most horrendous ways. Race conditions
    and whatnot cause loud crashes (always, it seems, either in production or during
    a demo). Some have gone so far as to declare “threads are evil” and avoid concurrency
    completely. There are a handful of developers who have developed a taste for concurrency
    and use it without fear; but most developers have been burned in the past by concurrency,
    and that experience has left a bad taste in their mouth.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得棕榈猫鼬成为并发和多线程开发的完美吉祥物。对于未曾接触过的人来说，并发和多线程是令人不愿意接受的。它们会导致行为良好的代码表现出最可怕的方式。竞态条件等问题会导致响亮的崩溃（似乎总是在生产环境或演示期间）。有些人甚至宣称“线程是邪恶的”，完全避免并发。有少数开发者对并发产生了兴趣，并且毫不畏惧地使用它；但大多数开发者在过去由于并发而受过伤，这种经历让他们对此望而却步。
- en: However, for modern applications, concurrency is quickly becoming a requirement.
    Users these days expect fully responsive interfaces, and server applications are
    having to scale to unprecedented levels. Concurrency addresses both of these trends.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于现代应用程序来说，并发迅速成为一项要求。如今的用户期望完全响应的界面，服务器应用程序必须达到前所未有的规模。并发可以解决这两种趋势。
- en: Fortunately, there are many modern libraries that make concurrency *much* easier!
    Parallel processing and asynchronous programming are no longer exclusively the
    domains of wizards. By raising the level of abstraction, these libraries make
    responsive and scalable application development a realistic goal for every developer.
    If you have been burned in the past, when concurrency was extremely difficult,
    then I encourage you to give it another try with modern tools. We can probably
    never call concurrency easy, but it sure isn’t as hard as it used to be!
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，现代化的库使并发变得*更*容易！并行处理和异步编程不再只是巫师的专属领域。通过提高抽象级别，这些库使响应式和可扩展的应用程序开发成为每个开发者现实可行的目标。如果你在过去遇到过困难重重的并发问题，那么我鼓励你使用现代工具再次尝试。我们可能永远不能说并发很简单，但它确实没有过去那么难了！
- en: Who Should Read This Book
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 适合阅读本书的人
- en: This book is written for developers who want to learn modern approaches to concurrency.
    I do assume that you’ve got a fair amount of .NET experience, including an understanding
    of generic collections, enumerables, and LINQ. I do *not* expect that you have
    any multithreading or asynchronous programming knowledge. If you do have some
    experience in those areas, you may still find this book helpful because it introduces
    newer libraries that are safer and easier to use.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书是为那些想学习现代并发方法的开发者编写的。我假设你具有相当数量的.NET经验，包括对泛型集合、可枚举对象和LINQ的理解。我*不*假设你有任何多线程或异步编程的知识。如果你在这些领域有些经验，你可能仍会发现这本书有帮助，因为它介绍了更安全、更易于使用的新库。
- en: Concurrency is useful for any kind of application. It doesn’t matter whether
    you work on desktop, mobile, or server applications; these days concurrency is
    practically a requirement across the board. You can use the recipes in this book
    to make user interfaces more responsive and servers more scalable. We are already
    at the point where concurrency is ubiquitous, and understanding these techniques
    and their uses is essential knowledge for the professional developer.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 并发对任何类型的应用程序都有用。无论您是在桌面应用程序、移动应用程序还是服务器应用程序上工作；如今并发几乎是无处不在的要求。您可以使用本书中的示例使用户界面更加响应，服务器更具可扩展性。我们已经到了并发无处不在的时代，理解这些技术及其用途是专业开发者的必备知识。
- en: Why I Wrote This Book
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我为什么写这本书
- en: Early in my career, I learned multithreading the hard way. After a couple of
    years, I learned asynchronous programming the hard way. While those were both
    valuable experiences, I do wish that back then I had some of the tools and resources
    that are available today. In particular, the `async` and `await` support in modern
    .NET languages is pure gold.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在我职业生涯的早期阶段，我通过艰难的方式学会了多线程。几年后，我又通过艰难的方式学会了异步编程。虽然这两者都是宝贵的经验，但我希望那时我能有一些今天可用的工具和资源。特别是，现代.NET语言中的`async`和`await`支持是非常宝贵的。
- en: However, if you look around today at books and other resources for learning
    concurrency, they almost all start by introducing the most low-level concepts.
    There’s excellent coverage of threads and serialization primitives, and the higher-level
    techniques are put off until later, if they’re covered at all. I believe this
    is for two reasons. First, many developers of concurrency, such as myself, did
    learn the low-level concepts first, slogging through the old-school techniques.
    Second, many books are years old and cover now-outdated techniques; as the newer
    techniques have become available, these books have been updated to include them,
    but have unfortunately placed them at the end.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果您今天查看有关学习并发性的书籍和其他资源，几乎所有这些资源都从介绍最低级别的概念开始。有关线程和序列化原语的优秀覆盖，高级技术则被推迟到后面，如果有的话。我认为这有两个原因。首先，许多并发的开发者，比如我自己，确实是先学习了低级别的概念，艰难地通过老式技术。其次，许多书籍已经数年未变，涵盖的是现在已经过时的技术；随着新技术的推出，这些书籍已经更新以包括它们，但不幸的是把它们放在了最后。
- en: I think that’s backward. In fact, this book *only* covers modern approaches
    to concurrency. That’s not to say there’s no value in understanding all the low-level
    concepts. When I went to college for programming, I had one class where I had
    to build a virtual CPU from a handful of gates, and another class that covered
    assembly programming. In my professional career, I’ve never designed a CPU, and
    I’ve only written a couple dozen lines of assembly, but my understanding of the
    fundamentals still helps me every day. Still, it’s best to start with the higher-level
    abstractions; my first programming class wasn’t in assembly language.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为这是反过来的。实际上，这本书*仅仅*涵盖了现代并发的方法。这并不是说理解所有低级概念没有价值。当我上大学学习编程时，有一门课程让我从几个门电路构建虚拟CPU，还有另一门课程讲解汇编语言。在我的职业生涯中，我从未设计过CPU，只写过几十行汇编，但是我的基础理解每天都在帮助我。尽管如此，最好还是从更高级别的抽象开始；我的第一门编程课不是用汇编语言。
- en: 'This book fills a niche: it is an introduction to (and reference for) concurrency
    using modern approaches. It covers several different kinds of concurrency, including
    parallel, asynchronous, and reactive programming. It does not, however, cover
    any of the old-school techniques, which are adequately covered in many other books
    and online resources.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本书填补了一个空白：它是使用现代方法介绍并发的入门和参考。它涵盖了几种不同的并发类型，包括并行、异步和反应式编程。然而，它不涉及任何老式技术，这些在许多其他书籍和在线资源中都有充分的覆盖。
- en: Navigating This Book
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航本书
- en: 'Here’s how the book is broken down:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本书的结构：
- en: '[Chapter 1](ch01.html#intro) is an introduction to the various kinds of concurrency
    covered by this book: parallel, asynchronous, reactive, and dataflow.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第一章](ch01.html#intro)介绍了本书涵盖的各种并发类型：并行、异步、反应式和数据流。'
- en: Chapters [2](ch02.html#async-basics)–[6](ch06.html#rx-basics) are a more thorough
    introduction to these kinds of concurrency.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二章到第六章是对这些并发类型更为详尽的介绍。
- en: The remaining chapters each deal with a particular aspect of concurrency, and
    they act as a reference for solutions to common problems.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 剩下的章节各自处理并发的特定方面，并作为常见问题解决方案的参考。
- en: I recommend reading (or at least skimming) the first chapter, even if you’re
    already familiar with some kinds of concurrency.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议阅读（或至少浏览）第一章，即使您已经熟悉某些并发类型。
- en: Warning
  id: totrans-19
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: As this book goes to press, .NET Core 3.0 is still in beta, so some details
    around asynchronous streams may change.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本书正在印刷中，.NET Core 3.0 仍处于 beta 阶段，因此有关异步流的某些细节可能会发生变化。
- en: Online Resources
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在线资源
- en: 'This book acts like a broad-spectrum introduction to several different kinds
    of concurrency. I’ve done my best to include techniques that I and others have
    found the most helpful, but this book isn’t exhaustive by any means. The following
    resources are the best ones I’ve found for a more thorough exploration of these
    technologies:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本书像是对多种不同并发类型的广泛介绍。我尽力包含了我和其他人认为最有帮助的技术，但这本书并非穷尽一切。以下资源是我发现的更彻底探索这些技术的最佳资源：
- en: For parallel programming, the best resource I know of is *Parallel Programming
    with Microsoft .NET* by Microsoft Press, the text of which is [available online](http://bit.ly/parallel-prog).
    Unfortunately, it’s already a bit out of date. The section on futures should use
    asynchronous code instead, and the section on pipelines should use Channels or
    TPL Dataflow.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于并行编程，我知道的最好资源是Microsoft Press的*Parallel Programming with Microsoft .NET*，其文本可以[在线获取](http://bit.ly/parallel-prog)。不幸的是，它已经有些过时了。关于
    futures 的部分应改用异步代码，关于 pipelines 的部分应使用 Channels 或 TPL Dataflow。
- en: For asynchronous programming, MSDN is quite good, particularly the [“Asynchronous
    Programming”](http://bit.ly/async-prog) overview.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于异步编程，MSDN 是相当不错的，特别是[“异步编程”](http://bit.ly/async-prog)概述。
- en: Microsoft has also made available [documentation for TPL Dataflow.](http://bit.ly/dataflow-tpl)
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft 也提供了[TPL Dataflow 的文档。](http://bit.ly/dataflow-tpl)
- en: System.Reactive (Rx) is a library that is gaining a lot of traction online and
    continues evolving. In my opinion, the best resource today for Rx is [*Introduction
    to Rx*](http://www.introtorx.com/), an ebook by Lee Campbell.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: System.Reactive（Rx）是一个在线上受欢迎并不断发展的库。在我看来，今天最好的 Rx 资源是[*Introduction to Rx*](http://www.introtorx.com/)，这是Lee
    Campbell的一本电子书。
- en: Conventions Used in This Book
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书中使用的约定
- en: 'The following typographical conventions are used in this book:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用以下排版约定：
- en: '*Italic*'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*斜体*'
- en: Indicates new terms, URLs, email addresses, filenames, and file extensions.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 表示新术语、网址、电子邮件地址、文件名和文件扩展名。
- en: '`Constant width`'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`等宽`'
- en: Used for program listings, as well as within paragraphs to refer to program
    elements such as variable or function names, databases, data types, environment
    variables, statements, and keywords.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 用于程序清单，以及在段落中引用程序元素，如变量或函数名称、数据库、数据类型、环境变量、语句和关键字。
- en: '**`Constant width bold`**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**`等宽粗体`**'
- en: Shows commands or other text that should be typed literally by the user.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 显示用户应该按字面输入的命令或其他文本。
- en: '*`Constant width italic`*'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*`等宽斜体`*'
- en: Shows text that should be replaced with user-supplied values or by values determined
    by context.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 显示应由用户提供值或由上下文确定值替换的文本。
- en: Tip
  id: totrans-37
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: This element signifies a tip or suggestion.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这个元素表示一个提示或建议。
- en: Note
  id: totrans-39
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注释
- en: This element signifies a general note.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个元素表示一般注释。
- en: Warning
  id: totrans-41
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: This element indicates a warning or caution.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这个元素表示警告或注意事项。
- en: Using Code Examples
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用代码示例
- en: Supplemental material (code examples, exercises, etc.) is available for download
    at [*https://oreil.ly/concur-c-ckbk2*](https://oreil.ly/concur-c-ckbk2).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 补充材料（代码示例、练习等）可从[*https://oreil.ly/concur-c-ckbk2*](https://oreil.ly/concur-c-ckbk2)下载。
- en: This book is here to help you get your job done. In general, if example code
    is offered with this book, you may use it in your programs and documentation.
    You do not need to contact us for permission unless you’re reproducing a significant
    portion of the code. For example, writing a program that uses several chunks of
    code from this book does not require permission. Selling or distributing a CD-ROM
    of examples from O’Reilly books does require permission. Answering a question
    by citing this book and quoting example code does not require permission. Incorporating
    a significant amount of example code from this book into your product’s documentation
    does require permission.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 本书旨在帮助您完成工作。通常情况下，如果本书提供了示例代码，您可以在您的程序和文档中使用它。除非您复制了代码的大部分，否则您无需联系我们请求许可。例如，编写一个使用本书多个代码片段的程序不需要许可。销售或分发包含奥莱利书籍示例的CD-ROM需要许可。引用本书回答问题并引用示例代码不需要许可。将本书的大量示例代码整合到您产品的文档中需要许可。
- en: 'We appreciate, but do not require, attribution. An attribution usually includes
    the title, author, publisher, and ISBN. For example: “*Concurrency in C# Cookbook*,
    Second Edition, by Stephen Cleary (O’Reilly). Copyright 2019 Stephen Cleary, 978-1-492-05450-4.”'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们感谢，但不要求署名。署名通常包括标题、作者、出版商和ISBN。例如：“*Concurrency in C# Cookbook*, Second Edition,
    by Stephen Cleary (O’Reilly). Copyright 2019 Stephen Cleary, 978-1-492-05450-4。”
- en: If you feel your use of code examples falls outside fair use or the permission
    given above, feel free to contact us at [*permissions@oreilly.com*](mailto:permissions@oreilly.com).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您认为您使用的代码示例超出了合理使用范围或以上给出的许可，请随时通过[*permissions@oreilly.com*](mailto:permissions@oreilly.com)与我们联系。
- en: O’Reilly Online Learning
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 奥莱利在线学习
- en: Note
  id: totrans-49
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: For almost 40 years, [*O’Reilly Media*](http://oreilly.com) has provided technology
    and business training, knowledge, and insight to help companies succeed.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 近40年来，[*奥莱利传媒*](http://oreilly.com)为企业的成功提供技术和商业培训、知识和洞见。
- en: Our unique network of experts and innovators share their knowledge and expertise
    through books, articles, conferences, and our online learning platform. O’Reilly’s
    online learning platform gives you on-demand access to live training courses,
    in-depth learning paths, interactive coding environments, and a vast collection
    of text and video from O’Reilly and 200+ other publishers. For more information,
    please visit [*http://oreilly.com*](http://oreilly.com).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们独特的专家和创新者网络通过书籍、文章、会议和我们的在线学习平台分享他们的知识和专长。奥莱利的在线学习平台为您提供按需访问的实时培训课程、深入学习路径、交互式编码环境，以及来自奥莱利和其他200多家出版商的大量文本和视频内容。更多信息，请访问[*http://oreilly.com*](http://oreilly.com)。
- en: How to Contact Us
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何联系我们
- en: 'Please address comments and questions concerning this book to the publisher:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 有关本书的评论和问题，请发送至出版商：
- en: O’Reilly Media, Inc.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 奥莱利传媒公司
- en: 1005 Gravenstein Highway North
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 北格拉文斯坦高速公路1005号
- en: Sebastopol, CA 95472
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加利福尼亚州塞巴斯托波尔95472
- en: 800-998-9938 (in the United States or Canada)
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 800-998-9938（美国或加拿大）
- en: 707-829-0515 (international or local)
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 707-829-0515（国际或本地）
- en: 707-829-0104 (fax)
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 707-829-0104（传真）
- en: We have a web page for this book, where we list errata, examples, and any additional
    information. You can access this page at [*https://oreil.ly/concur-c-ckbk2*](https://oreil.ly/concur-c-ckbk2).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为本书设有网页，列出勘误、示例和任何额外信息。您可以访问[*https://oreil.ly/concur-c-ckbk2*](https://oreil.ly/concur-c-ckbk2)查看。
- en: To comment or ask technical questions about this book, send email to [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如需对本书提出评论或技术问题，请发送电子邮件至[*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com)。
- en: For more information about our books, courses, conferences, and news, see our
    website at [*http://www.oreilly.com*](http://www.oreilly.com).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 有关我们的书籍、课程、会议和新闻的更多信息，请访问我们的网站[*http://www.oreilly.com*](http://www.oreilly.com)。
- en: 'Find us on Facebook: [*http://facebook.com/oreilly*](http://facebook.com/oreilly)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在Facebook上找到我们：[*http://facebook.com/oreilly*](http://facebook.com/oreilly)
- en: 'Follow us on Twitter: [*http://twitter.com/oreillymedia*](http://twitter.com/oreillymedia)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在Twitter上关注我们：[*http://twitter.com/oreillymedia*](http://twitter.com/oreillymedia)
- en: 'Watch us on YouTube: [*http://www.youtube.com/oreillymedia*](http://www.youtube.com/oreillymedia)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在YouTube上观看我们：[*http://www.youtube.com/oreillymedia*](http://www.youtube.com/oreillymedia)
- en: Acknowledgments
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 致谢
- en: This book simply would not exist without the help of so many people!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有这么多人的帮助，本书将无法存在！
- en: First and foremost, I’d like to acknowledge my Lord and Savior, Jesus Christ.
    Becoming a Christian was the most important decision of my life! If you want more
    information on this subject, feel free to contact me via [my personal web page](http://stephencleary.com/).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我要首先感谢我的主耶稣基督。成为基督徒是我一生中最重要的决定！如果您想获取更多关于这个主题的信息，请随时通过[我的个人网页](http://stephencleary.com/)联系我。
- en: Second, I thank my family for allowing me to give up so much time with them.
    When I started writing, I had some author friends of mine tell me, “Say goodbye
    to your family for the next year!” and I thought they were joking. My wife, Mandy,
    and our children, SD and Emma, have been very understanding while I put in long
    days at work followed by writing on evenings and weekends. Thank you so much.
    I love you!
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，我要感谢我的家人，让我能有更多时间投入写作。当我开始写作时，一些作家朋友告诉我：“接下来一年要和家人说再见！” 我当时以为他们在开玩笑。我的妻子曼迪和我们的孩子
    SD 和 Emma，在我白天工作后以及晚上和周末写作时非常理解和支持。非常感谢你们，我爱你们！
- en: 'Of course, this book wouldn’t be nearly as good as it is without my editors
    and our technical reviewers: Stephen Toub, Petr Onderka (“svick”), Nick Paldino
    (“casperOne”), Lee Campbell, and Pedro Felix. So if any mistakes get through,
    it’s totally their fault. Just kidding! Their input has been invaluable in shaping
    (and fixing) the content, and any remaining mistakes are of course my own. Particular
    thanks go to Stephen Toub, who taught me the Boolean Argument Hack ([Recipe 14.5](ch14.html#recipe-sync-and-async)),
    as well as countless other `async` topics; and Lee Campbell, who has helped me
    learn System.Reactive and make my observable code more idiomatic.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果没有我的编辑和技术审阅者：Stephen Toub、Petr Onderka（“svick”）、Nick Paldino（“casperOne”）、Lee
    Campbell 和 Pedro Felix，这本书不会有现在的水平。所以如果有任何错误通过了，完全是他们的错。开个玩笑！他们的意见在塑造（和修复）内容方面是无价的，当然，剩下的错误都是我自己的责任。特别感谢
    Stephen Toub，他教会了我布尔参数技巧（[Recipe 14.5](ch14.html#recipe-sync-and-async)），以及无数其他的`async`主题；还有
    Lee Campbell，他帮助我学习了 System.Reactive，使我的观察者模式代码更具表现力。
- en: 'Finally, I’d like to thank some of the people I’ve learned these techniques
    from: Stephen Toub, Lucian Wischik, Thomas Levesque, Lee Campbell, the members
    of Stack Overflow and the MSDN forums, and the attendees of the software conferences
    in and around my home state of Michigan. I appreciate being a part of the software
    development community, and if this book adds any value, it’s because so many have
    already shown the way. Thank you all!'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我想感谢我从中学到这些技巧的一些人：Stephen Toub、Lucian Wischik、Thomas Levesque、Lee Campbell、Stack
    Overflow 和 MSDN 论坛的成员，以及在我所在密歇根州及周边举办的软件会议的参与者。我很高兴能成为软件开发社区的一部分，如果这本书有任何价值，那是因为已经有很多人指引了道路。谢谢大家！
