- en: Chapter 9\. Indefinite Loops
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。无限循环
- en: We’ve seen in previous chapters how functional programming replaces `For` and
    `ForEach` loops with LINQ functions like `Select` or `Aggregate`. That’s absolutely
    terrific - provided you are working with a fixed-length array, or an `Enumerable`
    that will determine for itself when it’s time to finish iterating.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前几章中看到函数式编程如何用LINQ函数如`Select`或`Aggregate`替换`For`和`ForEach`循环。这绝对是太棒了 - 前提是您正在处理固定长度的数组或者一个`Enumerable`，它会自行决定何时结束迭代。
- en: What do you do though, when you aren’t at all sure how long you’ll want to iterate
    for? What if you’re iterating indefinitely until a condition is met?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你根本不确定你想要迭代多久怎么办？如果你一直迭代直到满足某个条件呢？
- en: 'Here’s an example of some non-functional code that shows the sort of thing
    I’m talking about, losely based on the board game Monopoly. Let’s imaging you’re
    stuck in jail, you naughty individual! The rules for getting out are one of the
    following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个非功能性代码的例子，展示了我所说的那种事情，基于Monopoly棋盘游戏的松散基础。想象一下，你被关在监狱里，你这个淘气鬼！有以下几种方法可以让你脱困：
- en: Pay 50 in whichever currency you play in (That’d be $50 if you’re in the US,
    or £50 for me, here in the UK^([1](ch09.html#idm45400850401728)))
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以您所在的货币支付50（如果您在美国，则为50美元，或者在英国的我这里为50英镑^([1](ch09.html#idm45400850401728)))
- en: Roll a double
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 掷一个双子
- en: Use a “Get out of Jail Free” card
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用一个“出狱卡”
- en: In a real game of Monopoly, there are other player’s turns to consider, but
    I’m simplifying it down to looping indefinitely until one of these conditions
    are met. I’d probably add some validation logic in here too if I were doing this
    for real, but once again, I’m keeping it simple.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在真实的Monopoly游戏中，还需要考虑其他玩家的回合，但我简化为无限循环，直到满足其中一个条件。如果我真的这么做了，我可能会在这里添加一些验证逻辑，但再次强调，我要保持简单。
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can’t possibly do the above with a `Select` statement. We can’t say when
    the criteria will be met, and we’ll continue to iterate around the `While` loop
    until one of them are.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您无法使用`Select`语句执行上述操作。我们无法确定何时满足条件，因此我们将继续在`While`循环中迭代，直到其中一个条件被满足。
- en: So how can we make this functional? A `While` loop is a statement (specifically
    a control flow statement), and as such it’s not preferred by functional programming
    languages.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们如何使其功能化？`While`循环是一个语句（具体说来是一个控制流语句），因此它不被函数式编程语言所青睐。
- en: There are a few options, and I’ll describe each of them, but this is one of
    those areas where some sort of trade-off is required. Each of the choices have
    consequences, and I’ll do my best to consider their respective pros and cons.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种选择，我会逐一描述每一种，但这是一个需要做出某种权衡的领域。每个选择都有后果，我会尽量考虑它们各自的利弊。
- en: Buckle up your seatbelts, here we go…​
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 系好你的安全带，我们出发吧…​
- en: Recursion
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 递归
- en: The classic functional programming method for handling indefinite loops is to
    use recursion. In brief, for those of you unfamiliar with it - Recursion is the
    use of a function that calls itself. There will be a condition of some sort too
    that determines whether there should be another iteration, or whether to actually
    return data.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 处理无限循环的经典函数式编程方法是使用递归。简而言之，对于那些不熟悉的人 - 递归是使用调用自身的函数。还会有某种条件确定是否应该进行另一次迭代，或者是否实际返回数据。
- en: If the decision is made at the end of the recursive function, this is known
    as *tail recursion*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果决策是在递归函数的末尾做出的，这被称为*尾递归*。
- en: 'A purely recusive solution to the Monopoly problem might look like this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 解决Monopoly问题的纯递归解决方案可能如下所示：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Job done, right? Well, not really, and I would think very carefully before using
    a function like the one above. The issue is that every nested function call adds
    a new item onto the Stack in the .NET runtime, and if there are a lot of recursive
    calls, then that can either negatively effect performance or else kill the application
    with a Stack Overflow Exception.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 任务完成了，对吧？嗯，并不完全是这样，我在使用上面的这种函数之前会非常谨慎地考虑。问题在于每个嵌套的函数调用都会在.NET运行时的堆栈中添加一个新项目，如果递归调用很多，那么这可能会对性能产生负面影响，或者用堆栈溢出异常终止应用程序。
- en: If there are guaranteed only to be a handfull of iterations, then there’s nothing
    fundamentally wrong with the recursive approach. You’d also have to be sure that
    this is revisited if the code’s usage is ever significantly changed following
    an enhancement. It could turn out that this rarely used function with a few iterations
    one day turns into something heavily used with hundreds of iterations. If that
    ever happens, then the business might wonder why their wonderful application suddenly
    becomes near unresponsive almost overnight.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果确保只有少数迭代，那么递归方法基本上没有什么问题。你还必须确保，如果代码的使用在增强后发生了显著变化，这一点会被重新考虑。可能会出现这样的情况，有一天这个很少使用的函数在某天变成了一个大量迭代的重度使用函数。如果这种情况发生了，业务可能会想知道为什么他们的优秀应用突然变得接近无响应。
- en: So, like I said, think very carefully before using a recursive algorithm in
    C#. This has the advantage of being relatively simple and not requiring you to
    write any boilerplate to make it happen.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，正如我所说的，在使用C#中的递归算法之前，请非常谨慎。这样做的优点是相对简单，而且不需要编写任何样板代码来实现它。
- en: Note
  id: totrans-21
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: F#, and many other more strongly functional languages, have a feature called
    *Tail Optimised Recursion Calls*, which means it’s possible to write recursive
    functions without them exploding the stack. This isn’t available in C# however,
    and there are no plans to make it available in the future, either. Depending on
    the situation, the F# optimization will either create Intermediate Language (IL)
    code with a `while(true)` loop, or else make use of an IL command called `goto`
    to physically move the execution environment’s pointer back to the beginning of
    the loop.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: F#以及许多其他更强调函数式的语言，具有称为*尾递归调用优化*的特性，这意味着可以编写递归函数而不会使堆栈溢出。然而，这在C#中是不可用的，并且将来也没有计划将其提供。根据情况，F#优化将创建带有`while(true)`循环的中间语言（IL）代码，或者利用一个称为`goto`的IL命令将执行环境的指针物理地移回循环的开始位置。
- en: I did investigate the possibility of referencing a generic Tail Optimised Recursion
    Call from F# and exposing it via a compiled DLL to C#, but that has its own performance
    issues that makes it a waste of effort.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我确实调查了从F#引用通用的尾递归调用，并通过编译的DLL将其暴露给C#的可能性，但这会有自己的性能问题，使其成为一种徒劳的努力。
- en: There’s another possibility I’ve seen discussed online, and that’s to add a
    post-build event that directly manipulates the .NET Intermediate Language that
    C# compiles to so that it makes retrospective use of the F# Tail Optimization
    feature. That’s very clever, but sounds too much like hard work to me. It would
    be a potential extra maintainance task too.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我在网上看到另一个可能性的讨论，那就是添加一个后构建事件，直接操作C#编译成的.NET中间语言，使其回顾性地使用F#的尾部优化特性。这非常聪明，但对我来说听起来太像辛苦的工作了。这也可能是一个额外的维护任务。
- en: In the next section, I’ll look into a technique to simulate Tail Optimised Recursion
    Calls in C#.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我将探讨一种在C#中模拟尾递归调用优化的技术。
- en: Trampolining
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 立体跳板（Trampolining）
- en: I’m not entirely sure where the term *Trampolining* came from, but it pre-dates
    .NET. The earliest references I could find were academic papers from the 90s,
    looking at implementing some of the feaures of LiSP in C. I’d guess it’s a little
    older even than that, though.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我并不完全确定术语*Trampolining*的起源，但它早于.NET。我能找到的最早参考文献是90年代的学术论文，研究在C中实现LiSP的一些特性。我猜这个术语甚至比那还要年长一些。
- en: The basic idea is that you have a function that takes a *thunk* as a parameter
    - a thunk being a block of code stored in a variable. In C# these are implemented
    as `Func` or `Action`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 基本思想是你有一个以*thunk*作为参数的函数 - *thunk*是存储在变量中的一段代码。在C#中，这些是作为`Func`或`Action`实现的。
- en: Having got the thunk, you create an indefinite loop with `while(true)` and some
    way of assessing a condition that determines whether the loop should terminate.
    This might be done with an additional `Func` that returns a `bool` or else some
    sort of wrapper object that needs to be updated with each iteration by the thunk.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 得到*thunk*后，你创建一个带有`while(true)`的无限循环，并且通过某种方式评估一个条件，以确定循环是否应该终止。这可以通过返回`bool`的额外`Func`或者某种需要通过*thunk*在每次迭代中更新的包装对象来完成。
- en: But at the end of the day, what we’re looking at is basically hiding a `while`
    loop at the back of our codebase. It’s true that `while` isn’t purely functional,
    but this is one of those places where we might need to compromise. Fundamentally,
    C# is a hybrid language, supporting both OO and FP paradigms. There are always
    going to be places where it’s not going to be possible to have it behave in exactly
    the way F# does. This is one of them.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 但归根结底，我们看到的基本上是在代码库的后面隐藏了一个`while`循环。`while`并非纯函数式，但这是我们可能需要妥协的地方之一。从根本上讲，C#是一种混合语言，支持OO和FP范式。总会有一些地方无法像F#那样精确地控制其行为。这就是其中之一。
- en: 'There are a number of ways that you could implement trampolining, but this
    is the one I’d tend to go for:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以实现trampolining，但我倾向于选择这种方法：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: By attaching to type `T`, which is a generic, this extension method therefore
    attaches to everything in the C# codebase. The first parameter is a `Func` delegate
    that updates the type that `T` represents to a new form based on whatever rules
    the outside world defines. The second is another `Func` which returns the condition
    that will cause the loop to terminate.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 通过附加到类型`T`，它是一个通用的，这个扩展方法因此会附加到C#代码库中的所有内容。第一个参数是一个`Func`委托，它更新`T`代表的类型到基于外部定义的任何规则的新形式。第二个是另一个`Func`，它返回导致循环终止的条件。
- en: Since this is a simple `While` loop, there aren’t any issues with the size of
    the stack. It’s not pure functional programming, though. It’s a compromise. At
    the very least though, it’s at least a single instance of a `while` loop that’s
    hidden somewhere, deep in the codebase. It may also be that one day, Microsoft
    will release a new feature that enables proper tail optimized recursion calls
    to be implemented somehow, in which case this function can be re-implemented and
    the code should continue to work as it did, but with one instance fewer of imperative
    code features.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个简单的`While`循环，不存在堆栈大小的问题。虽然它不是纯函数式编程，但这是一个折衷的方案。至少，它是代码库中深藏的一个`while`循环实例。也许有一天，微软会发布一个新功能，以便以某种方式实现适当的尾递归调用优化，那么这个函数就可以重新实现，代码应该继续像之前一样工作，但少一个命令式代码特性实例。
- en: 'Using this version of indefinite iteration, the Monopoly code would now look
    like this:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个版本的不定迭代，Monopoly代码现在看起来像这样：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: There *is* another you are free to use to implement - Trampolining. Functionally
    it behaves the same as a hidden `while` loop, and it is pretty much the same in
    terms of performance as well.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 还*有*另一种你可以用来实现 - Trampolining。从功能上看，它的行为与隐藏的`while`循环相同，性能方面也基本相同。
- en: I’m not necessarily convinced there’s any additional benefit, and I *personally*
    feel it looks a little less friendly than a `while` loop, but it is probably ever
    so slightly more in accordance with the functional paradigm, in that it dispenses
    with the `while` statement.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我并不确定是否有额外的好处，而且*个人*感觉它看起来比`while`循环不那么友好，但它可能略微更符合函数式编程范式，因为它省去了`while`语句。
- en: Use this if you prefer, but it’s a matter of personal preference, in my view.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢，可以使用这个，但在我看来，这是个人喜好的问题。
- en: This version is implemented using a C# command which under just about any other
    circumstance I’d *implore* you not to use. It’s something that has existed in
    coding since at least the days of BASIC, and is still around in some form today
    - the `goto` command.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本使用了一个C#命令，通常在任何其他情况下我都*极力建议*你不要使用。自从BASIC时代以来，这种编码方式一直存在，今天仍以某种形式存在 - `goto`命令。
- en: In BASIC, you could literally move to any arbitrary line of code you wanted
    by calling `goto` and specifying the line number. That’s often how loops were
    implemented in BASIC. In c# however, you need to create tags, and it’s only to
    these tags that `goto` will move to.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在BASIC中，你可以通过调用`goto`并指定行号来移动到任意的代码行。这通常是在BASIC中实现循环的方式。但是在C#中，你需要创建标签，而`goto`只能移动到这些标签处。
- en: Here’s a re-implementation of `IterateUntil` using two tags. One called *LoopBeginning*
    which is the equivalent of the *{* character at the beginning of a `while` loop.
    The second tag is called *LoopEnding* and represents the end of the loop, or the
    *}* character of the `while` loop.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用两个标签重新实现`IterateUntil`的方法。一个称为*LoopBeginning*，相当于`while`循环开头的*{*字符。第二个标签称为*LoopEnding*，表示循环的结束，或`while`循环的*}*字符。
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: I’ll leave it to decide which version you prefer. They’re pretty much equivalent.
    Whatever you do though, don’t go using `goto` anywhere else in your code unless
    you absolutely, positively, completely and utterly know what you’re doing and
    why there’s literally *no* better option.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我会让你决定你更喜欢哪个版本。它们几乎是等效的。但无论你做什么，绝对不要在代码中的任何其他地方使用`goto`，除非你绝对，完全，彻底地知道你在做什么，以及为什么没有更好的选择。
- en: Like a certain snake-loving, noseless, evil wizard - the `goto` command is both
    great and yet also terrible if used unwisely.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 像某位爱蛇，没鼻子的邪恶巫师 - `goto`命令既伟大又可怕，如果不明智地使用。
- en: It’s powerful, in that you can create effects, and improve efficiency (in some
    cases) in ways that are impossible via any other means. It’s dangerous also, in
    that you’ve no longer got a predictable order of operations - during execution
    the pointer can jump to an arbitrary point in the codebase, irrespective of whether
    it makes any sense at all to do so. Used improperly, you could end up with inexplicable,
    hard to debug issues in your codebase.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 它很强大，可以通过其他任何方式无法实现的方式创建效果，并在某些情况下提高效率。但它也很危险，因为在执行期间，指针可以跳转到代码库中的任意点，而不管这样做是否有任何意义。如果使用不当，您可能会在代码库中遇到难以解释和难以调试的问题。
- en: Use the `goto` statement with great caution.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 请非常谨慎地使用`goto`语句。
- en: There is a third option too, which requires quite a bit more boilerplate, but
    ultimately looks a little friendlier than the previous versions.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 还有第三个选项，需要相当多的样板代码，但最终看起来比之前的版本友好一些。
- en: Have a look, and see what you think.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 看一看，看看你的想法如何。
- en: Custom Iterator
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义迭代器
- en: The third option is to hack around with `IEnumerables` and `IEnumerators`. The
    thing about `IEnumerables` is they aren’t actually arrays, they’re just pointers
    to the “current” item of data, and an instruction on how to go and fetch the next
    item. That being the case, we can create our own implementation of the IEnumerable
    interface, but with our own behavior.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个选项是在`IEnumerables`和`IEnumerators`上进行调试。关于`IEnumerables`的一点是它们实际上并不是数组，它们只是指向数据“当前”项的指针，并包含如何获取下一项的指令。因此，我们可以创建自己的`IEnumerable`接口实现，但具有自己的行为。
- en: In the case of our Monopoly example, we want an `IEnumerable` that’s going to
    iterate until the user has selected a method to get out of jail, or else rolled
    a double.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的大富翁示例中，我们希望有一个`IEnumerable`，它将迭代直到用户选择了一个方法来摆脱监狱，或者投掷了双倍。
- en: 'We start by creating an implementation of `IEnumereable` itself, which only
    has a single function that has to be impemented: `GetEnumerator()`. The `IEnumerator`
    is the class that sits behind the scenes and actually does the work of enumerating.
    That’s what we’ll move onto next.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建`IEnumereable`的实现，它只有一个必须实现的函数：`GetEnumerator()`。`IEnumerator`是实际进行枚举工作的类，这是我们接下来要讨论的内容。
- en: Anatomy of an Enumerator
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 枚举器的解剖
- en: 'This is what the `IEnumerator` Interface effectively looks like (It inherits
    a few functions from other Interfaces, so a couple of these funtions are here
    to satisfy the inheritance requirements):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上就是`IEnumerator`接口的样子（它继承了一些其他接口的函数，因此这里有一些函数是为了满足继承要求而存在的）：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Each of these functions has a very specific job to do:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 每个这些函数都有一个非常具体的工作要做：
- en: Table 9-1\. Component functions of IEnumerator
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 表9-1\. IEnumerator的组成函数
- en: '| Function | Behavior | Returns |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| Function | Behavior | Returns |'
- en: '| --- | --- | --- |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Current | Get the current data item | The current item, or null if iteration
    hasn’t started yet |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| Current | 获取当前数据项 | 当前项，或者如果迭代尚未开始则为null |'
- en: '| IEnumerator.Current | As Current, this is the same item, referenced from
    another Interface that IEnumerable implements | As Current |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| IEnumerator.Current | 作为当前项，这是从IEnumerable实现的另一个接口引用的相同项 | 作为当前项 |'
- en: '| Dispose | break down everything in the Enumerable to implement IEnumerator
    | Void |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| Dispose | 将Enumerable中的所有内容拆分以实现IEnumerator | Void |'
- en: '| MoveNext | Move to the next item | True if another item is found, false if
    the enumeration process is complete |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| MoveNext | 移动到下一项 | 如果找到另一个项则为true，如果枚举过程完成则为false |'
- en: '| Reset | Move back to the beginning of the data set | void |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| Reset | 回到数据集的开头 | void |'
- en: 'Most of the time, an `Enumerator` is simply enumerating over an array, in which
    case I’d imagine the implementation *probably* should probably be something vaguely
    like this:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，`Enumerator`只是在数组上进行枚举，这种情况下，我想实现可能应该大致如下：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: I expect the real code by Microsoft is likely far more complicated than this
    - you’d hope there would be a lot more error handling and parameter checking,
    but this simple implementation gives you an idea of what sort of a job it is that
    the `Enumerator` does.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为微软的实际代码可能比这复杂得多——你希望有更多的错误处理和参数检查，但这个简单的实现给出了`Enumerator`的工作内容的一个概念。
- en: Implementing Custom Enumerators
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现自定义枚举器
- en: 'Knowing how it works under the surface, you can see how it’s possible to implement
    any behavior whatsoever that you’d like in an `Enumerable`. I’ll show you a few
    examples of how powerful this technique can be by by creating an `IEnumerable`
    implementation that only iterates through every *other* item in an array by putting
    the following code in `MoveNext`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 知道它在表面下如何工作，你就可以看到如何在`Enumerable`中实现任何你想要的行为。我将通过创建一个`IEnumerable`实现来展示这种技术有多强大，它只通过在`MoveNext`中放入以下代码来遍历数组中每个*其他*项：
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'How about an `Enumerator` that loops over every item twice, effectively creating
    a duplicate of each item when enumerating:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 怎么样，一个可以在枚举时每个项目循环两次的`Enumerator`，实际上创建了每个项目的副本：
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Or an entire implementation that goes backwards, starting with an Enumerator
    outer wrapper:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 或者一个完整的实现，倒着开始，以`Enumerator`外部包装器为开始：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And aftwards the actual `Enumerator` that drives the backwards motion:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是驱动反向运动的实际`Enumerator`：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The usage of this backwards enumerable is pretty much exactly the same as a
    normal enumerable:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个逆向枚举的使用方式几乎与普通枚举完全相同：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: So, now that you’ve seen how easy it is to create your own `Enumerable` with
    whatever custom behavior you want, it should be easy enough to conjure up an `Enumerable`
    that iterates indefinitely.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在你已经看到了如何轻松地创建自己想要的任何自定义行为的`Enumerable`，应该很容易制造一个迭代无限的`Enumerable`。
- en: Indefinitely Looping Enumerables
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无限循环的可枚举
- en: Try saying this section title ten times fast!
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 试试看快速连续说十遍这个章节标题！
- en: As you saw in the previous section though, there’s no special reason that an
    `Enumerable` has to start at the beginning and loop to the end. We can make it
    behave in absolutely any way we care to.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在上一节中看到的，其实`Enumerable`并没有特别的原因必须从头开始循环到结尾。我们可以让它表现得任何我们想要的方式。
- en: What I want to do in this case, is - instead of an array - I want to pass in
    a single state object of some kind, along with a bundle of code (i.e. a Thunk,
    or `Func` delegate) for determining whether the loop should continue or not.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我想要做的是——而不是一个数组——我想要传递一种单一的状态对象，以及一个用于确定循环是否应该继续的代码束（即Thunk或`Func`委托）。
- en: Working backwards, the first thing I’ll make is the `Enumerator`. This is an
    entirely bespoke enumeration process, so I’m not going to make any effort to make
    it generic in any way. The logic I’m writing wouldn’t make sense outside of a
    game state object.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 逆向工作，我要做的第一件事是`Enumerator`。这是一个完全定制的枚举过程，所以我不会试图以任何方式使其通用化。我正在编写的逻辑在游戏状态对象之外是没有意义的。
- en: I might want to do several different iterations in my hypothetical Monopoly
    implementation though, so I’ll make the operation and loop termination logic somewhat
    generic.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在我的假想的大富翁实现中，我可能想要进行几次不同的迭代，所以我会使操作和循环终止逻辑稍微通用化。
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: That’s the hard bit done!! We have an engine under the surface that’ll allow
    us to iterate through successive states until we’re finished - whatever we decide
    “finished” means.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了困难的部分！我们有一个引擎在表面下，它允许我们迭代连续的状态，直到我们完成为止——无论我们决定“完成”意味着什么。
- en: 'Next item required is the `IEnumerable` to run the `Enumerator`. That’s pretty
    straightforward:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个需要的项目是运行`Enumerator`的`IEnumerable`。那非常简单：
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Everything is now in place to carry out a custom iteration. I just need to define
    my custom logic, set up the iterator.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一切都准备就绪，可以执行自定义迭代了。我只需要定义我的自定义逻辑，设置迭代器。
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: There are a couple of options for how to handle the iteration itself, and I’d
    like to take a little time out to discuss each of those options in more detail.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种处理迭代本身的选项，我想花点时间讨论每个选项的细节。
- en: Using Indefinite Iterators
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用无限迭代器
- en: Strictly speaking, as a fully-fledged `Iterator` any LINQ operation can be applied,
    as well as a standard `ForEach` iteration.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 严格来说，作为一个完全成熟的`Iterator`，可以应用任何LINQ操作，以及标准的`ForEach`迭代。
- en: '`ForEach` would probably be the simplest way to handle this iteration, but
    it wouldn’t be strictly functional. It’s up to you, if you want to compromise
    by adding a statement in a limited capacity, or want to seek out a more purely
    functional alternative. It might look like this:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`ForEach` 可能是处理这种迭代最简单的方法，但它并不严格符合函数式编程的要求。这取决于你，如果你愿意通过添加一个有限的语句来妥协，或者想寻找一个更纯粹的函数式替代方案。可能会像这样：'
- en: '[PRE15]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: That wouldn’t give me too many causes for concern in production code, honestly.
    But, what we’ve done is negated all of the work we’ve put into attempting to get
    rid of non-functional code from our codebase.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 老实说，在生产代码中，这不会让我太担心。但是，我们所做的是否定了我们在试图从代码库中清除非函数式代码方面所做的所有工作。
- en: The other options involve the use of LINQ. As a fully-fledged `Enumerable`,
    our GameIterator can have any LINQ operations applied to it. Which ones would
    be the best, though?
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种选择涉及使用 LINQ。作为一个完整的 `Enumerable`，我们的 `GameIterator` 可以应用任何 LINQ 操作。但哪些才是最好的呢？
- en: '`Select` would be an obvious starting place, but it might not entirely behave
    as you’d expect. Usage is pretty much the same as any normal `Select` list operation
    you’ve ever done before:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`Select` 是一个明显的起点，但它可能不完全按照你的预期行为。用法基本上与你以前进行的任何普通 `Select` 列表操作一样：'
- en: '[PRE16]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The trick here is that we’re treating gameIterator as an array, so `Select`
    -ing from it will result in an array of game states. What you’ll basically have
    is an array of every intermediate step the user has gone through, finishing with
    the final state in the last element.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的诀窍在于我们将 `gameIterator` 视为一个数组，因此从中进行 `Select` 将会得到一个游戏状态数组。基本上，你会得到一个包含用户经历的每一个中间步骤的数组，最后一个元素是最终状态。
- en: 'The easy way to reduce this down to simply the final state is to substitute
    `Select` for `Last`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 将这简化为仅仅最终状态的简单方法是用 `Last` 替代 `Select`：
- en: '[PRE17]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This assumes, of course that you aren’t interested in the intermediate steps.
    It might be that you want to compose a message to the user for each state update,
    in which case you might want to select, and provide a transformation.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这假设你对中间步骤不感兴趣。也许你想为每个状态更新向用户发送一条消息，那么你可能想选择并提供一个转换。
- en: 'Something like this, perhaps:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 或许是这样的：
- en: '[PRE18]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'That eradicates the actual game state, though, so possibly `Aggregate` might
    be a better option:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，这会消除实际的游戏状态，因此可能 `Aggregate` 是一个更好的选择：
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The *x* in each iteration of the `Aggregate` process is an updated version of
    the Game State, and it’ll carry on aggregating until the declared end condition
    is met. Each pass appends a message to the list, so what you finally get at the
    end is a `Tuple` containing an array of strings, which are messages to pass to
    the player, and the final version of the game state.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`Aggregate` 过程中每次迭代中的 *x* 是游戏状态的更新版本，它将继续聚合，直到满足声明的结束条件。每次迭代都会向列表附加一条消息，因此最终你得到的是一个包含要传递给玩家的消息数组和游戏状态的
    `Tuple`。'
- en: Bear in mind that any use of LINQ statements that will terminate the iteration
    early in some manner - `First`, `Take`, etc. will also premeturely end this iteration
    proces, possibly in our instance with the player still in jail.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，任何使用 LINQ 语句的地方都会以某种方式提前终止迭代 - `First`、`Take` 等，这可能导致我们的实例中玩家仍然处于监狱中的迭代过程提前结束。
- en: Of course, this might be a behavior you actually want! For example, maybe you’re
    restricting the player to just a couple of actions before moving onto another
    part of the game, or another player’s turn. Something like that.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这可能是你实际想要的行为！例如，也许你限制玩家在继续游戏的另一部分或另一位玩家的回合之前只能进行几个动作。类似这样的情况。
- en: There are all sorts of possibilities for the logic you could come up with, playing
    with this technique.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种技术中，你可以提出各种逻辑可能性。
- en: Conclusion
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: We’ve looked into how we can implement indefinite iteration in C# without making
    use of the `ForEach` statement, which results in cleaner code with fewer possible
    side effects of execution.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经研究了如何在 C# 中实现无限迭代，而不使用 `ForEach` 语句，这将导致代码更清晰，执行过程中的副作用更少。
- en: It’s not strictly possible to do this purely functionally, and several options
    are available - all of which carry some level of compromise to the functional
    paradigm, but this is the nature of working in C#.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 纯函数式地做这件事情是不太可能的，有几种选择可供选择 - 所有这些选项在某种程度上都对函数式范式进行了妥协，但这就是在 C# 中工作的本质。
- en: Which option - if any - you wish to make use of is entirely a matter of personal
    choice and whatever constraints apply to your project.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 你希望使用哪种选项（如果有的话），完全取决于个人选择以及适用于你的项目的任何约束条件。
- en: Please be very cautious with the use of recursion, though. It’s a fast method
    of iteration that’s purely functional, but if you aren’t careful, it can lead
    to significant performance issues when it comes to memory usage.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，请在使用递归时非常小心。它是一种快速的迭代方法，完全函数化，但如果不小心，可能会导致内存使用方面的显著性能问题。
- en: In the next chapter, I’ll look at a nice way to take advantage of pure functions
    to improve performance in your algorithms.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我将介绍一种利用纯函数优化算法性能的好方法。
- en: ^([1](ch09.html#idm45400850401728-marker)) This probably doesn’t work in countries
    like india. INR 50 won’t get you much. This said, do you *really* think you can
    buy a whole street for even as much as $200!
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch09.html#idm45400850401728-marker)) 这在印度等国家可能行不通。50印度卢比不会带给你太多。这也就意味着，你*真的*认为你能用200美元买整条街吗！
