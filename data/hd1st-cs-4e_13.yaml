- en: 'Unity Lab #4: User Interfaces'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unity实验室＃4：用户界面
- en: In the last Unity Lab you started to build a game, using a prefab to crate GameObject
    instances that appear at random points in your game’s 3D space and fly in circles.
    This Unity Lab picks up where the last one left off, allowing you to apply what
    you’ve learned about interfaces in C# and more.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个Unity实验室中，你开始构建一个游戏，使用预制体来创建在游戏的3D空间中随机点出现并绕圈飞行的GameObject实例。这个Unity实验室继续了上一个实验室的工作，允许你应用你在C#中学到的关于界面的知识等等。
- en: Your program so far is an interesting visual simulation. The goal of this Unity
    Lab is to **finish building the game**. It starts off with a score of zero. Billiard
    balls will start to appear and fly around the screen. When the player clicks on
    a ball, the score goes up by 1 and the ball disappears. More and more balls appear;
    once 15 balls are flying around the screen, the game ends. For your game to work,
    your players need a way to start it and to play again once the game is over, and
    they’ll want to see their score as they click on the balls. So you’ll add a **user
    interface** that displays the score in the corner of the screen, and shows a button
    to start a new game.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你的程序是一个有趣的视觉模拟。这个Unity实验室的目标是**完成游戏的构建**。游戏从零分开始。台球将开始出现并在屏幕上飞动。当玩家点击一个球时，分数会增加1分并且球会消失。越来越多的球会出现；一旦屏幕上有15个球在飞动，游戏就会结束。为了使你的游戏运行起来，玩家需要一种启动游戏的方式，并且在游戏结束后能够再次玩游戏，并且他们希望在点击球时能看到自己的得分。因此，你将在屏幕角落添加一个显示分数的**用户界面**，并显示一个按钮来启动新游戏。
- en: Add a score that goes up when the player clicks a ball
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一个在玩家点击球时增加分数的功能
- en: 'You’ve got a really interesting simulation. Now it’s time to turn it into a
    game. **Add a new field** to the GameController class to keep track of the score—you
    can add it just below the OneBallPrefab field:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你有一个非常有趣的模拟器。现在是将其转变成游戏的时候了。在GameController类中**添加一个新字段**来跟踪分数 —— 你可以将其添加在OneBallPrefab字段的下方：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, **add a method called ClickedOnBall to the GameController class**. This
    method will get called every time the player clicks on a ball:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，**在GameController类中添加一个名为ClickedOnBall的方法**。每次玩家点击一个球时，该方法将被调用：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Unity makes it really easy for your GameObjects to respond to mouse clicks
    and other input. If you add a method called OnMouseDown to a script, Unity will
    call that method any time the GameObject it’s attached to is clicked. **Add this
    method to the** **OneBallBehaviour** **class**:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Unity使得你的GameObject能够很容易地响应鼠标点击和其他输入。如果你在一个脚本中添加一个名为OnMouseDown的方法，Unity将在每次点击附加到它的GameObject时调用该方法。**将此方法添加到OneBallBehaviour类中**：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The first line of the OnMouseDown method gets the instance of the GameController
    class, and the second line calls its ClickedOnBall method, which increments its
    Score field.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: OnMouseDown方法的第一行获取GameController类的实例，第二行调用它的ClickedOnBall方法，该方法增加其Score字段。
- en: Now run your game. Click on Main Camera in the hierarchy and watch its Game
    Controller (Script) component in the Inspector. Click on some of the rotating
    balls—they’ll disappear and the Score will go up.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行你的游戏。点击层级中的Main Camera并观察检查器中的Game Controller（脚本）组件。点击一些旋转的球 —— 它们会消失，而得分会增加。
- en: '![Images](assets/454fig01.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![Images](assets/454fig01.png)'
- en: Add two different modes to your game
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 给你的游戏添加两种不同的模式
- en: Start up your favorite game. Do you immediately get dropped into the action?
    Probably not—you’re probably looking at a start menu. Some games let you pause
    the action to look at a map. Many games let you switch between moving the player
    and working with an inventory, or show an animation while the player is dying
    that can’t be interrupted. These are all examples of **game modes**.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 启动你最喜欢的游戏。你是不是立刻投入到了动作中？可能不是 —— 你可能在看起始菜单。有些游戏允许你暂停动作来查看地图。许多游戏允许你在移动玩家和使用库存之间切换，或者在玩家死亡时显示无法中断的动画。这些都是**游戏模式**的例子。
- en: '**You’ll add two modes to your game. You already have the “running” mode, so
    now you just need to add a “game over” mode.**'
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**你将为你的游戏添加两种模式。你已经有“运行”模式了，现在只需要添加一个“游戏结束”模式。**'
- en: 'Let’s add two different modes to your billiard ball game:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为你的台球游戏添加两种不同的模式：
- en: '**Mode #1: The game is running.** Balls are being added to the scene, and clicking
    on them makes them disappear and the score go up.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模式＃1：游戏正在运行。** 球正在被添加到场景中，点击它们会使它们消失并增加分数。'
- en: '**Mode #2: The game is over.** Balls are no longer getting added to the scene,
    clicking on them doesn’t do anything, and a “Game over” banner is displayed.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模式＃2：游戏结束。** 球不再添加到场景中，点击它们不会有任何效果，并显示“游戏结束”横幅。'
- en: '![Images](assets/455fig01.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/455fig01.png)'
- en: 'Here’s how you’ll add the two game modes to your game:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你将两种游戏模式添加到游戏中的方法：
- en: '***Make GameController.AddABall pay attention to the game mode.***'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '***使GameController.AddABall注意游戏模式。***'
- en: Your new and improved AddABall method will check if the game is over, and will
    only instantiate a new OneBall prefab if the game is not over.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你的新改进的AddABall方法将检查游戏是否结束，只有在游戏未结束时才会实例化一个新的OneBall预制件。
- en: '***Make OneBallBehaviour.OnMouseDown only work when the game is running.***'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '***使OneBallBehaviour.OnMouseDown仅在游戏运行时起作用。***'
- en: When the game is over, we want the game to stop responding to mouse clicks.
    The player should just see the balls that were already added continue to circle
    until the game restarts.
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当游戏结束时，我们希望游戏不再响应鼠标点击。玩家应该只能看到已经添加的球继续在周围旋转，直到游戏重新开始。
- en: '***Make GameController.AddABall end the game when there are too many balls.***'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '***使GameController.AddABall在球太多时结束游戏。***'
- en: AddABall also increments its NumberOfBalls counter, so it goes up by 1 every
    time a ball is added. If the value reaches MaximumBalls, it sets GameOver to true
    to end the game.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: AddABall还会增加其NumberOfBalls计数器，每添加一个球，该计数器将增加1。如果值达到MaximumBalls，它会将GameOver设置为true，以结束游戏。
- en: Note
  id: totrans-27
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**In this lab, you’re building this game in parts, and making changes along
    the way. You can download the code for each part from the book’s GitHub repository:
    [https://github.com/head-first-csharp/fourth-edition](https://github.com/head-first-csharp/fourth-edition).**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**在这个实验中，你将逐步构建这个游戏，并进行途中的更改。你可以从书本的GitHub存储库下载每个部分的代码：[https://github.com/head-first-csharp/fourth-edition](https://github.com/head-first-csharp/fourth-edition)。**'
- en: Add game mode to your game
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向你的游戏中添加游戏模式
- en: Modify your GameController and OneBallBehaviour classes to **add modes to your
    game** by using a Boolean field to keep track of whether or not the game is over.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 修改你的GameController和OneBallBehaviour类，通过使用布尔字段来追踪游戏是否结束，**为你的游戏添加模式**。
- en: '***Make GameController.AddABall pay attention to the game mode.***'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '***使GameController.AddABall注意游戏模式。***'
- en: 'We want the GameController to know what mode the game is in. When we need to
    keep track of what an object knows, we use fields. Since there are two modes—running
    and game over—we can use a Boolean field to keep track of the mode. **Add the
    GameOver field** to your GameController class:'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们希望GameController知道游戏处于什么模式。当我们需要追踪对象知道的信息时，我们使用字段。因为有两种模式——运行和游戏结束——我们可以使用布尔字段来追踪模式。**在你的GameController类中添加GameOver字段**：
- en: '[PRE3]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The game should only add new balls to the scene if the game is running. Modify
    the AddABall method to add an `if` statement that only calls Instantiate if GameOver
    is not true:'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当游戏运行时，游戏应仅向场景中添加新球。修改AddABall方法，添加一个`if`语句，仅在GameOver不为真时调用Instantiate：
- en: '[PRE4]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now you can test it out. Start your game, then **click on Main Camera** in the
    Hierarchy window.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以测试一下。启动游戏，然后在层次视图窗口中**点击主摄像机**。
- en: '![Images](assets/pg456-01.png)'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图像](assets/pg456-01.png)'
- en: Set the GameOver field by unchecking the box in the Script component. The game
    should stop adding balls until you check the box again.
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过取消脚本组件中的复选框来设置GameOver字段。直到再次勾选该框，游戏才会停止添加球。
- en: '***Make OneBallBehaviour.OnMouseDown only work when the game is running.***'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '***使OneBallBehaviour.OnMouseDown仅在游戏运行时起作用。***'
- en: 'Your OnMouseDown method already calls the GameController’s ClickedOnBall method.
    Now **modify OnMouseDown in OneBallBehaviour** to use the GameController’s GameOver
    field as well:'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你的OnMouseDown方法已经调用了GameController的ClickedOnBall方法。现在，**修改OneBallBehaviour中的OnMouseDown**方法，也使用GameController的GameOver字段：
- en: '[PRE5]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Run your game again and test that balls disappear and the score goes up only
    when the game is not over.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 再次运行你的游戏，并测试只有在游戏未结束时球消失并且分数上升。
- en: '***Make GameController.AddABall end the game when there are too many balls.***'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '***使GameController.AddABall在球太多时结束游戏。***'
- en: 'The game needs to keep track of the number of balls in the scene. We’ll do
    this by **adding two fields** to the GameController class to keep track of the
    current number of balls and the maximum number of balls:'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 游戏需要跟踪场景中球的数量。我们将通过向GameController类添加两个字段来实现这一点，以跟踪当前球的数量和最大球的数量：
- en: '[PRE6]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Every time the player clicks on a ball, the ball’s OneBallBehaviour script
    calls GameController.ClickedOnBall to increment (add 1 to) the score. Let’s also
    decrement (subtract 1 from) NumberOfBalls:'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每当玩家点击球时，球的OneBallBehaviour脚本会调用GameController.ClickedOnBall来增加（加1到）分数。让我们也减少（从中减1）NumberOfBalls：
- en: '[PRE7]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now **modify the AddABall** method so that it only adds balls if the game is
    running, and ends the game if there are too many balls in the scene:'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在 **修改 AddABall 方法**，只有在游戏运行时才添加球，并且如果场景中球太多则结束游戏：
- en: '![Images](assets/457fig024.png)'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/457fig024.png)'
- en: Now test your game one more time by running it and then clicking on Main Camera
    in the Hierarchy window. The game should run normally, but as soon as the NumberOfBalls
    field is equal to the MaximumBalls field, the AddABall method sets its GameOver
    field to true and ends the game.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在通过运行游戏并在 Hierarchy 窗口点击 Main Camera 来再次测试游戏。游戏应该正常运行，但一旦 NumberOfBalls 字段等于
    MaximumBalls 字段时，AddABall 方法将其 GameOver 字段设置为 true 并结束游戏。
- en: '![Images](assets/pg457-01.png)'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/pg457-01.png)'
- en: Once that happens, clicking on the balls doesn’t do anything because OneBallBehaviour.OnMouseDown
    checks the GameOver field and only increments the score and destroys the ball
    if GameOver is false.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦这种情况发生，点击球不会有任何作用，因为 OneBallBehaviour.OnMouseDown 检查 GameOver 字段，仅在 GameOver
    为 false 时增加分数并销毁球。
- en: '**Your game needs to keep track of its game mode. Fields are a great way to
    do that.**'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**您的游戏需要跟踪其游戏模式。字段是实现这一点的好方法。**'
- en: Add a UI to your game
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为您的游戏添加一个 UI
- en: Almost any game you can think of—from Pac Man to Super Mario Brothers to Grand
    Theft Auto 5 to Minecraft—features a **user interface (or UI)**. Some games, like
    Pac Man, have a very simple UI that just shows the score, high score, lives left,
    and current level. Many games feature an intricate UI incorporated into the game’s
    mechanics (like a weapon wheel that lets the player quickly switch between weapons).
    Let’s add a UI to your game.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎任何你能想到的游戏 —— 从 Pac Man 到 Super Mario Brothers 到 Grand Theft Auto 5 到 Minecraft
    —— 都包含了一个 **用户界面（或 UI）**。一些游戏，如 Pac Man，有一个非常简单的 UI，只显示得分、最高分、剩余生命和当前级别。许多游戏特别在游戏机制中加入了复杂的
    UI（比如武器轮让玩家快速切换武器）。让我们为您的游戏添加一个 UI。
- en: '**Choose *UI >> Text* from the GameObject menu** to add a 2D Text GameObject
    to your game’s UI. This adds a Canvas to the Hierarchy, and a Text under that
    Canvas:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**从 GameObject 菜单选择 *UI >> Text*，以向游戏的 UI 添加一个 2D Text GameObject。这将在 Hierarchy
    中添加一个 Canvas，并在该 Canvas 下添加一个 Text：**'
- en: '![Images](assets/458fig01.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/458fig01.png)'
- en: Double-click on Canvas in the Hierarchy window to focus on it. It’s a 2-D rectangle.
    Click on its Move Gizmo and drag it around the scene. It won’t move! The Canvas
    that was just added will always be displayed, scaled to the size of the screen
    and in front of everything else in the game.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Hierarchy 窗口双击 Canvas 以聚焦它。它是一个二维矩形。点击它的 Move Gizmo 并在场景中拖动它。它不会移动！刚添加的 Canvas
    将始终显示，按照屏幕大小缩放，并位于游戏中其他所有内容的前面。
- en: '![Images](assets/458fig02.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/458fig02.png)'
- en: Note
  id: totrans-60
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Did you notice an EventSystem in the Hierarchy? Unity automatically added it
    when you created the UI. It manages mouse, keyboard, and other inputs and sends
    them back to GameObjects—and it does all of that automatically, so you won’t need
    to work directly with it.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Hierarchy 中注意到了 EventSystem 吗？Unity 在创建 UI 时会自动添加它。它管理鼠标、键盘和其他输入，并将它们发送回 GameObjects
    —— 所有这些都是自动完成的，因此您不需要直接与它交互。
- en: Then double-click on Text to focus on it—the editor will zoom in, but the default
    text (“New Text”) will be backward because the Main Camera is pointing at the
    back of the Canvas.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然后双击 Text 以聚焦它 —— 编辑器会放大，但默认文本（“New Text”）将会是反向的，因为 Main Camera 正对着 Canvas 的后面。
- en: Note
  id: totrans-63
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'A Canvas is a two-dimensional GameObject that lets you lay out your game’s
    UI. Your game’s Canvas will have two GameObjects nested under it: the Text GameObject
    that you just added will be in the upper-right corner to display the score, and
    there’s a Button GameObject to let the player start a new game.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Canvas 是一个二维 GameObject，可让您布置游戏的用户界面。您游戏的 Canvas 将有两个嵌套的 GameObjects：刚添加的 Text
    GameObject 将位于右上角显示分数，还有一个 Button GameObject 允许玩家开始新游戏。
- en: Use the 2D view to work with the Canvas
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 2D 视图来操作 Canvas
- en: 'The **2D button** at the top of the Scene window toggles 2D view on and off:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Scene 窗口顶部的 **2D 按钮** 切换 2D 视图的开和关：
- en: '![Images](assets/458fig03.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/458fig03.png)'
- en: Click the 2D view—the editor flips around its view to shows the canvas head-on.
    **Double-click on Text** in the Hierarchy window to zoom in on it.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 2D 视图 —— 编辑器会转到正面显示 Canvas。在 Hierarchy 窗口双击 Text 以放大它。
- en: '![Images](assets/458fig04.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/458fig04.png)'
- en: Note
  id: totrans-70
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Use the mouse wheel to zoom in and out in 2D view
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用鼠标滚轮在 2D 视图中进行缩放
- en: You can **click the 2D button to switch between 2D and 3D**. Click it again
    to return to the 3D view.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 2D 按钮可在 2D 和 3D 视图之间切换。再次点击可返回 3D 视图。
- en: Set up the Text that will display the score in the UI
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置在UI中显示分数的文本
- en: Your game’s UI will feature one Text GameObject and one Button. Each of those
    GameObjects will be **anchored** to a different part of the UI. For example, the
    Text GameObject that displays the score will show up in the upper-right corner
    of the screen (no matter how big or small the screen is).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您的游戏UI将包含一个Text GameObject和一个Button。每个GameObject都将**锚定**在UI的不同部分。例如，显示分数的Text
    GameObject将显示在屏幕的右上角（无论屏幕大小如何）。
- en: Click on Text in the Hierarchy window to select it, then look at the Rect Transform
    component. We want the Text in the upper-right corner, so **click the Anchors
    box** in the Rect Transform panel.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 点击Hierarchy窗口中的Text以选择它，然后查看Rect Transform组件。我们希望文本显示在右上角，因此**点击Rect Transform面板中的锚点框**。
- en: '![Images](assets/459fig001.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/459fig001.png)'
- en: The Anchor Presets window lets you anchor your UI GameObjects to various parts
    of the Canvas. **Hold down Alt and Shift** (or Option+Shift on a Mac) and **choose
    the top right anchor preset**. Click the same button you used to bring up the
    Anchor Presets window. The Text is now in the upper-right corner of the Canvas—double-click
    on it again to zoom into it.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 锚点预设窗口允许您将UI GameObject锚定到Canvas的各个部分。**按住Alt和Shift**（或Mac上的Option+Shift），然后**选择右上角的锚点预设**。再次单击与打开锚点预设窗口相同的按钮。现在文本位于Canvas的右上角——再次双击它以放大查看。
- en: '![Images](assets/459fig01.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/459fig01.png)'
- en: Let’s add a little space above and to the right of the Text. Go back to the
    Rect Transform panel and **set both Pos X and Pos Y to –10** to position the text
    10 units to the left and 10 down from the top-right corner. Then **set the Alignment
    on the Text component to right**, and use the box at the top of the Inspector
    to **change the GameObject’s name to** `**Score**`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在文本的上方和右侧添加一点空间。返回到Rect Transform面板，将Pos X和Pos Y都设置为-10，以便将文本定位在距右上角左10个单位和下10个单位的位置。然后将Text组件上的Alignment设置为right，并使用检查器顶部的框**将游戏对象的名称更改为**
    `**Score**`。
- en: '![Images](assets/459fig02.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/459fig02.png)'
- en: Your new Text should now show up in the Hierarchy window with the name Score.
    It should now be right-aligned, with a small gap between the edge of the Text
    and the edge of the Canvas.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您的新文本现在应该显示在Hierarchy窗口中，并带有名称Score。它现在应该右对齐，文本边缘与Canvas边缘之间有一小段距离。
- en: '![Images](assets/459fig03.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/459fig03.png)'
- en: Add a button that calls a method to start the game
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一个调用方法以启动游戏的按钮
- en: 'When the game is in its “game over” mode, it will display a button labeled
    Play Again that calls a method to restart the game. **Add an empty StartGame method**
    to your GameController class (we’ll add its code later):'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当游戏处于“游戏结束”模式时，它将显示一个标有“Play Again”的按钮，该按钮调用一个方法以重新启动游戏。**向您的GameController类添加一个空的StartGame方法**（稍后我们将添加其代码）：
- en: '[PRE8]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Click on Canvas in the Hierarchy window** to focus on it. Then **choose UI
    >> Button** from the GameObject menu to add a Button. Since you’re already focused
    on the Canvas, the Unity editor will add the new Button and anchor it to the center
    of the Canvas. Did you notice that Button has a triangle next to it in the Hierarchy?
    Expand it—there’s a TextGameObject nested under it. Click on it and set its text
    to `Play Again`.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**点击Hierarchy窗口中的Canvas**以将焦点放在它上面。然后从GameObject菜单中选择UI >> Button添加一个按钮。由于您已经专注于Canvas，Unity编辑器将添加新的Button并将其锚定到Canvas的中心。您注意到Hierarchy中的Button旁边有一个三角形吗？展开它——它下面嵌套了一个TextGameObject。点击它并将其文本设置为`Play
    Again`。'
- en: '![Images](assets/460fig01.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/460fig01.png)'
- en: Now that the Button is set up, we just need to make it call the StartGame method
    on the GameController object attached to the Main Camera. A UI button is ***just
    a GameObject with a Button component***, and you can use its On Click () box in
    the Inspector to hook it up to an event handler method. Click the ![Images](assets/460fig02.png)
    button at the bottom of the On Click () box to add an event handler, then **drag
    Main Camera onto the None (Object) box**.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮设置好后，我们只需让它在附加到主摄像机上的GameController对象上调用StartGame方法。UI按钮只是一个带有Button组件的游戏对象，您可以使用检查器中的其On
    Click()框来将其连接到事件处理程序方法。点击On Click()框底部的![图片](assets/460fig02.png)按钮添加事件处理程序，然后**将主摄像机拖放到None（Object）框上**。
- en: '![Images](assets/460fig03.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/460fig03.png)'
- en: Now the Button knows which GameObject to use for the event handler. Click the
    ![Images](assets/460fig04.png) dropdown and choose **GameController >> StartGame**.
    Now when the player presses the button, it will call the StartGame method on the
    GameController object hooked up to the Main Camera.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在按钮知道要使用哪个游戏对象作为事件处理程序。点击![图片](assets/460fig04.png)下拉菜单，选择**GameController
    >> StartGame**。现在当玩家按下按钮时，它将调用附加到主摄像机的GameController对象上的StartGame方法。
- en: '![Images](assets/460fig05.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/460fig05.png)'
- en: Make the Play Again button and Score Text work
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使“再玩一次”按钮和得分文本起作用
- en: 'Your game’s UI will work like this:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你游戏的UI将会像这样工作：
- en: The game starts in the game over mode.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏从游戏结束模式开始。
- en: Clicking the Play Again button starts the game.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击“再玩一次”按钮开始游戏。
- en: Text in the upper-right corner of the screen displays the current score.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 屏幕右上角的文本显示当前得分。
- en: 'You’ll be using the Text and Button classes in your code. They’re in the UnityEngine.UI
    namespace, so **add this** `**using statement**` to the top of your GameController
    class:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在代码中使用Text和Button类。它们位于UnityEngine.UI命名空间中，所以**在GameController类的顶部添加这个** `**using语句**`：
- en: '[PRE9]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now you can add Text and Button fields to your GameController (just above the
    OneBallPrefab field):'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以在你的GameController中添加Text和Button字段（就在OneBallPrefab字段的上方）：
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Click on Main Camera** in the Hierarchy window. **Drag the Text GameObject**
    out of the Hierarchy and ***onto*** the Score Text field in the Script component,
    **then drag the Button GameObject** *onto* the Play Again Button field.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在层次视图中**点击主摄像机**。**将文本游戏对象**从层次结构中拖出，并***放置到***脚本组件的得分文本字段上，**然后将按钮游戏对象** *放置到*“再玩一次”按钮字段上。
- en: '![Images](assets/461fig01.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/461fig01.png)'
- en: 'Go back to your GameController code and **set the GameController field’s default
    value to true**:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 回到你的GameController代码，并**将GameController字段的默认值设置为true**：
- en: '[PRE11]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-105
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Change this from false to true.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个从false修改为true。
- en: Now go back to Unity and check the Script component in the Inspector.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在回到Unity，并检查检视器中的脚本组件。
- en: '***Hold on, something’s wrong!***'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '***等等，出了点问题！***'
- en: '![Images](assets/461fig02.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/461fig02.png)'
- en: 'The Unity editor still shows the Game Over checkbox as unchecked—it didn’t
    change the field value. Make sure to check the box so your game starts in the
    game over mode:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Unity编辑器仍然显示未选中游戏结束复选框，它没有改变字段值。确保勾选复选框，这样你的游戏将从游戏结束模式开始：
- en: '![Images](assets/461fig03.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/461fig03.png)'
- en: Now the game will start in the game over mode, and the player can click the
    Play Again button to start playing.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在游戏将以游戏结束模式开始，玩家可以点击“再玩一次”按钮开始游戏。
- en: Finish the code for the game
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成游戏的代码
- en: 'The GameController object attached to the Main Camera keeps track of the score
    in its Score field. **Add an Update method to the GameController class** to update
    the Score Text in the UI:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 主摄像机附加的GameController对象在其Score字段中跟踪得分。**在GameController类中添加一个Update方法**来更新UI中的得分文本：
- en: '[PRE12]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, **modify your GameController.AddABall method** to enable the Play Again
    button when it ends the game:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，**修改你的GameController.AddABall方法**以在游戏结束时启用“再玩一次”按钮：
- en: '[PRE13]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-118
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**Every GameObject has a property called gameObject that lets you manipulate
    it. You’ll use its SetActive method to make the Play Again button visible or invisible.**'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**每个游戏对象都有一个叫做gameObject的属性，让你可以操作它。你将使用它的SetActive方法来使“再玩一次”按钮可见或不可见。**'
- en: 'There’s just one more thing to do: get your StartGame method working so that
    it starts the game. It needs to do a few things: destroy any balls that are currently
    flying around the scene, disable the Play Again button, reset the score and number
    of balls, and set the mode to “running.” You already know how to do most of those
    things! You just need to be able to find the balls in order to destroy them. **Click
    on the OneBall prefab in the Project window and set its tag**:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 还有最后一件事要做：让你的StartGame方法起作用，以便启动游戏。它需要做几件事情：销毁当前场景中正在飞行的任何球，禁用“再玩一次”按钮，重置得分和球的数量，并设置模式为“运行”。你已经知道如何做大部分的事情了！你只需要找到球以便销毁它们。**点击项目窗口中的OneBall预制体并设置它的标签**：
- en: '![Images](assets/462fig01.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/462fig01.png)'
- en: 'Now you have everything in place to fill in your StartGame method. It uses
    a `foreach` loop to find and destroy any balls left over from the previous game,
    hides the button, resets the score and number of balls, and changes the game mode:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经准备好填写你的StartGame方法了。它使用foreach循环来查找和销毁上一场游戏中剩余的任何球，隐藏按钮，重置得分和球的数量，并改变游戏模式：
- en: '[PRE14]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now run your game. It starts in “game over” mode. Press the button to start
    the game. The score goes up each time you click on a ball. As soon as the 15th
    ball is instantiated, the game ends and the Play Again button appears again.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行你的游戏。它从“游戏结束”模式开始。按下按钮开始游戏。每次点击球时，分数都会增加。当第15个球被实例化时，游戏结束，再次出现“再玩一次”按钮。
- en: Note
  id: totrans-125
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**Did you notice that you *didn’t have to make any changes to the GameController
    class?* That’s because you didn’t make changes to the things that GameController
    does, like managing the UI or the game mode. If you can make a change by modifying
    one class but not touching others, that can be a sign that you designed your classes
    well.**'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**你注意到了吗，*你并没有对GameController类做任何更改吗？*那是因为你没有改变GameController管理UI或游戏模式等功能。如果你可以通过修改一个类而不触及其他类来进行修改，那可能是你设计类的良好标志。**'
- en: Get creative!
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发挥创造力！
- en: 'Can you find ways to improve your game and get practice writing code? Here
    are some ideas:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 你能找到改善游戏并练习编写代码的方法吗？以下是一些建议：
- en: Is the game too easy? Too hard? Try changing the parameters that you pass to
    InvokeRepeating in your GameController.Start method. Try making them fields. Play
    around with the MaximumBalls value, too. Small changes in these values can make
    a big difference in gameplay.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏太简单了吗？太难了吗？尝试更改你在GameController.Start方法中传递给InvokeRepeating的参数。尝试将它们作为字段。还可以玩弄MaximumBalls值。这些值的小改变可能会对游戏玩法产生很大影响。
- en: We gave you texture maps for all of the billiard balls. Try adding different
    balls that have different behaviors. Use the scale to make some balls bigger or
    smaller, and change their parameters to make them go faster or slower, or move
    differently.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们为所有台球提供了纹理映射。尝试添加具有不同行为的不同球。使用比例尺使一些球变大或变小，并更改它们的参数以使它们移动得更快或更慢，或者移动方式不同。
- en: Can you figure out how to make a “shooting star” ball that flies off really
    quickly in one direction and is worth a lot if the player clicks on it? How about
    making a “sudden death” 8 ball that immediately ends the game?
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你能想出如何制作一个“流星”球，它在一个方向上飞行得很快，如果玩家点击它的话，价值很高吗？怎么样制作一个“突然死亡”8号球，它会立即结束游戏？
- en: Modify your GameController.ClickedOnBall method to take a score parameter instead
    of incrementing the Score field and add the value that you pass. Try giving different
    values to different balls.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改你的GameController.ClickedOnBall方法，使其接受一个分数参数，而不是增加分数字段并添加传递的值。尝试为不同的球赋予不同的值。
- en: '***If you change fields in the OneBallBehaviour script, don’t forget to reset
    the Script component of the OneBall prefab! Otherwise, it will remember the old
    values.***'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '***如果你修改了OneBallBehaviour脚本中的字段，请不要忘记重置OneBall预制件的脚本组件！否则，它会记住旧值。***'
- en: '**The more practice you get writing C# code, the easier it will get. Getting
    creative with your game is a great opportunity to get some practice!**'
  id: totrans-134
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**你练习编写C#代码的次数越多，就会越容易。发挥创造力来制作你的游戏是一个很好的练习机会！**'
