- en: Chapter 7\. Testing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章 测试
- en: Testing is an essential part of software quality. Unit testing advocates have
    become common in recent years; it seems that you read or hear about it everywhere.
    Some promote *test-driven development*, a style of coding that ensures you have
    comprehensive tests when the application is complete. The benefits of unit testing
    on code quality and overall time to completion are well known, and yet many developers
    still don’t write unit tests.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 测试是软件质量的重要组成部分。近年来，单元测试的支持者已经变得司空见惯；似乎你无论读什么或听什么都会提到它。一些人推广*测试驱动开发*，这是一种编码风格，确保在应用程序完成时有全面的测试。单元测试对代码质量和整体完成时间的好处是众所周知的，但许多开发者仍然不写单元测试。
- en: 'I encourage you to write at least some unit tests. Start with the code in which
    you feel the least confidence. In my experience, unit tests have given me two
    main advantages:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我鼓励你至少写一些单元测试。从你感到最缺乏信心的代码开始。根据我的经验，单元测试给了我两个主要优势：
- en: '**Better understanding of the code.** You know that part of the application
    that works but you have no idea how? It’s always kind of in the back of your mind
    when the really weird bug reports come in. Writing unit tests for code you find
    difficult is a great way to get a clear understanding of how it works. After writing
    unit tests describing its behavior, the code is no longer mysterious; you end
    up with a set of unit tests that describe its behavior and the dependencies that
    code has on the rest of the code.'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更好地理解代码。** 你知道应用程序的那一部分能工作但你不知道为什么吗？当真正奇怪的 bug 报告出现时，它总是潜在地存在于你的脑海中。为你觉得困难的代码编写单元测试是了解它如何工作的一个绝佳方法。在编写描述其行为的单元测试后，代码不再神秘；你最终会得到一组描述其行为及其对其他代码的依赖关系的单元测试。'
- en: '**Greater confidence to make changes.** Sooner or later, you’ll get that feature
    request that requires you to change the code that scares you, and you’ll no longer
    be able to pretend it isn’t there (I know how that feels; I’ve been there!). It’s
    best to be proactive: write the unit tests for the scary code before the feature
    request comes in. Once your unit tests are complete, you’ll have an early warning
    system that will alert you immediately if your changes break existing behavior.
    When you have a pull request, unit tests also give you greater confidence that
    the code changes don’t break existing behavior.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更大的改动信心。** 迟早你会收到需要修改令你害怕的代码的功能请求，你将无法再假装它不存在（我知道那种感觉，我也经历过！）。最好是主动出击：在功能请求到来之前为可怕的代码编写单元测试。一旦你的单元测试完成，你就会有一个早期警报系统，如果你的修改破坏了现有行为，它会立即提醒你。当你有一个拉取请求时，单元测试也会让你更有信心，确保代码变更不会破坏现有行为。'
- en: Both of these advantages apply to your own code just as much as others’ code.
    I’m sure there are other advantages, too. Does unit testing decrease the frequency
    of bugs? Most likely. Does unit testing reduce the overall time on a project?
    Possibly. But the advantages I’ve described are definite; I experience them every
    time I write unit tests. So, that’s my sales pitch for unit testing.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个优势同样适用于你自己的代码，不仅仅是别人的代码。我相信还有其他优点。单元测试减少 bug 的频率吗？很可能是。单元测试减少项目总体时间吗？可能是。但我描述的优势是确定的；每次我写单元测试时，我都能感受到它们。所以，这是我对单元测试的推销。
- en: This chapter contains recipes that are all about testing. A lot of developers
    (even ones who normally write unit tests) shy away from testing concurrent code
    because they assume it’s hard. However, as these recipes will show, unit testing
    concurrent code isn’t as difficult as they think. Modern features and libraries,
    such as `async` and System.Reactive, have put a lot of thought into testing, and
    it shows. I encourage you to use these recipes to write unit tests, especially
    if you’re new to concurrency (i.e., the new concurrent code appears hard or scary).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含的配方全都是关于测试的。很多开发者（即使通常编写单元测试的那些人）都会避开测试并发代码，因为他们认为这很难。然而，正如这些配方将展示的那样，单元测试并发代码并不像他们想象的那么难。现代特性和库，如`async`和System.Reactive，在测试方面都进行了大量的思考，这一点很明显。我鼓励你使用这些配方来编写单元测试，特别是如果你对并发编程还很陌生（即新的并发代码看起来很难或令人害怕）。
- en: 7.1 Unit Testing async Methods
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7.1 异步方法的单元测试
- en: Problem
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You have an `async` method that you need to unit test.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你有一个`async`方法需要进行单元测试。
- en: Solution
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Most modern unit test frameworks support `async Task` unit test methods, including
    MSTest, NUnit, and xUnit. MSTest began support for these tests with Visual Studio
    2012\. If you use another unit test framework, you may have to upgrade to the
    latest version.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数现代单元测试框架支持`async Task`单元测试方法，包括MSTest、NUnit和xUnit。MSTest从Visual Studio 2012开始支持这些测试。如果你使用其他单元测试框架，可能需要升级到最新版本。
- en: 'Here is an example of an `async` MSTest unit test:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个`async` MSTest单元测试的例子：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The unit test framework will notice that the return type of the method is `Task`
    and will intelligently wait for the task to complete before marking the test “successful”
    or “failed.”
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试框架会注意到方法的返回类型是`Task`，并智能地等待任务完成，然后标记测试为“成功”或“失败”。
- en: 'If your unit test framework doesn’t support `async Task` unit tests, then it’ll
    need some help to wait for the asynchronous operation under test. One option is
    that you can use `GetAwaiter().GetResult()` to synchronously block on the task;
    if you then use `GetAwaiter().GetResult()` instead of `Wait()`, it avoids the
    `AggregateException` wrapper if the task has an exception. However, I prefer to
    use the `AsyncContext` type from the `Nito.AsyncEx` NuGet package:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的单元测试框架不支持`async Task`单元测试，那么它需要一些帮助来等待正在测试的异步操作。一种选择是使用`GetAwaiter().GetResult()`来同步阻塞任务；如果你使用`GetAwaiter().GetResult()`而不是`Wait()`，它会避免`AggregateException`包装器（如果任务有异常的话）。然而，我更喜欢使用`Nito.AsyncEx`
    NuGet包中的`AsyncContext`类型：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`AsyncContext.Run` will wait until all asynchronous methods complete.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`AsyncContext.Run`会等待所有异步方法完成。'
- en: Discussion
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'Mocking asynchronous dependencies can be a bit awkward at first. It’s a good
    idea to at least test how your methods respond to synchronous success (mocking
    with `Task.FromResult`), synchronous errors (mocking with `Task.FromException`),
    and asynchronous success (mocking with `Task.Yield` and a return value). You’ll
    find coverage of `Task.FromResult` and `Task.FromException` in [Recipe 2.2](ch02.html#recipe-async-fromresult).
    `Task.Yield` can be used to force asynchronous behavior, and is primarily useful
    for unit tests:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，模拟异步依赖可能有点笨拙。建议至少测试你的方法如何响应同步成功（使用`Task.FromResult`进行模拟）、同步错误（使用`Task.FromException`进行模拟）和异步成功（使用`Task.Yield`进行模拟并返回值）。你可以在[第2.2节](ch02.html#recipe-async-fromresult)中找到有关`Task.FromResult`和`Task.FromException`的覆盖率。`Task.Yield`可用于强制异步行为，主要用于单元测试：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When testing asynchronous code, deadlocks and race conditions may surface more
    often than when testing synchronous code. I find the per-test timeout setting
    useful; in Visual Studio, you can add a test settings file to your solution that
    enables you to set individual test timeouts. The default value is quite high;
    I usually have a per-test timeout setting of two seconds.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试异步代码时，死锁和竞争条件可能比测试同步代码更容易出现。我发现每个测试设置超时时间非常有用；在Visual Studio中，你可以向解决方案添加一个测试设置文件，以便设置单独的测试超时时间。默认值相当高；我通常将每个测试的超时设置为两秒。
- en: Tip
  id: totrans-22
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: The `AsyncContext` type is in the [`Nito.AsyncEx`](http://bit.ly/nito-async)
    NuGet package.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`AsyncContext`类型位于[`Nito.AsyncEx`](http://bit.ly/nito-async) NuGet包中。'
- en: See Also
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[Recipe 7.2](#recipe-async-testfail) covers unit testing asynchronous methods
    expected to fail.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[第7.2节](#recipe-async-testfail)涵盖了预期失败的异步方法的单元测试。'
- en: 7.2 Unit Testing async Methods Expected to Fail
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7.2 测试失败预期的异步方法
- en: Problem
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You need to write a unit test that checks for a specific failure of an `async
    Task` method.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要编写一个单元测试来检查`async Task`方法的特定失败情况。
- en: Solution
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'If you’re doing desktop or server development, MSTest does support failure
    testing via the regular `ExpectedExceptionAttribute`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在桌面或服务器开发中，MSTest确实支持通过常规的`ExpectedExceptionAttribute`进行失败测试：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'However, this solution isn’t the best: `ExpectedException` is actually a poor
    design. The exception it expects may be thrown by *any* of the methods called
    by your unit test method. A better design checks that a *particular* piece of
    code throws that exception, not the unit test as a whole.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个解决方案并不是最佳选择：`ExpectedException`实际上设计不佳。它期望的异常可能由单元测试方法调用的*任何*方法抛出。更好的设计是检查*特定*代码块是否抛出了该异常，而不是整个单元测试。
- en: 'Most modern unit test frameworks include `Assert.ThrowsAsync<TException>` in
    some form. For example, you can use xUnit’s `ThrowsAsync` like this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数现代单元测试框架都以某种形式包含`Assert.ThrowsAsync<TException>`。例如，你可以像这样使用xUnit的`ThrowsAsync`：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Warning
  id: totrans-35
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: Do not forget to `await` the task returned by `ThrowsAsync`! The `await` will
    propagate any assertion failures that it detects. If you forget the `await` and
    ignore the compiler warning, your unit test will always silently succeed regardless
    of your method’s behavior.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记`await` `ThrowsAsync` 返回的任务！`await` 将传播任何检测到的断言失败。如果您忽略`await`并忽略编译器警告，那么您的单元测试将始终在不管方法行为如何的情况下静默成功。
- en: 'Unfortunately, several other unit test frameworks don’t include an equivalent
    `async`-compatible `ThrowsAsync`. If you find yourself in this boat, create your
    own:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，其他几个单元测试框架不包括与 `async` 兼容的 `ThrowsAsync` 等效项。如果您发现自己处于这种情况中，请创建您自己的：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can use the method just like it was any other `Assert.ThrowsAsync<TException>`
    method. Don’t forget to `await` the return value!
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以像使用任何其他 `Assert.ThrowsAsync<TException>` 方法一样使用此方法。不要忘记`await`返回值！
- en: Discussion
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Testing error handling is just as important as testing the successful scenarios.
    Some would even say more important, since the successful scenario is the one that
    everyone tries before the software is released. If your application behaves strangely,
    it will be due to an unexpected error situation.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 测试错误处理与测试成功场景一样重要。有人甚至会说更重要，因为成功的场景是软件发布前每个人都会尝试的场景。如果您的应用行为异常，那可能是由于意外的错误情况。
- en: However, I encourage developers to move away from `ExpectedException`. It’s
    better to test for an exception thrown at a specific point rather than testing
    for an exception at any time during the test. Instead of `ExpectedException`,
    use `ThrowsAsync` (or its equivalent in your unit test framework), or use the
    `ThrowsAsync` implementation, as in the last code example.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我鼓励开发人员不要再使用 `ExpectedException`。最好在特定点测试抛出异常，而不是在测试过程中的任何时候测试异常。请使用 `ThrowsAsync`（或您的单元测试框架中的等效项），或者像最后一个代码示例中一样使用
    `ThrowsAsync` 的实现。
- en: See Also
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Recipe 7.1](#recipe-async-test) covers the basics of unit testing asynchronous
    methods.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[Recipe 7.1](#recipe-async-test) 涵盖了单元测试异步方法的基础知识。'
- en: 7.3 Unit Testing async void Methods
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7.3 单元测试 `async void` 方法
- en: Problem
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You have an `async void` method that you need to unit test.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您有一个需要进行单元测试的 `async void` 方法。
- en: Solution
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Stop.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 停止。
- en: Rather than solving this problem, you should do your dead-level best to avoid
    it. If it’s possible to change your `async void` method to an `async Task` method,
    then do so.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是解决这个问题，您应尽全力避免它。如果可能将您的 `async void` 方法更改为 `async Task` 方法，则应这样做。
- en: 'If your method *must* be `async void` (e.g., to satisfy an interface method
    signature), then consider writing two methods: an `async Task` method that contains
    all the logic, and an `async void` wrapper that just calls the `async Task` method
    and awaits the result. The `async void` method satisfies the architecture requirements,
    while the `async Task` method (with all the logic) is testable.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的方法*必须*是 `async void`（例如，为了满足接口方法签名），则考虑编写两个方法：一个是包含所有逻辑的 `async Task` 方法，另一个是只调用
    `async Task` 方法并等待结果的 `async void` 包装器。`async void` 方法满足架构要求，而 `async Task` 方法（包含所有逻辑）是可测试的。
- en: 'If it’s impossible to change your method and you *must* unit test an `async
    void` method, then there is a way to do it. You can use the `AsyncContext` class
    from the `Nito.AsyncEx` library:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果无法更改您的方法并且*必须*对 `async void` 方法进行单元测试，则有一种方法可以实现。您可以使用 `Nito.AsyncEx` 库中的
    `AsyncContext` 类：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `AsyncContext` type will wait until all asynchronous operations complete
    (including `async void` methods) and will propagate exceptions that they raise.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`AsyncContext` 类型将等待所有异步操作完成（包括 `async void` 方法）并传播它们引发的异常。'
- en: Tip
  id: totrans-55
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: The `AsyncContext` type is in the [`Nito.AsyncEx`](http://bit.ly/nito-async)
    NuGet package.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Nito.AsyncEx`](http://bit.ly/nito-async) NuGet 包中包含 `AsyncContext` 类型。'
- en: Discussion
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: One of the key guidelines in `async` code is to avoid `async void`. I strongly
    recommend you refactor your code instead of using `AsyncContext` for unit testing
    `async void` methods.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `async` 代码中的一个关键指导原则是避免使用 `async void`。我强烈建议您重构代码，而不是为了单元测试 `async void` 方法而使用
    `AsyncContext`。
- en: See Also
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Recipe 7.1](#recipe-async-test) covers unit testing `async Task` methods.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[Recipe 7.1](#recipe-async-test) 涵盖了单元测试异步方法的基础知识。'
- en: 7.4 Unit Testing Dataflow Meshes
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7.4 单元测试数据流网格
- en: Problem
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You have a dataflow mesh in your application, and you need to verify it works
    correctly.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您的应用程序中有一个数据流网格，并且您需要验证其正常工作。
- en: Solution
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Dataflow meshes are independent: they have a lifetime of their own and are
    asynchronous by nature. So, the most natural way to test them is with an asynchronous
    unit test. The following unit test verifies the custom dataflow block from [Recipe
    5.6](ch05.html#recipe-dataflow-custom):'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 数据流网格是独立的：它们有自己的生命周期，并且本质上是异步的。因此，测试它们的最自然方式是使用异步单元测试。以下单元测试验证来自[Recipe 5.6](ch05.html#recipe-dataflow-custom)的自定义数据流块：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Unit testing failures isn’t quite as straightforward, unfortunately. This is
    because exceptions in dataflow meshes are wrapped in another `AggregateException`
    each time they are propagated to the next block. The following example uses a
    helper method to ensure that an exception will discard data and propagate through
    the custom block:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试失败并不是那么简单。这是因为数据流网格中的异常每次传播到下一个块时都会被包装在另一个`AggregateException`中。以下示例使用一个辅助方法来确保异常将丢弃数据并通过自定义块传播：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Discussion
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Unit testing of dataflow meshes directly is doable, but somewhat awkward. If
    your mesh is a part of a larger component, then you may find that it’s easier
    to just unit test the larger component (implicitly testing the mesh). But if you’re
    developing a reusable custom block or mesh, then unit tests like the preceding
    ones should be used.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 直接对数据流网格进行单元测试是可行的，但有些笨拙。如果您的网格是较大组件的一部分，那么您可能会发现仅对较大组件进行单元测试（隐式测试网格）更容易。但如果您正在开发可重用的自定义块或网格，则应使用类似前面的单元测试。
- en: See Also
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[Recipe 7.1](#recipe-async-test) covers unit testing `async` methods.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[Recipe 7.1](#recipe-async-test)涵盖了对`async`方法的单元测试。'
- en: 7.5 Unit Testing System.Reactive Observables
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7.5 单元测试 System.Reactive 可观察序列
- en: Problem
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: Part of your program is using `IObservable<T>`, and you need to find a way to
    unit test it.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您的程序的一部分正在使用`IObservable<T>`，您需要找到一种方法来对其进行单元测试。
- en: Solution
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: System.Reactive has a number of operators that produce sequences (e.g., `Return`)
    and other operators that can convert a reactive sequence into a regular collection
    or item (e.g., `SingleAsync`). You can use operators like `Return` to create stubs
    for observable dependencies, and operators like `SingleAsync` to test the output.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: System.Reactive有许多操作符来生成序列（例如`Return`）和其他可以将响应序列转换为常规集合或项的操作符（例如`SingleAsync`）。你可以使用诸如`Return`的操作符来创建可观察依赖的存根，并使用诸如`SingleAsync`的操作符来测试输出。
- en: 'Consider the following code, which takes an HTTP service as a dependency and
    applies a timeout to the HTTP call:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下代码，它将 HTTP 服务作为依赖项，并对 HTTP 调用应用超时：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The system under test is `MyTimeoutClass`, which consumes an observable dependency
    and produces an observable as output.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 受测试系统是`MyTimeoutClass`，它消耗一个可观察依赖项并产生一个可观察输出。
- en: 'The `Return` operator creates a cold sequence with a single element in it;
    you can use `Return` to build a simple stub. The `SingleAsync` operator returns
    a `Task<T>` that is completed when the next event arrives. `SingleAsync` can be
    used for simple unit tests like the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`Return`操作符创建一个包含单个元素的冷序列；您可以使用`Return`来构建一个简单的存根。`SingleAsync`操作符返回一个在下一个事件到达时完成的`Task<T>`。`SingleAsync`可以用于像以下这样的简单单元测试：'
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Another operator important in stub code is `Throw`, which returns an observable
    that ends with an error. The operator enables us to unit test the error case as
    well. The following example uses the `ThrowsAsync` helper from [Recipe 7.2](#recipe-async-testfail):'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在存根代码中另一个重要的操作符是`Throw`，它返回以错误结束的可观察序列。该操作符使我们能够对错误情况进行单元测试。以下示例使用了来自[Recipe
    7.2](#recipe-async-testfail)的`ThrowsAsync`辅助方法：
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Discussion
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: '`Return` and `Throw` are great for creating observable stubs, and `SingleAsync`
    is an easy way to test observables with `async` unit tests. They’re a good combination
    for simple observables, but they don’t hold up well once you start dealing with
    *time*. For example, if you wanted to test the timeout capability of `MyTimeoutClass`,
    the unit test would have to wait for that amount of time. That, however, would
    be a poor approach: it makes your unit tests unreliable by introducing a race
    condition, and it doesn’t scale well as you add more unit tests. [Recipe 7.6](#recipe-rx-testscheduling)
    covers a special way that System.Reactive empowers you to stub out time itself.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`Return`和`Throw`非常适合创建可观察存根，而`SingleAsync`是测试具有`async`单元测试的简单方法。它们对于简单的可观察序列是一个很好的组合，但是一旦涉及到*时间*，它们就无法很好地支持。例如，如果您想测试`MyTimeoutClass`的超时功能，单元测试将需要等待一段时间。然而，这是一个不好的方法：它通过引入竞争条件使您的单元测试不可靠，并且随着添加更多单元测试，它不会很好地扩展。[Recipe
    7.6](#recipe-rx-testscheduling)介绍了 System.Reactive 如何特殊处理使您能够模拟时间本身的方法。'
- en: See Also
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[Recipe 7.1](#recipe-async-test) covers unit testing `async` methods, which
    is very similar to unit tests that await `SingleAsync`.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[Recipe 7.1](#recipe-async-test) 讨论了对 `async` 方法进行单元测试，这与等待 `SingleAsync` 的单元测试非常相似。'
- en: '[Recipe 7.6](#recipe-rx-testscheduling) covers unit testing observable sequences
    that depend on time passing.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[Recipe 7.6](#recipe-rx-testscheduling) 讨论了依赖于时间推移的可观测序列的单元测试。'
- en: 7.6 Unit Testing System.Reactive Observables with Faked Scheduling
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7.6 使用伪造调度器对 System.Reactive 可观测对象进行单元测试
- en: Problem
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You have an observable that is dependent on time, and want to write a unit test
    that is not dependent on time. Observables that depend on time include ones that
    use timeouts, windowing/buffering, and throttling/sampling. You want to unit test
    these but do not want your unit tests to have excessive runtimes.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你有一个依赖于时间的可观测对象，并且想编写一个不依赖于时间的单元测试。依赖于时间的可观测对象包括使用超时、窗口/缓冲以及节流/抽样的对象。你希望对这些进行单元测试，但不希望单元测试运行时间过长。
- en: Solution
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'It’s certainly possible to put delays in your unit tests; however, there are
    two problems with that approach: 1) the unit tests take a long time to run, and
    2) there are race conditions because the unit tests all run at the same time,
    making timing unpredictable.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以在单元测试中添加延迟；然而，这种方法存在两个问题：1）单元测试运行时间长，2）由于单元测试同时运行，造成了竞争条件，使得时间难以预测。
- en: The System.Reactive (Rx) library was designed with testing in mind; in fact,
    the Rx library itself is extensively unit tested. To enable thorough unit testing,
    Rx introduced a concept called a *scheduler*, and *every* Rx operator that deals
    with time is implemented using this abstract scheduler.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: System.Reactive（Rx）库设计时考虑了测试；事实上，Rx 库本身经过了大量单元测试。为了实现彻底的单元测试，Rx 引入了一个称为 *scheduler*
    的概念，并且 *每个* 处理时间的 Rx 运算符都是使用这个抽象调度器实现的。
- en: 'To make your observables testable, you need to allow your caller to specify
    the scheduler. For example, you can take the `MyTimeoutClass` from [Recipe 7.5](#recipe-rx-test)
    and add a scheduler:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使你的可观测对象可测试，你需要允许调用者指定调度器。例如，你可以从 [Recipe 7.5](#recipe-rx-test) 中获取 `MyTimeoutClass`
    并添加一个调度器：
- en: '[PRE12]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, you can modify your HTTP service stub so that it also understands scheduling,
    then introduce a variable delay:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你可以修改你的 HTTP 服务存根，使其也能理解调度，然后引入可变的延迟：
- en: '[PRE13]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now you can go ahead and use `TestScheduler`, a type included in the System.Reactive
    library. `TestScheduler` gives you powerful control over (virtual) time.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以继续使用 `TestScheduler`，这是 System.Reactive 库中包含的一种类型。 `TestScheduler` 让你强大地控制（虚拟）时间。
- en: Tip
  id: totrans-101
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: '`TestScheduler` is in a separate NuGet package from the rest of System.Reactive;
    you’ll need to install the [`Microsoft.Reactive.Testing`](http://bit.ly/ms-react-test)
    NuGet package.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`TestScheduler` 与 System.Reactive 的其余部分不在同一个 NuGet 包中；你需要安装 [`Microsoft.Reactive.Testing`](http://bit.ly/ms-react-test)
    NuGet 包。'
- en: '`TestScheduler` gives you complete control over time, but you often just need
    to set up your code and then call `TestScheduler.Start`. `Start` will virtually
    advance time until everything is done. A simple success test case could look like
    the following:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`TestScheduler` 让你完全控制时间，但通常你只需设置好你的代码，然后调用 `TestScheduler.Start`。 `Start`
    会虚拟推进时间，直到所有操作完成。一个简单的成功测试用例如下所示：'
- en: '[PRE14]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The code simulates a network delay of half a second. It’s important to note
    that this unit test *does not* take half a second to run; on my machine, it takes
    about 70 milliseconds. The half-second delay only exists in virtual time. The
    other notable difference in this unit test is that it isn’t asynchronous; since
    you’re using `TestScheduler`, all your tests can complete immediately.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码模拟了半秒钟的网络延迟。需要注意的是，这个单元测试 *不会* 花费半秒钟来运行；在我的机器上，大约只需 70 毫秒。半秒钟的延迟仅存在于虚拟时间中。这个单元测试的另一个显著区别是它不是异步的；因为你使用了
    `TestScheduler`，所有测试可以立即完成。
- en: 'Now that everything is using test schedulers, it’s easy to test timeout situations:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一切都在使用测试调度器，很容易测试超时情况：
- en: '[PRE15]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Once again, the preceding unit test does not take 1 second (or 1.5 seconds)
    to run; it executes immediately using virtual time.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，前面的单元测试不需要花费 1 秒（或 1.5 秒）来运行；它立即执行，使用虚拟时间。
- en: Discussion
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: In this recipe we’ve just scratched the surface on System.Reactive schedulers
    and virtual time. I recommend that you start unit testing when you start writing
    System.Reactive code; as your code grows more and more complex, you can rest assured
    that `Microsoft.Reactive.Testing` is capable of handling it.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们只是浅尝了一下 System.Reactive 的调度器和虚拟时间。我建议您在开始编写 System.Reactive 代码时就开始进行单元测试；随着代码变得越来越复杂，您可以放心使用
    `Microsoft.Reactive.Testing` 来处理它。
- en: '`TestScheduler` also has `AdvanceTo` and `AdvanceBy` methods, which enable
    you to gradually step through virtual time. These may be useful in some situations,
    but you should strive to have your unit tests only test one thing. To test a timeout,
    you could write a single unit test that partially advanced the `TestScheduler`
    and ensured that the timeout didn’t happen early, and then advanced the `TestScheduler`
    past the timeout value and ensured that the timeout did happen. However, I prefer
    to run separate unit tests as much as possible; for example, one unit test ensuring
    that the timeout didn’t happen early, and a different unit test ensuring that
    the timeout did happen later.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`TestScheduler` 还有 `AdvanceTo` 和 `AdvanceBy` 方法，这些方法使您能够逐步在虚拟时间中前进。在某些情况下，这可能很有用，但您应该努力让您的单元测试只测试一件事情。要测试超时，您可以编写一个单元测试，部分前进
    `TestScheduler` 并确保超时不会过早发生，然后前进 `TestScheduler` 超过超时值并确保超时确实发生。然而，我更喜欢尽可能运行分开的单元测试；例如，一个单元测试确保超时不会过早发生，另一个单元测试确保超时稍后发生。'
- en: See Also
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Recipe 7.5](#recipe-rx-test) covers the basics of unit testing observable
    sequences.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '[配方 7.5](#recipe-rx-test)覆盖了观察序列单元测试的基础知识。'
