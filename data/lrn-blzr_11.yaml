- en: Appendix. Learning Blazor App Projects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录。Learning Blazor应用程序项目
- en: In this book, we’ve examined Learning Blazor, an app created for the book. The
    app consists of several projects that serve as isolated bits of functionality.
    The architecture is discussed in [“Perusing the “Learning Blazor” Sample App”](ch01.html#perusing-the-app).
    The source code can be found on [GitHub](https://oreil.ly/learning-blazor-code).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们研究了Learning Blazor，这是为本书创建的一个应用程序。该应用程序由几个项目组成，这些项目作为独立的功能部分。架构在[“浏览“Learning
    Blazor”示例应用程序”](ch01.html#perusing-the-app)中进行了讨论。源代码可以在[GitHub](https://oreil.ly/learning-blazor-code)上找到。
- en: The *learning-blazor.sln* solution file contains several projects that together
    make up the entire application as a cohesive unit. While each project within the
    solution is responsible for its core functionality, orchestrating projects with
    disparate functionality cohesively is a requirement of any successful application.
    The following sections list the primary projects within the solution and provide
    topical details about them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*learning-blazor.sln*解决方案文件包含了几个项目，这些项目共同构成了整个应用程序作为一个统一的单元。虽然解决方案中的每个项目负责其核心功能，但协调具有不同功能的项目以形成一个统一的整体是任何成功应用程序的要求。以下部分列出了解决方案中的主要项目，并提供了关于它们的主题详细信息。'
- en: Web Client
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web客户端
- en: The client application, named simply Web.Client, is a Blazor WebAssembly project
    targeting the `Microsoft.NET.Sdk.BlazorWebAssembly` software development kit (SDK).
    The web project is responsible for all of the user interactions and experiences.
    Through pages, client-side routing, form validation, model binding, and component-based
    UIs, the Web.Client project shows the most major features of Blazor. This app
    defines a `Learning.Blazor` namespace.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端应用程序，简称为 Web.Client，是一个Blazor WebAssembly项目，目标是使用`Microsoft.NET.Sdk.BlazorWebAssembly`软件开发工具包（SDK）。该Web项目负责所有用户交互和体验。通过页面、客户端路由、表单验证、模型绑定和基于组件的用户界面，Web.Client项目展示了Blazor的大部分主要特性。该应用程序定义了一个`Learning.Blazor`命名空间。
- en: Web API
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web API
- en: The client application would be rather boring if not for data. How do web apps
    get data, you might ask? HTTP is the most common approach, but in addition to
    that, our application is also going to make use of ASP.NET Core SignalR with Web
    Sockets for real-time web functionality.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有数据，客户端应用程序会变得相当无聊。你可能会问，Web应用程序如何获取数据？HTTP是最常见的方法，但除此之外，我们的应用程序还将使用ASP.NET
    Core SignalR和Web Sockets来实现实时网络功能。
- en: Tip
  id: totrans-7
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: ASP.NET Core SignalR is an open source library that simplifies adding real-time
    web functionality to apps. It’s used in the sample source code to exemplify real-time
    functionality. For an overview of SignalR, see Microsoft’s [overview of ASP.NET
    Core SignalR](https://oreil.ly/TrV3W).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core SignalR是一个开源库，简化了向应用程序添加实时网络功能的过程。它在示例源代码中用于展示实时功能。有关SignalR的概述，请参阅Microsoft的[ASP.NET
    Core SignalR概述](https://oreil.ly/TrV3W)。
- en: Again, the sample app uses the Blazor WebAssembly hosting model, but it’s still
    valuable to show real-time web functionality. As such, ASP.NET Core SignalR is
    used, but not in the same way that was previously described when using the Blazor
    Server hosting model.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，示例应用程序使用Blazor WebAssembly托管模型，但展示实时网络功能仍然非常有价值。因此，ASP.NET Core SignalR被使用，但使用方式与以前在Blazor
    Server托管模型中描述的方式不同。
- en: There is an ASP.NET Core Web API project, named Web.Api, which targets `Microsoft.NET.Sdk.Web`.
    The project will offer up various endpoints on which the client app will rely.
    The API and SignalR endpoints will be protected by Azure Active Directory (Azure
    AD) business-to-consumer (B2C) authentication.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个名为Web.Api的ASP.NET Core Web API项目，目标是使用`Microsoft.NET.Sdk.Web`。该项目将提供客户端应用程序依赖的各种端点。API和SignalR端点将由Azure
    Active Directory（Azure AD）的业务对消费者（B2C）认证保护。
- en: The Web API project uses an in-memory cache to ensure a responsive experience.
    Selective endpoints rely on services that will deterministically yield data from
    either the cache or the raw-HTTP-dependent endpoint.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Web API项目使用内存缓存来确保响应迅速的体验。某些端点依赖于服务，这些服务会从缓存或原始的HTTP依赖端点中确定性地获取数据。
- en: Pwned Web API
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pwned Web API
- en: The Pwned Web API project also relies on the `Microsoft.NET.Sdk.Web` SDK. This
    project exposes the [“Have I Been Pwned”](https://oreil.ly/X0G2E) service functionality
    from Troy Hunt. After a user has provided consent to allow the application to
    use their email address, it is sent to the Pwned service. The API provides details
    that are used to notify the user if their email has been a part of a data breach.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Pwned Web API项目还依赖于`Microsoft.NET.Sdk.Web` SDK。该项目从Troy Hunt提供的“Have I Been
    Pwned”服务中公开功能。用户在同意允许应用程序使用其电子邮件地址后，将其发送到Pwned服务。API提供的详细信息用于通知用户其电子邮件是否曾经参与数据泄露。
- en: Web Abstractions
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web Abstractions
- en: With a simple C# class library project targeting `Microsoft.NET.Sdk`, the Web.Abstractions
    project defines a few abstractions that will be shared between the client and
    server apps. These contracts will serve as the glue for the SignalR endpoints.
    From the client’s perspective, these abstractions will provide a discoverability
    set of APIs from which the client can subscribe to events and methods with which
    they can communicate back to the server. From the server’s perspective, these
    abstractions solidify the method and event names, ensuring that there are not
    any possible misalignments. This is extremely important and a common pitfall in
    all JavaScript-based SPA development.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用一个简单的C#类库项目，目标为`Microsoft.NET.Sdk`，Web.Abstractions项目定义了一些在客户端和服务器应用程序之间共享的抽象。这些契约将作为SignalR端点的粘合剂。从客户端的角度来看，这些抽象将提供一个可发现的API集合，客户端可以订阅事件和方法，并通过这些方法与服务器进行通信。从服务器的角度来看，这些抽象将巩固方法和事件名称，确保没有任何可能的不对齐。这非常重要，并且是所有基于JavaScript的单页面应用程序开发中的一个常见陷阱。
- en: Web Extensions
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web Extensions
- en: In modern C# application development, it’s common to encapsulate repetitive
    subroutines into extensions. Due to their repetitive nature, utilitarian extension
    methods are a perfect candidate for a shared class library-style project. In our
    case, we’ll use the Web.Extensions project that targets `Microsoft.NET.Sdk`. This
    project provides functionality that will be used throughout most of our other
    projects within our solution, especially both client and server app scenarios.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代C#应用程序开发中，将重复的子程序封装为扩展是很常见的。由于它们的重复性质，实用的扩展方法是共享类库风格项目的完美候选者。在我们的情况下，我们将使用目标为`Microsoft.NET.Sdk`的Web.Extensions项目。该项目提供的功能将在我们解决方案中的大多数其他项目中使用，特别是客户端和服务器应用程序场景。
- en: Web HTTP Extensions
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web HTTP Extensions
- en: Another extensions class library focuses on defining defaults for the `HttpClient`
    type. There are several shared class libraries, all of which were making HTTP
    calls—​I wanted all HTTP calls that fail to have a specific retry policy for handling
    transient errors. These policies are defined within the Web.Http.Extensions project
    that targets `Microsoft.NET.Sdk`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个扩展类库专注于定义`HttpClient`类型的默认值。有几个共享的类库，它们都在进行HTTP调用—​我希望所有失败的HTTP调用都有一个特定的重试策略来处理瞬态错误。这些策略在目标为`Microsoft.NET.Sdk`的Web.Http.Extensions项目中定义。
- en: Web Functions
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web Functions
- en: Serverless programming has become very prevalent over the past decade. Immutable
    infrastructure, resiliency, and scalability are always highly sought-after features.
    Azure Functions are used to wrap my weather services. I decided to use the Open
    Weather Map API, which is free, supports multiple languages, and is rather accurate.
    With an Azure Function app, I can encapsulate my configuration, protect my API
    keys, use dependency injection, and delegate calls to the weather API. This project
    is named Web.Functions, and it targets `Microsoft.NET.Sdk`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的十年中，无服务器编程已经变得非常普遍。不可变基础设施、弹性和可扩展性始终是非常受欢迎的特性。Azure Functions用于封装我的天气服务。我决定使用Open
    Weather Map API，它是免费的，支持多种语言，并且相当准确。通过Azure Function应用程序，我可以封装我的配置，保护我的API密钥，使用依赖注入，并将调用委托给天气API。该项目名为Web.Functions，目标为`Microsoft.NET.Sdk`。
- en: Web Joke Services
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web Joke Services
- en: 'Life is too short not to enjoy it—we need to laugh more, crack a smile, and
    not take ourselves so seriously. The Web.JokeServices library is responsible for
    aggregating jokes on a pseudorandom schedule. There are collectively three separate
    and free joke APIs that are aggregated in this project:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 生活太短暂，我们需要更多的笑声，微笑，不要那么严肃地对待自己。Web.JokeServices库负责按照伪随机的时间表聚合笑话。在此项目中，有三个独立且免费的笑话API被聚合起来：
- en: '[Internet Chuck Norris Database](https://oreil.ly/Dmf7N)'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[互联网查克·诺里斯数据库](https://oreil.ly/Dmf7N)'
- en: '[I Can Haz Dad Joke](https://oreil.ly/LMitC)'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[我可以有爸爸笑话](https://oreil.ly/LMitC)'
- en: '[Random Programming Joke API](https://oreil.ly/U67QS)'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[随机编程笑话 API](https://oreil.ly/U67QS)'
- en: Web Models
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web Models
- en: The Web.Models project is a *shared* library used by many other projects in
    the solution. It contains all of the models used to represent various domain entities,
    such as shared models by services and clients alike. Anything in the app that
    is interacted with specifies a shape and has members that help to uniquely identify
    itself. This is, of course, at the core of object-oriented programming.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Web.Models 项目是解决方案中许多其他项目共享的库。它包含用于表示各种领域实体的所有模型，例如服务和客户端共享的模型。任何与应用程序交互的内容都会指定一个形状，并具有帮助唯一标识自身的成员。这当然是面向对象编程的核心。
- en: Web Twitter Components
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web Twitter 组件
- en: To exemplify component library functionality, I chose to create a Twitter component
    Razor library. It’s named Web.TwitterComponents, and the project relies on the
    `Microsoft.NET.Sdk.Razor` SDK. It provides two components, one representing a
    tweet and the other representing a collection of tweets. This project will demonstrate
    how components are templated; it shows a parent-child hierarchy relationship.
    It shows how components can use JavaScript interop and update from asynchronous
    events.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了举例说明组件库的功能，我选择创建了一个名为Web.TwitterComponents的Twitter组件Razor库。这个项目依赖于`Microsoft.NET.Sdk.Razor`
    SDK。它提供了两个组件，一个代表一条推文，另一个代表推文集合。这个项目将演示组件如何被模板化；展示了父子层次关系。它展示了组件如何使用JavaScript互操作性并从异步事件中更新。
- en: Web Twitter Services
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web Twitter 服务
- en: The Web​.Twit⁠terServices project is consumed by the Web.Api project, not the
    Web.TwitterComponents project. The Twitter services are used in the context of
    background service. Background services provide a means for managing long-running
    operations that function outside the request and response pipeline. As is the
    case with tweet streaming, as filtered tweets occur in real time, our services
    will propagate them accordingly.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Web.Twit​terServices 项目被 Web.Api 项目所消费，而不是 Web.TwitterComponents 项目。Twitter
    服务在后台服务的上下文中使用。后台服务提供了一种管理长时间运行操作的手段，其功能超出了请求和响应管道。就像推文流处理那样，当实时过滤的推文发生时，我们的服务将相应地传播它们。
