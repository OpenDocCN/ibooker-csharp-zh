- en: Chapter 3\. Asynchronous Streams
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章 异步流
- en: '*Asynchronous streams* are a way to asynchronously receive multiple data items.
    They’re built on *asynchronous enumerables* (`IAsyncEnumerable<T>`). An asynchronous
    enumerable is an asynchronous version of an enumerable; that is, it can produce
    items on demand for a consumer, and each item may be produced asynchronously.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*异步流*是一种异步接收多个数据项的方式。它们建立在*异步可枚举*(`IAsyncEnumerable<T>`)之上。异步可枚举是可枚举的异步版本；也就是说，它可以按需为消费者生成项目，并且每个项目可能是异步生成的。'
- en: I find it useful to contrast asynchronous streams with other types that may
    be more familiar and to consider the differences. This helps me remember when
    to use asynchronous streams and when other types would be more appropriate.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现将异步流与可能更为熟悉的其他类型进行对比并考虑它们之间的差异非常有用。这帮助我记住何时使用异步流以及其他类型何时更合适。
- en: Asynchronous Streams and Task<T>
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步流和Task<T>
- en: The standard asynchronous approach with `Task<T>` is only sufficient for asynchronously
    handling a single data value. Once a given `Task<T>` completes, that’s it; a single
    `Task<T>` cannot provide more than one value of `T` for its consumers. Even if
    `T` is a collection, the value can only be provided once. See [“Introduction to
    Asynchronous Programming”](ch01.html#intro-async) and [Chapter 2](ch02.html#async-basics)
    for more on using `async` with `Task<T>`.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Task<T>`的标准异步方法仅足以异步处理单个数据值。一旦给定的`Task<T>`完成，就没了；单个`Task<T>`无法为其消费者提供超过一个`T`值。即使`T`是一个集合，该值也只能提供一次。有关使用`async`与`Task<T>`的更多信息，请参阅[“异步编程简介”](ch01.html#intro-async)和[第2章](ch02.html#async-basics)。
- en: When comparing `Task<T>` to asynchronous streams, the asynchronous streams are
    more similar to enumerables. Specifically, an `IAsyncEnumerator<T>` may provide
    any number of `T` values, one at a time. Like `IEnumerator<T>`, an `IAsyncEnumerator<T>`
    may be infinite in length.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 将`Task<T>`与异步流进行比较时，异步流更类似于可枚举。具体而言，`IAsyncEnumerator<T>`可以逐个提供任意数量的`T`值。与`IEnumerator<T>`类似，`IAsyncEnumerator<T>`的长度可以是无限的。
- en: Asynchronous Streams and IEnumerable<T>
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步流和IEnumerable<T>
- en: '`IAsyncEnumerable<T>`, as the name would imply, is similar to `IEnumerable<T>`.
    This is perhaps not a surprise; they both enable consumers to retrieve elements
    from them one at a time. The big difference is in the name: one is asynchronous
    and the other is not.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`IAsyncEnumerable<T>`，正如其名称所示，类似于`IEnumerable<T>`。也许这并不奇怪；它们都允许消费者逐个检索元素。不同之处在于名称：一个是异步的，另一个不是。'
- en: When your code iterates over an `IEnumerable<T>`, it blocks as it retrieves
    each element from the enumerable. If the `IEnumerable<T>` is representing some
    I/O-bound operation, such as a database query or API call, then the consuming
    code ends up blocking on I/O, which is not ideal. `IAsyncEnumerable<T>` works
    just like an `IEnumerable<T>`, except that it asynchronously retrieves each next
    element.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的代码遍历`IEnumerable<T>`时，它会阻塞，因为它从可枚举中检索每个元素。如果`IEnumerable<T>`代表某种I/O绑定操作，例如数据库查询或API调用，那么消费代码最终会阻塞在I/O上，这并不理想。`IAsyncEnumerable<T>`的工作方式与`IEnumerable<T>`完全相同，只是它异步检索每个下一个元素。
- en: Asynchronous Streams and Task<IEnumerable<T>>
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步流和Task<IEnumerable<T>>
- en: It is entirely possible to asynchronously return a collection with more than
    one item; one common example is `Task<List<T>>`. Still, `async` methods that return
    `List<T>` only get one `return` statement; the collection must be completely populated
    before it is returned. Even methods returning `Task<IEnumerable<T>>` may asynchronously
    return an enumerable, but then that enumerable is evaluated synchronously. Consider
    that LINQ-to-Entities has a `ToListAsync` LINQ method that returns `Task<List<T>>`.
    When a LINQ provider executes this, it has to communicate with the database and
    get *all* the matching responses back before it can finish populating the list
    and return it.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 完全可以异步返回一个包含多个项目的集合；一个常见的例子是`Task<List<T>>`。但是，返回`List<T>`的异步方法只有一个`return`语句；在返回之前，必须完全填充集合。甚至返回`Task<IEnumerable<T>>`的方法可能会异步返回一个可枚举，但然后该可枚举会同步评估。请考虑LINQ-to-Entities具有`ToListAsync`
    LINQ方法，该方法返回`Task<List<T>>`。当LINQ提供程序执行此操作时，它必须与数据库通信并获取*所有*匹配的响应，然后才能完成填充列表并返回它。
- en: The limitation of `Task<IEnumerable<T>>` is that it cannot return items as it
    gets them; if returning a collection, it has to load all of its items into memory,
    populate the collection, and then return the entire collection all at once. Even
    if it returns a LINQ query, it can asynchronously build that query, but once the
    query is returned, each item is retrieved from that query synchronously. `IAsyncEnumerable<T>`
    also returns multiple items asynchronously, but the difference is that `IAsyncEnumerable<T>`
    can act asynchronously for *each* item returned. It’s a true asynchronous stream
    of items.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`Task<IEnumerable<T>>` 的限制在于它不能在获取到项目时返回它们；如果返回一个集合，它必须将所有项目加载到内存中，填充集合，然后一次性返回整个集合。即使返回
    LINQ 查询，它也可以异步地构建该查询，但一旦返回查询，每个项目都是同步检索的。`IAsyncEnumerable<T>` 也异步返回多个项目，但不同之处在于
    `IAsyncEnumerable<T>` 可以对每个返回的项目进行异步操作。这是真正的异步项目流。'
- en: Asynchronous Streams and IObservable<T>
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步流和 `IObservable<T>`
- en: Observables are a true notion of asynchronous streams; they produce their notifications
    one at a time with true support for asynchronous production (no blocking). But
    the consumption pattern for `IObservable<T>` is completely different than that
    of `IAsyncEnumerable<T>`. See [Chapter 6](ch06.html#rx-basics) for more details
    about `IObservable<T>`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 观察者是异步流的真正概念；它们一次产生一个通知，支持真正的异步生产（无阻塞）。但 `IObservable<T>` 的消费模式与 `IAsyncEnumerable<T>`
    完全不同。有关 `IObservable<T>` 的更多详细信息，请参见 [第 6 章](ch06.html#rx-basics)。
- en: To consume an `IObservable<T>`, code needs to define a LINQ-like query through
    which the observable notifications will flow, and then subscribe to the observable
    in order to start the flow. When working with observables, the code first defines
    how it will *react* to the incoming notifications, and then it turns them on (hence
    the name “reactive”). In contrast, consuming an `IAsyncEnumerable<T>` is done
    very similarly to consuming an `IEnumerable<T>`, except that the consumption is
    asynchronous.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要消费 `IObservable<T>`，代码需要定义一个类似 LINQ 的查询，通过该查询将可观察通知流动起来，然后订阅可观察对象以开始流动。在处理可观察对象时，代码首先定义如何对传入通知做出
    *反应*，然后才将它们打开（因此称为“响应式”）。相比之下，消费 `IAsyncEnumerable<T>` 与消费 `IEnumerable<T>` 非常相似，只是消费是异步的。
- en: There is also a backpressure problem; all notifications in System.Reactive are
    synchronous, so as soon as one item notification is sent to its subscribers, the
    observable continues execution and retrieves the next item to publish, possibly
    calling the API again. If the consuming code is consuming the stream asynchronously
    (i.e., doing some asynchronous action for each notification as it arrives), then
    the observable will race ahead of the consuming code.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 还存在背压问题；System.Reactive 中的所有通知都是同步的，因此一旦将一个项目通知发送给其订阅者，可观察对象将继续执行并检索下一个要发布的项目，可能会再次调用
    API。如果消费代码是异步消费流（即在每个通知到达时执行某些异步操作），则可观察对象将超前于消费代码。
- en: A nice way of thinking about the difference between them is that `IObservable<T>`
    is push-based and `IAsyncEnumerable<T>` is pull-based. An observable stream will
    push notifications at your code, but an asynchronous stream will passively let
    your code (asynchronously) pull data items out of it. Only when the consuming
    code requests the next item does the observable stream resume execution.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 关于它们之间的区别的一种很好的思考方式是 `IObservable<T>` 是推送式的，而 `IAsyncEnumerable<T>` 是拉取式的。可观察流将向您的代码推送通知，但异步流会被动地让您的代码（异步地）从中拉取数据项。只有在消费代码请求下一个项目时，可观察流才会恢复执行。
- en: Summary
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: A theoretical example may be useful. Many APIs take `offset` and `limit` parameters
    to enable paging of results. Let’s say we wanted to define a method that retrieves
    results from an API that does paging, and we want our method to handle the paging
    so that our higher-level methods don’t have to deal with that.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会有一个理论示例很有用。许多 API 都接受 `offset` 和 `limit` 参数以启用结果的分页。假设我们想要定义一个方法，从进行分页的 API
    中检索结果，并且我们希望我们的方法处理分页，使得我们的高级方法不必处理它。
- en: If our method returns `Task<T>`, we are limited to returning only a single `T`.
    This is fine for a single call to the API where the `T` is the result of the API,
    but it doesn’t work well as a return type if we want our method to call the API
    multiple times.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的方法返回 `Task<T>`，我们只能返回单个 `T`。对于调用 API 并返回其结果的单个调用来说这是可以接受的，但如果我们希望我们的方法多次调用
    API，则这种返回类型效果不佳。
- en: If our method returns `IEnumerable<T>`, we can create a loop, paging through
    the API results by calling it multiple times. Each time the method calls the API,
    it would `yield return` the results of that page. Further API calls are only necessary
    if the enumeration continues. Unfortunately, methods returning `IEnumerable<T>`
    cannot be asynchronous, so all our API calls are forced to be synchronous.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的方法返回`IEnumerable<T>`，我们可以创建一个循环，通过多次调用来分页API结果。每次方法调用API时，它会使用`yield return`返回该页的结果。只有在枚举继续时才需要进一步的API调用。不幸的是，返回`IEnumerable<T>`的方法无法是异步的，因此我们所有的API调用都被迫是同步的。
- en: If our method returns Task<List<T>>, then we can have a loop that pages through
    the API results, calling the API asynchronously. However, the code cannot return
    each item as it gets the response; it would have to build up all the results and
    return them all at once.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的方法返回`Task<List<T>>`，那么我们可以通过调用API异步分页的循环。然而，代码无法在获取响应时返回每个项目；它必须积累所有结果并一次性返回它们。
- en: If our method returns `IObservable<T>`, we can use `System.Reactive` to implement
    an observable stream that begins requests when subscribed to and publishes each
    item as we get them. The abstraction is push-based; it appears to consuming code
    that the API results are being pushed to them, which is more awkward to handle.
    `IObservable<T>` would be a better fit for scenarios like receiving and responding
    to WebSocket/SignalR messages.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的方法返回`IObservable<T>`，我们可以使用`System.Reactive`来实现一个可观察的流，该流在订阅时开始请求，并在获取每个项目时发布。这种抽象是基于推送的；它给消费代码的表现形式是API结果被推送给它们，这样处理起来更加笨拙。`IObservable<T>`更适合接收和响应WebSocket/SignalR消息等场景。
- en: If our method returns `IAsyncEnumerable<T>`, we can have a natural loop that
    uses both `await` and `yield return` to create a true pull-based asynchronous
    stream. `IAsyncEnumerable<T>` is the natural fit for this kind of scenario.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的方法返回`IAsyncEnumerable<T>`，我们可以使用`await`和`yield return`创建一个真正的基于拉取的异步流。`IAsyncEnumerable<T>`是这种场景的天然选择。
- en: '[Table 3-1](#type-classification) summarizes the different roles of common
    types.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[表格 3-1](#type-classification) 总结了常见类型的不同角色。'
- en: Table 3-1\. Type classifications
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 表格 3-1 类型分类
- en: '| Type | Single or multiple value | Asynchronous or synchronous | Push or pull
    |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 单个或多个值 | 异步或同步 | 推送或拉取 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `T` | Single value | Synchronous | N/A |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `T` | 单个值 | 同步 | 不适用 |'
- en: '| `IEnumerable<T>` | Multiple values | Synchronous | N/A |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `IEnumerable<T>` | 多个值 | 同步 | 不适用 |'
- en: '| `Task<T>` | Single value | Asynchronous | Pull |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `Task<T>` | 单个值 | 异步 | 拉取 |'
- en: '| `IAsyncEnumerable<T>` | Multiple values | Asynchronous | Pull |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `IAsyncEnumerable<T>` | 多个值 | 异步 | 拉取 |'
- en: '| `IObservable<T>` | Single or multiple | Asynchronous | Push |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `IObservable<T>` | 单个或多个 | 异步 | 推送 |'
- en: Warning
  id: totrans-33
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: As this book goes to press, .NET Core 3.0 is still in beta, so the details around
    asynchronous streams may change.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当本书付梓时，.NET Core 3.0仍处于测试版阶段，因此关于异步流的细节可能会有所变化。
- en: 3.1 Creating Asynchronous Streams
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3.1 创建异步流
- en: Problem
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: 'You need to return multiple values, and each value may require some asynchronous
    work. This point is commonly reached from one of two paths:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要返回多个值，每个值可能需要一些异步工作。这一点通常从以下两个路径之一达到：
- en: You have multiple values to return (as an `IEnumerable<T>`), and then need to
    add asynchronous work.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你有多个值要返回（作为`IEnumerable<T>`），然后需要添加异步工作。
- en: You have a single asynchronous return (as a `Task<T>`), and then need to add
    other return values.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你有一个单一的异步返回（作为`Task<T>`），然后需要添加其他返回值。
- en: Solution
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Returning multiple values from a method can be done with `yield return`, and
    asynchronous methods use `async` and `await`. With asynchronous streams, you can
    combine these two; just use a return type of `IAsyncEnumerable<T>`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 从方法返回多个值可以通过`yield return`实现，而异步方法则使用`async`和`await`。有了异步流，你可以结合这两者；只需使用返回类型`IAsyncEnumerable<T>`：
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This simple example illustrates how `await` can be used with `yield return`
    to create an asynchronous stream.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的例子说明了如何使用`await`与`yield return`创建异步流。
- en: 'A more real-world example is asynchronously enumerating over all the results
    of an API that uses parameters for paging:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更真实的例子是异步枚举API所有使用分页参数的结果：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When `GetValuesAsync` starts, it does an asynchronous request for the first
    page of data, and then produces the first element. When the second element is
    then requested, `GetValuesAsync` produces it immediately, since it is also in
    that same first page of data. The next element is also in that page, and so on,
    up to 10 elements. Then, when the 11th element is requested, all the values in
    `valuesOnThisPage` will have been produced, so there are no more elements on the
    first page. `GetValuesAsync` will continue executing its `while` loop, proceed
    to the next page, do an asynchronous request for the second page of data, receive
    back a new batch of values, and then it’ll produce the 11th element.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `GetValuesAsync` 开始时，它会对第一页的数据进行异步请求，然后生成第一个元素。当请求第二个元素时，`GetValuesAsync`
    会立即生成，因为它也在同一页的数据中。下一个元素也在该页中，依此类推，直到10个元素。然后，当请求第11个元素时，`valuesOnThisPage` 中的所有值都已生成，因此在第一页上没有更多的元素了。`GetValuesAsync`
    将继续执行其 `while` 循环，转到下一页，进行第二页数据的异步请求，接收新的一批值，然后生成第11个元素。
- en: Discussion
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Ever since `async` and `await` were introduced, users have been wondering how
    to use them with `yield return`. For many years, that wasn’t possible, but asynchronous
    streams has now brought this capability to C# and modern versions of .NET.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 自从引入 `async` 和 `await` 以来，用户一直在思考如何与 `yield return` 结合使用。多年来，这是不可能的，但是异步流现在已经将这一能力带到了
    C# 和现代版本的 .NET 中。
- en: One thing you may notice with the more realistic example is that only some of
    the results need any asynchronous work. In that example, with a page length of
    10, only about 1 out of every 10 elements will need asynchronous work. If the
    page size is 20, then only 1 out of every 20 elements will need asynchronous work.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在更现实的示例中，您可能会注意到只有部分结果需要进行异步处理。在示例中，页面长度为10时，大约每10个元素中只有1个需要进行异步处理。如果页面大小为20，则每20个元素中只有1个需要异步处理。
- en: This is a normal pattern with asynchronous streams. For many streams, the majority
    of asynchronous iteration is actually synchronous; asynchronous streams merely
    *allow* any next item to be retrieved asynchronously. Asynchronous streams were
    designed with both asynchronous and synchronous code in mind; this is why asynchronous
    streams are built on `ValueTask<T>`. By using `ValueTask<T>` under the hood, asynchronous
    streams maximize their efficiency, whether items are retrieved synchronously or
    asynchronously. See [Recipe 2.10](ch02.html#recipe-async-implement-valuetask)
    for more about `ValueTask<T>` and when it is appropriate to use.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这是异步流的一种常见模式。对于许多流来说，大多数异步迭代实际上是同步的；异步流只是允许以异步方式检索任何下一个项。异步流旨在同时考虑异步和同步代码；这就是为什么异步流建立在
    `ValueTask<T>` 上的原因。通过在底层使用 `ValueTask<T>`，异步流最大化了其效率，无论是同步还是异步地检索项目。有关 `ValueTask<T>`
    更多信息和适用场景，请参见 [食谱 2.10](ch02.html#recipe-async-implement-valuetask)。
- en: When you do implement asynchronous streams, consider supporting cancellation.
    See [Recipe 3.4](#recipe-async-streams-cancellation) for a detailed discussion
    of cancellation with asynchronous streams. Some scenarios do not require actual
    cancellation; the consuming code can always choose not to retrieve the next element.
    That is a perfectly fine approach if there’s no external source for the cancellation.
    If you have an asynchronous stream where you want to cancel the asynchronous stream,
    even if it’s in the middle of getting the next element, then you’d want to support
    proper cancellation using a `CancellationToken`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当您实现异步流时，请考虑支持取消操作。有关异步流取消的详细讨论，请参见 [食谱 3.4](#recipe-async-streams-cancellation)。有些情况下并不需要真正的取消；消费代码始终可以选择不检索下一个元素。如果没有取消的外部源，则这是一个完全可以接受的方法。如果您有一个异步流，在该流中希望取消异步流，即使在获取下一个元素时也要支持正确的取消操作，则应使用
    `CancellationToken`。
- en: See Also
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[Recipe 3.2](#recipe-async-streams-consume) covers consuming asynchronous streams.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[食谱 3.2](#recipe-async-streams-consume) 讨论了如何消费异步流。'
- en: '[Recipe 3.4](#recipe-async-streams-cancellation) covers handling cancellation
    for asynchronous streams.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[食谱 3.4](#recipe-async-streams-cancellation) 讨论了如何处理异步流的取消。'
- en: '[Recipe 2.10](ch02.html#recipe-async-implement-valuetask) has more detail about
    `ValueTask<T>` and when it is appropriate to use.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[食谱 2.10](ch02.html#recipe-async-implement-valuetask) 更详细地介绍了 `ValueTask<T>`
    的使用场景。'
- en: 3.2 Consuming Asynchronous Streams
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3.2 消费异步流
- en: Problem
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You need to process the results of an asynchronous stream, also known as an
    asynchronous enumerable.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要处理异步流的结果，也称为异步可枚举。
- en: Solution
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Consuming an asynchronous operation is done via `await`, and consuming an enumerable
    is usually done via `foreach`. Consuming an asynchronous enumerable is done by
    combining these two into `await foreach`. For example, given an asynchronous enumerable
    that pages over API responses, you can consume it and write each element to the
    console:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`await`来消耗异步操作，通常通过`foreach`来消耗可枚举对象。将这两者结合到`await foreach`中来消耗异步可枚举对象。例如，给定一个异步可枚举对象，用于分页
    API 响应，你可以消耗它并将每个元素写入控制台：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Conceptually, what is happening here is that `GetValuesAsync` is invoked, and
    it returns an `IAsyncEnumerable<T>`. The `foreach` then creates an asynchronous
    enumerator from that asynchronous enumerable. Asynchronous enumerators are logically
    similar to regular enumerators, except that their “get next element” operation
    may be asynchronous. So, the `await foreach` will `await` for the next element
    to arrive or for the asynchronous enumerator to complete. If an element arrived,
    `await foreach` will execute its loop body; if the asynchronous enumerator is
    complete, then the loop will exit.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里发生的概念上，是调用`GetValuesAsync`，它返回一个`IAsyncEnumerable<T>`。然后`foreach`从该异步可枚举对象创建一个异步枚举器。异步枚举器在逻辑上类似于常规枚举器，只是它们的“获取下一个元素”的操作可能是异步的。因此，`await
    foreach`将等待下一个元素到达或异步枚举器完成。如果元素到达，`await foreach`将执行其循环体；如果异步枚举器完成，则循环将退出。
- en: 'It is also natural to do asynchronous processing of each element:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对每个元素进行异步处理也是很自然的：
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this case, the `await foreach` won’t proceed to the next element until the
    loop body is complete. So, the `await foreach` will asynchronously receive the
    first element, then asynchronously execute the loop body for that first element,
    then asynchronously receive the next element, then asynchronously execute the
    loop body for that next element, and so on.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`await foreach`不会在循环体完成之前继续下一个元素。因此，`await foreach`将异步接收第一个元素，然后异步执行该第一个元素的循环体，然后异步接收下一个元素，然后异步执行该下一个元素的循环体，依此类推。
- en: 'There is an `await` buried in the `await foreach`: the “get next element” operation
    is awaited. With a regular `await`, you can avoid the implicitly captured context
    by using `ConfigureAwait(false)`, as described in [Recipe 2.7](ch02.html#recipe-async-configureawait).
    Asynchronous streams also support `ConfigureAwait(false)`, which is passed to
    the hidden `await` statements:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在`await foreach`中隐藏了一个`await`：即“获取下一个元素”的操作被等待。通过使用`ConfigureAwait(false)`，你可以避免在常规`await`中捕获上下文，正如[2.7
    节](ch02.html#recipe-async-configureawait)中所述。异步流还支持`ConfigureAwait(false)`，它传递给隐藏的`await`语句中使用的。
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Discussion
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: '`await foreach` is the most natural way to consume asynchronous streams. The
    language supports `ConfigureAwait(false)` for avoiding context in `await foreach`.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`await foreach`是消耗异步流的最自然方式。语言支持`ConfigureAwait(false)`来避免在`await foreach`中的上下文。'
- en: It’s also possible to pass in cancellation tokens; this is a bit more advanced
    due to the complexity of asynchronous streams, so you can find it covered in [Recipe
    3.4](#recipe-async-streams-cancellation).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 可以传入取消令牌；由于异步流的复杂性较高，因此这是更高级的内容，你可以在[3.4 节](#recipe-async-streams-cancellation)中找到相关内容。
- en: While it’s possible and natural to use `await foreach` to consume asynchronous
    streams, there’s an exhaustive library of asynchronous LINQ operators available;
    some of the more popular ones are covered in [Recipe 3.3](#recipe-async-streams-linq).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然使用`await foreach`来消耗异步流既可能又自然，但是也有大量的异步 LINQ 操作符可用；其中一些较受欢迎的操作符在[3.3 节](#recipe-async-streams-linq)中有所涵盖。
- en: The body of `await foreach` can be either synchronous or asynchronous. For the
    asynchronous example in particular, this is something that is much trickier to
    get right when working with other streaming abstractions, such as `IObservable<T>`.
    This is because observable subscriptions must be synchronous, but `await foreach`
    permits natural asynchronous processing.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`await foreach`的主体可以是同步的，也可以是异步的。对于特定的异步示例，这对于在处理其他流抽象（如`IObservable<T>`）时要正确处理的事情要困难得多。这是因为可观察的订阅必须是同步的，但`await
    foreach`允许自然的异步处理。'
- en: The `await foreach` generates an `await` used for the “get next element” operation;
    it also generates an `await` used to asynchronously dispose the enumerable.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`await foreach`生成一个`await`用于“获取下一个元素”的操作；它还生成一个`await`用于异步处理可枚举对象的释放。'
- en: See Also
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[Recipe 3.1](#recipe-async-streams-produce) covers producing asynchronous streams.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[Recipe 3.1](#recipe-async-streams-produce)涵盖了生成异步流。'
- en: '[Recipe 3.4](#recipe-async-streams-cancellation) covers handling cancellation
    for asynchronous streams.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[Recipe 3.4](#recipe-async-streams-cancellation)涵盖了处理异步流的取消。'
- en: '[Recipe 3.3](#recipe-async-streams-linq) covers common LINQ methods for asynchronous
    streams.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[Recipe 3.3](#recipe-async-streams-linq)涵盖了异步流的常见LINQ方法。'
- en: '[Recipe 11.6](ch11.html#recipe-oop-dispose) covers asynchronous disposal.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[Recipe 11.6](ch11.html#recipe-oop-dispose)涵盖了异步处理。'
- en: 3.3 Using LINQ with Asynchronous Streams
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3.3 使用LINQ处理异步流
- en: Problem
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to process an asynchronous stream using well-defined and well-tested
    operators.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望使用经过良好定义和经过充分测试的操作符处理异步流。
- en: Solution
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: '`IEnumerable<T>` has LINQ to Objects, and `IObservable<T>` has LINQ to Events.
    Both of these have libraries of extension methods that define operators you can
    use to build queries. `IAsyncEnumerable<T>` also has LINQ support, provided by
    the .NET community in the `System.Linq.Async` NuGet package.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`IEnumerable<T>`具有LINQ to Objects，而`IObservable<T>`具有LINQ to Events。这两者都有定义操作符的扩展方法库，您可以使用这些方法构建查询。`IAsyncEnumerable<T>`也具有LINQ支持，由.NET社区在`System.Linq.Async`
    NuGet包中提供。'
- en: As an example, one of the common questions about LINQ is how to use the `Where`
    operator if the predicate for `Where` is asynchronous. In other words, you want
    to filter a sequence based on some asynchronous condition—e.g., you need to look
    up each element in a database or API to see if it should be included in the result
    sequence. `Where` doesn’t work with an asynchronous condition because the `Where`
    operator requires that its delegate return an immediate, synchronous answer.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，关于LINQ的一个常见问题是如何在`Where`的谓词是异步的情况下使用`Where`操作符。换句话说，您希望根据一些异步条件过滤序列，例如，您需要查找数据库或API中的每个元素，以查看它是否应包含在结果序列中。`Where`无法处理异步条件，因为`Where`操作符要求其委托返回即时、同步的答案。
- en: 'Asynchronous streams have a support library that defines many useful operators.
    In the following example, `WhereAwait` is the proper choice:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 异步流有一个支持库，定义了许多有用的操作符。在下面的示例中，`WhereAwait`是正确的选择：
- en: '[PRE5]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'LINQ operators for asynchronous streams also include synchronous versions;
    it does make sense to apply a synchronous `Where` (or `Select`, or whatever) to
    an asynchronous stream. The result is still an asynchronous stream:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 用于异步流的LINQ操作符也包括同步版本；将同步的`Where`（或`Select`，或其他操作符）应用于异步流是有意义的。结果仍然是一个异步流：
- en: '[PRE6]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'All of your old LINQ friends are here: `Where`, `Select`, `SelectMany`, and
    even `Join`. Most LINQ operators now also take asynchronous delegates, like the
    `WhereAwait` example above.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 您所有熟悉的LINQ操作符都在这里：`Where`、`Select`、`SelectMany`，甚至`Join`。现在大多数LINQ操作符也接受异步委托，就像上面的`WhereAwait`示例一样。
- en: Discussion
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Asynchronous streams are pull-based, so there’s no time-related operators like
    there are for observables. `Throttle` and `Sample` don’t make sense in this world,
    since the elements are pulled out of the asynchronous stream on demand.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 异步流是基于拉取的，因此没有像可观察对象那样的与时间相关的操作符。在这个世界中，`Throttle`和`Sample`没有意义，因为元素是按需从异步流中拉取出来的。
- en: LINQ methods for asynchronous streams can also be useful for regular enumerables.
    If you find yourself in this situation, you can call `ToAsyncEnumerable()` on
    any `IEnumerable<T>`, and then you’ll have an asynchronous stream interface that
    you can use with `WhereAwait`, `SelectAwait`, and other operators that support
    asynchronous delegates.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 用于异步流的LINQ方法也对常规可枚举对象有用。如果您发现自己处于这种情况下，您可以在任何`IEnumerable<T>`上调用`ToAsyncEnumerable()`，然后您将拥有一个异步流接口，您可以使用`WhereAwait`、`SelectAwait`和其他支持异步委托的操作符。
- en: Before you dive in, a word on naming is in order. The example in this recipe
    used `WhereAwait` as the asynchronous equivalent of `Where`. As you explore the
    LINQ operators for asynchronous streams, you’ll find that some end in `Async`
    and others end in `Await`. The operators that end in `Async` return an awaitable;
    they represent a regular value, not an asynchronous sequence. The operators that
    end in `Await` take an asynchronous delegate; the `Await` in their name implies
    that they actually perform an `await` on the delegate you pass to them.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入研究之前，有必要谈一下命名。本示例中使用`WhereAwait`作为`Where`的异步等价物。当您探索用于异步流的LINQ操作符时，您会发现一些以`Async`结尾，而另一些以`Await`结尾。以`Async`结尾的操作符返回一个可等待的对象；它们代表一个常规值，而不是一个异步序列。以`Await`结尾的操作符接受一个异步委托；它们名称中的`Await`意味着它们实际上在您传递给它们的委托上执行了一个`await`。
- en: 'We already looked at an example of the `Await` suffix with `Where` and `WhereAwait`.
    The `Async` suffix only applies to *termination operators*—operators that extract
    some value or perform some calculation and return an asynchronous scalar value
    instead of an asynchronous sequence. An example of a termination operator is `CountAsync`,
    the asynchronous stream version of `Count`, which can count the number of elements
    that match some predicate:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看过带有 `Await` 后缀的 `Where` 和 `WhereAwait` 的示例。`Async` 后缀仅适用于*终结操作符*——提取某些值或执行某些计算并返回异步标量值而不是异步序列的操作符。终结操作符的示例是
    `CountAsync`，异步流版本的 `Count`，它可以计算与某些谓词匹配的元素数：
- en: '[PRE7]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'That predicate can *also* be asynchronous, in which case you would then use
    the `CountAwaitAsync` operator, since it both takes an asynchronous delegate (which
    it will `await`) and produces a single terminal value, the count:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 该谓词也可以是异步的，在这种情况下，您将使用 `CountAwaitAsync` 操作符，因为它既接受异步委托（它将`await`）又生成单个终端值，即计数：
- en: '[PRE8]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In summary, operators that can take delegates have two names: one with an `Await`
    suffix and one without. In addition, operators that return a terminal value rather
    than an asynchronous stream end in `Async`. If an operator takes an asynchronous
    delegate *and* returns a terminal value, then it has both suffixes.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，可以接受委托的操作符有两个名称：一个带有 `Await` 后缀，一个没有。此外，返回终端值而不是异步流的操作符以 `Async` 结尾。如果一个操作符既接受异步委托，*又*返回终端值，则它具有这两个后缀。
- en: Tip
  id: totrans-99
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: The LINQ operators for asynchronous streams are in the NuGet package for [`System.Linq.Async`](http://bit.ly/sys-linq-async).
    Additional LINQ operators for asynchronous streams can be found in the NuGet package
    for [`System.Interactive.Async`](http://bit.ly/sys-int-async).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 用于异步流的 LINQ 操作符位于 NuGet 包 [`System.Linq.Async`](http://bit.ly/sys-linq-async)
    中。还可以在 NuGet 包 [`System.Interactive.Async`](http://bit.ly/sys-int-async) 中找到用于异步流的其他
    LINQ 操作符。
- en: See Also
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[Recipe 3.1](#recipe-async-streams-produce) covers producing asynchronous streams.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[配方 3.1](#recipe-async-streams-produce) 涵盖了生成异步流。'
- en: '[Recipe 3.2](#recipe-async-streams-consume) covers consuming asynchronous streams.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[配方 3.2](#recipe-async-streams-consume) 涵盖了消费异步流。'
- en: 3.4 Asynchronous Streams and Cancellation
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3.4 异步流与取消
- en: Problem
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want a way to cancel asynchronous streams.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要一种取消异步流的方法。
- en: Solution
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Not all asynchronous streams require cancellation. It’s possible to simply
    stop enumerating when a condition is reached. If that is the only kind of “cancellation”
    necessary, then a true cancellation isn’t required, as the following example shows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有的异步流都需要取消。当达到条件时，可以简单地停止枚举。如果这是唯一需要的“取消”，那么不需要真正的取消，就像以下示例所示：
- en: '[PRE9]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: That said, it’s often useful to cancel asynchronous streams, as some operators
    pass cancellation tokens to their source streams. In this scenario, you’ would
    want to use a `CancellationToken` to stop the `await foreach` from external code.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，取消异步流通常很有用，因为某些操作符将取消标记传递给它们的源流。在这种情况下，您希望使用 `CancellationToken` 来停止外部代码中的
    `await foreach`。
- en: 'An `async` method returning `IAsyncEnumerable<T>` may take a cancellation token
    by defining a parameter marked with the `EnumeratorCancellation` attribute. It
    can then use the token naturally, which is usually done by passing it to other
    APIs that take cancellation tokens, like this:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 `IAsyncEnumerable<T>` 的 `async` 方法可以通过定义标记有 `EnumeratorCancellation` 属性的参数来接受取消令牌。然后可以自然地使用该令牌，通常是通过将其传递给其他接受取消令牌的
    API，如下所示：
- en: '[PRE10]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Discussion
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The example solution here passes the `CancellationToken` directly to the method
    returning the asynchronous enumerator. This is the most common usage.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 此处的示例解决方案直接将 `CancellationToken` 传递给返回异步枚举器的方法。这是最常见的用法。
- en: There are other scenarios where your code will be given an asynchronous enumerator
    and will want to apply a `CancellationToken` to the enumerators it uses. Cancellation
    tokens are used when starting a new enumeration of an enumerable, so it makes
    sense to apply a `CancellationToken` in this way. The enumerable itself is *defined*
    by the `SlowRange` method, but it’s not started until it is consumed. There are
    even some scenarios where different cancellation tokens should be passed to different
    enumerations of the enumerable.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他情景，您的代码将获得一个异步枚举器，并希望对其使用`CancellationToken`。在启动可枚举对象的新枚举时使用取消令牌是有意义的。可枚举对象本身是通过`SlowRange`方法*定义*的，但直到被消费之前都不会启动。甚至有些情况下，应该为可枚举对象的不同枚举传递不同的取消令牌。
- en: 'Briefly; it is not the enumerable that is cancelable, but the enumerator created
    by that enumerable. This is an uncommon but important use case, and it’s the reason
    asynchronous streams support a `WithCancellation` extension method that you can
    use to attach a `CancellationToken` to a specific iteration of an asynchronous
    stream:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 简言之，可枚举对象本身是不可取消的，但由此创建的枚举器是可以取消的。这是一个不常见但重要的用例，也是为什么异步流支持`WithCancellation`扩展方法，您可以使用它将`CancellationToken`附加到异步流的特定迭代中。
- en: '[PRE11]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: With the `EnumeratorCancellation` parameter attribute in place, the compiler
    takes care of passing the token from `WithCancellation` to the `token` parameter
    marked by `EnumeratorCancellation`, and the cancellation request now causes `await
    foreach` to raise an `OperationCanceledException` after it has processed the first
    few items.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`EnumeratorCancellation`参数属性，编译器负责将令牌从`WithCancellation`传递到标记为`EnumeratorCancellation`的`token`参数，现在取消请求会导致`await
    foreach`在处理了少量项目后引发`OperationCanceledException`。
- en: 'The `WithCancellation` extension method doesn’t prevent `ConfigureAwait(false)`.
    Both extension methods can be chained together:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`WithCancellation`扩展方法不会阻止`ConfigureAwait(false)`。这两个扩展方法可以链式使用：'
- en: '[PRE12]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: See Also
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Recipe 3.1](#recipe-async-streams-produce) covers producing asynchronous streams.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[Recipe 3.1](#recipe-async-streams-produce) 讲述了生成异步流。'
- en: '[Recipe 3.2](#recipe-async-streams-consume) covers consuming asynchronous streams.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[Recipe 3.2](#recipe-async-streams-consume) 讲述了消费异步流。'
- en: '[Chapter 10](ch10.html#cancellation) covers cooperative cancellation across
    multiple technologies.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[第十章](ch10.html#cancellation) 讲述了跨多种技术的协作取消。'
