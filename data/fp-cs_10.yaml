- en: Chapter 10\. Memoization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第十章。记忆化
- en: There are more advantages to pure functions than just producing predictable
    results. Granted that’s a good thing to have, but there’s another way to use that
    behavior to our advantage.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 纯函数的优点不仅在于产生可预测的结果。尽管这是一件好事，但我们还有另一种方法可以利用这种行为来获益。
- en: Memoization is somewhat like caching, specifically the `GetOrAdd` function from
    `MemoryCache`. What this does is takes a key value of some kind, and if that key
    is already present in the cache, it returns the object out. If it isn’t, then
    you need to pass in a function that will generate the required value.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 记忆化有点像缓存，特别是从 `MemoryCache` 的 `GetOrAdd` 函数来说。它的作用是取某种键值，如果该键已存在于缓存中，则将对象返回出来。如果不存在，则需要传入一个生成所需值的函数。
- en: Memoization works to the exact same principle, except its scope might not extend
    beyond a single calculation.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 记忆化的工作原理与此相同，只不过其范围可能不会延伸到单个计算之外。
- en: Where this is useful is in a multi-step calculation of some kind that might
    be recursive, or involve the same calculations being performed multiple times
    for some reason.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这在某种需要递归进行的多步计算中是有用的，或者因某种原因需要多次执行相同的计算。
- en: Maybe the best way to explain this is with an example…​
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 或许最好的方法是通过一个例子来解释这一点...​
- en: Bacon Numbers
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bacon 数
- en: 'Ever wanted an entertaining way to waste an afternoon or two? Have a look into
    Bacon Numbers. It’s based on the idea that Kevin Bacon is the center of the acting
    universe, connecting all actors together. Like all roads lead to Rome, all actors
    somehow connect at some level to Kevin Bacon^([1](ch10.html#idm45400847828272)).
    An actor’s Bacon number is the number of film connections you have to work through
    in order to reach Kevin Bacon. Let’s work through a few examples:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 曾经想过有一种娱乐方式来浪费一个或两个下午吗？试试 Bacon 数吧。它基于凯文·贝肯是演艺界的中心人物的想法，连接所有演员。就像所有道路通往罗马一样，所有演员在某个层面上都与凯文·贝肯有连接。一个演员的
    Bacon 数是你需要经过的电影连接数，才能到达凯文·贝肯。我们来看几个例子：
- en: '**Kevin Bacon**: easy. Bacon number of 0, because he **is** the Big Bacon himself.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**凯文·贝肯**：简单。Bacon 数为 0，因为他**就是**大贝肯本人。'
- en: '**Tom Hanks**: Bacon number of 1\. He was with KB in one of my personal favorites,
    *Apollo 13*. Frequent Tom Hanks collaborator **Meg Ryan** is also 1, because she
    appeared with KB in *In The Cut*.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**汤姆·汉克斯**：Bacon 数为 1。他与 KB 在我个人最爱的电影之一《阿波罗13号》中合作。经常与汤姆·汉克斯合作的**梅格·瑞恩**也是
    1，因为她在《剪切中》中与 KB 合作。'
- en: '**David Tennant**: Bacon number of 2\. He appeared with **Colin Firth** in
    *St. Trinian’s 2*. Colin Firth appeared in *Where the Truth Lies* with Kevin Bacon.
    That’s 2 films before we find a connection, so a Bacon number of 2\. Believe it
    or not **Marilyn Monroe** also has a score of 2 due to KB appearing in *JFK* with
    **Jack Lemon**, who was also in *Some Like it Hot*.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**大卫·田纳特**：Bacon 数为 2。他与**科林·费斯**在电影《圣特里尼安学校2》中合作出演。科林·费斯与凯文·贝肯合作出演了《真相何在》，这是两部电影，所以他们之间有连接，因此
    Bacon 数为 2。令人难以置信的是，**玛丽莲·梦露**的分数也为 2，因为凯文·贝肯出演了《JFK》，与**杰克·莱蒙**合作出演了《热情如火》。'
- en: Bollywood superstar **Aamir Khan** has a bacon number of 3\. He was with living
    legend **Amitabh Bacchhan** in *Bollywood Talkies*. Amitabh was in *The Great
    Gatsby* with **Toby McGuire**. Toby McGuire was in *Beyond all Boundaries* with
    Kevin Bacon.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 宝莱坞巨星**阿米尔·汗**的 Bacon 数为 3。他与传奇巨星**阿米塔布·巴赫查恩**合作出演了《宝莱坞谈话》。阿米塔布出演了《了不起的盖茨比》，与**托比·麦奎尔**合作出演了《超越所有界限》。
- en: My Bacon number is Infinity! This is because I’ve never appeared in a film as
    an actor^([2](ch10.html#idm45400847816624)). Also, the holder of the highest Bacon
    number I’m aware of is **William Rufus Shafter**, an American Civil War general,
    who also appeared in a non-fiction film made in 1989, which still secures him
    a Bacon Number. It’s a whopping great 10!!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我的 Bacon 数是无穷大！这是因为我从未以演员身份出现在电影中^([2](ch10.html#idm45400847816624))。而我所知的最高
    Bacon 数的持有者是**威廉·鲁弗斯·沙夫特**，一位美国内战将军，他也出现在1989年制作的非虚构电影中，这使他的 Bacon 数高达 10！
- en: Right, hopefully you understand the rules.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对了，希望你能理解这些规则。
- en: 'Let’s imagine you wanted to work out which out of these actors had the lowest
    Bacon Number programatically. Something like this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想编写程序来找出这些演员中 Bacon 数最低的是谁。像这样：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'There are any numbers of ways that GetBaconNumber could be calculated. Most
    likely using a web API of flim data of some kind. There are more advanced “shortest
    path” algorithms out there, but for the sake of simplicity I’ll say it’s something
    like this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多方法可以计算GetBaconNumber。最有可能使用某种电影数据的Web API。还有更高级的“最短路径”算法，但简单起见，我会说是这样的：
- en: Get all of Kevin Bacon’s films. Assign all actors in these films a bacon number
    of 1\. If the target actor (e.g. Tom Hanks) is among them, return an answer of
    1\. Otherwise continue
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取凯文·贝肯的所有电影。将这些电影中的所有演员分配为1号。如果目标演员（例如汤姆·汉克斯）在其中，则返回答案为1。否则继续。
- en: Take each of the actors from the previous step (excluding Kevin Bacon himself),
    get a list of all of their flims not already checked. Assign all actors from these
    films not already assigned a number a value of 2.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从前一步骤中的每个演员（不包括凯文·贝肯本人）获取他们的所有电影列表，这些电影尚未被检查。给这些电影中尚未分配号码的所有演员分配值2。
- en: And so on in iterations, with each set of actors being assigned progressively
    higher values until we finally reach the target actor and return their number.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每次迭代时，将演员集合分配逐渐增加的值，直到最终到达目标演员并返回其编号。
- en: Since there’s an API at work to calculate these numbers, every actor whose filmography
    we download, or every film whose cast list we download, all have a significant
    cost in processing time.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 由于存在用于计算这些数字的API，我们下载演员的电影作品列表或下载演员名单的每部电影都需要大量的处理时间。
- en: Further to that, there is an awful lot of overlap between these actors and their
    films, so unless we step in and do something, we’re going to be checking the same
    film multiple times.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这些演员和他们的电影之间有很多重叠，所以除非我们介入并采取措施，否则我们将多次检查同一部电影。
- en: One option is to create a state object to pass into an Aggregate function of
    some kind. It’s an indefinite loop, so we’d also need to select one of the options
    for compromising on the functional principles and allowing a loop of this kind.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一种选择是创建一个状态对象，传递给某种聚合函数。这是一个不确定的循环，因此我们还需要选择一种妥协功能原则的选项，允许这种循环。
- en: 'It might look something like this (N.B. I’ve made up the web API, so don’t
    expect this to work in a real application):'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 它可能看起来像这样（注意，我编造了Web API，所以不要期望这在实际应用中能工作）：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is fine, but could be better. There’s a lot of boilerplate code that’s
    concerned with tracking whether or not an actor has already been checked or not.
    For instance, there are a lot of uses of Distinct.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法不错，但可以更好。有很多样板代码涉及跟踪演员是否已经被检查过。例如，有很多使用Distinct的地方。
- en: With Memoization we get a generic version of the check, like a cache, but it
    exists within the scope of the calculation we’re performing, and doesn’t persist
    beyond it. If you do want the saved, calculated value to persist between calls
    to this function, then `MemoryCache` maybe a better choice.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Memoization，我们得到一个通用版本的检查，就像一个缓存，但它存在于我们执行的计算范围内，并且不会在其之外持久存在。如果您确实希望保存计算值以在调用此函数时保持持久性，则`MemoryCache`可能是更好的选择。
- en: 'I could create a Memoized function to get a list of films the aactors I listed
    above have been in, like this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以创建一个Memoized函数，以获取我上面列出的演员曾参演的电影列表，就像这样：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: I called the same function there 4 times, and by rights it should have gone
    away to the film data respository and fetched a fresh copy of the data 4 times.
    In fact it did it only a single line when `kb1` was populated. Every time since
    then a copy of the same data was returned.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我在那里调用了相同的函数4次，按理说它应该去电影数据存储库，并获取数据的新副本4次。实际上，仅在填充`kb1`时执行了一次。从那时起，每次都返回相同数据的副本。
- en: Note also, by the way, that the Memoized version and original version are on
    separate lines. That’s a limitation of C#. You can’t call an extension method
    on a function, only on a `Func` delegate, and the arrow function isn’t a `Func`
    until it has been stored in a variable.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，请注意，Memoized版本和原始版本位于不同的行上。这是C#的限制。您无法在函数上调用扩展方法，只能在`Func`委托上调用，并且箭头函数在存储在变量中之前不是`Func`。
- en: Some functional languages have out-of-the-box support for Memoization, but F#
    doesn’t, oddly enough.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一些函数式语言在Memoization方面具有开箱即用的支持，但奇怪的是，F#没有。
- en: 'This is an updated version of the Bacon Number calculation, this time taking
    advantage of the Memoization feature:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Bacon Number计算的更新版本，这次利用了Memoization功能：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Literally the only difference here is that we’ve created a local version of
    the call to get film data from a remote resource, then memoized it, and thereafter
    referenced only the memoized version. This means that there are guaranteed to
    be no wasteful repeat requests for data.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上唯一的区别在于我们创建了一个从远程资源获取电影数据的本地版本，然后进行了记忆化，并且以后只引用了记忆化的版本。这意味着保证了没有不必要的重复数据请求。
- en: Implementing Memoization in C#
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在C#中实现记忆化
- en: 'Now that you understand some of the basics, this is how you’d make a memoization
    function for a simple, single parameter function:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了一些基础知识，这就是如何为简单的单参数函数创建一个记忆化函数的方法：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This version of Memoize expects the “live data” function has only a single
    parameter of any type. To expect more parameters, further Memoize extension methods
    would be necessary, like this:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本的Memoize期望“live data”函数只有一个任意类型的参数。如果期望更多的参数，则需要进一步的Memoize扩展方法，像这样：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, to make this work, I’ve assumed that `ToString()` returns something meaningful,
    meaning that most likely it’ll have to be a primitive type (like a `string` or
    `int`) in order to work. The `ToString()` method on a class tends to simply return
    a description of the *Type* of the class, not its properties.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要使这个工作正常，我假设`ToString()`方法返回一些有意义的东西，这意味着它很可能必须是一个基本类型（如`string`或`int`）才能正常工作。类的`ToString()`方法通常只返回类的*类型*描述，而不是其属性。
- en: 'If you absolutely have to memoize classes as parameters, then some creativity
    is needed. The easiest way to keep it generic is probably to add parameters to
    the `Memoize` function which require the developer to provide a custom `ToString`
    function. Like this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你确实需要将类作为参数进行记忆化，那么需要一些创意。保持通用性的最简单方法可能是向`Memoize`函数添加参数，要求开发者提供自定义的`ToString`函数。像这样：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'you might call it like this, in that case:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意，你可以这样称呼它：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This is only possible though, if you keep your functions *Pure*. If there are
    side effects of any kind in your “live” func, then you might not necessariy get
    the results you expect. Depending on what those side effects are.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这只有在你的函数保持*纯粹*的情况下才可能实现。如果你的“live”函数有任何副作用，那么你可能不会得到你预期的结果。这取决于那些副作用是什么。
- en: From a practical perspective, I wouldn’t be worried about adding logging into
    the “live” function, but I might be concerned if there were properties that were
    expected to be unique in every instance of the generated class.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 从实际的角度来看，我不担心将日志添加到“live”函数中，但如果生成类的每个实例中预期存在唯一的属性，则我可能会担心。
- en: There may be cases that you *want* the results to persist between calls to the
    `Memoize` function, in which case you’ll also need to add a MemoryCache parameter
    and pass in an instance from the outside world. I’m not convinced there are many
    circumstances where that’s a good idea, though.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，可能*希望*结果在对`Memoize`函数的多次调用之间保持持久化，这种情况下，你还需要添加一个MemoryCache参数，并从外部传入一个实例。不过我并不认为有很多情况下这是个好主意。
- en: Conclusion
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this chapter we looked at Memoization, what it is and how to implement it.
    It’s a lightweight alternative to caching which can be used to drastically reduce
    the amount of time taken to complete a complex calculation with a lot of repetitive
    elements.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们探讨了记忆化，它是什么以及如何实现它。它是缓存的一种轻量级替代方案，可用于显著减少执行具有大量重复元素的复杂计算所需的时间。
- en: That’s it for theory now! This isn’t just the end of this chapter, but also
    of this entire part of the book.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在理论部分就到这里了！这不仅是本章的结束，也是整本书的这一部分的结束。
- en: Part one was a look at how to use functional ideas and out-of-the-box C# to
    improve your daily coding. Part two was a deeper dive into the actual theory behind
    Functional Programming and how to implement it with a little creative hacking
    about. Part three is going to be a little more philosophical, and to give you
    a few hints as to where to go next with what you’ve learned here with me.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 第一部分是如何使用函数式思想和现成的C#来改进你的日常编码。第二部分深入探讨了函数式编程背后的实际理论，以及如何通过一些创意的方法实现它。第三部分将会更加哲学性，为你提供一些关于如何利用在这里学到的知识的下一步方向的提示。
- en: Turn over, if you dare, to enter…​Part Three…​
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 转过来，如果你敢的话，进入…第三部分…。
- en: ^([1](ch10.html#idm45400847828272-marker)) It probbaly isn’t true, sorry Mr.
    Bacon. I still love you, though!
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch10.html#idm45400847828272-marker)) 这可能并不正确，抱歉贝肯先生。但我仍然爱你！
- en: ^([2](ch10.html#idm45400847816624-marker)) I wouldn’t say no, though. Anyone
    know a film director wanting to cast an aging, overweight, British tech-nerd?
    I probably couldn’t play James Bond, but I’m willing to give it a go!
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch10.html#idm45400847816624-marker)) 虽然我不会拒绝。有人知道想要招聘一个年迈、超重、英国技术宅的电影导演吗？我可能不会演詹姆斯·邦德，但我愿意试试！
