- en: Chapter 8\. Accepting Form Input with Validation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。使用验证接受表单输入
- en: In this chapter, you’ll learn how to use the framework-provided components for
    accepting form input to bind custom C# models to the `EditForm` component. We’ll
    cover native speech recognition when used in forms. You’ll also learn how to use
    Reactive Extensions with Rx.NET. The model app’s contact page form will demonstrate
    all of this.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何使用框架提供的组件来接受表单输入，将自定义的C#模型绑定到`EditForm`组件。我们将介绍在表单中使用本地语音识别。您还将学习如何在Rx.NET中使用响应式扩展。模型应用程序的联系页面表单将演示所有这些内容。
- en: Let’s start with how form submission is used to accept and validate user input.
    You’ll see how valid user input can be sent to HTTP endpoints for processing.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从接受和验证用户输入的表单提交开始。您将看到如何将有效的用户输入发送到HTTP端点进行处理。
- en: The Basics of Form Submission
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单提交的基础知识
- en: 'The core functionality of an HTML `form` element is to accept and validate
    user input. When a user’s input is invalid, the user should be notified. When
    there is valid input, submit that input to an HTTP endpoint to process. The form
    submission process is as follows:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: HTML `form` 元素的核心功能是接受和验证用户输入。当用户的输入无效时，应通知用户。当输入有效时，将其提交到HTTP端点进行处理。表单提交过程如下：
- en: The `form` is presented to the user to fill out.
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户被呈现填写`form`。
- en: The user fills out the `form` and attempts to submit it.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户填写`form`并尝试提交。
- en: The `form` is validated.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对`form`进行验证。
- en: If the `form` is invalid, validation messages or errors are shown to the user.
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`form`无效，则向用户显示验证消息或错误。
- en: If the `form` is valid, the input is sent off for processing.
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`form`有效，输入将被发送进行处理。
- en: Between these steps, the user interacts with the `form` in various ways, sometimes
    by typing, sometimes by clicking, sometimes by selecting a radio button, etc.
    When the form is invalid, the state of the `form` can display validation messages
    or errors to the user. A form can accept many different types of user input. We
    can apply dynamic CSS to desirable input elements to indicate that the user has
    entered invalid input. We can control which element has focus, and we can set
    elements as `disabled` or make them `readonly`. These styles include animations
    to emphasize errant conditions and draw the user’s attention to a specific area.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些步骤之间，用户以各种方式与`form`交互，有时通过键入，有时通过点击，有时通过选择单选按钮等。当表单无效时，表单的状态可以显示验证消息或错误给用户。表单可以接受多种不同类型的用户输入。我们可以对期望的输入元素应用动态CSS来指示用户输入无效。我们可以控制哪个元素具有焦点，并且可以将元素设置为`disabled`或使其`readonly`。这些样式包括动画以强调错误条件并引导用户注意特定区域。
- en: Framework-Provided Components for Forms
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单的框架提供的组件
- en: Blazor provides many components that apply a layer atop native HTML elements.
    One such component is `EditForm`. The `EditForm` component is designed to be used
    as a wrapper around the native HTML `form` element. This is what’s used in the
    `Contact` form of the book’s model app. There are other framework-provided components
    as well. In the next section, you’ll see the various framework- provided components
    that can be used with `EditForm`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor提供了许多组件，这些组件在本地HTML元素之上提供了一层。其中一个组件是`EditForm`。`EditForm`组件被设计为包装原生HTML`form`元素。这是书籍模型应用程序的`Contact`表单中使用的组件。还有其他框架提供的组件。在下一节中，您将看到可以与`EditForm`一起使用的各种框架提供的组件。
- en: '[Table 8-1](#built-in-components) shows the various framework-provided components
    that can be used with the `EditForm` component.^([1](ch08.html#idm46365007034848))'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[Table 8-1](#built-in-components) 显示可以与`EditForm`组件一起使用的各种框架提供的组件。^([1](ch08.html#idm46365007034848))'
- en: Table 8-1\. Framework-provided form components
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 表8-1。框架提供的表单组件
- en: '| Blazor component | HTML element wrapped | Purpose of component |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| Blazor组件 | 包装的HTML元素 | 组件的目的 |'
- en: '| --- | --- | --- |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `EditForm` | `<form>` | Provides a wrapper around the native HTML `form`
    element |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `EditForm` | `<form>` | 提供对原生HTML `form` 元素的包装 |'
- en: '| `InputCheckbox` | `<input type="checkbox">` | Accepts user input for either
    `true` or `false` |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `InputCheckbox` | `<input type="checkbox">` | 接受用户输入，要么`true`要么`false` |'
- en: '| `Input⁠Date​<TValue>` | `<input type="date">` | Accepts a `DateTime` value
    as user input |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `InputDate<TValue>` | `<input type="date">` | 接受`DateTime`值作为用户输入 |'
- en: '| `InputFile` | `<input type="file">` | Accepts a file upload |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `InputFile` | `<input type="file">` | 接受文件上传 |'
- en: '| `InputNum⁠ber​<TValue>` | `<input type="number">` | Accepts a numeric value
    as user input |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `InputNumber<TValue>` | `<input type="number">` | 接受用户输入的数值 |'
- en: '| `InputRa⁠dio​<TValue>` | `<input type="radio">` | Accepts a mutually exclusive
    set of values representing a single choice |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `InputRadio<TValue>` | `<input type="radio">` | 接受一组互斥的值，代表单个选择 |'
- en: '| `InputRa⁠dioGroup​<TValue>` | Parent of one or more `Input​Ra⁠dio<TValue>`
    components | Semantically wraps the `InputRa⁠dio​<TValue>` components together
    such that they’re mutually exclusive |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `InputRadioGroup<TValue>` | 一个或多个 `InputRadio<TValue>` 组件的父组件 | 在语义上将 `InputRadio<TValue>`
    组件包装在一起，使它们成为互斥的 |'
- en: '| `InputSe⁠lect​<TValue>` | `<select>` | Accepts a `TValue` value as user input
    from a list of custom options |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `InputSelect<TValue>` | `<select>` | 接受`TValue`值作为用户输入，来自自定义选项列表 |'
- en: '| `InputText` | `<input type="text">` | Accepts a string value as user input
    |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `InputText` | `<input type="text">` | 接受一个字符串值作为用户输入 |'
- en: '| `InputTextArea` | `<textarea>` | Accepts a string value as user input but
    traditionally displays and expects larger values than the `InputText` component
    |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `InputTextArea` | `<textarea>` | 接受一个字符串值作为用户输入，但通常显示和期望的值比 `InputText` 组件更大
    |'
- en: Using these aforementioned components, you can build out a form that is as rich
    and as complex as your app needs.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述组件，您可以构建一个与您的应用程序需求一样丰富和复杂的表单。
- en: In the next section, I’ll show you how to build a model that will represent
    the state of the form and the user interacting with it. This model will be decorated
    with metadata that will power the validation of the form it binds to.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我将向您展示如何构建一个模型，该模型将表示表单的状态以及用户与之交互的情况。该模型将使用元数据进行修饰，这些元数据将用于验证其绑定到的表单。
- en: Models and Data Annotations
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型和数据注解
- en: One of the common use cases for forms is to give the end user a way to contact
    someone from within the app for various reasons. The [`Contact` form](https://oreil.ly/LZzCM)
    of the Learning Blazor app does exactly that. The user can fill out the form and
    send me, the owner of the app, a message. After they hit send and confirm that
    they’re human, the message is sent to me as an email. We’ll go over how this works
    throughout the chapter.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 表单的一个常见用例是为最终用户提供一种在应用程序内部联系某人的方式，原因各不相同。《[联系](https://oreil.ly/LZzCM)》表单的学习
    Blazor 应用程序正是如此。用户可以填写表单并向我，应用程序的所有者，发送消息。在他们点击发送并确认他们是人类之后，消息将作为电子邮件发送给我。我们将在本章中详细介绍其工作原理。
- en: 'Let’s start by going through the form’s user inputs:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先浏览一下表单的用户输入：
- en: The user’s email address (current user of the app, which is prefilled if the
    user is logged in).
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户的电子邮件地址（应用程序的当前用户，如果用户已登录，则预填充）。
- en: The user’s first and last name, as a pair.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户的名字和姓氏，作为一对。
- en: The subject of the message, or the reason they’re contacting through the app.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 消息的主题，或者说他们通过应用程序联系的原因。
- en: The message input, which uses a `TextArea` component and some interesting JavaScript
    interop. The message input exposes a microphone button that toggles speech recognition.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入消息使用一个 `TextArea` 组件和一些有趣的 JavaScript 互操作。消息输入提供了一个切换语音识别的麦克风按钮。
- en: As a visual point of reference, consider [Figure 8-1](#contact-page).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 作为视觉参考点，请考虑[图 8-1](#contact-page)。
- en: '![](assets/lblz_0801.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/lblz_0801.png)'
- en: Figure 8-1\. An example rendering of the `Contact` page
  id: totrans-38
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-1\.《[联系](#contact-page)》页面的示例呈现
- en: Defining Component Models
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义组件模型
- en: 'As part of the form submission process, `EditForm` will validate the user’s
    input. `EditForm` will also display validation messages and errors. This is all
    based on either `EditContext` or a model. A model is a C# class used to bind to
    properties and represent relevant values. In the case of the `Contact` page, it’s
    using `EditContext` to manage the state of the form. And `EditContext` relies
    on a corresponding model. Let’s take a look at `ContactComponentModel` in the
    *ContactComponentModel.cs* C# file, which is responsible for representing the
    state of the form:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 作为表单提交过程的一部分，`EditForm` 将验证用户的输入。`EditForm` 还将显示验证消息和错误。这一切都基于 `EditContext`
    或一个模型。模型是一个用于绑定属性和表示相关值的 C# 类。在《联系》页面的情况下，它使用 `EditContext` 来管理表单的状态。而 `EditContext`
    则依赖于一个相应的模型。让我们来看一下 *ContactComponentModel.cs* 文件中的 `ContactComponentModel`，它负责表示表单的状态：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[![1](assets/1.png)](#co_accepting_form_input_with_validation_CO1-1)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_accepting_form_input_with_validation_CO1-1)'
- en: The model is a `record` type.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 该模型是一种 `record` 类型。
- en: '[![2](assets/2.png)](#co_accepting_form_input_with_validation_CO1-2)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_accepting_form_input_with_validation_CO1-2)'
- en: The `FirstName` and `LastName` properties are required, per the `Required` attribute.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`FirstName` 和 `LastName` 属性是必填的，依据 `Required` 属性。'
- en: '[![3](assets/3.png)](#co_accepting_form_input_with_validation_CO1-3)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_accepting_form_input_with_validation_CO1-3)'
- en: The `EmailAddress` property is required, and it must be a valid email address.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`EmailAddress` 属性是必需的，并且必须是有效的电子邮件地址。'
- en: '[![4](assets/4.png)](#co_accepting_form_input_with_validation_CO1-4)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_accepting_form_input_with_validation_CO1-4)'
- en: The `AgreesToTerms` property is required as `true`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`AgreesToTerms` 属性必须为 `true`。'
- en: '[![5](assets/5.png)](#co_accepting_form_input_with_validation_CO1-5)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_accepting_form_input_with_validation_CO1-5)'
- en: The `NotRobot` property is a `readonly` property that is calculated from the
    `AreYouHumanMath` class.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`NotRobot` 属性是一个 `readonly` 属性，其计算结果来自 `AreYouHumanMath` 类。'
- en: '[![6](assets/6.png)](#co_accepting_form_input_with_validation_CO1-6)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_accepting_form_input_with_validation_CO1-6)'
- en: The `record` defines an operator to convert to a `ContactRequest`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`record` 定义了一个操作符，将其转换为 `ContactRequest`。'
- en: This model exposes the values that the user is expected to provide. The user’s
    first and last name is required, as well as a valid email address. The `Required`
    attribute is a framework-provided data annotation attribute that is used to indicate
    that the user must provide a value for the property. If the user doesn’t provide
    a value, and they attempt to either submit the form or navigate away from the
    underlying HTML element, `EditForm` will display an error message. C# attributes
    are used to provide additional information about the thing they’re applied to.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此模型公开用户应提供的值。用户的名和姓是必需的，以及一个有效的电子邮件地址。`Required` 属性是一个由框架提供的数据注释属性，用于指示用户必须为属性提供值。如果用户没有提供值，并且他们尝试提交表单或导航离开底层
    HTML 元素，则 `EditForm` 将显示错误消息。C# 属性用于为其应用的对象提供额外信息。
- en: Defining and Consuming Validation Attributes
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义和使用验证属性
- en: The `RegexEmailAddress` attribute is a custom attribute that is used to indicate
    that the user must provide a valid email address. When decorating a model property,
    this attribute will validate it as an email address. The `RequiredAcceptance`
    attribute is a custom attribute that is used to indicate that the user must accept
    the terms and conditions. You can use all sorts of attributes to define objects.
    The `Message` property is required, as is the `Subject` property.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`RegexEmailAddress` 属性是一个自定义属性，用于指示用户必须提供有效的电子邮件地址。在装饰模型属性时，此属性将验证其为电子邮件地址。`RequiredAcceptance`
    属性是一个自定义属性，用于指示用户必须接受条款和条件。您可以使用各种属性来定义对象。`Message` 属性是必需的，`Subject` 属性也是如此。'
- en: 'Let’s take a look at the `RegexEmailAddress` attribute implementation in the
    *Regex​E⁠mailAddressAttribute.cs* C# file:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看 *Regex​E⁠mailAddressAttribute.cs* C# 文件中 `RegexEmailAddress` 属性的实现：
- en: '[PRE1]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](assets/1.png)](#co_accepting_form_input_with_validation_CO2-1)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_accepting_form_input_with_validation_CO2-1)'
- en: The `AttributeUsage` decorator specifies the usage of another attribute class,
    in this case, `RegexEmailAddressAttribute`, which applies only to properties,
    fields, and parameters.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`AttributeUsage` 装饰器指定了另一个属性类的用法，即 `RegexEmailAddressAttribute`，它仅适用于属性、字段和参数。'
- en: '[![2](assets/2.png)](#co_accepting_form_input_with_validation_CO2-2)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_accepting_form_input_with_validation_CO2-2)'
- en: '`EmailExpression` is a `readonly Regex` instance that is used to validate the
    email address.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`EmailExpression` 是一个 `readonly Regex` 实例，用于验证电子邮件地址。'
- en: '[![3](assets/3.png)](#co_accepting_form_input_with_validation_CO2-3)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_accepting_form_input_with_validation_CO2-3)'
- en: The `IsRequired` property allows the developer to determine whether an email
    address is required at all.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`IsRequired` 属性允许开发人员确定是否需要电子邮件地址。'
- en: '[![4](assets/4.png)](#co_accepting_form_input_with_validation_CO2-4)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_accepting_form_input_with_validation_CO2-4)'
- en: The constructor calls its base constructor with the `DataType.EmailAddress`
    value.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数使用 `DataType.EmailAddress` 值调用其基础构造函数。
- en: '[![5](assets/5.png)](#co_accepting_form_input_with_validation_CO2-5)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_accepting_form_input_with_validation_CO2-5)'
- en: The `IsValid` method is used to validate the email address, which is passed
    as a nullable `object?`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`IsValid` 方法用于验证作为可空对象传递的电子邮件地址。'
- en: Blazor developers can author a custom `DataTypeAttribute`. If the user enters
    an email address that doesn’t match the regular expression, `EditForm` will display
    an error message. If the value is `null` and the `IsRequired` property is `true`,
    `EditForm` will display an error message. The other custom attribute is `RequireAcceptance​At⁠tribute`.
    This attribute is used to indicate that the user must accept the terms and conditions.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor 开发人员可以编写自定义 `DataTypeAttribute`。如果用户输入的电子邮件地址不匹配正则表达式，`EditForm` 将显示错误消息。如果值为
    `null` 并且 `IsRequired` 属性为 `true`，`EditForm` 将显示错误消息。另一个自定义属性是 `RequireAcceptance​At⁠tribute`。此属性用于指示用户必须接受条款和条件。
- en: 'Next, let’s look at `RequiredAcceptanceAttribute`, which is defined in the
    *Require⁠d​AcceptanceAttribute.cs* C# file:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看 `RequiredAcceptanceAttribute`，它在 *Require⁠d​AcceptanceAttribute.cs*
    C# 文件中定义：
- en: '[PRE2]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[![1](assets/1.png)](#co_accepting_form_input_with_validation_CO3-1)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_accepting_form_input_with_validation_CO3-1)'
- en: '`RequiredAcceptanceAttribute` is similar to `RegexEmailAddressAttribute`.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`RequiredAcceptanceAttribute` 类似于 `RegexEmailAddressAttribute`。'
- en: '[![2](assets/2.png)](#co_accepting_form_input_with_validation_CO3-2)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_accepting_form_input_with_validation_CO3-2)'
- en: The constructor calls the `DataTypeAttribute` base constructor with the `DataType.Custom`
    value.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数使用 `DataTypeAttribute` 的基础构造函数，并传入 `DataType.Custom` 值。
- en: '[![3](assets/3.png)](#co_accepting_form_input_with_validation_CO3-3)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_accepting_form_input_with_validation_CO3-3)'
- en: The `IsValid` method is used to validate the acceptance of the terms and conditions.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`IsValid` 方法用于验证条款和条件的接受情况。'
- en: If the user doesn’t accept the terms and conditions, `EditForm` will display
    an error message. When the object that represents `value` is `null`, or `value`
    is `false`, the error condition is triggered. You’re free to create any custom
    business logic rules that you may require. Whenever you need to accept user input,
    you’ll start with modeling an object that represents your needs. You’ll attribute
    the model’s properties with either custom or framework-provided data annotations.
    In the next section, we’ll put this into practice and see how a model is bound
    to the form components.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户不接受条款和条件，`EditForm` 将显示错误消息。当表示 `value` 的对象为 `null`，或者 `value` 为 `false`
    时，将触发错误条件。您可以自由地创建所需的任何自定义业务逻辑规则。每当需要接受用户输入时，您将从建模表示您需求的对象开始。您将为模型的属性添加自定义或框架提供的数据注释。在接下来的部分中，我们将实践这一点，并看到模型如何绑定到表单组件。
- en: Implementing a Contact Form
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现联系表单
- en: 'The markup for the `Contact` page is a bit lengthy, but it contains a fair
    number of user inputs with various functionality and validation requirements.
    To animate the controls and provide the appropriate styles when user input is
    in a state of error, the form needs a bit more markup than a semantic form. The
    page markup is contained in the *Contact.cshtml* Razor file:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`Contact` 页面的标记有点冗长，但包含了许多具有不同功能和验证要求的用户输入。当用户输入处于错误状态时，为了使控件动画化并提供适当的样式，表单需要比语义化表单更多的标记。页面的标记内容包含在
    *Contact.cshtml* Razor 文件中：'
- en: '[PRE3]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[![1](assets/1.png)](#co_accepting_form_input_with_validation_CO4-1)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_accepting_form_input_with_validation_CO4-1)'
- en: The `Contact` page allows anonymous users to contact the site owner.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`Contact` 页面允许匿名用户联系站点所有者。'
- en: '[![2](assets/2.png)](#co_accepting_form_input_with_validation_CO4-2)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_accepting_form_input_with_validation_CO4-2)'
- en: '`EditForm` is a framework-provided component that is used to render a `form`.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`EditForm` 是一个由框架提供的组件，用于呈现一个 `form`。'
- en: '[![3](assets/3.png)](#co_accepting_form_input_with_validation_CO4-3)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_accepting_form_input_with_validation_CO4-3)'
- en: The page model accepts an `EmailAddress` property and renders an `<InputText>`
    element.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 页面模型接受一个 `EmailAddress` 属性并呈现一个 `<InputText>` 元素。
- en: '[![4](assets/4.png)](#co_accepting_form_input_with_validation_CO4-4)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_accepting_form_input_with_validation_CO4-4)'
- en: The page model accepts `FirstName` and `LastName` properties and renders two
    `<input type="text">` elements.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 页面模型接受 `FirstName` 和 `LastName` 属性，并呈现两个 `<input type="text">` 元素。
- en: '[![5](assets/5.png)](#co_accepting_form_input_with_validation_CO4-5)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_accepting_form_input_with_validation_CO4-5)'
- en: The page model accepts a `Subject` property and renders an `<InputText>` element.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 页面模型接受一个 `Subject` 属性并呈现一个 `<InputText>` 元素。
- en: '[![6](assets/6.png)](#co_accepting_form_input_with_validation_CO4-6)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_accepting_form_input_with_validation_CO4-6)'
- en: The page model accepts a `Message` property and renders an `<InputTextArea>`
    element. This is where the additive speech recognition component is rendered,
    and that’s detailed later in this chapter.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 页面模型接受一个`Message`属性，并呈现一个`<InputTextArea>`元素。这是添加性语音识别组件呈现的地方，后面章节详细介绍。
- en: '[![7](assets/7.png)](#co_accepting_form_input_with_validation_CO4-7)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](assets/7.png)](#co_accepting_form_input_with_validation_CO4-7)'
- en: The page model accepts an `AgreesToTerms` property and renders an `<Input​Check⁠box>`
    element.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 页面模型接受一个`AgreesToTerms`属性，并呈现一个`<InputCheckbox>`元素。
- en: '[![8](assets/8.png)](#co_accepting_form_input_with_validation_CO4-8)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[![8](assets/8.png)](#co_accepting_form_input_with_validation_CO4-8)'
- en: The page model accepts a `Send` button and renders a `<button>` element.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 页面模型接受一个`Send`按钮，并呈现一个`<button>`元素。
- en: '[![9](assets/9.png)](#co_accepting_form_input_with_validation_CO4-9)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[![9](assets/9.png)](#co_accepting_form_input_with_validation_CO4-9)'
- en: The page references `VerificationModalComponent` for a spam filter.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 该页面引用`VerificationModalComponent`以进行垃圾邮件过滤。
- en: The page that displays when the `/contact` route is requested renders as shown
    in [Figure 8-2](#contact-page-rendered).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当请求`/contact`路由时显示的页面如[图 8-2](#contact-page-rendered)所示。
- en: '![](assets/lblz_0802.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/lblz_0802.png)'
- en: Figure 8-2\. A blank `Contact` page form with only the email address prefilled
  id: totrans-102
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8-2. 一个空白的`Contact`页面表单，只有电子邮件地址预填充
- en: Let’s summarize what’s going on here. The `Contact` page is a form with a few
    fields. The page model is a class that contains the properties that are bound
    to the form elements. The `EditForm` component is a framework-provided component
    that renders an HTML `form` element. It requires either `EditContext` or `Model`,
    but not both. In this case, `EditContext` wraps `ContactComponentModel`. The model
    used in `Edit​Con⁠text` can be any `object`. `EditContext` holds metadata related
    to a data editing process, such as flags to indicate which fields have been modified
    and the current set of validation messages. The `EditContext.Model` will be used
    by `EditForm` to render the form. `EditContext.OnValidSubmit` event handler is
    used to handle the form submission. When the form is both valid and submitted,
    the `Contact.OnValidSubmitAsync` event handler is called. The `DataAnno⁠tations​Val⁠ida⁠tor`
    framework-provided component is used to add validation `Data​Annota⁠tions` attribute
    support that informs the `EditContext` instance with metadata about the model.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们总结一下这里发生的事情。`Contact`页面是一个带有几个字段的表单。页面模型是一个包含绑定到表单元素的属性的类。`EditForm`组件是一个由框架提供的组件，用于呈现HTML
    `form`元素。它要求使用`EditContext`或`Model`，但不能同时使用两者。在这种情况下，`EditContext`包装了`ContactComponentModel`。在`Edit​Con⁠text`中使用的模型可以是任何`object`。`EditContext`保存与数据编辑过程相关的元数据，例如指示哪些字段已被修改的标志和当前设置的验证消息。`EditContext.Model`将被`EditForm`用于呈现表单。`EditContext.OnValidSubmit`事件处理程序用于处理表单提交。当表单既有效又提交时，将调用`Contact.OnValidSubmitAsync`事件处理程序。使用`Data​Anno⁠tations​Val⁠ida⁠tor`框架提供的组件添加验证`Data​Annota⁠tions`属性支持，通知`EditContext`实例有关模型的元数据。
- en: 'The fields in the form are as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 表单中的字段如下所示：
- en: Email
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 电子邮件
- en: A `FieldInput` custom component bound to the model’s `EmailAddress` property.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 一个自定义的`FieldInput`组件，绑定到模型的`EmailAddress`属性。
- en: From
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 发件人
- en: Two horizontal fields presented as framework-provided `InputText` components,
    bound to the model’s `FirstName` and `LastName` properties. These values are both
    required and can alter the state of the validation for a shared validation icon.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 以框架提供的`InputText`组件呈现的两个水平字段，分别绑定到模型的`FirstName`和`LastName`属性。这些值都是必需的，可以改变共享验证图标的验证状态。
- en: Subject
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 主题
- en: A `FieldInput` custom component bound to the model’s `Subject` property.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 一个自定义的`FieldInput`组件，绑定到模型的`Subject`属性。
- en: Message
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 消息
- en: A `FieldInput` custom component bound to the model’s `Message` property but
    relying on `AdditiveSpeechRecognitionComponent` to add speech recognition support
    that is tied to an `InputTextArea` component. `AdditiveSpeech​Rec⁠ogni⁠tionComponent`
    renders an overlay toggle `<button>` in the upper-righthand corner of its parent
    HTML element.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一个自定义的`FieldInput`组件，绑定到模型的`Message`属性，但依赖于`AdditiveSpeechRecognitionComponent`来添加与`InputTextArea`组件绑定的语音识别支持。`AdditiveSpeech​Rec⁠ogni⁠tionComponent`在其父HTML元素的右上角呈现一个覆盖切换`<button>`。
- en: Whether the user agrees to the terms
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 是否用户同意条款
- en: A `FieldInput` custom component bound to the model’s `AgreesToTerms` property,
    and the framework-provided `InputCheckbox` component that is used to render a
    checkbox.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 一个自定义的`FieldInput`组件，绑定到模型的`AgreesToTerms`属性，以及框架提供的`InputCheckbox`组件，用于呈现复选框。
- en: Submit form button
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 提交表单按钮
- en: A send `<button type="submit">` element at the end of the `EditForm` markup.
    When the user clicks this button, the `EditContext.OnValidSubmit` event handler
    is called, if the form is valid.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `EditForm` 标记的末尾有一个发送 `<button type="submit">` 元素。当用户点击此按钮时，如果表单有效，则调用 `EditContext.OnValidSubmit`
    事件处理程序。
- en: Modal dialog
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 模态对话框
- en: A dialog rendered by `VerificationModalComponent` is shown when the user clicks
    the `Send` button. The dialog serves as a spam filter, as it requires the user
    who submitted the form to answer a math question in string form.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击 `Send` 按钮时，会显示由 `VerificationModalComponent` 渲染的对话框。该对话框用作垃圾邮件过滤器，因为它要求提交表单的用户回答一个数学问题的字符串形式。
- en: The shadow component does this because there’s a fair bit of Razor markup. It’s
    used to manage the framework-provided `EditContext`, `_model`, `_emailInput`,
    `_firstNameInput`, `_modalComponent`, and two `bool` values for whether the email
    or message input elements should be `readonly`. These are detailed in the coming
    sections. Since the contact page is attributed with `AllowAnonymous`, it can be
    accessed by nonauthenticated users; this is intentional to allow potential users
    of the app to reach out with questions.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 阴影组件执行此操作是因为其中包含大量 Razor 标记。它用于管理框架提供的 `EditContext`、`_model`、`_emailInput`、`_firstNameInput`、`_modalComponent`
    以及两个布尔值，用于确定电子邮件或消息输入元素是否应为 `readonly`。这些详细信息将在后续部分中说明。由于联系页面标有 `AllowAnonymous`，非经身份验证的用户可以访问该页面；这是有意为之，以便潜在的应用程序用户可以通过提问与我们联系。
- en: It is common for Razor components to use `Expression<Func<T>>` semantics (or
    expression trees) when evaluating model properties. An expression tree represents
    code as a data structure, where each node is an expression. Expressions look like
    functions but are not evaluated. Instead, an expression is parsed. For example,
    when we pass in `_model.EmailAddress`, the Blazor library calls `FieldCssClass`.
    The expression is then parsed extracting how to evaluate both our model and its
    corresponding property value.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Razor 组件通常在评估模型属性时使用 `Expression<Func<T>>` 语义（或表达式树）。表达式树将代码表示为数据结构，其中每个节点都是一个表达式。表达式看起来像函数，但并不会被直接评估。而是被解析。例如，当我们传入
    `_model.EmailAddress` 时，Blazor 库调用 `FieldCssClass`。然后解析表达式，提取如何评估我们的模型及其相应的属性值。
- en: 'As a convenience for determining which CSS classes are applicable given the
    state of a specific model’s property expression, the `GetValidityCss` extension
    method calculates the appropriate CSS classes for the property. Consider the *EditContext​Ex⁠tensions.cs*
    C# file:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便确定特定模型属性表达式状态下适用的 CSS 类，`GetValidityCss` 扩展方法计算了属性的适当 CSS 类。请参考 *EditContext​Ex⁠tensions.cs*
    C# 文件：
- en: '[PRE4]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[![1](assets/1.png)](#co_accepting_form_input_with_validation_CO5-1)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_accepting_form_input_with_validation_CO5-1)'
- en: The `Expression<Func<T>>` parameter is used to access the model’s property.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`Expression<Func<T>>` 参数用于访问模型的属性。'
- en: '[![2](assets/2.png)](#co_accepting_form_input_with_validation_CO5-2)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_accepting_form_input_with_validation_CO5-2)'
- en: The `Expression<Func<TOne>>` and `Expression<Func<TTwo>>` parameters are used
    to access the model’s property.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`Expression<Func<TOne>>` 和 `Expression<Func<TTwo>>` 参数用于访问模型的属性。'
- en: '[![3](assets/3.png)](#co_accepting_form_input_with_validation_CO5-3)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_accepting_form_input_with_validation_CO5-3)'
- en: The `bool` parameters are used to determine the CSS class to return.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔参数用于确定要返回的 CSS 类。
- en: '[![4](assets/4.png)](#co_accepting_form_input_with_validation_CO5-4)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_accepting_form_input_with_validation_CO5-4)'
- en: The `IsValid` method is used to determine if the property is valid.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`IsValid` 方法用于确定属性是否有效。'
- en: '[![5](assets/5.png)](#co_accepting_form_input_with_validation_CO5-5)'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_accepting_form_input_with_validation_CO5-5)'
- en: The `IsInvalid` method is used to determine if the property is invalid.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`IsInvalid` 方法用于确定属性是否无效。'
- en: '[![6](assets/6.png)](#co_accepting_form_input_with_validation_CO5-6)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_accepting_form_input_with_validation_CO5-6)'
- en: The `IsModified` method is used to determine if the property is modified.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`IsModified` 方法用于确定属性是否已修改。'
- en: The `EditContextExtensions` class contains some extension methods that are used
    to determine the CSS class to return based on the state of the model’s property.
    The `GetValidityCss` method and its overloads are used to determine the CSS class
    to return based on the state of the model’s property. Using the framework-provided
    `EditContextFieldClassExtensions.FieldCssClass` extension method, we can evaluate
    the current CSS classes given the state of the corresponding expression. The `Get​Vali⁠dityCss`
    method is used throughout the markup.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`EditContextExtensions`类包含一些扩展方法，用于根据模型属性的状态确定要返回的CSS类。`GetValidityCss`方法及其重载用于根据模型属性的状态确定要返回的CSS类。使用框架提供的`EditContextFieldClassExtensions.FieldCssClass`扩展方法，我们可以根据相应表达式的状态评估当前的CSS类。`Get​Vali⁠dityCss`方法在整个标记中使用。'
- en: 'Next, let’s have a look at the *Contact.razor.cs* C# file:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看*C#*文件*Contact.razor.cs*：
- en: '[PRE5]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[![1](assets/1.png)](#co_accepting_form_input_with_validation_CO6-1)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_accepting_form_input_with_validation_CO6-1)'
- en: The `EditContext` instance wraps `ContactComponentModel`.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`EditContext`实例包装`ContactComponentModel`。'
- en: '[![2](assets/2.png)](#co_accepting_form_input_with_validation_CO6-2)'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_accepting_form_input_with_validation_CO6-2)'
- en: The `OnInitializedAsync` method calls the `base` implementation, which initializes
    the `User` instance and immediately calls `InitializeModelAndContext`.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnInitializedAsync`方法调用`base`实现，初始化`User`实例并立即调用`InitializeModelAndContext`。'
- en: '[![3](assets/3.png)](#co_accepting_form_input_with_validation_CO6-3)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_accepting_form_input_with_validation_CO6-3)'
- en: The `InitializeModelAndContext` method initializes the `_model` and `_edit​Con⁠text`
    properties from the `User` instance.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`InitializeModelAndContext`方法从`User`实例初始化`_model`和`_edit​Con⁠text`属性。'
- en: '[![4](assets/4.png)](#co_accepting_form_input_with_validation_CO6-4)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_accepting_form_input_with_validation_CO6-4)'
- en: The `OnAfterRenderAsync` method determines which input element should have focus
    when the page is rendered.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnAfterRenderAsync`方法确定页面渲染时应该具有焦点的输入元素。'
- en: '[![5](assets/5.png)](#co_accepting_form_input_with_validation_CO6-5)'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_accepting_form_input_with_validation_CO6-5)'
- en: The `OnRecognitionStarted` method sets the `_isMessageReadonly` property to
    `true`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnRecognitionStarted`方法将`_isMessageReadonly`属性设置为`true`。'
- en: '[![6](assets/6.png)](#co_accepting_form_input_with_validation_CO6-6)'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_accepting_form_input_with_validation_CO6-6)'
- en: The `OnSpeechRecognized` method updates the `_model.Message` property with the
    transcript and notifies the `_editContext` instance that the `Message` property
    has changed.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnSpeechRecognized`方法使用传递的文本更新`_model.Message`属性，并通知`_editContext`实例`Message`属性已更改。'
- en: '[![7](assets/7.png)](#co_accepting_form_input_with_validation_CO6-7)'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](assets/7.png)](#co_accepting_form_input_with_validation_CO6-7)'
- en: The `OnValidSubmitAsync` method is called when the user clicks the `Send` button.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击`Send`按钮时，将调用`OnValidSubmitAsync`方法。
- en: '[![8](assets/8.png)](#co_accepting_form_input_with_validation_CO6-8)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '[![8](assets/8.png)](#co_accepting_form_input_with_validation_CO6-8)'
- en: The `OnVerificationAttempted` method throws a `ContactRequest` at the Web.Api
    project’s `[HttpPost("api/contact")]` endpoint.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnVerificationAttempted`方法在Web.Api项目的`[HttpPost("api/contact")]`端点抛出`ContactRequest`。'
- en: When the `Contact` page is initialized, the `base.User` instance is initialized
    as well. If there is an authenticated user, the email address is set as `readonly`
    and the user’s email is used. If there is no authenticated user, the `_model`
    instance is initialized with an empty `ContactComponentModel` instance. When the
    page first is rendered, either the `_emailInput` or `_firstNameInput` element
    is focused.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 当初始化`Contact`页面时，也会初始化`base.User`实例。如果存在已验证的用户，则将电子邮件地址设置为`readonly`，并使用用户的电子邮件。如果没有已验证的用户，则使用空的`ContactComponentModel`实例初始化`_model`实例。当首次渲染页面时，要么将焦点放在`_emailInput`元素上，要么放在`_firstNameInput`元素上。
- en: There are two methods responsible for managing whether the `_messageInput` element
    is `readonly`. The `OnRecognitionStarted` method sets the `_isMessageReadonly`
    property to `true`; `OnRecognitionStopped` sets it to `false`. When speech is
    recognized, the `_model.Message` property is updated with the transcript, and
    the `_edit​Con⁠text` instance is notified that the `Message` property has changed.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个方法负责管理`_messageInput`元素是否为`readonly`。`OnRecognitionStarted`方法将`_isMessageReadonly`属性设置为`true`；`OnRecognitionStopped`方法将其设置为`false`。当识别到语音时，将使用传递的文本更新`_model.Message`属性，并通知`_edit​Con⁠text`实例`Message`属性已更改。
- en: When the user supplies all of the required inputs, the form is considered “valid.”
    At this point, the user is free to submit the form. When the form is submitted,
    the `_modalComponent` instance is shown, which prompts the user to answer one
    question. If they’re able to do so, the form information is sent to the Web.Api
    project’s `[HttpPost("api/contact")]` endpoint for processing.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户提供了所有必需的输入时，表单被认为是“有效的”。此时，用户可以自由提交表单。提交表单时，将显示 `_modalComponent` 实例，提示用户回答一个问题。如果他们能够做到，表单信息将发送到
    Web.Api 项目的 `[HttpPost("api/contact")]` 端点进行处理。
- en: 'To help encapsulate a bit of common code for various field inputs, I wrote
    a `Field​In⁠put` form component. This component is used throughout the `Contact`
    page. Let’s take a look at the *FieldInput.razor* Razor markup file:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 为了封装各种字段输入的一些常见代码，我编写了一个 `Field​In⁠put` 表单组件。这个组件在 `Contact` 页面中广泛使用。让我们来看一下
    *FieldInput.razor* Razor 标记文件：
- en: '[PRE6]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[![1](assets/1.png)](#co_accepting_form_input_with_validation_CO7-1)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_accepting_form_input_with_validation_CO7-1)'
- en: The `FieldLabelContent` property is used to render `label` for the field.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`FieldLabelContent` 属性用于为字段渲染 `label`。'
- en: '[![2](assets/2.png)](#co_accepting_form_input_with_validation_CO7-2)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_accepting_form_input_with_validation_CO7-2)'
- en: The `FieldControlContent` property is used to render `input` for the field.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`FieldControlContent` 属性用于为字段渲染 `input`。'
- en: '[![3](assets/3.png)](#co_accepting_form_input_with_validation_CO7-3)'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_accepting_form_input_with_validation_CO7-3)'
- en: The component accepts several optional and required parameters.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件接受多个可选和必需的参数。
- en: 'Since the `label` and `input` elements are rendered as a `RenderFragment`,
    the consumer is free to render whatever they want. In the `Contact` page markup,
    you can see examples of `FieldInput` components with the following components:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `label` 和 `input` 元素被渲染为 `RenderFragment`，消费者可以自由渲染任何他们想要的内容。在 `Contact`
    页面标记中，您可以看到使用以下组件的 `FieldInput` 组件的示例：
- en: Single framework-provided `InputText` component
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单个由框架提供的 `InputText` 组件
- en: Multiple framework-provided `InputText` components
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多个由框架提供的 `InputText` 组件
- en: A custom `AdditiveSpeechRecognitionComponent` component
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义 `AdditiveSpeechRecognitionComponent` 组件
- en: Single framework-provided `InputCheckbox` component
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单个由框架提供的 `InputCheckbox` 组件
- en: Let’s explore a few more states that the form can be rendered as.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索一些表单可以呈现的更多状态。
- en: In addition to `label`, icons are used to help deliver even more clarity to
    validation errors. Imagine the user enters the first name, forgets to enter the
    last name, and then provides a subject. They’re free to attempt clicking the `Send`
    button, but the `_lastNameInput` element will be outlined with a red border and
    its validity icon will change to a red cross. The `_subjectInput` element will
    have its validity icon change from the question mark to a green check mark, but
    the `_messageInput` element will not be highlighted, as shown in [Figure 8-3](#contact-page-invalid-close-up).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `label` 外，图标也用于更清晰地传达验证错误。想象一下用户输入名字后忘记输入姓氏，然后提供一个主题。他们可以尝试点击 `Send` 按钮，但
    `_lastNameInput` 元素将被红色边框标出，并且其有效性图标将变为红色叉号。 `_subjectInput` 元素的有效性图标将从问号变为绿色勾号，但
    `_messageInput` 元素不会被突出显示，如 [Figure 8-3](#contact-page-invalid-close-up) 所示。
- en: '![](assets/lblz_0803.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/lblz_0803.png)'
- en: Figure 8-3\. An example close-up rendering of an invalid `Contact` page
  id: totrans-173
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-3\. 一个无效 `Contact` 页面的示例放大渲染
- en: The user could provide a value for the last name and a message, thus clearing
    the validation errors, as shown in [Figure 8-4](#contact-page-valid-close-up).
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以为姓氏和消息提供值，从而清除验证错误，如 [Figure 8-4](#contact-page-valid-close-up) 所示。
- en: '![](assets/lblz_0804.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/lblz_0804.png)'
- en: Figure 8-4\. An example close-up rendering of a valid `Contact` page
  id: totrans-176
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-4\. 一个有效 `Contact` 页面的示例放大渲染
- en: In Figures [8-3](#contact-page-invalid-close-up) and [8-4](#contact-page-valid-close-up),
    you may have noticed a microphone. The message input element has a button rendered
    in the upper-righthand corner of its bounding box. When the user clicks the button,
    the `_messageInput` element is temporarily disabled. This element accepts speech
    recognition as a form of input. The next section will show you how to incorporate
    speech recognition input into your form.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [Figure 8-3](#contact-page-invalid-close-up) 和 [Figure 8-4](#contact-page-valid-close-up)
    中，您可能已经注意到了一个麦克风。消息输入元素的上右角边界框中呈现了一个按钮。用户单击按钮时，`_messageInput` 元素将暂时禁用。该元素接受语音识别作为输入形式。接下来的部分将向您展示如何将语音识别输入集成到您的表单中。
- en: Implementing Speech Recognition as User Input
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将语音识别作为用户输入实现
- en: Speech recognition is a commonly used input mechanism in modern apps, both for
    accessibility and overall convenience. More than 90% of web browsers support the
    speech recognition API, according to the [“Can I Use *Speech Recognition*?” web
    page](https://oreil.ly/qhqjt). The speech recognition API allows web developers
    to acquire a transcript from a recognition session from the user’s voice as input.
    The API is supported by all modern browsers, including Chrome, Firefox, Safari,
    and Edge.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 语音识别是现代应用程序中常用的输入机制，既用于可访问性，也方便整体使用。根据 [“Can I Use *Speech Recognition*?” web
    page](https://oreil.ly/qhqjt)，超过 90% 的网络浏览器支持语音识别 API。语音识别 API 允许 web 开发人员从用户的语音输入中获取转录文本。该
    API 受到所有现代浏览器的支持，包括 Chrome、Firefox、Safari 和 Edge。
- en: To make it so that the user can use speech recognition to input text in the
    message field of a form, you need to rely on the browser’s native speech recognition
    API. This requires JavaScript interop. To use this API, you could either write
    your own implementation to interface with the native API or use a library that
    contains this logic. I maintain a Razor class library that provides an `ISpeech​Recog⁠nitionService`
    implementation that’s published on NuGet as [`Blazor.Speech​Recog⁠nition.WebAssem⁠bly`](https://oreil.ly/UpI60).
    This library exposes this type through DI, allowing consumers to call `.AddSpeechRecognitionServices`
    on the `IServiceCollection` type. Once the services are registered, you can consume
    this interface. This is an abstraction over the speech recognition API, and it
    uses Blazor JavaScript interop. It’s a good example of how you can create a reusable
    Razor class library.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 要让用户可以使用语音识别在表单的消息字段中输入文本，您需要依赖于浏览器的原生语音识别 API。这需要 JavaScript 交互操作。要使用这个 API，您可以编写自己的实现来与原生
    API 交互，或者使用一个包含这些逻辑的库。我维护了一个 Razor 类库，提供了一个发布在 NuGet 上的 `ISpeech​Recog⁠nitionService`
    实现，称为 [`Blazor.Speech​Recog⁠nition.WebAssem⁠bly`](https://oreil.ly/UpI60)。这个库通过
    DI 暴露了这种类型，允许消费者在 `IServiceCollection` 类型上调用 `.AddSpeechRecognitionServices`。一旦服务注册完毕，您就可以使用这个接口。这是对语音识别
    API 的抽象，它使用了 Blazor 的 JavaScript 交互。这是一个如何创建可重用 Razor 类库的好例子。
- en: 'Blazor class libraries let you write components, effectively sharing common
    markup, logic, and even static assets. Static assets are typically in the *wwwroot*
    folder in ASP.NET Core apps. The `Blazor.SpeechRecognition.WebAssembly` library
    defines a bit of JavaScript code in the *wwwroot*. Let’s take a look at the *blazorators.speech​Recog⁠nition.js*
    JavaScript file that exposes the `speechSynthesis` functionality:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor 类库允许您编写组件，有效地共享通用的标记、逻辑，甚至静态资产。静态资产通常位于 ASP.NET Core 应用程序的 *wwwroot*
    文件夹中。`Blazor.SpeechRecognition.WebAssembly` 库在 *wwwroot* 中定义了一些 JavaScript 代码。让我们来看看
    *blazorators.speech​Recog⁠nition.js* JavaScript 文件，它暴露了 `speechSynthesis` 功能：
- en: '[PRE7]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[![1](assets/1.png)](#co_accepting_form_input_with_validation_CO8-1)'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_accepting_form_input_with_validation_CO8-1)'
- en: The `_recognition` variable is used to store the current `SpeechRecognition`
    instance globally.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`_recognition` 变量用于全局存储当前的 `SpeechRecognition` 实例。'
- en: '[![2](assets/2.png)](#co_accepting_form_input_with_validation_CO8-2)'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_accepting_form_input_with_validation_CO8-2)'
- en: The `cancelSpeechRecognition` method is used to cancel the current speech recognition
    session.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`cancelSpeechRecognition` 方法用于取消当前的语音识别会话。'
- en: '[![3](assets/3.png)](#co_accepting_form_input_with_validation_CO8-3)'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_accepting_form_input_with_validation_CO8-3)'
- en: The `recognizeSpeech` method is used to start the speech recognition session.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`recognizeSpeech` 方法用于启动语音识别会话。'
- en: '[![4](assets/4.png)](#co_accepting_form_input_with_validation_CO8-4)'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_accepting_form_input_with_validation_CO8-4)'
- en: The `_recognition` instance has several callbacks, each of which is registered.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`_recognition` 实例有多个回调函数，每个都已注册。'
- en: '[![5](assets/5.png)](#co_accepting_form_input_with_validation_CO8-5)'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_accepting_form_input_with_validation_CO8-5)'
- en: The `_recognition.onresult` callback is used to send the results back to the
    client.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`_recognition.onresult` 回调用于将结果发送回客户端。'
- en: '[![6](assets/6.png)](#co_accepting_form_input_with_validation_CO8-6)'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_accepting_form_input_with_validation_CO8-6)'
- en: The `window.addEventListener` method aborts any active speech recognition session.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`window.addEventListener` 方法中止任何活动的语音识别会话。'
- en: Although we’ve used JavaScript for other functionality in this book, this one’s
    different because the functions defined here use the `export` keyword. The `export`
    JavaScript keyword allows you to export a function or variable as an `import`-able
    code from another module. This is a very common JavaScript feature, and it’s used
    to make your code more sharable and readable and easier to maintain. Blazor can
    `import` these functions into .NET via JavaScript interop calls to `import` and
    a path to a JavaScript module. Modules simply `export` their desired functionality,
    and other modules consume it. In .NET, this module is represented as the framework-provided
    `IJSInProcessObjectReference` type. For more information about JavaScript isolation,
    see Microsoft’s [“Call JavaScript Functions from .NET Methods in ASP.NET Core
    Blazor” documentation](https://oreil.ly/0nf9D).
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们在本书中已经使用 JavaScript 实现了其他功能，但这里的情况有所不同，因为这里定义的函数使用了`export`关键字。`export`
    JavaScript 关键字允许您将函数或变量作为可从另一个模块导入的代码进行导出。这是一个非常常见的 JavaScript 特性，用于使您的代码更可共享、可读和更易于维护。Blazor
    可以通过 JavaScript 互操作调用来将这些函数导入到 .NET 中，使用`import`和指向 JavaScript 模块的路径。模块简单地将其所需的功能`export`，而其他模块则消费它。在
    .NET 中，此模块表示为框架提供的`IJSInProcessObjectReference`类型。有关 JavaScript 隔离的更多信息，请参阅 Microsoft
    的[“在 ASP.NET Core Blazor 中从 .NET 方法调用 JavaScript 函数”文档](https://oreil.ly/0nf9D)。
- en: 'The two functions of this JavaScript file are `cancelSpeechRecognition` and
    `recognizeSpeech`. The primary function is `recognizeSpeech` as it conditionally
    registers all of the provided callbacks when they’re able to be handled. It’s
    responsible for instantiating a `SpeechRecognition` instance and assigning it
    to the global `_recognition` variable of the JavaScript code. Next, we’ll look
    at the `ISpeech​Rec⁠ogni⁠tionService` interface. It’s defined in the *ISpeechRecognitionService.cs*
    C# file:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 此 JavaScript 文件的两个函数是`cancelSpeechRecognition`和`recognizeSpeech`。主要函数是`recognizeSpeech`，因为它在能够处理时条件注册所有提供的回调。它负责实例化`SpeechRecognition`实例，并将其分配给
    JavaScript 代码的全局`_recognition`变量。接下来，我们将看一下`ISpeech​Rec⁠ogni⁠tionService`接口。它在*C#*文件*ISpeechRecognitionService.cs*中定义：
- en: '[PRE8]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[![1](assets/1.png)](#co_accepting_form_input_with_validation_CO9-1)'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_accepting_form_input_with_validation_CO9-1)'
- en: The interface declares itself in the `Microsoft.JSInterop` namespace as a convenience.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 接口声明自身位于`Microsoft.JSInterop`命名空间，以方便使用。
- en: '[![2](assets/2.png)](#co_accepting_form_input_with_validation_CO9-2)'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_accepting_form_input_with_validation_CO9-2)'
- en: The `ISpeechRecognitionService` interface is used to define the public `Speech​Re⁠cognition`
    API.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`ISpeechRecognitionService`接口用于定义公共`Speech​Re⁠cognition` API。'
- en: '[![3](assets/3.png)](#co_accepting_form_input_with_validation_CO9-3)'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_accepting_form_input_with_validation_CO9-3)'
- en: The `InitializeModuleAsync` method is used to initialize the speech recognition
    module.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`InitializeModuleAsync`方法用于初始化语音识别模块。'
- en: '[![4](assets/4.png)](#co_accepting_form_input_with_validation_CO9-4)'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_accepting_form_input_with_validation_CO9-4)'
- en: The `CancelSpeechRecognition` method is used to cancel the speech recognition
    session.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '`CancelSpeechRecognition`方法用于取消语音识别会话。'
- en: '[![5](assets/5.png)](#co_accepting_form_input_with_validation_CO9-5)'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_accepting_form_input_with_validation_CO9-5)'
- en: The `RecognizeSpeech` method is used to start the speech recognition session.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`RecognizeSpeech`方法用于启动语音识别会话。'
- en: Warning
  id: totrans-208
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: Declaring a type in someone else’s namespace (such as `Microsoft.JSInterop`)
    should not be overused. This practice is typically not publicly recommended, but
    it’s used here to make the library more accessible to developers. In this way,
    as developers opt in to using this NuGet package, where their apps are already
    making use of `Microsoft.JSInterop`, they can also use the `SpeechRecognition`
    API.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在他人命名空间（如`Microsoft.JSInterop`）中声明类型不应过度使用。通常不公开推荐这种做法，但在这里使用它是为了使库对开发者更加友好。这样一来，开发者选择使用此
    NuGet 包时，如果他们的应用程序已经使用了`Microsoft.JSInterop`，他们也可以使用`SpeechRecognition` API。
- en: 'This interface inherits `IAsyncDisposable`, and its `DisposeAsync` call will
    perform the necessary cleanup of the captured module reference. The `ISpeechRecognitionService`
    interface is small, so it’s a good candidate for simple unit testing, which is
    discussed in [Chapter 9](ch09.html#chapter-nine). This makes it easy to perform
    unit tests on the logic surrounding the speech recognition module. Next, we’ll
    look at the `DefaultSpeech​Re⁠cognitionService` class. It’s defined in the *DefaultSpeechRecognitionService.cs*
    C# file:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 该接口继承了 `IAsyncDisposable`，其 `DisposeAsync` 调用将执行必要的捕获模块引用的清理工作。`ISpeechRecognitionService`
    接口很小，因此非常适合简单的单元测试，这在[第9章](ch09.html#chapter-nine)中有所讨论。这使得可以轻松对围绕语音识别模块的逻辑执行单元测试。接下来，我们将看看
    `DefaultSpeech​Re⁠cognitionService` 类。它在 *DefaultSpeechRecognitionService.cs*
    C# 文件中定义：
- en: '[PRE9]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[![1](assets/1.png)](#co_accepting_form_input_with_validation_CO10-1)'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_accepting_form_input_with_validation_CO10-1)'
- en: The `DefaultSpeechRecognitionService` class is both `sealed` and `internal`.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`DefaultSpeechRecognitionService` 类既是 `sealed` 又是 `internal`。'
- en: '[![2](assets/2.png)](#co_accepting_form_input_with_validation_CO10-2)'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_accepting_form_input_with_validation_CO10-2)'
- en: There are several fields required for this implementation besides the `const
    string` fields—two framework-provided types (`IJSInProcessRuntime` and `IJSInProcessObjectReference`)
    and two custom types (`SpeechRecognitionCallbackRegistry` and `SpeechRecognitionSubject`).
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `const string` 字段外，此实现还需要几个字段——两个由框架提供的类型（`IJSInProcessRuntime` 和 `IJSInProcessObjectReference`）以及两个自定义类型（`SpeechRecognitionCallbackRegistry`
    和 `SpeechRecognitionSubject`）。
- en: '[![3](assets/3.png)](#co_accepting_form_input_with_validation_CO10-3)'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_accepting_form_input_with_validation_CO10-3)'
- en: '`InitializeSpeechRecognitionSubject` creates the speech recognition subject.
    If it already exists, the existing speech recognition session is canceled.'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`InitializeSpeechRecognitionSubject` 创建语音识别主题。如果它已经存在，则取消现有的语音识别会话。'
- en: '[![4](assets/4.png)](#co_accepting_form_input_with_validation_CO10-4)'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_accepting_form_input_with_validation_CO10-4)'
- en: The `InitializeModuleAsync` method is used to initialize the speech recognition
    module.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`InitializeModuleAsync` 方法用于初始化语音识别模块。'
- en: '[![5](assets/5.png)](#co_accepting_form_input_with_validation_CO10-5)'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_accepting_form_input_with_validation_CO10-5)'
- en: The `CancelSpeechRecognition` method is used to cancel the speech recognition
    session.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '`CancelSpeechRecognition` 方法用于取消语音识别会话。'
- en: '[![6](assets/6.png)](#co_accepting_form_input_with_validation_CO10-6)'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_accepting_form_input_with_validation_CO10-6)'
- en: The `RecognizeSpeech` method is used to start the speech recognition session.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`RecognizeSpeech` 方法用于启动语音识别会话。'
- en: '[![7](assets/7.png)](#co_accepting_form_input_with_validation_CO10-7)'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](assets/7.png)](#co_accepting_form_input_with_validation_CO10-7)'
- en: The `OnStarted` method is used to invoke the `onStarted` callback.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnStarted` 方法用于调用 `onStarted` 回调。'
- en: '[![8](assets/8.png)](#co_accepting_form_input_with_validation_CO10-8)'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '[![8](assets/8.png)](#co_accepting_form_input_with_validation_CO10-8)'
- en: The `OnSpeechRecognized` method is used to invoke the `onRecognized` callback.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnSpeechRecognized` 方法用于调用 `onRecognized` 回调。'
- en: The `InitializeModuleAsync` method is required to be called before any other
    call. This ensures that the `_speechRecognitionModule` field is initialized. The
    `Cancel​Spee⁠chRecognition` method is used to cancel the speech recognition session.
    The `RecognizeSpeech` method is used to start the speech recognition session.
    When the speech recognition session is started, the `_speechRecognition` field
    is initialized. An invocation key is created (`Guid.NewGuid()`), and this is passed
    from .NET into the JavaScript interop calls. The calling JavaScript then uses
    the given `key` when it invokes its callbacks. This is then used to ensure that
    callbacks are removed from the `_callbackRegistry` once they’re called. The `OnStarted`,
    `OnEnded`, and `OnRecognitionError` methods are used to invoke the corresponding
    callbacks. The `OnSpeechRecognized` is different, as it instead pushes the given
    `transcript` and `isFinal` values into the `SpeechRecognitionResult` object and
    calls the `Recognition​Received` method on the `_speechRecognition` field.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用任何其他调用之前，需要调用 `InitializeModuleAsync` 方法。这确保了 `_speechRecognitionModule`
    字段的初始化。`Cancel​Spee⁠chRecognition` 方法用于取消语音识别会话。`RecognizeSpeech` 方法用于启动语音识别会话。当启动语音识别会话时，将初始化
    `_speechRecognition` 字段。创建调用键（`Guid.NewGuid()`），并将其从 .NET 传递到 JavaScript 交互调用中。调用
    JavaScript 使用给定的 `key` 来调用其回调函数。然后使用此方法确保一旦调用，就从 `_callbackRegistry` 中删除回调。`OnStarted`、`OnEnded`
    和 `OnRecognitionError` 方法用于调用相应的回调函数。`OnSpeechRecognized` 不同，它将给定的 `transcript`
    和 `isFinal` 值推送到 `SpeechRecognitionResult` 对象中，并在 `_speechRecognition` 字段上调用 `Recognition​Received`
    方法。
- en: The `_speechRecognition` field is a `SpeechRecognitionSubject` type. This custom
    type wraps a bit of reactive code and provides an encapsulated observer and observable
    pair. In the next section, I’ll explain how ReactiveX (Reactive Extensions) are
    used to create the `SpeechRecognitionSubject` type.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`_speechRecognition` 字段是 `SpeechRecognitionSubject` 类型。这种自定义类型包装了一些响应式代码，并提供了封装的观察者和可观察者对。在下一节中，我将解释如何使用响应式扩展（Reactive
    Extensions）来创建 `SpeechRecognitionSubject` 类型。'
- en: Reactive Programming with the Observer Pattern
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用观察者模式的响应式编程
- en: Unlike the `OnStarted`, `OnEnded`, and `OnRecognitionError` events, the `OnSpeech​Recog⁠nized`
    event triggers many times. This is because the JavaScript speech recognition code
    sets the `continuous` flag to `true` when the speech recognition session is started.
    The JavaScript code will invoke the `onRecognized` callback multiple times, with
    the `isFinal` flag set to `false` for each invocation. When intermediate recognition
    results are available, a final recognition result is still only intermittent.
    When final, it’s a complete thought or sentence. The speech recognition service
    will continue to listen until either an error occurs or a cancellation is requested.
    We’ll use reactive programming, which relies on asynchronous programming logic
    to handle real-time updates to otherwise static content. As the speech recognition
    service fires, our app will observe each occurrence of the event and take appropriate
    action.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `OnStarted`、`OnEnded` 和 `OnRecognitionError` 事件不同，`OnSpeech​Recog⁠nized` 事件会触发多次。这是因为
    JavaScript 语音识别代码在启动语音识别会话时将 `continuous` 标志设置为 `true`。JavaScript 代码将多次调用 `onRecognized`
    回调函数，对于每次调用，`isFinal` 标志设置为 `false`。当中间识别结果可用时，最终识别结果仍然是间歇性的。当最终识别时，它是一个完整的想法或句子。语音识别服务将继续监听，直到发生错误或请求取消。我们将使用响应式编程，依赖于异步编程逻辑来处理对静态内容的实时更新。当语音识别服务触发时，我们的应用程序将观察每个事件的发生并采取适当的操作。
- en: '[ReactiveX (or Reactive Extensions)](https://reactivex.io) is an API for asynchronous
    programming with observable streams. ReactiveX is an implementation of the *observer
    pattern*.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '[响应式扩展（或响应式扩展）](https://reactivex.io) 是一个用于异步编程的可观察流的 API。响应式扩展是 *观察者模式* 的一种实现。'
- en: 'The .NET implementation of Reactive Extensions is known as Rx.NET. Within this
    library, a `Subject` type represents an object that is both an observable sequence
    and an observer. In the case of speech recognition, the `SpeechRecognition​Sub⁠ject`
    type observes a stream of `SpeechRecognitionResult` objects. Consider the *Speech​Recogni⁠tionSubject.cs*
    C# file:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 实现的响应式扩展被称为 Rx.NET。在这个库中，`Subject` 类型表示一个既是可观察序列又是观察者的对象。在语音识别中，`SpeechRecognition​Sub⁠ject`
    类型观察一个流的 `SpeechRecognitionResult` 对象。考虑 *Speech​Recogni⁠tionSubject.cs* C# 文件：
- en: '[PRE10]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[![1](assets/1.png)](#co_accepting_form_input_with_validation_CO11-1)'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_accepting_form_input_with_validation_CO11-1)'
- en: The `SpeechRecognitionSubject` type relies on a subject, observer, observable,
    and subscription.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 类型`SpeechRecognitionSubject`依赖于主题、观察者、可观察对象和订阅。
- en: '[![2](assets/2.png)](#co_accepting_form_input_with_validation_CO11-2)'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_accepting_form_input_with_validation_CO11-2)'
- en: The `_observer` field is used to invoke the `onRecognized` callback, and the
    constructor is `private`.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 字段`_observer`用于调用`onRecognized`回调，并且构造函数是`private`。
- en: '[![3](assets/3.png)](#co_accepting_form_input_with_validation_CO11-3)'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_accepting_form_input_with_validation_CO11-3)'
- en: The `Factory` method is used to create the `SpeechRecognitionSubject` type.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`Factory`用于创建`SpeechRecognitionSubject`类型。
- en: '[![4](assets/4.png)](#co_accepting_form_input_with_validation_CO11-4)'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_accepting_form_input_with_validation_CO11-4)'
- en: The `RecognitionReceived` method is used to push the given `recognition` value
    into the `_speechRecognitionSubject` field.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`RecognitionReceived`用于将给定的`recognition`值推送到字段`_speechRecognitionSubject`中。
- en: '[![5](assets/5.png)](#co_accepting_form_input_with_validation_CO11-5)'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_accepting_form_input_with_validation_CO11-5)'
- en: The `Dispose` method is used to dispose of the `_speechRecognition​Sub⁠scrip⁠tion`
    field.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`Dispose`用于释放字段`_speechRecognition​Sub⁠scrip⁠tion`。
- en: The `SpeechRecognitionSubject` allows the consumer to push `SpeechRecognitionResult`
    instances into its underlying `Subject`. The consumer also provides an `Action<string,
    string>` observer function, which is used within the observables subscription.
    When `Subject` acts as an observable, it means its stream of intermittent results
    can be filtered and conditionally dispatched to the consumer. When the final `transcript`
    is ready, the consumer is notified and provided with the `key` and `transcript`
    values.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '`SpeechRecognitionSubject`允许消费者将`SpeechRecognitionResult`实例推送到其底层的`Subject`中。消费者还提供了一个`Action<string,
    string>`观察者函数，该函数在可观察对象的订阅中使用。当`Subject`充当可观察对象时，意味着它的间歇性结果流可以被过滤并有条件地分派给消费者。当最终的`transcript`准备就绪时，会通知消费者并提供`key`和`transcript`值。'
- en: The custom subject wrapper defines only a `private` constructor, which means
    it’s not possible to instantiate this object unless using the `static` factory
    method. The `Factory` functionality accepts the `observer` used to instantiate
    `SpeechRecognitionSubject`. The subscription instance is stored as a field so
    that it can be explicitly cleaned up when the subject is disposed of.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义主题包装器仅定义了一个`private`构造函数，这意味着除非使用静态工厂方法，否则无法实例化此对象。`Factory`功能接受用于实例化`SpeechRecognitionSubject`的`observer`。订阅实例被存储为字段，以便在主题被处置时可以显式清除。
- en: Managing Callbacks with a Registry
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用注册表管理回调
- en: 'Since the service exposes several callbacks, it manages the interop callbacks
    in a custom registry. The `SpeechRecognitionCallbackRegistry` object allows for
    registering a callback and the corresponding invocation of a callback given its
    key. Let’s look at the *SpeechRecognitionCallbackRegistry.cs* C# file:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 由于服务暴露了多个回调，它通过自定义注册表管理交互回调。`SpeechRecognitionCallbackRegistry`对象允许注册回调，并通过其键调用相应的回调。让我们看看*C#文件*
    *SpeechRecognitionCallbackRegistry.cs*：
- en: '[PRE11]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[![1](assets/1.png)](#co_accepting_form_input_with_validation_CO12-1)'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_accepting_form_input_with_validation_CO12-1)'
- en: The `_onResultCallbackRegister` field is used to store the callback register
    for the `onRecognized` callback.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 字段`_onResultCallbackRegister`用于存储`onRecognized`回调的注册。
- en: '[![2](assets/2.png)](#co_accepting_form_input_with_validation_CO12-2)'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_accepting_form_input_with_validation_CO12-2)'
- en: The `RegisterOnRecognized` method registers the `onRecognized` callback, and
    the `_onResultCallbackRegister` field is used to store the callback.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`RegisterOnRecognized`注册了`onRecognized`回调，并且字段`_onResultCallbackRegister`用于存储回调。
- en: '[![3](assets/3.png)](#co_accepting_form_input_with_validation_CO12-3)'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_accepting_form_input_with_validation_CO12-3)'
- en: The `RegisterOnError` method registers the `onError` callback, and the `_onErrorCallbackRegister`
    field is used to store the callback.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`RegisterOnError`注册了`onError`回调函数，并且字段`_onErrorCallbackRegister`用于存储回调。
- en: '[![4](assets/4.png)](#co_accepting_form_input_with_validation_CO12-4)'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_accepting_form_input_with_validation_CO12-4)'
- en: The `InvokeOnRecognized` method invokes the `onRecognized` callback, and the
    `OnInvokeCallback` method invokes the callback.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`InvokeOnRecognized`调用`onRecognized`回调，并且方法`OnInvokeCallback`调用回调。
- en: '[![5](assets/5.png)](#co_accepting_form_input_with_validation_CO12-5)'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_accepting_form_input_with_validation_CO12-5)'
- en: The `InvokeOnError` method invokes the `onError` callback, and the `OnInvoke​Call⁠back`
    method invokes the callback.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`InvokeOnError`调用`onError`回调，并且方法`OnInvokeCall⁠back`调用回调。
- en: '[![6](assets/6.png)](#co_accepting_form_input_with_validation_CO12-6)'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_accepting_form_input_with_validation_CO12-6)'
- en: The `OnInvokeCallback` method invokes the callback in the register after it’s
    removed.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnInvokeCallback` 方法在回调被移除后调用该注册。'
- en: A `ConcurrentDictionary` represents a thread-safe collection of KVPs that can
    be accessed by multiple threads concurrently. There are many alternative approaches
    to managing callbacks, but the `SpeechRecognitionCallbackRegistry` object is the
    simplest and most performant. It’s thread-safe and uses globally unique identifiers
    to manage the callbacks—which ensures that a single registration is tethered to
    a single invocation of a callback. One of the advantages to using C# in a browser
    such as this is that we’re spoiled with the native types provided by the .NET
    ecosystem. Having access to primitives like `ConcurrentDictionary`, `Guid`, strongly
    typed delegates (`Action<T>` for example), and even Rx.NET is a huge advantage.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '`ConcurrentDictionary` 表示一个线程安全的 KVP 集合，可以被多个线程并发访问。有许多管理回调的替代方法，但 `SpeechRecognitionCallbackRegistry`
    对象是最简单和最高效的。它是线程安全的，并使用全局唯一标识符管理回调——确保单个注册与回调的单次调用相对应。在这种浏览器中使用 C# 的优势之一是我们可以使用
    .NET 生态系统提供的原生类型。具有诸如 `ConcurrentDictionary`、`Guid`、强类型委托 (`Action<T>` 例如) 甚至
    Rx.NET 这样的基本类型是一个巨大的优势。'
- en: Applying the Speech Recognition Service to Components
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将语音识别服务应用于组件
- en: 'Applying `SpeechRecognitionSubject` and `SpeechRecognitionCallbackRegistry`
    to expose the `ISpeechRecognitionService` interface, we can now create a custom
    component that can be added to an HTML element and surface speech recognition
    functionality. Let’s look at the *AdditiveSpeechRecognitionComponent.cs* C# file:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `SpeechRecognitionSubject` 和 `SpeechRecognitionCallbackRegistry` 应用于公开 `ISpeechRecognitionService`
    接口，我们现在可以创建一个自定义组件，将其添加到 HTML 元素中，并提供语音识别功能。让我们看看 *AdditiveSpeechRecognitionComponent.cs*
    C# 文件：
- en: '[PRE12]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[![1](assets/1.png)](#co_accepting_form_input_with_validation_CO13-1)'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_accepting_form_input_with_validation_CO13-1)'
- en: The `AdditiveSpeechRecognitionComponent` implements the `IAsyncDisposable` interface,
    which allows us to dispose of the speech recognition module when the component
    is removed from the DOM.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '`AdditiveSpeechRecognitionComponent` 实现了 `IAsyncDisposable` 接口，允许我们在组件从 DOM
    中移除时处置语音识别模块。'
- en: '[![2](assets/2.png)](#co_accepting_form_input_with_validation_CO13-2)'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_accepting_form_input_with_validation_CO13-2)'
- en: The `SpeechRecognition` property is used to access the speech recognition service.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '`SpeechRecognition` 属性用于访问语音识别服务。'
- en: '[![3](assets/3.png)](#co_accepting_form_input_with_validation_CO13-3)'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_accepting_form_input_with_validation_CO13-3)'
- en: The `SpeechRecognitionStarted` property is optional and is used to notify the
    parent component that the speech recognition has started.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '`SpeechRecognitionStarted` 属性是可选的，并用于通知父组件语音识别已启动。'
- en: '[![4](assets/4.png)](#co_accepting_form_input_with_validation_CO13-4)'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_accepting_form_input_with_validation_CO13-4)'
- en: The `SpeechRecognitionStopped` property is also optional, and it’s signaled
    when speech recognition has stopped.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`SpeechRecognitionStopped` 属性也是可选的，在语音识别停止时发信号。'
- en: '[![5](assets/5.png)](#co_accepting_form_input_with_validation_CO13-5)'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_accepting_form_input_with_validation_CO13-5)'
- en: The `SpeechRecognized` property is an `EditorRequired` parameter, and it’s called
    multiple times over the typical session.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`SpeechRecognized` 属性是一个 `EditorRequired` 参数，在典型会话中被多次调用。'
- en: '[![6](assets/6.png)](#co_accepting_form_input_with_validation_CO13-6)'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_accepting_form_input_with_validation_CO13-6)'
- en: The `OnAfterRenderAsync` method is used to initialize the speech recognition
    module.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnAfterRenderAsync` 方法用于初始化语音识别模块。'
- en: '[![7](assets/7.png)](#co_accepting_form_input_with_validation_CO13-7)'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](assets/7.png)](#co_accepting_form_input_with_validation_CO13-7)'
- en: The `OnRecognizeButtonClick` method is used to start or stop speech recognition.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnRecognizeButtonClick` 方法用于启动或停止语音识别。'
- en: '[![8](assets/8.png)](#co_accepting_form_input_with_validation_CO13-8)'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '[![8](assets/8.png)](#co_accepting_form_input_with_validation_CO13-8)'
- en: The `OnRecognized` method is used to notify the parent component that speech
    recognition has been completed.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnRecognized` 方法用于通知父组件语音识别已完成。'
- en: When the user clicks the microphone button, the `OnRecognizeButtonClick` method
    is called. The consuming `Contact` page will mark the corresponding `input` element
    as `readonly`. This helps to ensure that the user cannot edit the text in the
    input field, as it is automatically updating from the speech recognition. So,
    you can’t talk and type at the same time. The `EventCallback` instances signal
    any changes to the consumer. The `TryInvokeAsync` is an extension method that
    conditionally calls the `InvokeAsync` method on the `EventCallback` instance if
    its `HasDelegate` value is `true`.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击麦克风按钮时，将调用`OnRecognizeButtonClick`方法。消费者`Contact`页面将把相应的`input`元素标记为`readonly`。这有助于确保用户无法编辑输入字段中的文本，因为它是通过语音识别自动更新的。因此，你不能边说话边打字。`EventCallback`实例会向消费者发出任何更改的信号。`TryInvokeAsync`是一个扩展方法，条件性地调用`EventCallback`实例上的`InvokeAsync`方法，如果其`HasDelegate`值为`true`。
- en: Form Submission Validation and Verification
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单提交验证和确认
- en: Putting this all together, we’ve built a custom `Contact` page that displays
    a beautifully styled form that boasts speech recognition functionality with the
    click of a button. Before a user can submit the form, all fields must be validated.
    As the primary function of a form is to take user input and give it to the recipient,
    it’s vital to validate the input to make sure the information is communicated
    correctly.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有这些内容结合起来，我们构建了一个自定义的`Contact`页面，展示了一个漂亮样式的表单，支持一键语音识别功能。在用户提交表单之前，所有字段都必须通过验证。由于表单的主要功能是接受用户输入并将其传递给接收者，验证输入以确保信息正确传达是非常重要的。
- en: The form model is bound to various form fields, and the form is validated on
    submission. Each form field is represented by an HTML element using Blazor components.
    The form field components are responsible for validating the user’s input. When
    the framework-provided `EditForm` component is given a C# model that is invalid,
    it will render the form with the appropriate error messages. Only when the form
    submission is valid will the `EditForm` component submit the form. Meaning all
    of the data annotations on the model are validated, including required fields,
    custom regex patterns, and custom validation methods.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 表单模型绑定到各种表单字段，并在提交时进行验证。每个表单字段由使用 Blazor 组件的 HTML 元素表示。表单字段组件负责验证用户的输入。当框架提供的`EditForm`组件得到一个无效的
    C# 模型时，它将使用适当的错误消息渲染表单。只有在表单提交有效时，`EditForm`组件才会提交表单。这意味着所有模型上的数据注解都得到验证，包括必填字段、自定义正则表达式模式和自定义验证方法。
- en: Once the `Contact` form is considered valid and submitted, the user is prompted
    by a modal that acts as a basic spam blocker. We set up this `VerificationModalComponent`
    in [Figure 4-3](ch04.html#are-you-human-modal) in [Chapter 4](ch04.html#chapter-four).
    The modal prompts the user to answer random math problems and requires a correct
    answer for the submission to proceed.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`Contact`表单被视为有效并提交，用户将收到一个模态框提示，充当基本的垃圾邮件阻止器。我们在[第 4 章](ch04.html#chapter-four)的[图 4-3](ch04.html#are-you-human-modal)中设置了这个`VerificationModalComponent`。该模态框提示用户回答随机的数学问题，并要求正确答案才能继续提交。
- en: '[Figure 8-5](#are-you-human-modal-zoom) shows an example of this modal prompt.'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 8-5](#are-you-human-modal-zoom)显示了这个模态框提示的一个示例。'
- en: '![](assets/lblz_0805.png)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/lblz_0805.png)'
- en: Figure 8-5\. An example rendering of the `VerificationModalComponent` zoomed
    in
  id: totrans-289
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-5\. `VerificationModalComponent`的示例渲染，放大后
- en: If the answer is incorrect, the modal will not allow the user’s form data to
    be sent to the Web.Api project’s endpoint for processing. An incorrect answer
    is shown in [Figure 8-6](#are-you-human-modal-zoom-wrong).
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 如果答案不正确，模态框将不允许将用户的表单数据发送到 Web.Api 项目的端点进行处理。错误答案在[图 8-6](#are-you-human-modal-zoom-wrong)中显示。
- en: '![](assets/lblz_0806.png)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/lblz_0806.png)'
- en: Figure 8-6\. An example rendering of the `VerificationModalComponent` zoomed
    in with the wrong answer
  id: totrans-292
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-6\. `VerificationModalComponent`的示例渲染，放大后，答案错误
- en: Once the question is correctly answered, the modal is dismissed and the contact
    form is processed. A notification is triggered, which states that the contact
    attempt is successful, as shown in [Figure 8-7](#contact-page-message-sent-notification).
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦问题被正确回答，模态框将被关闭，联系表单将被处理。触发通知，说明联系尝试成功，如[图 8-7](#contact-page-message-sent-notification)所示。
- en: '![](assets/lblz_0807.png)'
  id: totrans-294
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/lblz_0807.png)'
- en: Figure 8-7\. An example rendering of the confirmation notification
  id: totrans-295
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-7\. 确认通知的示例渲染
- en: Because the primary function of a form is to take user input and give it to
    the recipient, it’s vital to validate the input to make sure the information is
    communicated correctly. A model is bound to various form fields, and the form
    is validated on submission. Each form field is represented by an HTML element
    using Blazor components. The form field components are responsible for validating
    the user’s input. When the framework-provided `EditForm` component is given a
    C# model that is invalid, it will render the form with the appropriate error messages.
    Only when the form submission is valid will the `EditForm` component submit the
    form, meaning all of the data annotations on the model are validated, including
    required fields, custom regex patterns, and custom validation methods.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 因为表单的主要功能是接收用户输入并传递给接收者，因此验证输入确保信息正确传递非常重要。模型绑定到各种表单字段，并在提交时进行验证。每个表单字段由使用 Blazor
    组件的 HTML 元素表示。表单字段组件负责验证用户的输入。当框架提供的`EditForm`组件给定一个无效的 C# 模型时，它将渲染带有适当错误消息的表单。只有在表单提交有效时，`EditForm`
    组件才会提交表单，这意味着模型上的所有数据注解都经过验证，包括必填字段、自定义正则表达式模式和自定义验证方法。
- en: Summary
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, I showed you how to implement a form that accepts input with
    validation. In the process, you learned the basics of form submission, including
    how to bind custom C# models to `EditForm`, how to use data annotations to decorate
    model properties with validation attributes, and how to render a form with validation
    errors. I also walked you through a speech recognition library that exposes the
    ability to accept a user’s spoken word as input that is bound to text input.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我向您展示了如何实现一个带有验证输入的表单。在此过程中，您学习了表单提交的基础知识，包括如何将自定义的 C# 模型绑定到`EditForm`，如何使用数据注解来装饰模型属性以及如何渲染带有验证错误的表单。我还向您介绍了一个语音识别库，该库可以接受用户口述的文字输入，并将其绑定到文本输入。
- en: In the next chapter, I’m going to show you how to properly test your Blazor
    apps. From unit tests with xUnit to component tests with bUnit, you’ll learn how
    to write reliable tests that can be used to verify the functionality of your app.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我将向您展示如何正确测试您的 Blazor 应用程序。从使用 xUnit 进行单元测试到使用 bUnit 进行组件测试，您将学习如何编写可靠的测试，用于验证应用程序的功能。
- en: ^([1](ch08.html#idm46365007034848-marker)) “ASP.NET Core Blazor Forms and Input
    Components,” Microsoft .NET Documentation, August 16, 2022, [*https://oreil.ly/3qzqQ*](https://oreil.ly/3qzqQ).
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch08.html#idm46365007034848-marker)) “ASP.NET Core Blazor Forms and Input
    Components,” Microsoft .NET Documentation, August 16, 2022, [*https://oreil.ly/3qzqQ*](https://oreil.ly/3qzqQ).
