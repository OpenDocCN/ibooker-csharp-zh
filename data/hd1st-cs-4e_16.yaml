- en: 'Unity Lab #5: Raycasting'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unity实验室#5：射线投射
- en: When you set up a scene in Unity, you’re creating a virtual 3D world for the
    characters in your game to move around in. But in most games, most things in the
    game aren’t directly controlled by the player. So how do these objects find their
    way around a scene?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在Unity中设置场景时，您正在为游戏中的角色创建一个虚拟的3D世界，使它们可以在其中移动。但在大多数游戏中，游戏中的大部分事物并不直接由玩家控制。那么这些对象如何在场景中找到它们的路？
- en: The goal of labs 5 and 6 is to get you familiar with Unity’s **pathfinding and
    navigation system**, a sophisticated AI system that lets you create characters
    that can find their way around the worlds that you create. In this lab, you’ll
    build a scene out of GameObjects and use navigation to move a character around
    it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 实验五和六的目标是让您熟悉Unity的**寻路和导航系统**，这是一个复杂的AI系统，让您可以创建能够在您创建的世界中找到路的角色。在这个实验中，您将使用GameObject构建场景，并使用导航将角色移动到周围。
- en: You’ll use **raycasting** to write code that’s responsive to the geometry of
    the scene, **capture input,** and use it to move a GameObject to the point where
    the player clicked. Just as importantly, you’ll **get practice writing C# code**
    with classes, fields, references, and other topics we’ve discussed.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 您将使用**射线投射**编写响应场景几何的代码，**捕捉输入**并用它将一个GameObject移动到玩家点击的点。同样重要的是，您将**练习编写包括类、字段、引用等在内的C#代码**，这些都是我们讨论过的主题。
- en: Create a new Unity project and start to set up the scene
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新的Unity项目并开始设置场景
- en: '*Before you begin, close any Unity project that you have open. Also close Visual
    Studio—we’ll let Unity open it for us. Create a new Unity project using the 3D
    template, set your layout to Wide so it matches our screenshots, and give it a
    name like **Unity Labs 5 and 6** so you can come back to it later.*'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*开始之前，请关闭任何打开的Unity项目。同时关闭Visual Studio——我们将让Unity来打开它。使用3D模板创建一个新的Unity项目，将布局设置为Wide，使其与我们的截图匹配，并起一个名字，比如**Unity
    Labs 5 and 6**，以便您以后可以回来查看。*'
- en: Start by creating a play area that the player will navigate around. Right-click
    inside the Hierarchy window and **create a Plane** (GameObject >>3D Object >>
    Plane). Name your new Plane GameObject *Floor.*
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 首先创建一个玩家将要在其中导航的游戏区域。在层级窗口中右键单击，并**创建一个Plane**（GameObject >> 3D Object >> Plane）。将您的新Plane
    GameObject命名为*Floor*。
- en: Right-click on the Assets folder in the Project window and **create a folder
    inside it called Materials**. Then right-click on the new Materials folder you
    created and choose **Create >> Material**. Call the new material *FloorMaterial*.
    Let’s keep this material simple for now—we’ll just make it a color. Select Floor
    in the Project window, then click on the white box to the right of the word Albedo
    in the Inspector.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击项目窗口中的Assets文件夹，**创建一个名为Materials的文件夹**。然后在您创建的新Materials文件夹上右键单击，并选择**创建
    >> Material**。将新材质命名为*FloorMaterial*。现在，让我们保持这个材质简单——我们只需使它成为一种颜色。在项目窗口中选择Floor，然后单击检视器中Albedo词右侧的白色框。
- en: '![Images](assets/pg578-1.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/pg578-1.png)'
- en: In the Color window, use the outer ring to choose a color for the floor. We
    used a color with number 4E51CB in the screenshot—you can type that into the Hexadecimal
    box.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在颜色窗口中，使用外环选择地面的颜色。我们在截图中使用了一个颜色，编号为4E51CB，您可以将其输入到十六进制框中。
- en: Drag the material from the **Project window onto the Plane GameObject in the
    Hierarchy window**. Your floor plane should now be the color that you selected.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 将**项目窗口中的材料拖到层级窗口中的Plane GameObject**上。您的地面平面现在应该是您选择的颜色。
- en: '![Images](assets/pg578-2.png)![Images](assets/pg578-3.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/pg578-2.png)![图片](assets/pg578-3.png)'
- en: Note
  id: totrans-12
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Think about it and take a guess. Then use the Inspector window to try various
    Y scale values and see if the plane acts the way you expected. (Don’t forget to
    set them back!)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细思考并猜一下。然后使用检视器窗口尝试各种Y比例值，看看平面是否按照您的预期行动。（别忘了把它们设回来！）
- en: Note
  id: totrans-14
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**A Plane is a flat square object that’s 10 units long by 10 units wide (in
    the X-Z plane), and 0 units tall (in the Y plane). Unity creates it so that the
    center of the plane is at point (0,0,0). This center point of the plane determines
    it position in the scene. Just like our other objects, you can move a plane around
    the scene by using the Inspector or the tools to change its position and rotation.
    You can also change its scale, but since it has no height, you can only change
    the X and Z scale—any positive number you put into the Y scale will be ignored.**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**平面是一个平方形的平面对象，长宽为 10 个单位（在 X-Z 平面），高度为 0 个单位（在 Y 平面）。Unity 创建它，使得平面的中心点位于
    (0,0,0)。这个平面的中心点决定了它在场景中的位置。和其他对象一样，你可以通过检视器或工具来移动它的位置和旋转。你也可以改变它的比例，但因为它没有高度，你只能改变
    X 和 Z 的比例—任何放入 Y 比例的正数都会被忽略。**'
- en: '**The objects that you can create using the 3D Object menu (planes, spheres,
    cubes, cylinders, and a few other basic shapes) are called primitive objects.
    You can learn more about them by opening the Unity Manual from the Help menu and
    searching for the “Primitive and placeholder objects” help page. Take a minute
    and open up that help page right now. Read what it says about planes, spheres,
    cubes, and cylinders.**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用 3D 对象菜单创建的对象（平面、球体、立方体、圆柱体以及其他几个基本形状）被称为基本对象。你可以通过从帮助菜单打开 Unity 手册并搜索“基本和占位对象”帮助页面来了解更多信息。现在花一分钟打开这个帮助页面。阅读它对于平面、球体、立方体和圆柱体的介绍。**'
- en: Set up the camera
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置摄像机
- en: 'In the last two Unity Labs you learned that a GameObject is essentially a “container”
    for components, and that the Main Camera has just three components: a Transform,
    a Camera, and an Audio Listener. That makes sense, because all a camera really
    needs to do is be at a location and record what it sees and hears. Have a look
    at the camera’s Transform component in the Inspector window.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在最近的两个 Unity 实验中，你学到了 GameObject 本质上是组件的“容器”，而主摄像机只有三个组件：一个 Transform，一个 Camera，和一个
    Audio Listener。这很合理，因为摄像机所需做的就是位于某个位置并记录它所看到和听到的内容。查看检视器窗口中摄像机的 Transform 组件。
- en: '![Images](assets/pg579-1.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/pg579-1.png)'
- en: Notice how the position is (0, 1, –10). Click on the Z label in the Position
    line and drag up and down. You’ll see the camera fly back and forth in the scene
    window. Take a close look at the box and four lines in front of the camera. They
    represent the camera’s **viewport**, or the visible area on the player’s screen.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 注意位置是 (0, 1, –10)。点击位置行中的 Z 标签并向上或向下拖动。你会看到摄像机在场景窗口中前后移动。仔细观察摄像头前方的方框和四条线。它们代表摄像机的**视口**，或者玩家屏幕上可见的区域。
- en: '**Move the camera around the scene and rotate it using the Move tool (W) and
    Rotate tool (E)**, just like you did with other GameObjects in your scene. The
    Camera Preview window will update in real time, showing you what the camera sees.
    Keep an eye on the Camera Preview while you move the camera around. The floor
    will appear to move as it flies in and out of the camera’s view.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用移动工具（W）和旋转工具（E）移动摄像机并在场景中旋转它**，就像你在场景中操作其他 GameObject 一样。摄像机预览窗口会实时更新，显示摄像机所见的内容。移动摄像机时保持关注摄像机预览。地面将会随着摄像机视角的改变而移动。'
- en: Use the context menu in the Inspector window to reset the Main Camera’s Transform
    component. Notice how it ***doesn’t reset the camera to its original position***—it
    resets both the camera’s position and its rotation to (0, 0, 0). You’ll see the
    camera intersecting the plane in the Scene window.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用检视器窗口中的上下文菜单重置主摄像机的 Transform 组件。注意***这不会将摄像机重置到原始位置***—它会将摄像机的位置和旋转都重置为 (0,
    0, 0)。你会看到摄像机与场景窗口中的平面相交。
- en: '![Images](assets/pg579-2.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/pg579-2.png)'
- en: Now let’s point the camera straight down. Start by clicking on the X label next
    to Rotation and dragging up and down. You’ll see the viewport in the camera preview
    move. Now **set the camera’s X rotation to 90** in the Inspector window to point
    it straight down.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们把摄像机直接对准地面。首先点击旋转旁边的 X 标签并上下拖动。你会看到摄像机预览中的视口移动。现在在检视器窗口中将摄像机的 X 旋转设置为 90
    度，以使其直接朝下。
- en: You’ll notice that there’s nothing in the Camera Preview anymore, which makes
    sense because the camera is looking straight down below the infinitely thin plane.
    **Click on the Y position label in the Transform component and drag up** until
    you see the entire plane in the Camera Preview.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到在摄像机预览中再也看不到任何内容，这很合理，因为摄像机直接看向无限薄的平面下方。**点击 Transform 组件中的 Y 位置标签并向上拖动**，直到在摄像机预览中看到整个平面。
- en: Now **select Floor in the Hierarchy window**. Notice that the Camera Preview
    disappears—it only appears when the camera is selected. You can also switch between
    the Scene and Game windows to see what the camera sees.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在层次视图中**选择 Floor**。注意到摄像机预览消失了—只有在选择摄像机时才会出现。你也可以在场景和游戏窗口之间切换，看看摄像机的视角。
- en: Use the Plane’s Transform component in the Inspector window to **set the Floor
    GameObject’s scale to (4, 1, 2)** so that it’s twice as long as it is wide. Since
    a Plane is 10 units wide and 10 units long, this scale will make it 40 units long
    and 20 units wide. The plane will completely fill up the viewport again, so move
    the Camera further up along the Y axis until the entire plane is in view.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用平面的 Transform 组件在检视器窗口中，**将 Floor GameObject 的缩放设置为 (4, 1, 2)**，使其长度为宽度的两倍。由于平面宽度和长度均为
    10 单位，这个缩放将使其长度为 40 单位，宽度为 20 单位。平面将完全填满视口，因此将摄像机沿 Y 轴向上移动，直到整个平面都能看到。
- en: '![Images](assets/pg579-3.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/pg579-3.png)'
- en: Note
  id: totrans-29
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You can switch between the Scene and Game windows to see what the camera sees.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在场景和游戏窗口之间切换，看看摄像机的视角。
- en: Create a GameObject for the player
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个玩家的 GameObject
- en: Your game will need a player to control. We’ll create a simple humanoid-ish
    player that has a cylinder for a body and a sphere for a head. Make sure you don’t
    have any objects selected by clicking the scene (or the empty space) in the Hierarchy
    window.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你的游戏需要一个玩家来控制。我们将创建一个简单的类人形玩家，它有一个圆柱体作为身体和一个球体作为头部。确保你没有选择任何对象，通过点击层次视图中的场景（或空白处）。
- en: '**Create a Cylinder GameObject** (3D Object >> Cylinder)—you’ll see a cylinder
    appear in the middle of the scene. Change its name to *Player*, then **choose
    Reset from the context menu** for the Transform component to make sure it has
    all of its default values. Next, **create a Sphere GameObject** (3D Object >>
    Sphere). Change its name to *Head*, and reset its Transform component as well.
    They’ll each have a separate line in the Hierarchy window.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建一个 Cylinder GameObject**（3D Object >> Cylinder）— 你将在场景中央看到一个圆柱体。将其名称改为
    *Player*，然后从上下文菜单中**选择 Reset**，以确保其具有所有默认值。接下来，**创建一个 Sphere GameObject**（3D Object
    >> Sphere）。将其名称改为 *Head*，并重置其 Transform 组件。它们将分别在层次视图中各占一行。'
- en: But we don’t want separate GameObjects—we want a single GameObject that’s controlled
    by a single C# script. This is why Unity has the concept of **parenting**. Click
    on Head in the Hierarchy window and **drag it onto Player**. This makes Player
    the parent of Head. Now the Head GameObject is **nested** under Player.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们不想要分开的 GameObject，我们希望有一个由单个 C# 脚本控制的单一 GameObject。这就是为什么 Unity 引入了**父子关系**的概念。在层次视图中点击
    Head，然后**将其拖动到 Player 上**。这样 Player 就成为了 Head 的父对象。现在 Head GameObject 被**嵌套**在
    Player 下面。
- en: '![Images](assets/pg580-1.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/pg580-1.png)'
- en: Select Head in the Hierarchy window. It was created at (0, 0, 0) like all of
    the other spheres you created. You can see the outline of the sphere, but you
    can’t see the sphere itself because it’s hidden by the plane and the cylinder.
    Use the Transform component in the Inspector window to **change the Y position
    of the sphere to 1.5**. Now the sphere appears above the cylinder, just the right
    place for the player’s head.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在层次视图中选择 Head。它像你创建的所有其他球体一样被创建在 (0, 0, 0)。你可以看到球体的轮廓，但由于被平面和圆柱体遮挡住了，看不到球体本身。使用检视器窗口中的
    Transform 组件，**将球体的 Y 位置更改为 1.5**。现在球体出现在圆柱体上方，正好是玩家头部的位置。
- en: Now select Player in the Hierarchy window. Since its Y position is 0, half of
    the cylinder is hidden by the plane. **Set its Y position to 1**. The cylinder
    pops up above the plane. Notice how it took the Head sphere along with it. Moving
    Player causes Head to move along with it because moving a parent GameObject moves
    its children too—in fact, *any* change that you make to its Transform component
    will automatically get applied to the children. If you scale it down, its children
    will scale, too.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在层次视图中选择 Player。由于其 Y 位置为 0，柱体的一半被平面遮挡住了。**将其 Y 位置设置为 1**。柱体突出平面上方。注意头部球体也随之移动了。移动
    Player 会导致头部也跟随移动，因为移动父 GameObject 会同时移动其子对象—事实上，*任何*对其 Transform 组件的更改都会自动应用到子对象上。如果你缩放它，其子对象也会缩放。
- en: Switch to the Game window—your player is in the middle of the play area.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到游戏窗口—你的玩家位于游戏区域中央。
- en: '![Images](assets/pg580-2.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/pg580-2.png)'
- en: Note
  id: totrans-40
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: When you modify the Transform component for a GameObject that has nested children,
    the children will move, rotate, and scale along with it.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当你修改一个有嵌套子对象的 GameObject 的 Transform 组件时，子对象也会随之移动、旋转和缩放。
- en: Introducing Unity’s navigation system
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Unity的导航系统
- en: One of the most basic things that video games do is move things around. Players,
    enemies, characters, items, obstacles...all of these things can move. That’s why
    Unity is equipped with a sophisticated artificial intelligence–based navigation
    and pathfinding system to help GameObjects move around your scenes. We’ll take
    advantage of the navigation system to make our player move toward a target.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 视频游戏中的最基本事情之一是移动东西。玩家、敌人、角色、物品、障碍物……所有这些东西都可以移动。这就是为什么Unity配备了一个复杂的基于人工智能的导航和路径查找系统，以帮助GameObjects移动到您的场景中。我们将利用导航系统使玩家朝一个目标移动。
- en: 'Unity’s navigation and pathfinding system lets your characters intelligently
    find their way around a game world. To use it, you need to set up basic pieces
    to tell Unity where the player can go:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Unity的导航和路径查找系统允许您的角色智能地在游戏世界中找到自己的路。要使用它，您需要设置基本组件，以告诉Unity玩家可以去哪里：
- en: 'First, you need to tell Unity exactly where your characters are allowed to
    go. You do this by **setting up a NavMesh**, which contains all of the information
    about the walkable areas in the scene: slopes, stairs, obstacles, and even points
    called off-mesh links that let you set up specific player actions like opening
    a door.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，你需要告诉Unity你的角色可以去哪里。你可以通过**设置NavMesh来完成这一点**，其中包含场景中可行走区域的所有信息：坡度、楼梯、障碍物，甚至称为离网链接的点，它们允许你设置特定的玩家操作，如打开门。
- en: Second, you **add a NavMesh Agent component** to any GameObject that needs to
    navigate. This component automatically moves the GameObject around the scene,
    using its AI to find the most efficient path to a target and avoiding obstacles
    and, optionally, other NavMesh Agents.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其次，您**为需要导航的任何GameObject添加导航网格代理组件**。此组件自动移动GameObject，使用其AI找到到目标的最有效路径并避免障碍物，选项ally和其他导航网格代理。
- en: It can sometimes take a lot of computation for Unity to navigate complex NavMeshes.
    That’s why Unity has a Bake feature, which lets you set up a NavMesh in advance
    **and precompute (or bake)** the geometric details to make the agents work more
    efficiently.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Unity来说，导航复杂的NavMeshes需要大量计算。正因为如此，Unity有一个烘焙功能，让你提前设置NavMesh，并预先计算（或烘焙）几何细节，以使代理工作更高效。
- en: '![Images](assets/pg581.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/pg581.png)'
- en: Note
  id: totrans-49
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Unity provides a sophisticated AI navigation and pathfinding system that can
    move your GameObjects around a scene in real time by finding an efficient path
    that avoids obstacles.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Unity提供了一个复杂的AI导航和路径查找系统，可以实时移动GameObjects周围的场景，通过找到避免障碍物的有效路径。
- en: Set up the NavMesh
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置NavMesh
- en: Let’s set up a NavMesh that just consists of the Floor plane. We’ll do this
    using the Navigation window. **Choose AI >> Navigation from the Window menu**
    to add the Navigation window to your Unity workspace. It should show up as a tab
    in the same panel as the Inspector window. Then use the Navigation window to **mark
    the Floor GameObject *navigation static* and *walkable:***
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们设置一个仅包含地板平面的导航网格。我们将在“导航”窗口中执行此操作。**选择AI >> 导航从窗口菜单中添加导航窗口**到你的Unity工作区。它应该显示为与“检查器”窗口同一面板中的标签。然后使用导航窗口**标记地面GameObject“导航静态”和“可行走：”**
- en: Press the **Object button** at the top of the Navigation window.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在导航窗口顶部按**“对象”按钮**。
- en: '**Select the Floor plane** in the Hierarchy window.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在层   **选择“地板平面”** 在“层次结构”窗口中。
- en: Check the **Navigation Static box**. This tells Unity to include the Floor when
    baking the NavMesh.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查**“导航静态”复选框**。这告诉Unity在烘焙NavMesh时包含地板。
- en: '**Select Walkable** from the Navigation Area dropdown. This tells Unity that
    the Floor plane is a surface that any GameObject with a NavMesh Agent can navigate.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从“导航区域”下拉菜单中选择“可行走”。这告诉Unity地板平面是任何具有导航网格代理的GameObject可以导航的表面。
- en: '![Images](assets/pg582-1.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/pg582-1.png)'
- en: Since the only walkable area in this game will be the floor, we’re done in the
    Object section. For a more complex scene with many walkable surfaces or nonwalkable
    obstacles, each individual GameObject needs to be marked appropriately.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 由于游戏中唯一可以行走的区域就是地板，所以在对象部分，我们已经完成了。如果场景中有很多可行走的表面或不可行走的障碍物，每个单独的GameObject需要被适当地标记。
- en: '**Click the Bake button** at the top of the Navigation window to see the bake
    options.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在导航窗口顶部按**“烘焙”按钮**查看烘焙选项。
- en: Now **click the *other* Bake button** at the *bottom* of the Navigation window.
    It will briefly change to Cancel and then switch back to Bake. Did you notice
    that something changed in the Scene window? Switch back and forth between the
    Inspector and Navigation windows. When the Navigation window is active, the Scene
    window shows the NavMesh Display and highlights the NavMesh as a blue overlay
    on top of the GameObjects that are part of the baked NavMesh. In this case, it
    highlights the plane that you marked as navigation static and walkable.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在导航窗口的底部**点击*其他* Bake按钮**。它会短暂地变成取消，然后切换回Bake。你注意到场景窗口有什么变化了吗？在检查器和导航窗口之间来回切换。当导航窗口处于活动状态时，场景窗口显示NavMesh显示，并在标记为导航静态和可行走的游戏对象上显示蓝色的叠加层。在这种情况下，它突出显示了您标记为导航静态和可行走的平面。
- en: Your NavMesh is now set up.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的NavMesh已经设置好了。
- en: '![Images](assets/pg582-2.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/pg582-2.png)'
- en: Make your player automatically navigate the play area
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使你的玩家自动导航播放区域
- en: Let’s add a NavMesh Agent to your Player GameObject. **Select Player** in the
    Hierarchy window, then go back to the Inspector window, click the **Add Component**
    button, and choose **Navigation >> NavMesh Agent** to add the NavMesh Agent component.
    The cylinder body is 2 units tall and the sphere head is 1 unit tall, so you want
    your agent to be 3 units tall—so set the Height to 3\. Now the NavMesh Agent is
    ready to move the Player GameObject around the NavMesh.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们给Player GameObject添加一个NavMesh Agent。在Hierarchy窗口中**选择Player**，然后返回Inspector窗口，点击**添加组件**按钮，并选择**Navigation
    >> NavMesh Agent**来添加NavMesh Agent组件。圆柱体的身体高2个单位，球形头部高1个单位，所以你希望你的代理高度为3个单位——所以将高度设置为3。现在NavMesh
    Agent已经准备好在NavMesh中移动Player GameObject了。
- en: '**Create a Scripts folder and add a script called *MoveToClick.cs***. This
    script will let you click on the play area and tells the NavMesh Agent to move
    the GameObject to that spot. You learned about private fields in [#encapsulation_keep_your_privateshellippr](ch05.html#encapsulation_keep_your_privateshellippr).
    This script will use one to store a reference to the NavMeshAgent. Your GameObject’s
    code will need a reference to its agent so it can tell the agent where to go,
    so you’ll call the GetComponent method to get that reference and save it in a
    **private NavMeshAgent field** called `agent`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建一个脚本文件夹，并添加名为*MoveToClick.cs*的脚本**。这个脚本将允许您点击播放区域，并告诉NavMesh Agent将游戏对象移动到该位置。您在[#encapsulation_keep_your_privateshellippr](ch05.html#encapsulation_keep_your_privateshellippr)中了解了私有字段。这个脚本将使用一个字段来存储对NavMeshAgent的引用，以便GameObject的代码可以告诉代理去哪里，因此您将调用GetComponent方法来获取该引用，并将其保存在名为**私有NavMeshAgent字段**的`agent`中：'
- en: '[PRE0]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Images](assets/pg583-1.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/pg583-1.png)'
- en: 'The navigation system uses classes in the UnityEngine.AI namespace, so you’ll
    need to **add this `using` line** to the top of your *MoveToClick.cs* file:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 导航系统使用UnityEngine.AI命名空间中的类，因此您需要将此`using`行添加到*MoveToClick.cs*文件的顶部：
- en: '![Images](assets/pg583-2.png)![Images](assets/pg584-2.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/pg583-2.png)![图片](assets/pg584-2.png)'
- en: '**Yes! We’re using a really useful tool called raycasting.**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**是的！我们正在使用一个非常有用的工具，称为射线投射。**'
- en: In the second Unity Lab, you used Debug.DrawRay to explore how 3D vectors work
    by drawing a ray that starts at (0, 0, 0). Your MoveToClick script’s Update method
    actually does something similar to that. It uses the **Physics.Raycast method**
    to “cast” a ray—just like the one you used to explore vectors—that starts at the
    camera and goes through the point where the user clicked, and **checks if the
    ray hit the floor**. If it did, then the Physics.Raycast method provides the location
    on the floor where it hit. Then the script sets the **NavMesh Agent’s destination
    field**, which causes the NavMesh Agent to **automatically move the player** toward
    that location.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个Unity实验室中，您使用Debug.DrawRay探索了如何通过绘制从（0, 0, 0）开始的射线来工作的3D向量。您的MoveToClick脚本的Update方法实际上做了类似的事情。它使用**Physics.Raycast方法**“投射”一条射线——就像您用来探索向量的那条射线一样——它从相机开始，经过用户单击的点，并**检查射线是否击中地板**。如果是，则Physics.Raycast方法会提供击中地板的位置。然后脚本设置NavMesh
    Agent的**destination字段**，这会导致NavMesh Agent**自动将玩家移动**到该位置。
