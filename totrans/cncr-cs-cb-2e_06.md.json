["```cs\nvar progress = new Progress<int>();\nIObservable<EventPattern<int>> progressReports =\n    Observable.FromEventPattern<int>(\n        handler => progress.ProgressChanged += handler,\n        handler => progress.ProgressChanged -= handler);\nprogressReports.Subscribe(data => Trace.WriteLine(\"OnNext: \" + data.EventArgs));\n```", "```cs\nvar timer = new System.Timers.Timer(interval: 1000) { Enabled = true };\nIObservable<EventPattern<ElapsedEventArgs>> ticks =\n    Observable.FromEventPattern<ElapsedEventHandler, ElapsedEventArgs>(\n        handler => (s, a) => handler(s, a),\n        handler => timer.Elapsed += handler,\n        handler => timer.Elapsed -= handler);\nticks.Subscribe(data => Trace.WriteLine(\"OnNext: \" + data.EventArgs.SignalTime));\n```", "```cs\nvar timer = new System.Timers.Timer(interval: 1000) { Enabled = true };\nIObservable<EventPattern<object>> ticks =\n    Observable.FromEventPattern(timer, nameof(Timer.Elapsed));\nticks.Subscribe(data => Trace.WriteLine(\"OnNext: \"\n    + ((ElapsedEventArgs)data.EventArgs).SignalTime));\n```", "```cs\nvar client = new WebClient();\nIObservable<EventPattern<object>> downloadedStrings =\n    Observable.\n    FromEventPattern(client, nameof(WebClient.DownloadStringCompleted));\ndownloadedStrings.Subscribe(\n    data =>\n    {\n      var eventArgs = (DownloadStringCompletedEventArgs)data.EventArgs;\n      if (eventArgs.Error != null)\n        Trace.WriteLine(\"OnNext: (Error) \" + eventArgs.Error);\n      else\n        Trace.WriteLine(\"OnNext: \" + eventArgs.Result);\n    },\n    ex => Trace.WriteLine(\"OnError: \" + ex.ToString()),\n    () => Trace.WriteLine(\"OnCompleted\"));\nclient.DownloadStringAsync(new Uri(\"http://invalid.example.com/\"));\n```", "```cs\nprivate void Button_Click(object sender, RoutedEventArgs e)\n{\n  Trace.WriteLine($\"UI thread is {Environment.CurrentManagedThreadId}\");\n  Observable.Interval(TimeSpan.FromSeconds(1))\n      .Subscribe(x => Trace.WriteLine(\n          $\"Interval {x} on thread {Environment.CurrentManagedThreadId}\"));\n}\n```", "```cs\nUI thread is 9\nInterval 0 on thread 10\nInterval 1 on thread 10\nInterval 2 on thread 11\nInterval 3 on thread 11\nInterval 4 on thread 10\nInterval 5 on thread 11\nInterval 6 on thread 11\n```", "```cs\nprivate void Button_Click(object sender, RoutedEventArgs e)\n{\n  SynchronizationContext uiContext = SynchronizationContext.Current;\n  Trace.WriteLine($\"UI thread is {Environment.CurrentManagedThreadId}\");\n  Observable.Interval(TimeSpan.FromSeconds(1))\n      .ObserveOn(uiContext)\n      .Subscribe(x => Trace.WriteLine(\n          $\"Interval {x} on thread {Environment.CurrentManagedThreadId}\"));\n}\n```", "```cs\nSynchronizationContext uiContext = SynchronizationContext.Current;\nTrace.WriteLine($\"UI thread is {Environment.CurrentManagedThreadId}\");\nObservable.FromEventPattern<MouseEventHandler, MouseEventArgs>(\n        handler => (s, a) => handler(s, a),\n        handler => MouseMove += handler,\n        handler => MouseMove -= handler)\n    .Select(evt => evt.EventArgs.GetPosition(this))\n    .ObserveOn(Scheduler.Default)\n    .Select(position =>\n    {\n      // Complex calculation\n      Thread.Sleep(100);\n      var result = position.X + position.Y;\n      var thread = Environment.CurrentManagedThreadId;\n      Trace.WriteLine($\"Calculated result {result} on thread {thread}\");\n      return result;\n    })\n    .ObserveOn(uiContext)\n    .Subscribe(x => Trace.WriteLine(\n        $\"Result {x} on thread {Environment.CurrentManagedThreadId}\"));\n```", "```cs\nObservable.Interval(TimeSpan.FromSeconds(1))\n    .Buffer(2)\n    .Subscribe(x => Trace.WriteLine(\n        $\"{DateTime.Now.Second}: Got {x[0]} and {x[1]}\"));\n```", "```cs\n13: Got 0 and 1\n15: Got 2 and 3\n17: Got 4 and 5\n19: Got 6 and 7\n21: Got 8 and 9\n```", "```cs\nObservable.Interval(TimeSpan.FromSeconds(1))\n    .Window(2)\n    .Subscribe(group =>\n    {\n      Trace.WriteLine($\"{DateTime.Now.Second}: Starting new group\");\n      group.Subscribe(\n          x => Trace.WriteLine($\"{DateTime.Now.Second}: Saw {x}\"),\n          () => Trace.WriteLine($\"{DateTime.Now.Second}: Ending group\"));\n    });\n```", "```cs\n17: Starting new group\n18: Saw 0\n19: Saw 1\n19: Ending group\n19: Starting new group\n20: Saw 2\n21: Saw 3\n21: Ending group\n21: Starting new group\n22: Saw 4\n23: Saw 5\n23: Ending group\n23: Starting new group\n```", "```cs\nprivate void Button_Click(object sender, RoutedEventArgs e)\n{\n  Observable.FromEventPattern<MouseEventHandler, MouseEventArgs>(\n          handler => (s, a) => handler(s, a),\n          handler => MouseMove += handler,\n          handler => MouseMove -= handler)\n      .Buffer(TimeSpan.FromSeconds(1))\n      .Subscribe(x => Trace.WriteLine(\n          $\"{DateTime.Now.Second}: Saw {x.Count} items.\"));\n}\n```", "```cs\n49: Saw 93 items.\n50: Saw 98 items.\n51: Saw 39 items.\n52: Saw 0 items.\n53: Saw 4 items.\n54: Saw 0 items.\n55: Saw 58 items.\n```", "```cs\nprivate void Button_Click(object sender, RoutedEventArgs e)\n{\n  Observable.FromEventPattern<MouseEventHandler, MouseEventArgs>(\n          handler => (s, a) => handler(s, a),\n          handler => MouseMove += handler,\n          handler => MouseMove -= handler)\n      .Select(x => x.EventArgs.GetPosition(this))\n      .Throttle(TimeSpan.FromSeconds(1))\n      .Subscribe(x => Trace.WriteLine(\n          $\"{DateTime.Now.Second}: Saw {x.X + x.Y}\"));\n}\n```", "```cs\n47: Saw 139\n49: Saw 137\n51: Saw 424\n56: Saw 226\n```", "```cs\nprivate void Button_Click(object sender, RoutedEventArgs e)\n{\n  Observable.FromEventPattern<MouseEventHandler, MouseEventArgs>(\n          handler => (s, a) => handler(s, a),\n          handler => MouseMove += handler,\n          handler => MouseMove -= handler)\n      .Select(x => x.EventArgs.GetPosition(this))\n      .Sample(TimeSpan.FromSeconds(1))\n      .Subscribe(x => Trace.WriteLine(\n          $\"{DateTime.Now.Second}: Saw {x.X + x.Y}\"));\n}\n```", "```cs\n12: Saw 311\n17: Saw 254\n18: Saw 269\n19: Saw 342\n20: Saw 224\n21: Saw 277\n```", "```cs\nvoid GetWithTimeout(HttpClient client)\n{\n  client.GetStringAsync(\"http://www.example.com/\").ToObservable()\n      .Timeout(TimeSpan.FromSeconds(1))\n      .Subscribe(\n          x => Trace.WriteLine($\"{DateTime.Now.Second}: Saw {x.Length}\"),\n          ex => Trace.WriteLine(ex));\n}\n```", "```cs\nprivate void Button_Click(object sender, RoutedEventArgs e)\n{\n  Observable.FromEventPattern<MouseEventHandler, MouseEventArgs>(\n          handler => (s, a) => handler(s, a),\n          handler => MouseMove += handler,\n          handler => MouseMove -= handler)\n      .Select(x => x.EventArgs.GetPosition(this))\n      .Timeout(TimeSpan.FromSeconds(1))\n      .Subscribe(\n          x => Trace.WriteLine($\"{DateTime.Now.Second}: Saw {x.X + x.Y}\"),\n          ex => Trace.WriteLine(ex));\n}\n```", "```cs\n16: Saw 180\n16: Saw 178\n16: Saw 177\n16: Saw 176\nSystem.TimeoutException: The operation has timed out.\n```", "```cs\nprivate void Button_Click(object sender, RoutedEventArgs e)\n{\n  IObservable<Point> clicks =\n      Observable.FromEventPattern<MouseButtonEventHandler, MouseButtonEventArgs>(\n          handler => (s, a) => handler(s, a),\n          handler => MouseDown += handler,\n          handler => MouseDown -= handler)\n      .Select(x => x.EventArgs.GetPosition(this));\n\n  Observable.FromEventPattern<MouseEventHandler, MouseEventArgs>(\n          handler => (s, a) => handler(s, a),\n          handler => MouseMove += handler,\n          handler => MouseMove -= handler)\n      .Select(x => x.EventArgs.GetPosition(this))\n      .Timeout(TimeSpan.FromSeconds(1), clicks)\n      .Subscribe(\n          x => Trace.WriteLine($\"{DateTime.Now.Second}: Saw {x.X},{x.Y}\"),\n          ex => Trace.WriteLine(ex));\n}\n```", "```cs\n49: Saw 95,39\n49: Saw 94,39\n49: Saw 94,38\n49: Saw 94,37\n53: Saw 130,141\n55: Saw 469,4\n```"]