["```cs\n`IEnumerable``<``CultureInfo``>` `commaCultures` `=`\n    `from` `culture` `in` `CultureInfo``.``GetCultures``(``CultureTypes``.``AllCultures``)`\n    `where` `culture``.``NumberFormat``.``NumberDecimalSeparator` `=``=` `\",\"`\n    `select` `culture``;`\n\nforeach (CultureInfo culture in commaCultures)\n{\n    Console.WriteLine(culture.Name);\n}\n```", "```cs\nCultureInfo[] allCultures = CultureInfo.GetCultures(CultureTypes.AllCultures);\nforeach (CultureInfo culture in allCultures)\n{\n    if (culture.NumberFormat.NumberDecimalSeparator == \",\")\n    {\n        Console.WriteLine(culture.Name);\n    }\n}\n```", "```cs\nIEnumerable<string> commaCultures =\n    from culture in CultureInfo.GetCultures(CultureTypes.AllCultures)\n    where culture.NumberFormat.NumberDecimalSeparator == \",\"\n    `select` `culture``.``Name``;`\n\nforeach (string cultureName in commaCultures)\n{\n    Console.WriteLine(cultureName);\n}\n```", "```cs\nIEnumerable<string> commaCultures =\n    CultureInfo.GetCultures(CultureTypes.AllCultures)\n    .Where(culture => culture.NumberFormat.NumberDecimalSeparator == \",\")\n    .Select(culture => culture.Name);\n```", "```cs\nIEnumerable<CultureInfo> commaCultures =\n    CultureInfo.GetCultures(CultureTypes.AllCultures)\n    .Where(culture => culture.NumberFormat.NumberDecimalSeparator == \",\");\n```", "```cs\nIEnumerable<string> commaCultures =\n    from culture in CultureInfo.GetCultures(CultureTypes.AllCultures)\n    `let` `numFormat` `=` `culture``.``NumberFormat`\n    where numFormat.NumberDecimalSeparator == \",\"\n    select culture.Name;\n```", "```cs\nIEnumerable<string> commaCultures =\n    CultureInfo.GetCultures(CultureTypes.AllCultures)\n    .Select(culture => new { culture, numFormat = culture.NumberFormat })\n    .Where(vars => vars.numFormat.NumberDecimalSeparator == \",\")\n    .Select(vars => vars.culture.Name);\n```", "```cs\npublic class SillyLinqProvider\n{\n    public SillyLinqProvider Where(Func<string, int> pred)\n    {\n        Console.WriteLine(\"Where invoked\");\n        return this;\n    }\n\n    public string Select<T>(Func<DateTime, T> map)\n    {\n        Console.WriteLine($\"Select invoked, with type argument {typeof(T)}\");\n        return \"This operator makes no sense\";\n    }\n}\n```", "```cs\nvar q = from x in new SillyLinqProvider()\n        where int.Parse(x)\n        select x.Hour;\n```", "```cs\nvar q = new SillyLinqProvider().Where(x => int.Parse(x)).Select(x => x.Hour);\n```", "```cs\nerror CS1935: Could not find an implementation of the query pattern for source\ntype 'CultureInfo[]'.  'Where' not found.  Are you missing required assembly\nreferences or a using directive for 'System.Linq'?\n```", "```cs\nusing System;\nusing System.Globalization;\n\nnamespace CustomLinqExample;\n\npublic static class CustomLinqProvider\n{\n    public static CultureInfo[] Where(this CultureInfo[] cultures,\n                                        Predicate<CultureInfo> filter)\n    {\n        return Array.FindAll(cultures, filter);\n    }\n\n    public static T[] Select<T>(this CultureInfo[] cultures,\n                                Func<CultureInfo, T> map)\n    {\n        var result = new T[cultures.Length];\n        for (int i = 0; i < cultures.Length; ++i)\n        {\n            result[i] = map(cultures[i]);\n        }\n        return result;\n    }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        var commaCultures =\n            from culture in CultureInfo.GetCultures(CultureTypes.AllCultures)\n            where culture.NumberFormat.NumberDecimalSeparator == \",\"\n            select culture.Name;\n\n        foreach (string cultureName in commaCultures)\n        {\n            Console.WriteLine(cultureName);\n        }\n    }\n}\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Numerics;\n\nstatic IEnumerable<BigInteger> Fibonacci()\n{\n    BigInteger n1 = 1;\n    BigInteger n2 = 1;\n    yield return n1;\n    while (true)\n    {\n        yield return n2;\n        BigInteger t = n1 + n2;\n        n1 = n2;\n        n2 = t;\n    }\n}\n\nvar evenFib = from n in Fibonacci()\n              where n % 2 == 0\n              select n;\n\nforeach (BigInteger n in evenFib)\n{\n    Console.WriteLine(n);\n}\n```", "```cs\npublic static class CustomDeferredLinqProvider\n{\n    public static IEnumerable<T> Where<T>(this IEnumerable<T> src,\n                                          Func<T, bool> filter)\n    {\n        foreach (T item in src)\n        {\n            if (filter(item))\n            {\n                yield return item;\n            }\n        }\n    }\n}\n```", "```cs\nvar commaCultures =\n    from culture in CultureInfo.GetCultures(CultureTypes.AllCultures)\n    where culture.NumberFormat.NumberDecimalSeparator == \",\"\n    select culture;\n\nobject[] numbers = { 1, 100, 100.2, 10000.2 };\n\nforeach (object number in numbers)\n{\n    foreach (CultureInfo culture in commaCultures)\n    {\n        Console.WriteLine(string.Format(culture, \"{0}: {1:c}\",\n                          culture.Name, number));\n    }\n}\n```", "```cs\npublic interface IQueryable : IEnumerable\n{\n    Type ElementType { get; }\n    Expression Expression { get; }\n    IQueryProvider Provider { get; }\n}\n\npublic interface IQueryable<out T> : IEnumerable<T>, IQueryable\n{\n}\n\npublic interface IQueryProvider\n{\n    IQueryable CreateQuery(Expression expression);\n    IQueryable<TElement> CreateQuery<TElement>(Expression expression);\n    object? Execute(Expression expression);\n    TResult Execute<TResult>(Expression expression);\n}\n```", "```cs\npublic static class Enumerable\n{\n    public static IEnumerable<TSource> Where<TSource>(\n        this IEnumerable<TSource> source,\n        `Func``<``TSource``,` `bool``>` `predicate``)`\n    ...\n}\n\npublic static class Queryable\n{\n    public static IQueryable<TSource> Where<TSource>(\n        this IQueryable<TSource> source,\n        `Expression``<``Func``<``TSource``,` `bool``>``>` `predicate``)`\n    ...\n}\n```", "```cs\npublic record Course(\n    string Title,\n    string Category,\n    int Number,\n    DateOnly PublicationDate,\n    TimeSpan Duration)\n{\n    public static readonly Course[] Catalog =\n    {\n            new Course(\n                Title: \"Elements of Geometry\",\n                Category: \"MAT\", Number: 101, Duration: TimeSpan.FromHours(3),\n                PublicationDate: new DateOnly(2009, 5, 20)),\n            new Course(\n                Title: \"Squaring the Circle\",\n                Category: \"MAT\", Number: 102, Duration: TimeSpan.FromHours(7),\n                PublicationDate: new DateOnly(2009, 4, 1)),\n            new Course(\n                Title: \"Recreational Organ Transplantation\",\n                Category: \"BIO\", Number: 305, Duration: TimeSpan.FromHours(4),\n                PublicationDate: new DateOnly(2002, 7, 19)),\n            new Course(\n                Title: \"Hyperbolic Geometry\",\n                Category: \"MAT\", Number: 207, Duration: TimeSpan.FromHours(5),\n                PublicationDate: new DateOnly(2007, 10, 5)),\n            new Course(\n                Title: \"Oversimplified Data Structures for Demos\",\n                Category: \"CSE\", Number: 104, Duration: TimeSpan.FromHours(2),\n                PublicationDate: new DateOnly(2021, 11, 8)),\n            new Course(\n                Title: \"Introduction to Human Anatomy and Physiology\",\n                Category: \"BIO\", Number: 201, Duration: TimeSpan.FromHours(12),\n                PublicationDate: new DateOnly(2001, 4, 11)),\n        };\n}\n```", "```cs\nIEnumerable<Course> q = Course.Catalog.Where(\n    (course, index) => (index % 2 == 0) && course.Duration.TotalHours >= 3);\n```", "```cs\nstatic void ShowAllStrings(IEnumerable<object> src)\n{\n    foreach (string s in src.OfType<string>())\n    {\n        Console.WriteLine(s);\n    }\n}\n```", "```cs\nIEnumerable<string> nonIntro = Course.Catalog.Select((course, index) =>\n      $\"Course {index}: {course.Title}\");\n```", "```cs\nIEnumerable<string> nonIntro = Course.Catalog\n    .Where(c => c.Number >= 200)\n    .Select((course, index) => $\"Course {index}: {course.Title}\");\n```", "```cs\nIEnumerable<string> nonIntro = Course.Catalog\n    `.``Select``(``(``course``,` `index``)` `=``>` `new` `{` `course``,` `index` `}``)`\n    .Where(vars => vars.course.Number >= 200)\n    .Select(vars => $\"Course {vars.index}: {vars.course.Title}\");\n```", "```cs\nvar pq = from product in dbCtx.Product\n         where product.ListPrice > 3000\n         select product;\nforeach (var prod in pq)\n{\n    Console.WriteLine($\"{prod.Name} ({prod.Size}): {prod.ListPrice}\");\n}\n```", "```cs\nvar pq = from product in dbCtx.Product\n         where product.ListPrice > 3000\n         `select` `new` `{` `product``.``Name``,` `product``.``ListPrice``,` `product``.``Size` `}``;`\n```", "```cs\nint[] numbers = { 0, 1, 2, 3, 4, 5 };\n\nIEnumerable<int> doubled = numbers.Select(x => 2 * x);\nIEnumerable<int> squared = numbers.Select(x => x * x);\nIEnumerable<string> numberText = numbers.Select(x => x.ToString());\n```", "```cs\nint[] numbers = { 1, 2, 3, 4, 5 };\nstring[] letters = { \"A\", \"B\", \"C\" };\n\nIEnumerable<string> combined = from number in numbers\n                               from letter in letters\n                               select letter + number;\nforeach (string s in combined)\n{\n    Console.WriteLine(s);\n}\n```", "```cs\nIEnumerable<string> combined = numbers.SelectMany(\n    number => letters,\n    (number, letter) => letter + number);\n```", "```cs\nint[][] arrays =\n{\n    new[] { 1, 2 },\n    new[] { 1, 2, 3, 4, 5, 6 },\n    new[] { 1, 2, 4 },\n    new[] { 1 },\n    new[] { 1, 2, 3, 4, 5 }\n};\n\nIEnumerable<int> flattened = from row in arrays\n                             from number in row\n                             select number;\n```", "```cs\nvar flattened = arrays.SelectMany(row => row);\n```", "```cs\nstatic IEnumerable<T2> MySelectMany<T, T2>(\n    this IEnumerable<T> src, Func<T, IEnumerable<T2>> getInner)\n{\n    foreach (T itemFromOuterCollection in src)\n    {\n        IEnumerable<T2> innerCollection = getInner(itemFromOuterCollection);\n        foreach (T2 itemFromInnerCollection in innerCollection)\n        {\n            yield return itemFromInnerCollection;\n        }\n    }\n}\n```", "```cs\nIEnumerable<int> lotsOfNumbers = Enumerable.Range(1, 50);\n\nIEnumerable<int[]> chunked = lotsOfNumbers.Chunk(15);\nforeach(int[] chunk in chunked)\n{\n    Console.WriteLine(\n        $\"Chunk (length {chunk.Length}): {String.Join(\", \", chunk)}\");\n}\n```", "```cs\nChunk (length 15): 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\nChunk (length 15): 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30\nChunk (length 15): 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45\nChunk (length 5): 46, 47, 48, 49, 50\n```", "```cs\nvar q = from course in Course.Catalog\n        orderby course.PublicationDate ascending\n        select course;\n```", "```cs\nvar q = from course in Course.Catalog\n        orderby course.PublicationDate ascending\n        orderby course.Duration descending // BAD! Could discard previous order\n        select course;\n```", "```cs\nvar q = from course in Course.Catalog\n        orderby course.PublicationDate ascending, course.Duration descending\n        select course;\n```", "```cs\nvar q = Course.Catalog\n    .OrderBy(course => course.PublicationDate)\n    .ThenByDescending(course => course.Duration);\n```", "```cs\nvar q = from course in Course.Catalog\n        where course.Category == \"MAT\" && course.Number == 101\n        select course;\n\nCourse geometry = q.Single();\n```", "```cs\nCourse geometry = Course.Catalog.Single(\n    course => course.Category == \"MAT\" && course.Number == 101);\n```", "```cs\nvar q = from course in Course.Catalog\n        orderby course.Duration descending\n        select course;\nCourse longest = q.First();\n```", "```cs\nint valueOrNegative = numbers.SingleOrDefault(-1);\n```", "```cs\nvar mathsCourses = Course.Catalog.Where(c => c.Category == \"MAT\");\nfor (int i = 0; i < mathsCourses.Count(); ++i)\n{\n    // Never do this!\n    Course c = mathsCourses.ElementAt(i);\n    Console.WriteLine(c.Title);\n}\n```", "```cs\nConsole.WriteLine(\"Average course length in hours: {0}\",\n    Course.Catalog.Average(course => course.Duration.TotalHours));\n```", "```cs\nDateOnly m = mathsCourses.Max(c => c.PublicationDate);\n```", "```cs\nCourse? mostRecentlyPublished = mathsCourses.MaxBy(c => c.PublicationDate);\n```", "```cs\nCourse mostRecentlyPublished = mathsCourses.MaxBy(c => c.PublicationDate)\n    ?? throw new InvalidOperationException(\"Collection must not be empty\");\n```", "```cs\ndouble t1 = Course.Catalog.Sum(course => course.Duration.TotalHours);\ndouble t2 = Course.Catalog.Aggregate(\n    0.0, (hours, course) => hours + course.Duration.TotalHours);\n```", "```cs\nDateOnly m = mathsCourses.Aggregate(\n    new DateOnly(),\n    (date, c) => date > c.PublicationDate ? date : c.PublicationDate);\n```", "```cs\ndouble average = Course.Catalog.Aggregate(\n    new { TotalHours = 0.0, Count = 0 },\n    (totals, course) => new\n    {\n        TotalHours = totals.TotalHours + course.Duration.TotalHours,\n        Count = totals.Count + 1\n    },\n    totals => totals.Count > 0\n        ? totals.TotalHours / totals.Count\n        : throw new InvalidOperationException(\"Sequence was empty\"));\n```", "```cs\npublic static Rect GetBounds(IEnumerable<Rect> rects) =>\n    rects.Aggregate(Rect.Union);\n```", "```cs\npublic static Rect GetBounds(IEnumerable<Rect> rects)\n{\n    IEnumerable<Rect> theRest = rects.Skip(1);\n    return theRest.Aggregate(rects.First(), (r1, r2) => Rect.Union(r1, r2));\n}\n```", "```cs\nRect bounds = Rect.Union(Rect.Union(Rect.Union(r1, r2), r3), r4);\n```", "```cs\nvar categories = Course.Catalog.Select(c => c.Category).Distinct();\n```", "```cs\nstring[] firstNames = { \"Elisenda\", \"Jessica\", \"Liam\" };\nstring[] lastNames = { \"Gascon\", \"Hill\", \"Mooney\" };\n`IEnumerable``<``string``>` `fullNames` `=` `firstNames``.``Zip``(``lastNames``,`\n    `(``first``,` `last``)` `=``>` `first` `+` `\" \"` `+` `last``)``;`\nforeach (string name in fullNames)\n{\n    Console.WriteLine(name);\n}\n```", "```cs\nElisenda Gascon\nJessica Hill\nLiam Mooney\n```", "```cs\nvar subjectGroups = from course in Course.Catalog\n                    group course by course.Category;\n\nforeach (var group in subjectGroups)\n{\n    Console.WriteLine(\"Category: \" + group.Key);\n    Console.WriteLine();\n\n    foreach (var course in group)\n    {\n        Console.WriteLine(course.Title);\n    }\n    Console.WriteLine();\n}\n```", "```cs\nvar subjectGroups = Course.Catalog.GroupBy(course => course.Category);\n```", "```cs\nvar subjectGroups = from course in Course.Catalog\n                    group course.Title by course.Category;\n```", "```cs\nvar subjectGroups = Course.Catalog\n    .GroupBy(course => course.Category, course => course.Title);\n```", "```cs\nvar subjectGroups =\n    from course in Course.Catalog\n    group course by course.Category into category\n    select $\"Category '{category.Key}' contains {category.Count()} courses\";\n```", "```cs\nCategory 'MAT' contains 3 courses\nCategory 'BIO' contains 2 courses\nCategory 'CSE' contains 1 courses\n```", "```cs\nIEnumerable<string> subjectGroups = Course.Catalog\n    .GroupBy(course => course.Category)\n    .Select(category =>\n        $\"Category '{category.Key}' contains {category.Count()} courses\");\n```", "```cs\nIEnumerable<string> subjectGroups = Course.Catalog.GroupBy(\n    course => course.Category,\n    (category, courses) =>\n        $\"Category '{category}' contains {courses.Count()} courses\");\n```", "```cs\nIEnumerable<string> subjectGroups = Course.Catalog.GroupBy(\n    course => course.Category,\n    course => course.Title,\n    (category, titles) =>\n         $\"Category '{category}' contains {titles.Count()} courses: \" +\n             string.Join(\", \", titles));\n```", "```cs\nCategory 'MAT' contains 3 courses: Elements of Geometry, Squaring the Circle, Hy\nperbolic Geometry\nCategory 'BIO' contains 2 courses: Recreational Organ Transplantation, Introduct\nion to Human Anatomy and Physiology\nCategory 'CSE' contains 1 courses: Oversimplified Data Structures for Demos\n```", "```cs\nvar bySubjectAndYear =\n    from course in Course.Catalog\n    group course by new { course.Category, course.PublicationDate.Year };\nforeach (var group in bySubjectAndYear)\n{\n    Console.WriteLine($\"{group.Key.Category} ({group.Key.Year})\");\n    foreach (var course in group)\n    {\n        Console.WriteLine(course.Title);\n    }\n}\n```", "```cs\npublic record CourseChoice(int StudentId, string Category, int Number);\n```", "```cs\nCourseChoice[] choices =\n{\n    new CourseChoice(StudentId: 1, Category: \"MAT\", Number: 101),\n    new CourseChoice(StudentId: 1, Category: \"MAT\", Number: 102),\n    new CourseChoice(StudentId: 1, Category: \"MAT\", Number: 207),\n    new CourseChoice(StudentId: 2, Category: \"MAT\", Number: 101),\n    new CourseChoice(StudentId: 2, Category: \"BIO\", Number: 201),\n};\n\nvar studentsAndCourses = from choice in choices\n                         `join` `course` `in` `Course``.``Catalog`\n                           `on` `new` `{` `choice``.``Category``,` `choice``.``Number` `}`\n                           `equals` `new` `{` `course``.``Category``,` `course``.``Number` `}`\n                         select new { choice.StudentId, Course = course };\n\nforeach (var item in studentsAndCourses)\n{\n    Console.WriteLine(\n        $\"Student {item.StudentId} will attend {item.Course.Title}\");\n}\n```", "```cs\nvar studentsAndCourses = choices.Join(\n    Course.Catalog,\n    choice => new { choice.Category, choice.Number },\n    course => new { course.Category, course.Number },\n    (choice, course) => new { choice.StudentId, Course = course });\n```", "```cs\nvar studentsAndCourses =\n    from choice in choices\n    join course in Course.Catalog\n      on new { choice.Category, choice.Number }\n      equals new { course.Category, course.Number }\n      `into` `courses`\n    select new { choice.StudentId, Courses = courses };\n\nforeach (var item in studentsAndCourses)\n{\n    Console.WriteLine($\"Student {item.StudentId} will attend \" +\n        string.Join(\",\", item.Courses.Select(course => course.Title)));\n}\n```", "```cs\nvar studentsAndCourses = choices.GroupJoin(\n    Course.Catalog,\n    choice => new { choice.Category, choice.Number },\n    course => new { course.Category, course.Number },\n    (choice, courses) => new { choice.StudentId, Courses = courses });\n```", "```cs\nIEnumerable<object> sequence = Course.Catalog.Select(c => (object) c);\nvar courseSequence = (IEnumerable<Course>) sequence; // InvalidCastException\n```", "```cs\nvar courseSequence = sequence.Cast<Course>();\n```", "```cs\nILookup<string, Course> categoryLookup =\n    Course.Catalog.ToLookup(course => course.Category);\nforeach (Course c in categoryLookup[\"MAT\"])\n{\n    Console.WriteLine(c.Title);\n}\n```"]