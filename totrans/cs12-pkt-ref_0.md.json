["```cs\nint x = 12 * 30;                  // Statement 1\nSystem.Console.WriteLine (x);     // Statement 2\n```", "```cs\nusing System;            // Import the System namespace\n\nint x = 12 * 30;\nConsole.WriteLine (x);   // No need to specify System\n```", "```cs\nusing System;\n\nConsole.WriteLine (FeetToInches (30));      // 360\nConsole.WriteLine (FeetToInches (100));     // 1200\n\nint FeetToInches (int feet)\n{\n int inches = feet * 12;\n return inches;\n}\n```", "```cs\nint FeetToInches (int feet)\n...\n```", "```cs\nusing System;\nSayHello();\n\nvoid SayHello()\n{\n  Console.WriteLine (\"Hello, world\");\n}\n```", "```cs\ndotnet new console -o MyFirstProgram\ncd MyFirstProgram\n```", "```cs\nusing System;\n\nint x = 12 * 30;\nConsole.WriteLine (x);\n```", "```cs\nSystem   x   Console   WriteLine\n```", "```cs\nclass class  {...}      // Illegal\nclass @class {...}      // Legal\n```", "```cs\nConsole.WriteLine\n  (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10);\n```", "```cs\n=  *  .  ()\n```", "```cs\nint x = 3;   // Comment about assigning 3 to x\n```", "```cs\nint x = 3;   /* This is a comment that\n                spans two lines */\n```", "```cs\nint x = 12 * 30;\n```", "```cs\nstring message = \"Hello world\";\nstring upperMessage = message.ToUpper();\nConsole.WriteLine (upperMessage);      // HELLO WORLD\n\nint x = 2022;\nmessage = message + x.ToString();\nConsole.WriteLine (message);         // Hello world2022\n```", "```cs\nbool simpleVar = false;\nif (simpleVar)\n  Console.WriteLine (\"This will not print\");\n\nint x = 5000;\nbool lessThanAMile = x < 5280;\nif (lessThanAMile)\n  Console.WriteLine (\"This will print\");\n```", "```cs\nUnitConverter feetToInches = new UnitConverter (12);\nUnitConverter milesToFeet = new UnitConverter (5280);\n\nConsole.WriteLine (feetToInches.Convert(30));   // 360\nConsole.WriteLine (feetToInches.Convert(100));  // 1200\nConsole.WriteLine (feetToInches.Convert\n                    (milesToFeet.Convert(1)));  // 63360\n\npublic class UnitConverter\n{ \n int ratio;                             // Field\n\n public UnitConverter (int unitRatio)   // Constructor\n {\n ratio = unitRatio;\n }\n\n public int Convert (int unit)          // Method\n {\n return unit * ratio;\n }\n}\n```", "```cs\npublic UnitConverter (int unitRatio)   // Constructor\n{\n  ratio = unitRatio; \n}\n```", "```cs\nPanda p1 = new Panda (\"Pan Dee\");\nPanda p2 = new Panda (\"Pan Dah\");\n\nConsole.WriteLine (p1.Name);      // Pan Dee\nConsole.WriteLine (p2.Name);      // Pan Dah\n\nConsole.WriteLine (Panda.Population);   // 2\n\npublic class Panda\n{\n  public string Name;             // Instance field\n  public static int Population;   // Static field\n\n  public Panda (string n)         // Constructor\n  {\n    Name = n;                     // Instance field\n    Population = Population + 1;  // Static field\n  }\n}\n```", "```cs\nnamespace Animals\n{\n  public class Panda\n  {\n     ...\n  }\n}\n```", "```cs\nusing System;\n\nclass Program\n{\n  static void Main()   // Program entry point\n  {\n    int x = 12 * 30;\n    Console.WriteLine (x);\n  }\n}\n```", "```cs\nstatic int Main (string[] args) {...}\n```", "```cs\nint x = 12345;       // int is a 32-bit integer\nlong y = x;          // Implicit conversion to 64-bit int\nshort z = (short)x;  // Explicit conversion to 16-bit int\n```", "```cs\npublic struct Point { public int X, Y; }\n```", "```cs\nPoint p1 = new Point();\np1.X = 7;\n\nPoint p2 = p1;             // Assignment causes copy\n\nConsole.WriteLine (p1.X);  // 7\nConsole.WriteLine (p2.X);  // 7\n\np1.X = 9;                  // Change p1.X\nConsole.WriteLine (p1.X);  // 9\nConsole.WriteLine (p2.X);  // 7\n```", "```cs\npublic class Point { public int X, Y; }\n```", "```cs\nPoint p1 = new Point();\np1.X = 7;\n\nPoint p2 = p1;             // Copies p1 reference\n\nConsole.WriteLine (p1.X);  // 7\nConsole.WriteLine (p2.X);  // 7\n\np1.X = 9;                  // Change p1.X\nConsole.WriteLine (p1.X);  // 9\nConsole.WriteLine (p2.X);  // 9\n```", "```cs\nPoint p = null;\nConsole.WriteLine (p == null);   // True\n```", "```cs\nConsole.WriteLine (p.X);   // NullReferenceException\n```", "```cs\nstruct Point {...}\n...\nPoint p = null;  // Compile-time error\nint x = null;    // Compile-time error\n```", "```cs\nint i = 5;\nSystem.Int32 i = 5;\n```", "```cs\nConsole.Write (       1.0.GetType());  // Double *(double)*\nConsole.Write (      1E06.GetType());  // Double *(double)*\nConsole.Write (         1.GetType());  // Int32  *(int)*\nConsole.Write (0xF0000000.GetType());  // UInt32 *(uint)*\nConsole.Write (0x100000000.GetType()); // Int64  *(long)*\n```", "```cs\ndecimal d = 3.5M;   // M = decimal (case-insensitive)\n```", "```cs\nlong i = 5;     // Implicit conversion from int to long\n```", "```cs\nfloat f = 4.5F;       // Won't compile without suffix\ndecimal d = -1.23M;   // Won't compile without suffix\n```", "```cs\nint x = 12345;       // int is a 32-bit integral type\nlong y = x;          // Implicit conversion to 64-bit int\nshort z = (short)x;  // Explicit conversion to 16-bit int\n```", "```cs\nint i1 = 100000001;\nfloat f = i1;      // Magnitude preserved, precision lost\nint i2 = (int)f;   // 100000000\n```", "```cs\nint x = 0;\nConsole.WriteLine (x++);   // Outputs 0; x is now 1\nConsole.WriteLine (++x);   // Outputs 2; x is now 2\nConsole.WriteLine (--x);   // Outputs 1; x is now 1\n```", "```cs\nint a = int.MinValue; a--;\nConsole.WriteLine (a == int.MaxValue); // True\n```", "```cs\nint a = 1000000, b = 1000000;\n\nint c = checked (a * b);   // Checks just the expression\n\nchecked                    // Checks all expressions\n{                          // in statement block\n   c = a * b;\n   ...\n}\n```", "```cs\nshort x = 1, y = 1;\nshort z = x + y;          // Compile-time error\n```", "```cs\nshort z = (short) (x + y);   // OK\n```", "```cs\nConsole.Write (double.NegativeInfinity);   // -Infinity\n```", "```cs\nConsole.WriteLine ( 1.0 /  0.0);   //  Infinity\nConsole.WriteLine (−1.0 /  0.0);   // -Infinity\nConsole.WriteLine ( 1.0 / −0.0);   // -Infinity\nConsole.WriteLine (−1.0 / −0.0);   //  Infinity\n```", "```cs\nConsole.Write ( 0.0 / 0.0);                 //  NaN\nConsole.Write ((1.0 / 0.0) − (1.0 / 0.0));  //  NaN\n```", "```cs\nConsole.WriteLine (0.0 / 0.0 == double.NaN);    // False\nConsole.WriteLine (double.IsNaN (0.0 / 0.0));   // True\n```", "```cs\nbool isTrue = object.Equals (0.0/0.0, double.NaN);\n```", "```cs\nint x = 1, y = 2, z = 1;\nConsole.WriteLine (x == y);      // False\nConsole.WriteLine (x == z);      // True\n```", "```cs\nstatic bool UseUmbrella (bool rainy, bool sunny,\n                         bool windy)\n{\n  return !windy && (rainy || sunny);\n}\n```", "```cs\nif (sb != null && sb.Length > 0) ...\n```", "```cs\nreturn !windy & (rainy | sunny);\n```", "```cs\nstatic int Max (int a, int b)\n{\n  return (a > b) ? a : b;\n}\n```", "```cs\nchar c = 'A';       // Simple character\n```", "```cs\nchar newLine = '\\n';\nchar backSlash = '\\\\';\n```", "```cs\nchar copyrightSymbol = '\\u00A9';\nchar omegaSymbol     = '\\u03A9';\nchar newLine         = '\\u000A';\n```", "```cs\nstring a = \"Heat\";\n```", "```cs\nstring a = \"test\", b = \"test\";\nConsole.Write (a == b);  // True\n```", "```cs\nstring a = \"Here's a tab:\\t\";\n```", "```cs\nstring a1 = \"\\\\\\\\server\\\\fileshare\\\\helloworld.cs\";\n```", "```cs\nstring a2 = @\"\\\\server\\fileshare\\helloworld.cs\";\n```", "```cs\nstring raw = \"\"\"<file path=\"c:\\temp\\test.txt\"></file>\"\"\";\n```", "```cs\nstring raw = \"\"\"\"We can include \"\"\" in this string.\"\"\"\";\n```", "```cs\nstring multiLineRaw = \"\"\"\n  Line 1\n  Line 2\n  \"\"\";\n```", "```cs\nstring s = \"a\" + \"b\";\n```", "```cs\nstring s = \"a\" + 5;  // a5\n```", "```cs\nint x = 4;\nConsole.Write ($\"A square has {x} sides\");\n// Prints: A square has 4 sides\n```", "```cs\nstring s = $\"15 in hex is {15:X2}\";\n// Evaluates to \"15 in hex is 0F\"\n```", "```cs\nconst string greeting = \"Hello\";\nconst string message = $\"{greeting}, world\";\n```", "```cs\nstring s = $\"this interpolation spans {1 +\n1} lines\";\n```", "```cs\nstring s = $\"\"\"The date and time is {DateTime.Now}\"\"\";\n```", "```cs\n$$\"\"\"{ \"TimeStamp\": \"{{DateTime.Now}}\" }\"\"\"\n```", "```cs\n{ \"TimeStamp\": \"01/01/2024 12:13:25 PM\" }\n```", "```cs\nConsole.Write (\"Boston\".CompareTo (\"Austin\"));   // 1\nConsole.Write (\"Boston\".CompareTo (\"Boston\"));   // 0\nConsole.Write (\"Boston\".CompareTo (\"Chicago\"));  // -1\n```", "```cs\nConsole.Write (\"word\"[2]);   // r\n```", "```cs\nReadOnlySpan<byte> utf8 = \"ab→cd\"u8;\nConsole.WriteLine (utf8.Length);      // 7\n```", "```cs\nchar[] vowels = new char[5];\n```", "```cs\nvowels[0] = 'a'; vowels[1] = 'e'; vowels[2] = 'i';\nvowels[3] = 'o'; vowels[4] = 'u';\n\nConsole.WriteLine (vowels [1]);      // e\n```", "```cs\nfor (int i = 0; i < vowels.Length; i++)\n  Console.Write (vowels [i]);            // aeiou\n```", "```cs\nforeach (char c in vowels) Console.Write (c);  // aeiou\n```", "```cs\nvowels[5] = 'y';   // Runtime error\n```", "```cs\nchar[] vowels = new char[] {'a','e','i','o','u'};\n```", "```cs\nchar[] vowels = {'a','e','i','o','u'};\n```", "```cs\nchar[] vowels = ['a','e','i','o','u'];\n```", "```cs\nFoo (['a','e','i','o','u']);\nvoid Foo (char[] letters) { ... }\n```", "```cs\nint[] a = new int[1000];\nConsole.Write (a[123]);            // 0\n```", "```cs\nint[] a = null;\n```", "```cs\nchar[] vowels = new char[] {'a','e','i','o','u'};\nchar lastElement  = vowels[^1];   // 'u'\nchar secondToLast = vowels[^2];   // 'o'\n```", "```cs\nIndex first = 0;\nIndex last = ^1;\nchar firstElement = vowels [first];   // 'a'\nchar lastElement = vowels [last];     // 'u'\n```", "```cs\nchar[] firstTwo =  vowels [..2];    // 'a', 'e'\nchar[] lastThree = vowels [2..];    // 'i', 'o', 'u'\nchar[] middleOne = vowels [2..3];   // 'i'\n```", "```cs\nchar[] lastTwo = vowels [^2..^0];    // 'o', 'u'\n```", "```cs\nRange firstTwoRange = 0..2;\nchar[] firstTwo = vowels [firstTwoRange];   // 'a', 'e'\n```", "```cs\nint[,] matrix = new int [3, 3];\n```", "```cs\nfor (int i = 0; i < matrix.GetLength(0); i++)\n  for (int j = 0; j < matrix.GetLength(1); j++)\n    matrix [i, j] = i * 3 + j;\n```", "```cs\nint[,] matrix = new int[,]\n{\n  {0,1,2},\n  {3,4,5},\n  {6,7,8}\n};\n```", "```cs\nint[][] matrix = new int[3][];\n```", "```cs\nfor (int i = 0; i < matrix.Length; i++)\n{\n  matrix[i] = new int [3];       // Create inner array\n  for (int j = 0; j < matrix[i].Length; j++)\n    matrix[i][j] = i * 3 + j;\n}\n```", "```cs\nint[][] matrix = new int[][]\n{\n  new int[] {0,1,2},\n  new int[] {3,4,5},\n  new int[] {6,7,8,9}\n};\n```", "```cs\nchar[] vowels = new char[] {'a','e','i','o','u'};\nchar[] vowels =            {'a','e','i','o','u'};\nchar[] vowels =            ['a','e','i','o','u'];\n```", "```cs\nvar i = 3;           // i is implicitly of type int\nvar s = \"sausage\";   // s is implicitly of type string\n```", "```cs\n// Compiler infers char[]\nvar vowels = new[] {'a','e','i','o','u'};\n```", "```cs\nvar rectMatrix = new[,]\n{\n  {0,1,2},\n  {3,4,5},\n  {6,7,8}\n};\nvar jaggedMat = new int[][]\n{\n  new[] {0,1,2},\n  new[] {3,4,5},\n  new[] {6,7,8,9}\n};\n```", "```cs\nstatic int Factorial (int x)\n{\n  if (x == 0) return 1;\n  return x * Factorial (x-1);\n}\n```", "```cs\nint x;                   // x is a local variable\nConsole.WriteLine (x);   // Compile-time error\n```", "```cs\nConsole.WriteLine (Test.X);   // 0\nclass Test { public static int X; }   // Field\n```", "```cs\nConsole.WriteLine (default (decimal));   // 0\ndecimal d = default;\n```", "```cs\nFoo (8);                        // 8 is an argument\nstatic void Foo (int p) {...}   // p is a parameter\n```", "```cs\nint x = 8;\nFoo (x);                  // Make a copy of x\nConsole.WriteLine (x);    // x will still be 8\n\nstatic void Foo (int p)\n{\n  p = p + 1;                // Increment p by 1\n  Console.WriteLine (p);    // Write p to screen\n}\n```", "```cs\nStringBuilder sb = new StringBuilder();\nFoo (sb);\nConsole.WriteLine (sb.ToString());    // test\n\nstatic void Foo (StringBuilder fooSB)\n{\n  fooSB.Append (\"test\");\n  fooSB = null;\n}\n```", "```cs\nint x = 8;\nFoo (ref  x);              // Ask Foo to deal\n                           // directly with x\nConsole.WriteLine (x);     // x is now 9\n\nstatic void Foo (ref int p)\n{\n  p = p + 1;               // Increment p by 1\n  Console.WriteLine (p);   // Write p to screen\n}\n```", "```cs\nint.TryParse (\"123\", out int x);\nConsole.WriteLine (x);\n```", "```cs\nint x;\nint.TryParse (\"123\", out x);\nConsole.WriteLine (x);\n```", "```cs\nSomeBigMethod (out _, out _, out int x, out _, out _);\nConsole.WriteLine (x);\n```", "```cs\nint Sum (params int[] ints)\n{\n  int sum = 0;\n  for (int i = 0; i < ints.Length; i++) sum += ints[i];\n  return sum;\n}\n```", "```cs\nConsole.WriteLine (Sum (1, 2, 3, 4));    // 10\n```", "```cs\nConsole.WriteLine (Sum (new int[] { 1, 2, 3, 4 } ));\n```", "```cs\nvoid Foo (int x = 23) { Console.WriteLine (x); }\n```", "```cs\nFoo();     // 23\n```", "```cs\nFoo (23);\n```", "```cs\nFoo(1);    // 1, 0\n\nvoid Foo (int x = 0, int y = 0)\n{\n  Console.WriteLine (x + \", \" + y);\n}\n```", "```cs\nFoo (x:1, y:2);  // 1, 2\n\nvoid Foo (int x, int y)\n{\n  Console.WriteLine (x + \", \" + y);\n}\n```", "```cs\nFoo (x:1, y:2);\nFoo (y:2, x:1);\n```", "```cs\nFoo (1, y:2);\n```", "```cs\nvoid Bar (int a=0, int b=0, int c=0, int d=0) { ... }\n```", "```cs\nBar (d:3);\n```", "```cs\nvar x = \"hello\";\nvar y = new System.Text.StringBuilder();\nvar z = (float)Math.PI;\n```", "```cs\nstring x = \"hello\";\nSystem.Text.StringBuilder y = \n  new System.Text.StringBuilder();\nfloat z = (float)Math.PI;\n```", "```cs\nvar x = 5;\nx = \"hello\";    // Compile-time error; x is of type int\n```", "```cs\nStringBuilder sb1 = new();\nStringBuilder sb2 = new (\"Test\");\n```", "```cs\nStringBuilder sb1 = new StringBuilder();\nStringBuilder sb2 = new StringBuilder (\"Test\");\n```", "```cs\nclass Foo\n{\n  System.Text.StringBuilder sb;\n\n  public Foo (string initialValue)\n  {\n    sb = new (initialValue);\n  }\n}\n```", "```cs\nMyMethod (new (\"test\"));\nvoid MyMethod (System.Text.StringBuilder sb) { ... }\n```", "```cs\n12 * 30   // * is an operator; 12 and 30 are operands.\n```", "```cs\n1 + (12 * 30)\n```", "```cs\nConsole.WriteLine (1)\n```", "```cs\n1 + Console.WriteLine (1)      // Compile-time error\n```", "```cs\nx = x * 5\n```", "```cs\ny = 5 * (x = 2)\n```", "```cs\na = b = c = d = 0\n```", "```cs\nx *= 2    // equivalent to x = x * 2\nx <<= 1   // equivalent to x = x << 1\n```", "```cs\nstring s1 = null;\nstring s2 = s1 ?? \"nothing\"; // s2 evaluates to \"nothing\"\n```", "```cs\nmyVariable ??= someDefault;\n```", "```cs\nif (myVariable == null) myVariable = someDefault;\n```", "```cs\nSystem.Text.StringBuilder sb = null;\nstring s = sb?.ToString();   // No error; s is null\n```", "```cs\nstring s = (sb == null ? null : sb.ToString());\n```", "```cs\nstring[] words = null;\nstring word = words?[1];   // word is null\n```", "```cs\nSystem.Text.StringBuilder sb = null;\nstring s = sb?.ToString().ToUpper();   // No error\n```", "```cs\nx?.y?.z\n```", "```cs\nx == null ? null \n          : (x.y == null ? null : x.y.z)\n```", "```cs\nSystem.Text.StringBuilder sb = null;\nint length = sb?.ToString().Length;   // Illegal\n```", "```cs\nint? length = sb?.ToString().Length;\n// OK : int? can be null\n```", "```cs\nsomeObject?.SomeVoidMethod();\n```", "```cs\nSystem.Text.StringBuilder sb = null;\nstring s = sb?.ToString() ?? \"nothing\";\n// s evaluates to \"nothing\"\n```", "```cs\nbool rich = true, famous = false;\n```", "```cs\nconst double c = 2.99792458E08;\n```", "```cs\nstring s = \"foo\";\ns.Length;          // Illegal statement: does nothing!\n```", "```cs\nnew StringBuilder();     // Legal, but useless\nx.Equals (y);            // Legal, but useless\n```", "```cs\nif (5 < 2 * 3)\n  Console.WriteLine (\"true\");       // true\n```", "```cs\nif (5 < 2 * 3)\n{\n  Console.WriteLine (\"true\");       // true\n  Console.WriteLine (\"...\")\n}\n```", "```cs\nif (2 + 2 == 5)\n  Console.WriteLine (\"Does not compute\");\nelse\n  Console.WriteLine (\"False\");        // False\n```", "```cs\nif (2 + 2 == 5)\n  Console.WriteLine (\"Does not compute\");\nelse\n if (2 + 2 == 4)\n Console.WriteLine (\"Computes\");    // Computes\n```", "```cs\nif (true)\n  if (false)\n    Console.WriteLine();\n  else\n    Console.WriteLine (\"executes\");\n```", "```cs\nif (true)\n{\n  if (false)\n    Console.WriteLine();\n  else\n    Console.WriteLine (\"executes\");\n}\n```", "```cs\nif (true)\n{\n  if (false)\n    Console.WriteLine();\n}\nelse\n  Console.WriteLine (\"does not execute\");\n```", "```cs\nif (age >= 35)\n  Console.WriteLine (\"You can be president!\");\nelse if (age >= 21)\n  Console.WriteLine (\"You can drink!\");\nelse if (age >= 18)\n  Console.WriteLine (\"You can vote!\");\nelse\n  Console.WriteLine (\"You can wait!\");\n```", "```cs\nstatic void ShowCard (int cardNumber)\n{\n  switch (cardNumber)\n  {\n    case 13:\n      Console.WriteLine (\"King\");\n      break;\n    case 12:\n      Console.WriteLine (\"Queen\");\n      break;\n    case 11:\n      Console.WriteLine (\"Jack\");\n      break;\n    default:    // Any other cardNumber\n      Console.WriteLine (cardNumber);\n      break;\n  }\n}\n```", "```cs\nswitch (cardNumber)\n{\n case 13:\n case 12:\n case 11:\n    Console.WriteLine (\"Face card\");\n    break;\n  default:\n    Console.WriteLine (\"Plain card\");\n    break;\n}\n```", "```cs\nstatic void TellMeTheType (object x)\n{\n  switch (x)\n  {\n    case int i:\n      Console.WriteLine (\"It's an int!\");\n      break;\n    case string s:\n      Console.WriteLine (s.Length);      // We can use s\n      break;\n    case bool b when b == true:   // Fires when b is true\n      Console.WriteLine (\"True\");\n      break;\n    case null:    // You can also switch on null\n      Console.WriteLine (\"null\");\n      break;\n  }\n}\n```", "```cs\n  switch (x)\n  {\n case float f when f > 1000:\n case double d when d > 1000:\n case decimal m when m > 1000:\n      Console.WriteLine (\"f, d and m are out of scope\");\n      break;\n```", "```cs\nstring cardName = cardNumber switch\n{\n  13 => \"King\",\n  12 => \"Queen\",\n  11 => \"Jack\",\n  _ => \"Pip card\"   // equivalent to 'default'\n};\n```", "```cs\nint cardNumber = 12; string suite = \"spades\";\nstring cardName = (cardNumber, suite) switch\n{\n  (13, \"spades\") => \"King of spades\",\n  (13, \"clubs\") => \"King of clubs\",\n  ...\n};\n```", "```cs\nint i = 0;\nwhile (i < 3)\n{                         // Braces here are optional\n  Console.Write (i++);\n}\n```", "```cs\nint i = 0;\ndo\n{\n  Console.WriteLine (i++);\n}\nwhile (i < 3);\n```", "```cs\nfor (*init-clause*; *condition-clause*; *iteration-clause*)\n  *statement-or-statement-block*\n```", "```cs\nfor (int i = 0; i < 3; i++)\n  Console.WriteLine (i);\n```", "```cs\nfor (int i = 0, prevFib = 1, curFib = 1; i < 10; i++)\n{\n  Console.WriteLine (prevFib);\n  int newFib = prevFib + curFib;\n  prevFib = curFib; curFib = newFib;\n}\n```", "```cs\nfor (;;) Console.WriteLine (\"interrupt me\");\n```", "```cs\nforeach (char c in \"beer\")\n  Console.Write (c + \" \");   // b e e r\n```", "```cs\nint x = 0;\nwhile (true)\n{\n  if (x++ > 5) break;      // break from the loop\n}\n// execution continues here after break\n...\n```", "```cs\nfor (int i = 0; i < 10; i++)\n{\n  if ((i % 2) == 0) continue;\n  Console.Write (i + \" \");      // 1 3 5 7 9\n}\n```", "```cs\nint i = 1;\nstartLoop:\nif (i <= 5)\n{\n  Console.Write (i + \" \");   // 1 2 3 4 5\n  i++;\n goto startLoop;\n}\n```", "```cs\ndecimal AsPercentage (decimal d)\n{\n  decimal p = d * 100m;\n  return p;     // Return to calling method with value\n}\n```", "```cs\nSystem.Security.Cryptography\n```", "```cs\nSystem.Security.Cryptography.RSA rsa =\n  System.Security.Cryptography.RSA.Create();\n```", "```cs\nnamespace Outer.Middle.Inner\n{\n  class Class1 {}\n  class Class2 {}\n}\n```", "```cs\nnamespace Outer\n{\n  namespace Middle\n  {\n    namespace Inner\n    {\n      class Class1 {}\n      class Class2 {}\n    }\n  }\n}\n```", "```cs\nnamespace MyNamespace\n{\n  class Class1 {}\n  class Class2 {}\n}\n```", "```cs\nnamespace MyNamespace;  // Applies to everything below\n\nclass Class1 {}         // inside MyNamespace\nclass Class2 {}         // inside MyNamespace\n```", "```cs\nusing Outer.Middle.Inner;\n\nClass1 c;    // Don't need fully qualified name\n```", "```cs\nglobal using System;\nglobal using System.Collection.Generic;\n```", "```cs\nusing static System.Console;\n\nWriteLine (\"Hello\");\n```", "```cs\nnamespace Outer\n{\n  class Class1 {}\n\n  namespace Inner\n  {\n    class Class2 : Class1 {}\n  }\n}\n```", "```cs\nnamespace MyTradingCompany\n{\n  namespace Common\n  {\n    class ReportBase {}\n  }\n  namespace ManagementReporting\n  {\n    class SalesReport : Common.ReportBase {}\n  }\n}\n```", "```cs\nnamespace Outer.Middle.Inner { class Class1 {} }\nnamespace Outer.Middle.Inner { class Class2 {} }\n```", "```cs\nglobal::System.Text.StringBuilder sb;\n```", "```cs\nusing PropertyInfo2 = System.Reflection.PropertyInfo;\nclass Program { PropertyInfo2 p; }\n```", "```cs\nusing R = System.Reflection;\nclass Program { R.PropertyInfo p; }\n```", "```cs\nusing NumberList = double[];\nNumberList numbers = { 2.5, 3.5 };\n```", "```cs\nclass Foo\n{\n}\n```", "```cs\nclass Octopus\n{\n string name;\n public int Age = 10;\n}\n```", "```cs\nstatic readonly int legs = 8, eyes = 2;\n```", "```cs\npublic class Test\n{\n public const string Message = \"Hello World\";\n}\n```", "```cs\nstatic void Main()\n{\n  const double twoPI = 2 * System.Math.PI;\n  ...\n}\n```", "```cs\nint Foo (int x) { return x * 2; }\n```", "```cs\nint Foo (int x) => x * 2;\n```", "```cs\nvoid Foo (int x) => Console.WriteLine (x);\n```", "```cs\nvoid WriteCubes()\n{\n  Console.WriteLine (Cube (3));\n\n  int Cube (int value) => value * value * value;\n}\n```", "```cs\nint x = 3; Foo();\nvoid Foo() => Console.WriteLine (x);  // We can access x\n```", "```cs\nvoid Foo (int x);\nvoid Foo (double x);\nvoid Foo (int x, float y);\nvoid Foo (float x, int y);\n```", "```cs\nPanda p = new Panda (\"Petey\");   // Call constructor\n\npublic class Panda\n{\n  string name;              // Define field\n public Panda (string n)   // Define constructor\n {\n name = n;               // Initialization code\n }\n}\n```", "```cs\npublic Panda (string n) => name = n;\n```", "```cs\npublic class Wine\n{\n  public Wine (decimal price) {...}\n\n  public Wine (decimal price, int year) \n    : this (price) {...}\n}\n```", "```cs\n  public Wine (decimal price, DateTime year)\n    : this (price, year.Year) {...}\n```", "```cs\nclass Rectangle\n{\n  public readonly float Width, Height;\n\n  public Rectangle (float width, float height)\n  {\n    Width = width; Height = height;\n  }\n\n public void Deconstruct (out float width,\n out float height)\n {\n width = Width; height = Height;\n }\n}\n```", "```cs\nvar rect = new Rectangle (3, 4);\n(float width, float height) = rect;\nConsole.WriteLine (width + \" \" + height);    // 3 4\n```", "```cs\nrect.Deconstruct (out var width, out var height);\n```", "```cs\n(var width, var height) = rect;\n```", "```cs\nvar (width, height) = rect;\n```", "```cs\n(width, height) = rect;\n```", "```cs\ndouble x1 = 0;\n(x1, double y2) = rect;\n```", "```cs\npublic class Bunny\n{\n  public string Name;\n  public bool LikesCarrots, LikesHumans;\n\n  public Bunny () {}\n  public Bunny (string n) => Name = n;\n}\n```", "```cs\nBunny b1 = new Bunny {\n                       Name=\"Bo\",\n                       LikesCarrots = true,\n                       LikesHumans = false\n                     };\n\nBunny b2 = new Bunny (\"Bo\") {\n                              LikesCarrots = true,\n                              LikesHumans = false\n                            };\n```", "```cs\npublic class Panda\n{\n  public Panda Mate;\n\n  public void Marry (Panda partner)\n  {\n    Mate = partner;\n    partner.Mate = this;\n  }\n}\n```", "```cs\npublic class Test\n{\n  string name;\n  public Test (string name) => this.name = name;\n}\n```", "```cs\nStock msft = new Stock();\nmsft.CurrentPrice = 30;\nmsft.CurrentPrice -= 3;\nConsole.WriteLine (msft.CurrentPrice);\n```", "```cs\npublic class Stock\n{\n  decimal currentPrice;  // The private \"backing\" field\n\n  public decimal CurrentPrice    // The public property\n  {\n     get { return currentPrice; }\n     set { currentPrice = value; }\n  }\n}\n```", "```cs\ndecimal currentPrice, sharesOwned;\n\npublic decimal Worth\n{\n  get { return currentPrice * sharesOwned; }\n}\n```", "```cs\npublic decimal Worth => currentPrice * sharesOwned;\n```", "```cs\npublic decimal Worth\n{\n  get => currentPrice * sharesOwned;\n set => sharesOwned = value / currentPrice;\n}\n```", "```cs\npublic class Stock\n{\n  public decimal CurrentPrice { get; set; }\n}\n```", "```cs\npublic decimal CurrentPrice { get; set; } = 123;\n```", "```cs\npublic int Maximum { get; } = 999;\n```", "```cs\nprivate decimal x;\npublic decimal X\n{\n  get         { return x;  }\n  private set { x = Math.Round (value, 2); }\n}\n```", "```cs\npublic class Note\n{\n  public int Pitch    { get; init; } = 20;\n  public int Duration { get; init; } = 100;\n}\n```", "```cs\nvar note = new Note { Pitch = 50 };\n```", "```cs\nnote.Pitch = 200;  // Error – init-only setter!\n```", "```cs\n  public Note (int pitch = 20, int duration = 100)\n  {\n Pitch = pitch; Duration = duration;\n  }\n```", "```cs\npublic class Point\n{\n  readonly int _x;\n  public int X { get => _x; init => _x = value; }\n  ...\n```", "```cs\nstring s = \"hello\";\nConsole.WriteLine (s[0]); // 'h'\nConsole.WriteLine (s[3]); // 'l'\n```", "```cs\nstring s = null;\nConsole.WriteLine (s?[0]);  // Writes nothing; no error.\n```", "```cs\nclass Sentence\n{\n  string[] words = \"The quick brown fox\".Split();\n\n public string this [int wordNum]      // indexer\n { \n get { return words [wordNum];  }\n set { words [wordNum] = value; }\n }\n}\n```", "```cs\nSentence s = new Sentence();\nConsole.WriteLine (s[3]);       // fox\ns[3] = \"kangaroo\";\nConsole.WriteLine (s[3]);       // kangaroo\n```", "```cs\npublic string this [int arg1, string arg2]\n{\n  get { ... }  set { ... }\n}\n```", "```cs\npublic string this [int wordNum] => words [wordNum];\n```", "```cs\n  public string this [Index index] => words [index];\n  public string[] this [Range range] => words [range];\n```", "```cs\nSentence s = new Sentence();\nConsole.WriteLine (s [^1]);         // fox  \nstring[] firstTwoWords = s [..2];   // (The, quick)\n```", "```cs\nclass Person (string firstName, string lastName)\n{\n  public void Print() =>\n    Console.WriteLine (firstName + \" \" + lastName);\n}\n```", "```cs\nPerson p = new Person (\"Alice\", \"Jones\");\np.Print();    // Alice Jones\n```", "```cs\nclass Person (string firstName, string lastName)\n{\n  public Person (string first, string last, int age)\n    : this (first, last)  // Must call primary constructor\n { ... }\n}\n```", "```cs\nclass Person\n{\n  public Person (string firstName, string lastName)\n  {\n *   ... do something with firstName, lastName*\n  }\n}\n```", "```cs\nclass Person (string firstName, string lastName)\n{\n  public readonly string FirstName = firstName;\n  public string LastName { get; } = lastName;\n}\n```", "```cs\nclass Person (string firstName, string lastName)\n{\n  readonly string firstName = firstName;\n  readonly string lastName = lastName;\n}\n```", "```cs\nnew Person (\"Alice\", null);   // throws exception\n\nclass Person (string firstName, string lastName)\n{\n  readonly string lastName = (lastName == null)\n ? throw new ArgumentNullException (\"lastName\")\n : lastName;\n}\n```", "```cs\npublic string LastName { get; } = (lastName == null)\n  ? throw new ArgumentNullException (\"lastName\")\n  : lastName;\n```", "```cs\nclass Test\n{\n  static Test() { Console.Write (\"Type Initialized\"); }\n}\n```", "```cs\n[System.Runtime.CompilerServices.ModuleInitializer]\ninternal static void InitAssembly()\n{\n  ...\n}\n```", "```cs\nclass Class1\n{\n  ~Class1() { ... }\n}\n```", "```cs\n// PaymentFormGen.cs - autogenerated\npartial class PaymentForm { ... }\n\n// PaymentForm.cs - hand-authored\npartial class PaymentForm { ... }\n```", "```cs\npartial class PaymentForm    // In autogenerated file\n{\n partial void ValidatePayment (decimal amount);\n}\n\npartial class PaymentForm    // In hand-authored file\n{\n partial void ValidatePayment (decimal amount)\n {\n if (amount > 100) Console.Write (\"Expensive!\");\n }\n}\n```", "```cs\npublic partial class Test\n{\n  public partial void M1();   // Extended partial method\n  private partial void M2();  // Extended partial method\n}\n```", "```cs\nint count = 123;\nstring name = nameof (count);       // name is \"count\"\n```", "```cs\nstring name = nameof (StringBuilder.Length);\n```", "```cs\nnameof(StringBuilder)+\".\"+nameof(StringBuilder.Length);\n```", "```cs\npublic class Asset { public string Name; }\n```", "```cs\npublic class Stock : Asset   // inherits from Asset\n{\n  public long SharesOwned;\n}\n\npublic class House : Asset   // inherits from Asset\n{\n  public decimal Mortgage;\n}\n```", "```cs\nStock msft = new Stock { Name=\"MSFT\",\n                         SharesOwned=1000 };\n\nConsole.WriteLine (msft.Name);         // MSFT\nConsole.WriteLine (msft.SharesOwned);  // 1000\n\nHouse mansion = new House { Name=\"Mansion\",\n                            Mortgage=250000 };\n\nConsole.WriteLine (mansion.Name);      // Mansion\nConsole.WriteLine (mansion.Mortgage);  // 250000\n```", "```cs\npublic static void Display (Asset asset)\n{\n  System.Console.WriteLine (asset.Name);\n}\n```", "```cs\nStock msft = new Stock();    // From previous example\nAsset a = msft;              // Upcast\n```", "```cs\nConsole.WriteLine (a == msft);        // True\n```", "```cs\nConsole.WriteLine (a.Name);         // OK\nConsole.WriteLine (a.SharesOwned);  // Compile-time error\n```", "```cs\nStock msft = new Stock();\nAsset a = msft;                      // Upcast\nStock s = (Stock)a;                  // Downcast\nConsole.WriteLine (s.SharesOwned);   // <No error>\nConsole.WriteLine (s == a);          // True\nConsole.WriteLine (s == msft);       // True\n```", "```cs\nHouse h = new House();\nAsset a = h;          // Upcast always succeeds\nStock s = (Stock)a;   // Downcast fails: a is not a Stock\n```", "```cs\nAsset a = new Asset();\nStock s = a as Stock;   // s is null; no exception thrown\n```", "```cs\nif (s != null) Console.WriteLine (s.SharesOwned);\n```", "```cs\nif (a is Stock) Console.Write (((Stock)a).SharesOwned);\n```", "```cs\nif (a is Stock s)\n  Console.WriteLine (s.SharesOwned);\n```", "```cs\nif (a is Stock s && s.SharesOwned > 100000)\n  Console.WriteLine (\"Wealthy\");\nelse\n s = new Stock();   // s is in scope\n\nConsole.WriteLine (s.SharesOwned);  // Still in scope\n```", "```cs\npublic class Asset\n{\n  public string Name;\n  public virtual decimal Liability => 0;\n}\n```", "```cs\npublic class House : Asset\n{\n  public decimal Mortgage;\n\n  public override decimal Liability => Mortgage;\n}\n```", "```cs\nHouse mansion = new House { Name=\"Mansion\",\n                            Mortgage=250000 };\nAsset a = mansion;\nConsole.WriteLine (mansion.Liability);  // 250000\nConsole.WriteLine (a.Liability);        // 250000\n```", "```cs\npublic abstract class Asset\n{\n  // Note empty implementation\n  public abstract decimal NetValue { get; }\n}\n```", "```cs\npublic class A      { public int Counter = 1; }\npublic class B : A  { public int Counter = 2; }\n```", "```cs\npublic class A     { public     int Counter = 1; }\npublic class B : A { public new int Counter = 2; }\n```", "```cs\npublic sealed override decimal Liability { get { ... } }\n```", "```cs\npublic class House : Asset\n{\n  ...\n  public override decimal Liability \n    => base.Liability + Mortgage;\n}\n```", "```cs\npublic class Baseclass\n{\n  public int X;\n  public Baseclass () { }\n  public Baseclass (int x) => X = x;\n}\npublic class Subclass : Baseclass { }\n```", "```cs\nSubclass s = new Subclass (123);\n```", "```cs\npublic class Subclass : Baseclass\n{\n  public Subclass (int x) : base (x) { ... }\n}\n```", "```cs\npublic class Asset\n{\n  public required string Name;\n}\n```", "```cs\nAsset a1 = new Asset { Name=\"House\" };  // OK\nAsset a2 = new Asset();                 // Error\n```", "```cs\npublic class Asset\n{\n  public required string Name;\n\n  public Asset() { }\n\n  [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]\n  public Asset (string n) => Name = n;\n}\n```", "```cs\nclass Baseclass (int x) {...}\nclass Subclass (int x, int y) : Baseclass (x) {...}\n```", "```cs\nstatic void Foo (Asset a) { }\nstatic void Foo (House h) { }\n```", "```cs\nHouse h = new House (...);\nFoo(h);                      // Calls Foo(House)\n```", "```cs\nAsset a = new House (...);\nFoo(a);                      // Calls Foo(Asset)\n```", "```cs\npublic class Stack\n{\n  int position;\n  object[] data = new object[10];\n  public void Push (object o) { data[position++] = o; }\n  public object Pop() { return data[--position]; }\n}\n```", "```cs\nStack stack = new Stack();\nstack.Push (\"sausage\");\nstring s = (string) stack.Pop();   // Downcast\nConsole.WriteLine (s);             // sausage\n```", "```cs\nint x = 9;\nobject obj = x;           // Box the int\n```", "```cs\nint y = (int)obj;         // Unbox the int\n```", "```cs\nobject obj = 9;       // 9 is inferred to be of type int\nlong x = (long) obj;  // InvalidCastException\n```", "```cs\nobject obj = 9;\nlong x = (int) obj;\n```", "```cs\nobject obj = 3.5;      // 3.5 inferred to be type double\nint x = (int) (double) obj;    // x is now 3\n```", "```cs\nint i = 3;\nobject boxed = i;\ni = 5;\nConsole.WriteLine (boxed);    // 3\n```", "```cs\nint x = \"5\";\n```", "```cs\nobject y = \"5\";\nint z = (int) y;       // Runtime error, downcast failed\n```", "```cs\nint x = 3;\n\nConsole.Write (x.GetType().Name);               // Int32\nConsole.Write (typeof(int).Name);               // Int32\nConsole.Write (x.GetType().FullName);    // System.Int32\nConsole.Write (x.GetType() == typeof(int));     // True\n```", "```cs\npublic extern Type GetType();\npublic virtual bool Equals (object obj);\npublic static bool Equals (object objA, object objB);\npublic static bool ReferenceEquals (object objA,\n                                    object objB);\npublic virtual int GetHashCode();\npublic virtual string ToString();\nprotected virtual void Finalize();\nprotected extern object MemberwiseClone();\n```", "```cs\nobject x = 3;\nobject y = 3;\nConsole.WriteLine (x == y);        // False\nConsole.WriteLine (x.Equals (y));  // True\n```", "```cs\nobject x = null, y = 3;\nbool error = x.Equals (y);        // Runtime error!\nbool ok = object.Equals (x, y);   // OK (false)\n```", "```cs\nstring s1 = 1.ToString();      // s1 is \"1\"\nstring s2 = true.ToString();   // s2 is \"True\"\n```", "```cs\npublic override string ToString() => \"Foo\";\n```", "```cs\nstruct SomeStruct { public int X;        }\nclass SomeClass   { public SomeStruct Y; }\n```", "```cs\nPoint p = new Point();     // p.x and p.y will be 0\nstruct Point { int x, y; }\n```", "```cs\nPoint p1 = new Point();    // p1.x and p1.y will be 1\nPoint p2 = default;        // p2.x and p2.y will be 0\n\nstruct Point\n{\n  int x = 1; int y;\n  public Point() => y = 1;\n}\n```", "```cs\nvar points = new Point[10];   // Each point will be (0,0)\nvar test = new Test();        // test.p will be (0,0)\nclass Test { Point p; }\n```", "```cs\nreadonly struct Point\n{\n  public readonly int X, Y;   // X and Y must be readonly\n}\n```", "```cs\nstruct Point\n{\n  public int X, Y;\n  public readonly void ResetX() => X = 0;  // Error!\n}\n```", "```cs\nclass Class1 {}         // Class1 is internal (default)\npublic class Class2 {}\n```", "```cs\nclass ClassA { int x;          }  // x is private\nclass ClassB { internal int x; }\n```", "```cs\n[assembly: InternalsVisibleTo (\"Friend\")]\n```", "```cs\nclass C { public void Foo() {} }\n```", "```cs\npublic interface IEnumerator\n{\n  bool MoveNext();\n  object Current { get; }\n  void Reset();\n}\n```", "```cs\ninternal class Countdown : IEnumerator\n{\n  int count = 6;\n  public bool MoveNext()  => count-- > 0 ;\n  public object Current   => count;\n  public void Reset()     => count = 6;\n}\n```", "```cs\nIEnumerator e = new Countdown();\nwhile (e.MoveNext())\n  Console.Write (e.Current + \" \");  // 5 4 3 2 1 0\n```", "```cs\npublic interface IUndoable             { void Undo(); }\npublic interface IRedoable : IUndoable { void Redo(); }\n```", "```cs\ninterface I1 { void Foo(); }\ninterface I2 { int Foo();  }\n\npublic class Widget : I1, I2\n{\n  public void Foo()   // Implicit implementation\n  {\n    Console.Write (\"Widget's implementation of I1.Foo\");\n  }\n\n  int I2.Foo()   // Explicit implementation of I2.Foo\n  {\n    Console.Write (\"Widget's implementation of I2.Foo\");\n    return 42;\n  }\n}\n```", "```cs\nWidget w = new Widget();\nw.Foo();           // Widget's implementation of I1.Foo\n((I1)w).Foo();     // Widget's implementation of I1.Foo\n((I2)w).Foo();     // Widget's implementation of I2.Foo\n```", "```cs\npublic interface IUndoable { void Undo(); }\n\npublic class TextBox : IUndoable\n{\n  void IUndoable.Undo()\n    => Console.WriteLine (\"TextBox.Undo\");\n}\n\npublic class RichTextBox : TextBox, IUndoable\n{\n  public new void Undo()\n    => Console.WriteLine (\"RichTextBox.Undo\");\n}\n```", "```cs\nRichTextBox r = new RichTextBox();\nr.Undo();                 // RichTextBox.Undo\n((IUndoable)r).Undo();    // RichTextBox.Undo\n```", "```cs\nRichTextBox r = new RichTextBox();\n((TextBox)r).Undo();      // TextBox.Undo\n```", "```cs\ninterface ILogger\n{\n  void Log (string text) => Console.WriteLine (text);\n}\n```", "```cs\nclass Logger : ILogger { }\n...\n((ILogger)new Logger()).Log (\"message\");\n```", "```cs\ninterface ILogger\n{\n  void Log (string text) => \n    Console.WriteLine (Prefix + text);\n\n  static string Prefix = \"\"; \n}\n```", "```cs\nILogger.Prefix = \"File log: \";\n```", "```cs\ninterface ITypeDescribable\n{\n  static abstract string Description { get; }\n  static virtual string Category => null;\n}\n```", "```cs\nclass CustomerTest : ITypeDescribable\n{\n  public static string Description => \"Customer tests\";\n  public static string Category    => \"Unit testing\";\n}\n```", "```cs\npublic enum BorderSide { Left, Right, Top, Bottom }\n```", "```cs\nBorderSide topSide = BorderSide.Top;\nbool isTop = (topSide == BorderSide.Top);   // true\n```", "```cs\npublic enum BorderSide : byte { Left,Right,Top,Bottom }\n```", "```cs\npublic enum BorderSide : byte\n { Left=1, Right=2, Top=10, Bottom=11 }\n```", "```cs\npublic enum BorderSide : byte\n { Left=1, Right, Top=10, Bottom }\n```", "```cs\nint i = (int) BorderSide.Left;\nBorderSide side = (BorderSide) i;\nbool leftOrRight = (int) side <= 2;\n```", "```cs\nBorderSide b = 0;    // No cast required\nif (b == 0) ...\n```", "```cs\nBorderSide b = (BorderSide) 12345;\nConsole.WriteLine (b);              // 12345\n```", "```cs\n[Flags]\npublic enum BorderSides\n { None=0, Left=1, Right=2, Top=4, Bottom=8 }\n```", "```cs\nBorderSides leftRight =\n  BorderSides.Left | BorderSides.Right;\n\nif ((leftRight & BorderSides.Left) != 0)\n  Console.WriteLine (\"Includes Left\");   // Includes Left\n\nstring formatted = leftRight.ToString(); // \"Left, Right\"\n\nBorderSides s = BorderSides.Left;\ns |= BorderSides.Right;\nConsole.WriteLine (s == leftRight);      // True\n```", "```cs\n[Flags] public enum BorderSides\n{\n  None=0,\n  Left=1, Right=2, Top=4, Bottom=8,\n LeftRight = Left | Right, \n TopBottom = Top  | Bottom,\n All       = LeftRight | TopBottom\n}\n```", "```cs\n=   ==   !=   <   >   <=   >=   +   -   ^  &  |   ˜\n+=  -=   ++   --   sizeof\n```", "```cs\npublic class TopLevel\n{\n  public class Nested { }               // Nested class\n  public enum Color { Red, Blue, Tan }  // Nested enum\n}\n```", "```cs\nTopLevel.Color color = TopLevel.Color.Red;\n```", "```cs\npublic class Stack<T>\n{\n  int position;\n  T[] data = new T[100];\n  public void Push (T obj) => data[position++] = obj;\n  public T Pop()           => data[--position];\n}\n```", "```cs\nvar stack = new Stack<int>();\nstack.Push (5);\nstack.Push (10);\nint x = stack.Pop();        // x is 10\nint y = stack.Pop();        // y is 5\n```", "```cs\npublic class ###\n{\n  int position;\n  int[] data = new int[100];\n  public void Push (int obj) => data[position++] = obj;\n  public int Pop()           => data[--position];\n}\n```", "```cs\nstatic void Swap<T> (ref T a, ref T b)\n{\n  T temp = a; a = b; b = temp;\n}\n```", "```cs\nint x = 5, y = 10;\nSwap (ref x, ref y);\n```", "```cs\nSwap<int> (ref x, ref y);\n```", "```cs\npublic T this [int index] { get { return data[index]; } }\n```", "```cs\nclass Dictionary<TKey, TValue> {...}\n```", "```cs\nvar myDict = new Dictionary<int,string>();\n```", "```cs\nclass A {}\nclass A<T> {}\nclass A<T1,T2> {}\n```", "```cs\nclass A<T> {}\nclass A<T1,T2> {}\n...\n\nType a1 = typeof (A<>);   // *Unbound* type\nType a2 = typeof (A<,>);  // Indicates 2 type args\nConsole.Write (a2.GetGenericArguments().Count());  // 2\n```", "```cs\nType a3 = typeof (A<int,int>);\n```", "```cs\nclass B<T> { void X() { Type t = typeof (T); } }\n```", "```cs\nstatic void Zap<T> (T[] array)\n{\n  for (int i = 0; i < array.Length; i++)\n array[i] = default(T);\n}\n```", "```cs\n array[i] = default;\n```", "```cs\nwhere *T* : *base-class*  // Base class constraint\nwhere *T* : *interface*   // Interface constraint\nwhere *T* : class       // Reference type constraint\nwhere *T* : class?      // (See \"Nullable Reference Types\")\nwhere *T* : struct      // Value type constraint\nwhere *T* : unmanaged   // Unmanaged constraint\nwhere *T* : new()       // Parameterless constructor\n                      // constraint\nwhere *U* : *T*           // Naked type constraint\nwhere *T* : notnull     // Non-nullable value type\n                      // or non-nullable reference type\n```", "```cs\nclass     SomeClass {}\ninterface Interface1 {}\n\nclass GenericClass<T,U> where T : SomeClass, Interface1\n                        where U : new()\n{ ... }\n```", "```cs\nstatic void Initialize<T> (T[] array) where T : new()\n{\n  for (int i = 0; i < array.Length; i++)\n    array[i] = new T();\n}\n```", "```cs\nclass Stack<T>                   {...}\nclass SpecialStack<T> : Stack<T> {...}\n```", "```cs\nclass IntStack : Stack<int>  {...}\n```", "```cs\nclass List<T>                     {...}\nclass KeyedList<T,TKey> : List<T> {...}\n```", "```cs\npublic interface IEquatable<T> { bool Equals (T obj); }\n\npublic class Balloon : IEquatable<Balloon>\n{\n  public bool Equals (Balloon b) { ... }\n}\n```", "```cs\nclass Foo<T> where T : IComparable<T> { ... }\nclass Bar<T> where T : Bar<T> { ... }\n```", "```cs\nConsole.WriteLine (++Bob<int>.Count);     // 1\nConsole.WriteLine (++Bob<int>.Count);     // 2\nConsole.WriteLine (++Bob<string>.Count);  // 1\nConsole.WriteLine (++Bob<object>.Count);  // 1\n\nclass Bob<T> { public static int Count; }\n```", "```cs\nIFoo<string> s = ...;\nIFoo<object> b = s;\n```", "```cs\npublic interface IPoppable<out T> { T Pop(); }\n```", "```cs\n// Assuming that Bear subclasses Animal:\nvar bears = new Stack<Bear>();\nbears.Push (new Bear());\n\n// Because bears implements IPoppable<Bear>,\n// we can convert it to IPoppable<Animal>:\nIPoppable<Animal> animals = bears;   // Legal\nAnimal a = animals.Pop();\n```", "```cs\npublic interface IPushable<in T> { void Push (T obj); }\n```", "```cs\nIPushable<Animal> animals = new Stack<Animal>();\nIPushable<Bear> bears = animals;    // Legal\nbears.Push (new Bear());\n```", "```cs\ndelegate int Transformer (int x);\n```", "```cs\nTransformer t = Square;  // Create delegate instance\nint result = t(3);       // Invoke delegate\nConsole.Write (result);  // 9\n\nint Square (int x) => x * x;\n```", "```cs\nt(3);\n```", "```cs\nTransformer t = new Transformer (Square);\n```", "```cs\nt.Invoke (3);\n```", "```cs\nint[] values = { 1, 2, 3 };\nTransform (values, Square);  // Hook in the Square method\n\nforeach (int i in values)\n  Console.Write (i + \"  \");  // 1   4   9\n\nvoid Transform (int[] values, Transformer t)\n{\n  for (int i = 0; i < values.Length; i++)\n    values[i] = t (values[i]);\n}\n\nint Square (int x) => x * x;\n\ndelegate int Transformer (int x);\n```", "```cs\nSomeDelegate d = SomeMethod1;\nd += SomeMethod2;\n```", "```cs\nd = d + SomeMethod2;\n```", "```cs\nd -= SomeMethod1;\n```", "```cs\npublic delegate T Transformer<T> (T arg);\n```", "```cs\nTransformer<double> s = Square;\nConsole.WriteLine (s (3.3));        // 10.89\n\ndouble Square (double x) => x * x;\n```", "```cs\ndelegate TResult Func <out TResult> ();\ndelegate TResult Func <in T, out TResult> (T arg);\ndelegate TResult Func <in T1, in T2, out TResult>\n (T1 arg1, T2 arg2);\n*... and so on, up to T16*\n\ndelegate void Action ();\ndelegate void Action <in T> (T arg);\ndelegate void Action <in T1, in T2> (T1 arg1, T2 arg2);\n*... and so on, up to T16*\n```", "```cs\npublic static void Transform<T> (\n  T[] values, Func<T,T> transformer)\n{\n  for (int i = 0; i < values.Length; i++)\n    values[i] = transformer (values[i]);\n}\n```", "```cs\ndelegate void D1(); delegate void D2();\n...\nD1 d1 = Method1;\nD2 d2 = d1;            // Compile-time error\n```", "```cs\nD2 d2 = new D2 (d1);\n```", "```cs\nObjectRetriever o = new ObjectRetriever (RetrieveString);\nobject result = o();\nConsole.WriteLine (result);      // hello\n\nstring RetrieveString() => \"hello\";\n\ndelegate object ObjectRetriever();\n```", "```cs\nStringAction sa = new StringAction (ActOnObject);\nsa (\"hello\");\n\nvoid ActOnObject (object o) => Console.WriteLine (o);\n\ndelegate void StringAction (string s);\n```", "```cs\ndelegate TResult Func<out TResult>();\n```", "```cs\nFunc<string> x = ...;\nFunc<object> y = x;\n```", "```cs\ndelegate void Action<in T> (T arg);\n```", "```cs\nAction<object> x = ...;\nAction<string> y = x;\n```", "```cs\npublic class Broadcaster\n{\n  public event ProgressReporter Progress;\n}\n```", "```cs\npublic delegate void PriceChangedHandler\n (decimal oldPrice, decimal newPrice);\n\npublic class Stock\n{\n  string symbol; decimal price;\n\n  public Stock (string symbol) => this.symbol = symbol;\n\n public event PriceChangedHandler PriceChanged;\n\n  public decimal Price\n  {\n    get => price;\n    set\n    {\n      if (price == value) return;\n      // Fire event if invocation list isn't empty:\n      if (PriceChanged != null)\n PriceChanged (price, value);\n      price = value;\n    }\n  }\n}\n```", "```cs\npublic class PriceChangedEventArgs : EventArgs\n{\n  public readonly decimal LastPrice, NewPrice;\n\n  public PriceChangedEventArgs (decimal lastPrice,\n                                decimal newPrice)\n  {\n    LastPrice = lastPrice; NewPrice = newPrice;\n  }\n}\n\npublic class Stock\n{\n  string symbol; decimal price;\n\n  public Stock (string symbol) => this.symbol = symbol;\n\n  public event EventHandler<PriceChangedEventArgs>\n               PriceChanged;\n\n protected virtual void OnPriceChanged\n (PriceChangedEventArgs e) =>\n    // Shortcut for invoking PriceChanged if not null:\n PriceChanged?.Invoke (this, e);\n\n  public decimal Price\n  {\n    get { return price; }\n    set\n    {\n      if (price == value) return;\n OnPriceChanged (new PriceChangedEventArgs (price,\n value));\n      price = value;\n    }  \n  }\n}\n```", "```cs\npublic delegate void EventHandler<TEventArgs>\n  (object source, TEventArgs e)\n```", "```cs\ndelegate void PriceChangedHandler\n  (object sender,\n   PriceChangedEventArgs e);\n```", "```cs\nStock stock = new Stock (\"THPW\");\nstock.Price = 27.10M;\n\nstock.PriceChanged += stock_PriceChanged;\nstock.Price = 31.59M;\n\nstatic void stock_PriceChanged\n  (object sender, PriceChangedEventArgs e)\n{\n  if ((e.NewPrice - e.LastPrice) / e.LastPrice > 0.1M)\n    Console.WriteLine (\"Alert, 10% price increase!\");\n}\n```", "```cs\npublic class Stock\n{\n  string symbol; decimal price;\n\n  public Stock (string symbol) => this.symbol = symbol;\n\n  public event EventHandler PriceChanged;\n\n protected virtual void OnPriceChanged (EventArgs e) =>\n PriceChanged?.Invoke (this, e);\n\n  public decimal Price\n  {\n    get => price;\n    set\n    {\n      if (price == value) return;\n      price = value;\n      OnPriceChanged (EventArgs.Empty);      \n    }  \n  }\n}\n```", "```cs\npublic event EventHandler PriceChanged;\n```", "```cs\nEventHandler priceChanged;   // Private delegate\npublic event EventHandler PriceChanged\n{\n add    { priceChanged += value; }\n remove { priceChanged -= value; }\n}\n```", "```cs\npublic interface IFoo { event EventHandler Ev; }\nclass Foo : IFoo\n{\n  EventHandler ev;\n  event EventHandler IFoo.Ev\n  {\n    add { ev += value; } remove { ev -= value; }\n  }\n}\n```", "```cs\nTransformer sqr = x => x * x;\nConsole.WriteLine (sqr(3));    // 9\n\ndelegate int Transformer (int i);\n```", "```cs\n(*parameters*) => *expression-or-statement-block*\n```", "```cs\nx => x * x;\n```", "```cs\nx => { return x * x; };\n```", "```cs\nFunc<int,int> sqr = x => x * x;\n```", "```cs\nFunc<int,int> sqr = (int x) => x * x;\n```", "```cs\nFunc<string,string,int> totalLength = \n (s1, s2) => s1.Length + s2.Length;\n\nint total = totalLength (\"hello\", \"world\");  // total=10;\n```", "```cs\nobj.Clicked += (sender,args) => Console.Write (\"Click\");\n```", "```cs\nFunc<string> greeter = () => \"Hello, world\";\n```", "```cs\nvar greeter = () => \"Hello, world\";\n```", "```cs\nvar sqr = (int x) => x * x;\n```", "```cs\nvoid Print (string info = \"\") => Console.Write (info);\n```", "```cs\nvar print = (string info = \"\") => Console.Write (info);\n\nprint (\"Hello\");\nprint ();\n```", "```cs\nint factor = 2;\nFunc<int, int> multiplier = n => n * factor;\nConsole.WriteLine (multiplier (3));           // 6\n```", "```cs\nint factor = 2;\nFunc<int, int> multiplier = n => n * factor;\nfactor = 10;\nConsole.WriteLine (multiplier (3));           // 30\n```", "```cs\nint seed = 0;\nFunc<int> natural = () => seed++;\nConsole.WriteLine (natural());           // 0\nConsole.WriteLine (natural());           // 1\nConsole.WriteLine (seed);                // 2\n```", "```cs\nFunc<int> natural = Natural();\nConsole.WriteLine (natural());      // 0\nConsole.WriteLine (natural());      // 1\n\nstatic Func<int> Natural()\n{\n  int seed = 0;\n  return () => seed++;      // Returns a *closure*\n}\n```", "```cs\nFunc<int, int> multiplier = static n => n * 2;\n```", "```cs\nvoid Foo()\n{\n  int factor = 123;\n static int Multiply (int x) => x * 2;\n}\n```", "```cs\nAction[] actions = new Action[3];\n\nfor (int i = 0; i < 3; i++)\n  actions [i] = () => Console.Write (i);\n\nforeach (Action a in actions) a();     // 333\n```", "```cs\nAction[] actions = new Action[3];\nfor (int i = 0; i < 3; i++)\n{\n  int loopScopedi = i;\n  actions [i] = () => Console.Write (loopScopedi);\n}\nforeach (Action a in actions) a();     // 012\n```", "```cs\npublic void Foo (Func<int,bool> predicate) { ... }\n```", "```cs\nTransformer sqr = delegate (int x) {return x * x;};\nConsole.WriteLine (sqr(3));         // 9\n\ndelegate int Transformer (int i);\n```", "```cs\nTransformer sqr =       (int x) => {return x * x;};\n```", "```cs\nTransformer sqr =            x  => x * x;\n```", "```cs\npublic event EventHandler Clicked = delegate { };\n```", "```cs\nClicked += delegate { Console.Write (\"clicked\"); };\n```", "```cs\ntry\n{\n  ... // exception may get thrown within execution of\n      // this block\n}\ncatch (ExceptionA ex)\n{\n  ... // handle exception of type ExceptionA\n}\ncatch (ExceptionB ex)\n{\n  ... // handle exception of type ExceptionB\n}\nfinally\n{\n  ... // cleanup code\n}\n```", "```cs\nint x = 3, y = 0;\nConsole.WriteLine (x / y);\n```", "```cs\ntry\n{\n  int x = 3, y = 0;\n  Console.WriteLine (x / y);\n}\ncatch (DivideByZeroException)\n{\n  Console.Write (\"y cannot be zero. \");\n}\n// Execution resumes here after exception...\n```", "```cs\ntry\n{\n  DoSomething();\n}\ncatch (IndexOutOfRangeException ex) { ... }\ncatch (FormatException ex)          { ... }\ncatch (OverflowException ex)        { ... }\n```", "```cs\ncatch (OverflowException)   // no variable\n{ ... }\n```", "```cs\ncatch { ... }\n```", "```cs\ncatch (WebException ex) \n  when (ex.Status == WebExceptionStatus.Timeout)\n{\n  ...\n}\n```", "```cs\ncatch (WebException ex) when (ex.Status == *something*)\n{ ... }\ncatch (WebException ex) when (ex.Status == *somethingelse*)\n{ ... }\n```", "```cs\nstatic void ReadFile()\n{\n  StreamReader reader = null;  // In System.IO namespace\n  try\n  {\n    reader = File.OpenText (\"file.txt\");\n    if (reader.EndOfStream) return;\n    Console.WriteLine (reader.ReadToEnd());\n  }\n  finally\n  {\n    if (reader != null) reader.Dispose();\n  }\n}\n```", "```cs\nusing (StreamReader reader = File.OpenText (\"file.txt\"))\n{\n  ...\n}\n```", "```cs\n{\n  StreamReader reader = File.OpenText (\"file.txt\");\n  try\n  {\n    ...\n  }\n  finally\n  {\n    if (reader != null) ((IDisposable)reader).Dispose();\n  }\n}\n```", "```cs\nif (File.Exists (\"file.txt\"))\n{\n using var reader = File.OpenText (\"file.txt\"); \n  Console.WriteLine (reader.ReadLine());\n  ...\n}\n```", "```cs\nstatic void Display (string name)\n{\n  if (name == null)\n throw new ArgumentNullException (nameof (name));\n\n  Console.WriteLine (name);\n}\n```", "```cs\npublic string Foo() => throw new NotImplementedException();\n```", "```cs\nstring ProperCase (string value) =>\n  value == null ? throw new ArgumentException (\"value\") :\n  value == \"\" ? \"\" :\n  char.ToUpper (value[0]) + value.Substring (1);\n```", "```cs\ntry {  ...  }\ncatch (Exception ex)\n{\n  // Log error\n  ...\n throw;          // Rethrow same exception\n}\n```", "```cs\ntry\n{\n  ... // parse a date of birth from XML element data\n}\ncatch (FormatException ex)\n{\n  throw new XmlException (\"Invalid date of birth\", ex);\n}\n```", "```cs\nclass *Enumerator*   // Typically implements IEnumerator<T>\n{\n  public *IteratorVariableType* Current { get {...} }\n  public bool MoveNext() {...}\n}\nclass *Enumerable*   // Typically implements IEnumerable<T>\n{\n  public *Enumerator* GetEnumerator() {...}\n}\n```", "```cs\nforeach (char c in \"beer\") Console.WriteLine (c);\n```", "```cs\nusing (var enumerator = \"beer\".GetEnumerator())\n  while (enumerator.MoveNext())\n  {\n    var element = enumerator.Current;\n    Console.WriteLine (element);\n  }\n```", "```cs\nusing System.Collections.Generic;\n\nList<int> list = new List<int> {1, 2, 3};\n```", "```cs\nList<int> list = [1, 2, 3];\n```", "```cs\nint[] array = [1, 2, 3];\n```", "```cs\nFoo ([1, 2, 3]);\nvoid Foo (List<int> numbers) { ... }\n```", "```cs\nList<int> list = new List<int>();\nlist.Add (1); list.Add (2); list.Add (3);\n```", "```cs\nvar dict = new Dictionary<int, string>()\n{\n  { 5, \"five\" },\n  { 10, \"ten\" }\n};\n```", "```cs\nvar dict = new Dictionary<int, string>()\n{\n  [5] = \"five\",\n  [10] = \"ten\"\n};\n```", "```cs\nforeach (int fib in Fibs (6))\n  Console.Write (fib + \"  \");\n\nIEnumerable<int> Fibs (int fibCount)\n{\n  for (int i=0, prevFib=1, curFib=1; i<fibCount; i++)\n  {\n yield return prevFib;\n    int newFib = prevFib+curFib;\n    prevFib = curFib;\n    curFib = newFib;\n  }\n}\n*OUTPUT: 1  1  2  3  5  8*\n```", "```cs\nSystem.Collections.IEnumerable\nSystem.Collections.IEnumerator\nSystem.Collections.Generic.IEnumerable<T>\nSystem.Collections.Generic.IEnumerator<T>\n```", "```cs\nforeach (string s in Foo())\n  Console.Write (s + \" \");    // One Two Three\n\nIEnumerable<string> Foo()\n{\n  yield return \"One\";\n  yield return \"Two\";\n  yield return \"Three\";\n}\n```", "```cs\nIEnumerable<string> Foo (bool breakEarly)\n{\n  yield return \"One\";\n  yield return \"Two\";\n  if (breakEarly) yield break;\n  yield return \"Three\";\n}\n```", "```cs\nEnumerable<int> EvenNumbersOnly (\n  IEnumerable<int> sequence)\n  {\n    foreach (int x in sequence)\n      if ((x % 2) == 0)\n        yield return x;\n  }\n}\n```", "```cs\nforeach (int fib in EvenNumbersOnly (Fibs (6)))\n  Console.Write (fib + \" \");   // 2 8\n```", "```cs\nstring s = null;   // OK - reference type\nint i = null;      // Compile error - int cannot be null\n```", "```cs\nint? i = null;                     // OK - nullable type\nConsole.WriteLine (i == null);     // True\n```", "```cs\npublic struct Nullable<T> where T : struct\n{\n  public T Value {get;}\n  public bool HasValue {get;}\n  public T GetValueOrDefault();\n  public T GetValueOrDefault (T defaultValue);\n  ...\n}\n```", "```cs\nint? i = null;\nConsole.WriteLine (i == null);              // True\n```", "```cs\nNullable<int> i = new Nullable<int>();\nConsole.WriteLine (! i.HasValue);           // True\n```", "```cs\nint? x = 5;        // implicit\nint y = (int)x;    // explicit\n```", "```cs\nobject o = \"string\";\nint? x = o as int?;\nConsole.WriteLine (x.HasValue);   // False\n```", "```cs\nint? x = 5;\nint? y = 10;\nbool b = x < y;      // true\n```", "```cs\nbool b = (x.HasValue && y.HasValue)\n          ? (x.Value < y.Value)\n          : false;\n```", "```cs\nConsole.WriteLine (       null ==        null);  // True\nConsole.WriteLine ((bool?)null == (bool?)null);  // True\n```", "```cs\nbool b = x < y;    // Translation:\n\nbool b = (x == null || y == null)\n  ? false \n  : (x.Value < y.Value);\n\n// b is false (assuming x is 5 and y is null)\n```", "```cs\nint? c = x + y;   // Translation:\n\nint? c = (x == null || y == null)\n         ? null \n         : (int?) (x.Value + y.Value);\n\n// c is null (assuming x is 5 and y is null)\n```", "```cs\nint? a = null;\nint b = 2;\nint? c = a + b;   // c is null - equivalent to a + (int?)b\n```", "```cs\nbool? n = null, f = false, t = true;\nConsole.WriteLine (n | n);    // *(null)*\nConsole.WriteLine (n | f);    // *(null)*\nConsole.WriteLine (n | t);    // True\nConsole.WriteLine (n & n);    // *(null)*\nConsole.WriteLine (n & f);    // False\nConsole.WriteLine (n & t);    // *(null)*\n```", "```cs\nint? x = null;\nint y = x ?? 5;        // y is 5\n\nint? a = null, b = null, c = 123;\nConsole.WriteLine (a ?? b ?? c);  // 123\n```", "```cs\nSystem.Text.StringBuilder sb = null;\nint? length = sb?.ToString().Length;\n```", "```cs\nint length = sb?.ToString().Length ?? 0;\n```", "```cs\n<Nullable>enable</Nullable>\n```", "```cs\n#nullable enable   // enables NRT from this point on\n#nullable disable  // disables NRT from this point on\n#nullable restore  // resets NRT to project setting\n```", "```cs\n#nullable enable    // Enable nullable reference types\n\nstring s1 = null;   // Generates a compiler warning!\nstring? s2 = null;  // OK: s2 is *nullable reference type*\n```", "```cs\nclass Foo { string x; }\n```", "```cs\nvoid Foo (string? s) => Console.Write (s.Length);\n```", "```cs\nvoid Foo (string? s) => Console.Write (s!.Length);\n```", "```cs\nvoid Foo (string? s)\n{\n  if (s != null) Console.Write (s.Length);\n}\n```", "```cs\nvar strings = new string[10];\nConsole.WriteLine (strings[0].Length);\n```", "```cs\npublic static class StringHelper\n{\n  public static bool IsCapitalized (this string s)\n  {\n    if (string.IsNullOrEmpty (s)) return false;\n    return char.IsUpper (s[0]);\n  }\n}\n```", "```cs\nConsole.Write (\"Perth\".IsCapitalized());\n```", "```cs\nConsole.Write (StringHelper.IsCapitalized (\"Perth\"));\n```", "```cs\npublic static T First<T> (this IEnumerable<T> sequence)\n{\n  foreach (T element in sequence)\n    return element;\n  throw new InvalidOperationException (\"No elements!\");\n}\n...\nConsole.WriteLine (\"Seattle\".First());   // S\n```", "```cs\npublic static class StringHelper\n{\n  public static string Pluralize (this string s) {...}\n  public static string Capitalize (this string s) {...}\n}\n```", "```cs\nstring x = \"sausage\".Pluralize().Capitalize();\n\nstring y = StringHelper.Capitalize\n           (StringHelper.Pluralize (\"sausage\"));\n```", "```cs\nvar dude = new { Name = \"Bob\", Age = 1 };\n```", "```cs\nint Age = 1;\nvar dude = new { Name = \"Bob\", Age };\n```", "```cs\nvar dude = new { Name = \"Bob\", Age = Age };\n```", "```cs\nvar dudes = new[]\n{\n  new { Name = \"Bob\", Age = 30 },\n  new { Name = \"Mary\", Age = 40 }\n};\n```", "```cs\nvar bob = (\"Bob\", 23);\nConsole.WriteLine (bob.Item1);   // Bob\nConsole.WriteLine (bob.Item2);   // 23\n```", "```cs\n(string,int) bob  = (\"Bob\", 23);\n```", "```cs\n(string,int) person = GetPerson();\nConsole.WriteLine (person.Item1);    // Bob\nConsole.WriteLine (person.Item2);    // 23\n\n(string,int) GetPerson() => (\"Bob\", 23);\n```", "```cs\nTask<(string,int)>\nDictionary<(string,int),Uri>\nIEnumerable<(int ID, string Name)>   // See below...\n```", "```cs\nvar tuple = (Name:\"Bob\", Age:23);\nConsole.WriteLine (tuple.Name);     // Bob\nConsole.WriteLine (tuple.Age);      // 23\n```", "```cs\nstatic (string Name, int Age) GetPerson() => (\"Bob\",23);\n```", "```cs\nvar now = DateTime.Now;\nvar tuple = (now.Day, now.Month, now.Year);\nConsole.WriteLine (tuple.Day);               // OK\n```", "```cs\nvar bob = (\"Bob\", 23);\nstring name = bob.Item1;\nint age = bob.Item2;\n```", "```cs\nvar bob = (\"Bob\", 23);\n(string name, int age) = bob;   // Deconstruct bob into\n // name and age.\nConsole.WriteLine (name);\nConsole.WriteLine (age);\n```", "```cs\n(string name, int age)      = bob;  // Deconstructing\n(string name, int age) bob2 = bob;  // Declaring tuple\n```", "```cs\nrecord Point { }          // Point is a class\n```", "```cs\nrecord struct Point { }   // Point is a struct\n```", "```cs\nrecord Point\n{\n  public Point (double x, double y) => (X, Y) = (x, y);\n\n  public double X { get; init; }\n  public double Y { get; init; }    \n}\n```", "```cs\nclass Point\n{  \n  public Point (double x, double y) => (X, Y) = (x, y);\n\n  public double X { get; init; }\n  public double Y { get; init; }    \n\n protected Point (Point original) // “Copy constructor”\n {\n this.X = original.X; this.Y = original.Y\n }\n\n  // This method has a strange compiler-generated name:\n public virtual Point <Clone>$() => new Point (this);\n\n // Additional code to override Equals, ==, !=,\n // GetHashCode, ToString()...\n}\n```", "```cs\nrecord Point (double X, double Y)\n{\n  ...\n}\n```", "```cs\nrecord Point (double X, double Y);\n```", "```cs\n  public Point (double X, double Y)\n  {\n    this.X = X; this.Y = Y;\n  }\n```", "```cs\n  public void Deconstruct (out double X, out double Y)\n  {\n    X = this.X; Y = this.Y;\n  }\n```", "```cs\nrecord Point3D (double X, double Y, double Z) \n  : Point (X, Y);\n```", "```cs\nclass Point3D : Point\n{\n  public double Z { get; init; }\n\n  public Point3D (double X, double Y, double Z)\n    : base (X, Y)\n    => this.Z = Z;\n}\n```", "```cs\nPoint p1 = new Point (3, 3);\nPoint p2 = p1 with { Y = 4 };\nConsole.WriteLine (p2);       // Point { X = 3, Y = 4 }\n\nrecord Point (double X, double Y);\n```", "```cs\nTest t2 = t1 with { A = 10, C = 30 };\n```", "```cs\nTest t2 = new Test(t1);  // Clone t1\nt2.A = 10;               // Update property A\nt2.C = 30;               // Update property C\n```", "```cs\nprotected Point (Point original)\n{\n  this.X = original.X; this.Y = original.Y;\n}\n```", "```cs\nprotected Point (Point original) : base (original)\n{\n  ...\n}\n```", "```cs\nrecord Student(int ID, string Surname, string FirstName)\n{\n public int ID { get; } = ID;\n}\n```", "```cs\n  public int ID { get; } = ID;\n```", "```cs\nint _id = ID;\npublic int ID { get => _id; init => _id = value; }\n```", "```cs\nvar p1 = new Point (1, 2);\nvar p2 = new Point (1, 2);\nConsole.WriteLine (p1.Equals (p2));   // True\n\nrecord Point (double X, double Y);\n```", "```cs\nConsole.WriteLine (p1 == p2);         // True\n```", "```cs\nrecord Point (double X, double Y)\n{\n  public virtual bool Equals (Point other) =>\n  other != null && X == other.X && Y == other.Y;\n}\n```", "```cs\nif (obj is string s)\n  Console.WriteLine (s.Length);\n```", "```cs\nbool IsJanetOrJohn (string name) => \n  name.ToUpper() is var upper && \n  (upper == \"JANET\" || upper == \"JOHN\");\n```", "```cs\nbool IsJanetOrJohn (string name)\n{\n  string upper = name.ToUpper();\n  return upper == \"JANET\" || upper == \"JOHN\";\n}\n```", "```cs\nvoid Foo (object obj) \n{\n  if (obj is 3) ...\n}\n```", "```cs\nobj is int && (int)obj == 3\n```", "```cs\nif (x is > 100) Console.Write (\"x is greater than 100\");\n```", "```cs\nstring GetWeightCategory (decimal bmi) => bmi switch\n{\n  < 18.5m => \"underweight\",\n  < 25m => \"normal\",\n  < 30m => \"overweight\",\n  _ => \"obese\"\n};\n```", "```cs\nbool IsJanetOrJohn (string name)\n  => name.ToUpper() is \"JANET\" or \"JOHN\";\n\nbool IsVowel (char c) \n  => c is 'a' or 'e' or 'i' or 'o' or 'u';\n\nbool Between1And9 (int n) => n is >= 1 and <= 9;\n\nbool IsLetter (char c) => c is >= 'a' and <= 'z'\n                            or >= 'A' and <= 'Z';\n```", "```cs\nif (obj is not string) ...\n```", "```cs\nif (!(obj is string)) ...\n```", "```cs\nvar p = (2, 3);\nConsole.WriteLine (p is (2, 3));   // True\n```", "```cs\nvar p = new Point (2, 2);\nConsole.WriteLine (p is (2, 2));  // True\n\nrecord Point (int X, int Y);\n```", "```cs\nConsole.WriteLine (p is (var x, var y) && x == y);\n```", "```cs\nstring Print (object obj) => obj switch \n{\n  Point (0, 0)                      => \"Empty point\",\n  Point (var x, var y) when x == y  => \"Diagonal\"\n  ...\n};\n```", "```cs\nif (obj is string { Length:4 }) ...\n```", "```cs\nif (obj is string s && s.Length == 4) ...\n```", "```cs\nbool ShouldAllow (Uri uri) => uri switch\n{\n  { Scheme: \"http\",  Port: 80  } => true,\n  { Scheme: \"https\", Port: 443 } => true,\n  { Scheme: \"ftp\",   Port: 21  } => true,\n  { IsLoopback: true           } => true,\n  _ => false\n};\n```", "```cs\n  { Scheme: { Length: 4 }, Port: 80 } => true,\n```", "```cs\n  { Scheme.Length: 4, Port: 80 } => true,\n```", "```cs\n  { Host: { Length: < 1000 }, Port: > 0 } => true,\n```", "```cs\n  { Scheme: \"http\", Port: 80 } httpUri \n      when httpUri.Host.Length < 1000 => true,\n```", "```cs\n  { Scheme: \"http\", Port: 80, Host: var host }\n      when host.Length < 1000 => true,\n```", "```cs\n  { Scheme: \"http\", Port: 80, Host: { Length: < 1000 } }\n```", "```cs\nint[] numbers = { 0, 1, 2, 3, 4 };\nConsole.Write (numbers is [0, 1, 2, 3, 4]);   // True\n```", "```cs\nConsole.Write (numbers is [0, 1, _, _, 4]);   // True\n```", "```cs\nConsole.Write (numbers is [0, 1, var x, 3, 4] && x > 1);\n```", "```cs\nConsole.Write (numbers is [0, .., 4]);    // True\n```", "```cs\nConsole.Write (numbers is [0, .. var mid, 4]\n               && mid.Contains (2));           // True\n```", "```cs\nstring[] names = { \"Tom\", \"Dick\", \"Harry\" };\n```", "```cs\nstring[] names = { \"Tom\", \"Dick\", \"Harry\" };\n\nIEnumerable<string> filteredNames =\n System.Linq.Enumerable.Where (\n names, n => n.Length >= 4);\n\nforeach (string n in filteredNames)\n  Console.Write (n + \"|\");            // Dick|Harry|\n```", "```cs\nIEnumerable<string> filteredNames =\n  names.Where (n => n.Length >= 4);\n```", "```cs\nstatic IEnumerable<TSource> Where<TSource> (\n  this IEnumerable<TSource> source,\n  Func<TSource,bool> predicate)\n```", "```cs\nforeach (TSource element in source)\n  if (predicate (element))\n    yield return element;\n```", "```cs\nstring[] names = { \"Tom\", \"Dick\", \"Harry\" };\n\nIEnumerable<string> upperNames =\n  names.Select (n => n.ToUpper());\n\nforeach (string n in upperNames)\n  Console.Write (n + \"|\");       // TOM|DICK|HARRY|\n```", "```cs\nvar query = names.Select (n => new { \n                                     Name = n,\n                                     Length = n.Length\n                                   });\nforeach (var row in query)\n  Console.WriteLine (row);\n```", "```cs\n{ Name = Tom, Length = 3 }\n{ Name = Dick, Length = 4 }\n{ Name = Harry, Length = 5 }\n```", "```cs\nint[] numbers  = { 10, 9, 8, 7, 6 };\nIEnumerable<int> firstThree = numbers.Take (3);\n// firstThree is { 10, 9, 8 }\n```", "```cs\nIEnumerable<int> lastTwo = numbers.Skip (3);\n```", "```cs\nint[] numbers    = { 10, 9, 8, 7, 6 };\nint firstNumber  = numbers.First();                // 10\nint lastNumber   = numbers.Last();                 // 6\nint secondNumber = numbers.ElementAt (2);          // 8\nint firstOddNum  = numbers.First (n => n%2 == 1);  // 9\n```", "```cs\nstring[] names = { \"Tom\", \"Dick\", \"Harry\" };\nConsole.Write (names.MaxBy (n => n.Length));  // Harry\n```", "```cs\nint[] numbers = { 10, 9, 8, 7, 6 };\nint count     = numbers.Count();             // 5\nint min       = numbers.Min();               // 6\nint max       = numbers.Max();               // 10\ndouble avg    = numbers.Average();           // 8\n```", "```cs\nint evenNums = numbers.Count (n => n % 2 == 0);   // 3\n```", "```cs\nint maxRemainderAfterDivBy5 = numbers.Max\n                              (n => n % 5);       // 4\n```", "```cs\ndouble rms = Math.Sqrt (numbers.Average (n => n * n));\n```", "```cs\nint[] numbers = { 10, 9, 8, 7, 6 };\n\nbool hasTheNumberNine = numbers.Contains (9);    // true\nbool hasMoreThanZeroElements = numbers.Any();    // true\nbool hasOddNum = numbers.Any (n => n % 2 == 1);  // true\nbool allOddNums = numbers.All (n => n % 2 == 1); // false\n```", "```cs\nint[] seq1 = { 1, 2, 3 }, seq2 = { 3, 4, 5 };\n\nIEnumerable<int>\n  concat = seq1.Concat (seq2),   // { 1, 2, 3, 3, 4, 5 }\n  union  = seq1.Union  (seq2),   // { 1, 2, 3, 4, 5 }\n```", "```cs\nIEnumerable<int>\n  commonality = seq1.Intersect (seq2),    //  { 3 }\n  difference1 = seq1.Except    (seq2),    //  { 1, 2 }\n  difference2 = seq2.Except    (seq1);    //  { 4, 5 }\n```", "```cs\nstring[] seq1 = { \"A\", \"b\", \"C\" };\nstring[] seq2 = { \"a\", \"B\", \"c\" };\nvar union = seq1.UnionBy (seq2, x => x.ToUpper());\n// union is { \"A\", \"b\", \"C\" }\n```", "```cs\nvar numbers = new List<int> { 1 };\n\nIEnumerable<int> query = numbers.Select (n => n * 10); \nnumbers.Add (2);    // Sneak in an extra element\n\nforeach (int n in query)\n  Console.Write (n + \"|\");          // 10|20|\n```", "```cs\nvar numbers = new List<int>() { 1, 2 };\n\nList<int> timesTen = numbers\n  .Select (n => n * 10) \n .ToList();    // Executes immediately into a List<int>\n\nnumbers.Clear();\nConsole.WriteLine (timesTen.Count);      // Still 2\n```", "```cs\nnames.Where (\n  n => n.Length ==\n names.Min (n2 => n2.Length))\n```", "```cs\nstring[] names = { \"Tom\",\"Dick\",\"Harry\",\"Mary\",\"Jay\" };\n\nIEnumerable<string> query = names\n  .Where   (n => n.Contains (\"a\"))\n  .OrderBy (n => n.Length)\n  .Select  (n => n.ToUpper());\n\nforeach (string name in query)\n  Console.Write (name + \"|\");\n\n// RESULT: JAY|MARY|HARRY|\n```", "```cs\nIEnumerable<string> query =\n  from n in names\n  where n.Contains (\"a\")\n  orderby n.Length\n  select n.ToUpper();\n```", "```cs\nIEnumerable<string> query = names\n  .Where   (n => n.Contains (\"a\"))\n  .OrderBy (n => n.Length)\n  .Select  (n => n.ToUpper());\n```", "```cs\nWhere, Select, SelectMany\nOrderBy, ThenBy, OrderByDescending, ThenByDescending\nGroupBy, Join, GroupJoin\n```", "```cs\nstring[] names = { \"Tom\",\"Dick\",\"Harry\",\"Mary\",\"Jay\" };\n\nIEnumerable<string> query =\n  from   n in names\n  where  n.Length == names.Min (n2 => n2.Length)\n  select n;\n```", "```cs\nstring[] names = { \"Tom\",\"Dick\",\"Harry\",\"Mary\",\"Jay\" };\n\nIEnumerable<string> query =\n  from n in names\n let vowelless = Regex.Replace (n, \"[aeiou]\", \"\")\n  where vowelless.Length > 2\n  orderby vowelless\n  select n + \" - \" + vowelless;\n```", "```cs\nDick - Dck\nHarry - Hrry\nMary - Mry\n```", "```cs\nIEnumerable<string> query = names\n .Select (n => new  \n   {\n     n = n, \n     vowelless = Regex.Replace (n, \"[aeiou]\", \"\")\n   }\n )\n .Where (temp0 => (temp0.vowelless.Length > 2))\n .OrderBy (temp0 => temp0.vowelless)\n .Select (temp0 => ((temp0.n + \" - \") + temp0.vowelless))\n```", "```cs\nfrom c in \"The quick brown tiger\".Split()\nselect c.ToUpper() into upper\nwhere upper.StartsWith (\"T\")\nselect upper\n\n// RESULT: \"THE\", \"TIGER\"\n```", "```cs\n\"The quick brown tiger\".Split()\n  .Select (c => c.ToUpper())\n  .Where (upper => upper.StartsWith (\"T\"))\n```", "```cs\nint[] numbers = { 1, 2, 3 };\nstring[] letters = { \"a\", \"b\" };\n\nIEnumerable<string> query = from n in numbers\n from l in letters\n                            select n.ToString() + l;\n```", "```cs\n\"1a\", \"1b\", \"2a\", \"2b\", \"3a\", \"3b\"\n```", "```cs\nIEnumerable<string> query = numbers.SelectMany (\n n => letters,\n (n, l) => (n.ToString() + l));\n```", "```cs\nstring[] players = { \"Tom\", \"Jay\", \"Mary\" };\n\nIEnumerable<string> query =\n  from name1 in players\n  from name2 in players\n where name1.CompareTo (name2) < 0\n  orderby name1, name2\n  select name1 + \" vs \" + name2;\n\nRESULT: { \"Jay vs Mary\", \"Jay vs Tom\", \"Mary vs Tom\" }\n```", "```cs\nstring[] fullNames =\n  { \"Anne Williams\", \"John Fred Smith\", \"Sue Green\" };\n\nIEnumerable<string> query =\n  from fullName in fullNames\n  from name in fullName.Split()\n  select name + \" came from \" + fullName;\n\nAnne came from Anne Williams\nWilliams came from Anne Williams\nJohn came from John Fred Smith\n```", "```cs\nfrom *outer-var* in *outer-sequence*\njoin *inner-var* in *inner-sequence* \n  on *outer-key-expr* equals *inner-key-expr*\n```", "```cs\nvar customers = new[]\n{\n  new { ID = 1, Name = \"Tom\" },\n  new { ID = 2, Name = \"Dick\" },\n  new { ID = 3, Name = \"Harry\" }\n};\nvar purchases = new[]\n{\n  new { CustomerID = 1, Product = \"House\" },\n  new { CustomerID = 2, Product = \"Boat\" },\n  new { CustomerID = 2, Product = \"Car\" },\n  new { CustomerID = 3, Product = \"Holiday\" }\n};\n```", "```cs\nIEnumerable<string> query =\n from c in customers\n join p in purchases on c.ID equals p.CustomerID\n  select c.Name + \" bought a \" + p.Product;\n```", "```cs\ncustomers.Join (                // outer collection\n  purchases,                    // inner collection\n  c => c.ID,                    // outer key selector\n  p => p.CustomerID,            // inner key selector\n  (c, p) =>                     // result selector\n     c.Name + \" bought a \" + p.Product \n);\n```", "```cs\nTom bought a House\nDick bought a Boat\nDick bought a Car\nHarry bought a Holiday\n```", "```cs\nfrom c in customers\nfrom p in purchases\nwhere c.ID == p.CustomerID\nselect c.Name + \" bought a \" + p.Product;\n```", "```cs\nvar query =\n  from c in customers\n  join p in purchases on c.ID equals p.CustomerID\n into custPurchases\n  select custPurchases;   // custPurchases is a sequence\n```", "```cs\nforeach (var purchaseSequence in query)\n  foreach (var purchase in purchaseSequence)\n    Console.WriteLine (purchase.Product);\n```", "```cs\nfrom c in customers\njoin p in purchases on c.ID equals p.CustomerID\ninto custPurchases\nselect new { CustName = c.Name, custPurchases };\n```", "```cs\nfrom c in customers\nselect new\n{\n  CustName = c.Name,\n  custPurchases = \n    purchases.Where (p => c.ID == p.CustomerID)\n}\n```", "```cs\nint[] numbers = { 3, 5, 7 };\nstring[] words = { \"three\", \"five\", \"seven\", \"ignored\" };\nIEnumerable<string> zip = \n  numbers.Zip (words, (n, w) => n + \"=\" + w);\n```", "```cs\n3=three\n5=five\n7=seven\n```", "```cs\nstring[] names = { \"Tom\",\"Dick\",\"Harry\",\"Mary\",\"Jay\" };\n\nIEnumerable<string> query = from n in names\n                            orderby n.Length, n\n                            select n;\n```", "```cs\nJay, Tom, Dick, Mary, Harry\n```", "```cs\nIEnumerable<string> query = names\n  .OrderBy (n => n.Length)\n  .ThenBy (n => n)\n```", "```cs\norderby n.Length descending, n\n```", "```cs\n.OrderByDescending (n => n.Length).ThenBy (n => n)\n```", "```cs\nstring[] names = { \"Tom\",\"Dick\",\"Harry\",\"Mary\",\"Jay\" };\n\nvar query = from name in names\n            group name by name.Length;\n```", "```cs\nIEnumerable<IGrouping<int,string>> query = \n  names.GroupBy (name => name.Length);\n```", "```cs\nforeach (IGrouping<int,string> grouping in query)\n{\n  Console.Write (\"\\r\\n Length=\" + grouping.Key + \":\");\n  foreach (string name in grouping)\n    Console.Write (\" \" + name);\n}\n\n Length=3: Tom Jay\n Length=4: Dick Mary\n Length=5: Harry\n```", "```cs\npublic interface IGrouping <TKey,TElement>\n  : IEnumerable<TElement>, IEnumerable\n{\n  // Key applies to the subsequence as a whole\n  TKey Key { get; }    \n}\n```", "```cs\nfrom name in names\ngroup name.ToUpper() by name.Length\n```", "```cs\nnames.GroupBy (\n  name => name.Length, \n  name => name.ToUpper() )\n```", "```cs\nfrom name in names\ngroup name.ToUpper() by name.Length into grouping\norderby grouping.Key\nselect grouping\n```", "```cs\nfrom name in names\ngroup name.ToUpper() by name.Length into grouping\nwhere grouping.Count() == 2\nselect grouping\n```", "```cs\nvar classicList = new System.Collections.ArrayList();\nclassicList.AddRange ( new int[] { 3, 4, 5 } );\nIEnumerable<int> sequence1 = classicList.Cast<int>();\n```", "```cs\npublic static IEnumerable<TSource> Cast <TSource>\n             (IEnumerable source)\n{\n  foreach (object element in source)\n    yield return (TSource)element;\n}\n```", "```cs\nfrom int x in classicList ...\n```", "```cs\nfrom x in classicList.Cast <int>() ...\n```", "```cs\ndynamic d = GetSomeObject();\nd.Quack();\n```", "```cs\nd.Quack();\n```", "```cs\nDuck d = ...\nd.Quack();\n```", "```cs\nobject d = ...\nd.Quack();\n```", "```cs\ndynamic d = ...\nd.Quack();\n```", "```cs\ndynamic d = new Duck();\nd.Quack();       // Quack was called\nd.Waddle();      // Waddle was called\n\npublic class Duck : DynamicObject   // in System.Dynamic\n{\n  public override bool TryInvokeMember (\n    InvokeMemberBinder binder, object[] args,\n    out object result)\n  {\n    Console.WriteLine (binder.Name + \" was called\");\n    result = null;\n    return true;\n  }\n}\n```", "```cs\nint x = 3, y = 4;\nConsole.WriteLine (Mean (x, y));\n\ndynamic Mean (dynamic x, dynamic y) => (x+y) / 2;\n```", "```cs\ndynamic d = 5;\nd.Hello();       // throws RuntimeBinderException\n```", "```cs\ntypeof (dynamic) == typeof (object)\n```", "```cs\ntypeof (List<dynamic>) == typeof (List<object>)\ntypeof (dynamic[]) == typeof (object[])\n```", "```cs\ndynamic x = \"hello\";\nConsole.WriteLine (x.GetType().Name);  // String\n\nx = 123;  // No error (despite same variable)\nConsole.WriteLine (x.GetType().Name);  // Int32\n```", "```cs\nobject o = new System.Text.StringBuilder();\ndynamic d = o;\nd.Append (\"hello\");\nConsole.WriteLine (o);   // hello\n```", "```cs\nint i = 7;\ndynamic d = i;\nlong l = d;       // OK - implicit conversion works\nshort j = d;      // throws RuntimeBinderException\n```", "```cs\ndynamic x = \"hello\";  // Static type is dynamic\nvar y = \"hello\";      // Static type is string\nint i = x;            // Runtime error\nint j = y;            // Compile-time error\n```", "```cs\ndynamic x = 2;\nvar y = x * 3;       // Static type of y is dynamic\n```", "```cs\ndynamic x = ...;\nx.Foo (123);          // x is the receiver\n```", "```cs\nstatic void Foo (int x)    => Console.WriteLine (\"int\");\nstatic void Foo (string x) => Console.WriteLine (\"str\");\n\nstatic void Main()\n{\n  dynamic x = 5;\n  dynamic y = \"watermelon\";\n\n  Foo (x);    // int\n  Foo (y);    // str\n}\n```", "```cs\nstatic void X(object x, object y) =>Console.Write(\"oo\");\nstatic void X(object x, string y) =>Console.Write(\"os\");\nstatic void X(string x, object y) =>Console.Write(\"so\");\nstatic void X(string x, string y) =>Console.Write(\"ss\");\n\nstatic void Main()\n{\n  object o = \"hello\";\n  dynamic d = \"goodbye\";\n  X (o, d);               // os\n}\n```", "```cs\n+   -   *   /   ++   --   !   ~   %   &   |   ^\n==  !=  <   <<  >>   >\n```", "```cs\npublic struct Note\n{\n  int value;\n\n  public Note (int semitonesFromA) \n    => value = semitonesFromA;\n\n public static Note operator + (Note x, int semitones)\n    => new Note (x.value + semitones);\n}\n```", "```cs\nNote B = new Note (2);\nNote CSharp = B + 2;\n```", "```cs\nCSharp += 2;\n```", "```cs\npublic static Note operator checked + (Note x, int semis)\n  => checked (new Note (x.value + semis));\n```", "```cs\npublic static bool operator == (Note n1, Note n2)\n  => n1.value == n2.value;\n\npublic static bool operator != (Note n1, Note n2)\n  => !(n1.value == n2.value);\n\npublic override bool Equals (object otherNote)\n{\n  if (!(otherNote is Note)) return false;\n  return this == (Note)otherNote;\n}\n// value’s hashcode will work for our own hashcode:\npublic override int GetHashCode() => value.GetHashCode();\n```", "```cs\n...\n// Convert to hertz\npublic static implicit operator double (Note x)\n  => 440 * Math.Pow (2,(double) x.value / 12 );\n\n// Convert from hertz (accurate to nearest semitone)\npublic static explicit operator Note (double x)\n  => new Note ((int) (0.5 + 12 * (Math.Log(x/440)\n               / Math.Log(2)) ));\n...\n\nNote n =(Note)554.37;  // explicit conversion\ndouble x = n;          // implicit conversion\n```", "```cs\n[ObsoleteAttribute]\npublic class Foo {...}\n```", "```cs\n[Obsolete]\npublic class Foo {...}\n```", "```cs\npublic sealed class ObsoleteAttribute : Attribute {...}\n```", "```cs\n[XmlElement (\"Customer\", Namespace=\"http://oreilly.com\")]\npublic class CustomerEntity { ... }\n```", "```cs\n[assembly:CLSCompliant(true)]\n```", "```cs\nAction<int> a =\n  [Description (\"Method\")]\n  [return: Description (\"Return value\")]\n  ([Description (\"Parameter\")]int x) => Console.Write (x);\n```", "```cs\n[Serializable, Obsolete, CLSCompliant(false)]\npublic class Bar {...}\n\n[Serializable] [Obsolete] [CLSCompliant(false)]\npublic class Bar {...}\n```", "```cs\n[AttributeUsage (AttributeTargets.Method)]\npublic sealed class TestAttribute : Attribute\n{\n  public int     Repetitions;\n  public string  FailureMessage;\n\n  public TestAttribute () : this (1) { }\n  public TestAttribute (int repetitions)\n    => Repetitions = repetitions;\n}\n```", "```cs\nclass Foo\n{\n  [Test]\n  public void Method1() { ... }\n\n  [Test(20)]\n  public void Method2() { ... }\n\n  [Test(20, FailureMessage=\"Debugging Time!\")]\n  public void Method3() { ... }\n}\n```", "```cs\nforeach (MethodInfo mi in typeof (Foo).GetMethods())\n{\n  TestAttribute att = (TestAttribute)\n    Attribute.GetCustomAttribute\n     (mi, typeof (TestAttribute));\n\n  if (att != null)\n    Console.WriteLine (\n      \"{0} will be tested; reps={1}; msg={2}\",\n      mi.Name, att.Repetitions, att.FailureMessage);\n}\n```", "```cs\nMethod1 will be tested; reps=1; msg=\nMethod2 will be tested; reps=20; msg=\nMethod3 will be tested; reps=20; msg=Debugging Time!\n```", "```cs\nusing System;\nusing System.Runtime.CompilerServices;\n\nclass Program\n{\n  static void Main() => Foo();\n\n  static void Foo (\n    [CallerMemberName] string memberName = null,\n    [CallerFilePath] string filePath = null,\n    [CallerLineNumber] int lineNumber = 0)\n  {\n    Console.WriteLine (memberName);\n    Console.WriteLine (filePath);\n    Console.WriteLine (lineNumber);\n  }\n}\n```", "```cs\nMain\nc:\\source\\test\\Program.cs\n6\n```", "```cs\nstatic void Main()\n  => Foo (\"Main\", @\"c:\\source\\test\\Program.cs\", 6);\n```", "```cs\nvoid RaisePropertyChanged (\n  [CallerMemberName] string propertyName = null)\n  {  \n    ...\n  }\n```", "```cs\nPrint (Math.PI * 2);\n\nvoid Print (double number,\n  [CallerArgumentExpression(\"number\")] string expr = null)\n    => Console.WriteLine (expr);\n\n// Output: Math.PI * 2\n```", "```cs\nAssert (2 + 2 == 5);\n\nvoid Assert (bool condition,\n  [CallerArgumentExpression (\"condition\")]\n  string msg = null)\n{\n  if (!condition)\n   throw new Exception (\"Assert failed: \" + msg);\n}\n```", "```cs\nint ComplexCalculation()\n{\n  double x = 2;\n  for (int i = 1; i < 100000000; i++)\n    x += Math.Sqrt (x) / i;\n  return (int)x;\n}\n```", "```cs\nint result = ComplexCalculation(); \n// Sometime later:\nConsole.WriteLine (result);   // 116\n```", "```cs\nTask<int> ComplexCalculationAsync()\n  => Task.Run ( () => ComplexCalculation() );\n```", "```cs\nTask<int> task = ComplexCalculationAsync();\nvar awaiter = task.GetAwaiter();\nawaiter.OnCompleted (() =>        // Continuation\n{\n  int result = awaiter.GetResult();\n  Console.WriteLine (result);       // 116\n});\n```", "```cs\nvar *result* = await *expression*;\n*statement(s)*;\n```", "```cs\nvar awaiter = *expression*.GetAwaiter();\nawaiter.OnCompleted (() => \n{\n  var *result* = awaiter.GetResult();\n  *statement(s)*;\n});\n```", "```cs\nint result = await ComplexCalculationAsync();\nConsole.WriteLine (result);\n```", "```cs\nasync void Test()\n{\n  int result = await ComplexCalculationAsync();\n  Console.WriteLine (result);\n}\n```", "```cs\nawait Task.Delay (5000);\nConsole.WriteLine (\"Five seconds passed!\");\n```", "```cs\nasync void Test()\n{\n  for (int i = 0; i < 10; i++)\n  {\n    int result = await ComplexCalculationAsync();\n    Console.WriteLine (result);\n  }\n}\n```", "```cs\nasync Task PrintAnswerToLife()\n{\n  await Task.Delay (5000);\n  int answer = 21 * 2;\n  Console.WriteLine (answer);  \n}\n```", "```cs\nasync Task Go()\n{\n  await PrintAnswerToLife();\n  Console.WriteLine (\"Done\");\n}\n```", "```cs\nasync Task<int> GetAnswerToLife()\n{\n  await Task.Delay (5000);\n  int answer = 21 * 2;\n  // answer is int so our method returns Task<int>\n  return answer;    \n}\n```", "```cs\nasync Task Go()\n{\n  await PrintAnswerToLife();\n  Console.WriteLine (\"Done\");\n}\nasync Task PrintAnswerToLife()\n{\n  int answer = await GetAnswerToLife();\n  Console.WriteLine (answer);\n}\nasync Task<int> GetAnswerToLife()\n{\n  await Task.Delay (5000);\n  int answer = 21 * 2;\n  return answer;\n}\n```", "```cs\nvoid Go()\n{\n  PrintAnswerToLife();\n  Console.WriteLine (\"Done\");\n}\nvoid PrintAnswerToLife()\n{\n  int answer = GetAnswerToLife();\n  Console.WriteLine (answer);\n}\nint GetAnswerToLife()\n{\n  Thread.Sleep (5000);\n  int answer = 21 * 2;\n  return answer;\n}\n```", "```cs\nvar task1 = PrintAnswerToLife();\nvar task2 = PrintAnswerToLife();\nawait task1; await task2;\n```", "```cs\nawait Task.WhenAll (PrintAnswerToLife(),\n                    PrintAnswerToLife());\n```", "```cs\nasync Task NamedMethod()\n{\n  await Task.Delay (1000);\n  Console.WriteLine (\"Foo\");\n}\n```", "```cs\nFunc<Task> unnamed = async () =>\n{\n  await Task.Delay (1000);\n  Console.WriteLine (\"Foo\");\n};\n```", "```cs\nawait NamedMethod();\nawait unnamed();\n```", "```cs\nmyButton.Click += async (sender, args) =>\n{\n  await Task.Delay (1000);\n  myButton.Content = \"Done\";\n};\n```", "```cs\nmyButton.Click += ButtonHandler;\n...\nasync void ButtonHandler (object sender, EventArgs args)\n{\n  await Task.Delay (1000);\n  myButton.Content = \"Done\";\n};\n```", "```cs\nFunc<Task<int>> unnamed = async () =>\n{\n  await Task.Delay (1000);\n  return 123;\n};\nint answer = await unnamed();\n```", "```cs\npublic interface IAsyncEnumerable<out T>\n{\n  IAsyncEnumerator<T> GetAsyncEnumerator (...);\n}\n\npublic interface IAsyncEnumerator<out T>: IAsyncDisposable\n{\n  T Current { get; }\n  ValueTask<bool> MoveNextAsync();\n}\n```", "```cs\npublic interface IAsyncDisposable\n{\n  ValueTask DisposeAsync();\n}\n```", "```cs\nTask<IEnumerable<T>>\n```", "```cs\nasync IAsyncEnumerable<int> RangeAsync (\n  int start, int count, int delay)\n{\n  for (int i = start; i < start + count; i++)\n  {\n    await Task.Delay (delay);\n    yield return i;\n  }\n}\n```", "```cs\nawait foreach (var number in RangeAsync (0, 10, 100))\n  Console.WriteLine (number);\n```", "```cs\ninterface ICreateRandom<T>\n{\n  static abstract T CreateRandom();\n}\n```", "```cs\nrecord Point (int X, int Y);\n```", "```cs\nrecord Point (int X, int Y) : ICreateRandom<Point>\n{\n  static Random rnd = new();\n\n  public static Point CreateRandom() => \n    new Point (rnd.Next(), rnd.Next());\n}\n```", "```cs\nT[] CreateTestData<T> (int count)\n  where T : ICreateRandom<T>\n{\n  T[] result = new T[count];\n  for (int i = 0; i < count; i++)\n    result [i] = T.CreateRandom();\n  return result;\n}\n```", "```cs\nPoint[] testData = CreateTestData<Point>(50);\n```", "```cs\ninterface IAddable<T> where T : IAddable<T>\n{\n   abstract static T operator + (T left, T right);\n}\n```", "```cs\nrecord Point (int X, int Y) : IAddable<Point>\n{\n  public static Point operator +(Point left, Point right)\n    => new Point (left.X + right.X, left.Y + right.Y);\n}\n```", "```cs\nT Sum<T> (params T[] values) where T : IAddable<T>\n{\n  T total = values[0];\n  for (int i = 1; i < values.Length; i++)\n    total += values[i];\n  return total;\n}\n```", "```cs\nT Sum<T> (params T[] numbers) where T : INumber<T>\n{\n  T total = T.Zero;\n  foreach (T n in numbers)\n    total += n;  // Invokes addition for any numeric type\n  return total;\n}\n\nint intSum = Sum (3, 5, 7);\ndouble doubleSum = Sum (3.2, 5.3, 7.1);\ndecimal decimalSum = Sum (3.2m, 5.3m, 7.1m);\n```", "```cs\nunsafe void BlueFilter (int[,] bitmap)\n{\n  int length = bitmap.Length;\n  fixed (int* b = bitmap)\n  {\n    int* p = b;\n    for (int i = 0; i < length; i++)\n      *p++ &= 0xFF;\n  }\n}\n```", "```cs\nTest test = new Test();\nunsafe\n{\n  fixed (int* p = &test.X)   // Pins test\n  {\n    *p = 9;\n  }\n  Console.WriteLine (test.X);\n}\n\nclass Test { public int X; }\n```", "```cs\nTest test = new Test();\nunsafe\n{\n  Test* p = &test;\n  p->X = 9;\n  System.Console.WriteLine (test.X);\n}\n\nstruct Test { public int X; }\n```", "```cs\nint* a = stackalloc int [10];\nfor (int i = 0; i < 10; ++i)\n  Console.WriteLine (a[i]);   // Print raw memory\n```", "```cs\nunsafe struct UnsafeUnicodeString\n{\n  public short Length;\n  public fixed byte Buffer[30];\n}\n\nunsafe class UnsafeClass\n{\n  UnsafeUnicodeString uus;\n\n  public UnsafeClass (string s)\n  {\n    uus.Length = (short)s.Length;\n    fixed (byte* p = uus.Buffer)\n      for (int i = 0; i < s.Length; i++)\n        p[i] = (byte) s[i];\n  }\n}\n```", "```cs\nshort[] a = {1,1,2,3,5,8,13,21,34,55};\nfixed (short* p = a)\n{\n  //sizeof returns size of value-type in bytes\n  Zap (p, a.Length * sizeof (short));\n}\nforeach (short x in a)\n  Console.WriteLine (x);  // Prints all zeros\n\nunsafe void Zap (void* memory, int byteCount)\n{\n  byte* b = (byte*) memory;\n    for (int i = 0; i < byteCount; i++)\n      *b++ = 0;\n}\n```", "```cs\ndelegate*<int, char, string, void>\n```", "```cs\nvoid SomeFunction (int x, char y, string z)\n```", "```cs\nunsafe\n{\n delegate*<string, int> functionPointer = &GetLength;\n  int length = functionPointer (\"Hello, world\");\n\n  static int GetLength (string s) => s.Length;\n}\n```", "```cs\nConsole.WriteLine ((IntPtr)functionPointer);\n```", "```cs\n#define DEBUG\nclass MyClass\n{\n  int x;\n  void Foo()\n  {\n #if DEBUG\n    Console.WriteLine (\"Testing: x = {0}\", x);\n #endif\n }\n  ...\n}\n```", "```cs\n#if TESTMODE && !DEBUG\n  ...\n```", "```cs\npublic class Foo\n{\n #pragma warning disable 414\n  static string Message = \"Hello\";\n #pragma warning restore 414\n}\n```", "```cs\n/// <summary>Cancels a running query.</summary>\npublic void Cancel() { ... }\n```", "```cs\n/// <summary>\n/// Cancels a running query\n/// </summary>\npublic void Cancel() { ... }\n```", "```cs\n/** \n    <summary> Cancels a running query. </summary>\n*/\npublic void Cancel() { ... }\n```", "```cs\n<summary>*...*</summary>\n```", "```cs\n<remarks>*...*</remarks>\n```", "```cs\n<param name=\"*name*\">*...*</param>\n```", "```cs\n<returns>*...*</returns>\n```", "```cs\n<exception [cref=\"*type*\"]>*...*</exception>\n```", "```cs\n<permission [cref=\"*type*\"]>*...*</permission>\n```", "```cs\n<example>*...*</example>\n```", "```cs\n<c>*...*</c>\n```", "```cs\n<code>*...*</code>\n```", "```cs\n<see cref=\"*member*\">*...*</see>\n```", "```cs\n<seealso cref=\"*member*\">*...*</seealso>\n```", "```cs\n<paramref name=\"*name*\"/>\n```", "```cs\n<list type=[ bullet | number | table ]>\n  <listheader>\n    <term>*...*</term>\n    <description>*...*</description>\n  </listheader>\n  <item>\n    <term>*...*</term>\n    <description>*...*</description>\n  </item>\n</list>\n```", "```cs\n<para>*...*</para>\n```", "```cs\n<include file='*filename*' path='*tagpath*[@name=\"*id*\"]'>\n  ...\n</include>\n```"]