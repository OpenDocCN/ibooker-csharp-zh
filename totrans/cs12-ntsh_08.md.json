["```cs\nstring[] names = { \"Tom\", \"Dick\", \"Harry\" };\n```", "```cs\nstring[] names = { \"Tom\", \"Dick\", \"Harry\" };\nIEnumerable<string> filteredNames = System.Linq.Enumerable.Where\n (names, n => n.Length >= 4);\nforeach (string n in filteredNames)\n  Console.WriteLine (n);\n\n*Dick*\n*Harry*\n```", "```cs\nIEnumerable<string> filteredNames = names.Where (n => n.Length >= 4);\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nstring[] names = { \"Tom\", \"Dick\", \"Harry\" };\n\nIEnumerable<string> filteredNames = names.Where (n => n.Length >= 4);\nforeach (string name in filteredNames) Console.WriteLine (name);\n\n*Dick*\n*Harry*\n```", "```cs\nvar filteredNames = names.Where (n => n.Length >= 4);\n```", "```cs\nn => n.Length >= 4\n```", "```cs\npublic static IEnumerable<TSource> Where<TSource>\n  (this IEnumerable<TSource> source, Func<TSource,bool> predicate)\n```", "```cs\nIEnumerable<string> filteredNames = names.Where (n => n.Contains (\"a\"));\n\nforeach (string name in filteredNames)\n  Console.WriteLine (name);             // Harry\n```", "```cs\nIEnumerable<string> filteredNames = from n in names\n                                    where n.Contains (\"a\")\n                                    select n;\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nstring[] names = { \"Tom\", \"Dick\", \"Harry\", \"Mary\", \"Jay\" };\n\nIEnumerable<string> query = names\n  .Where   (n => n.Contains (\"a\"))\n  .OrderBy (n => n.Length)\n  .Select  (n => n.ToUpper());\n\nforeach (string name in query) Console.WriteLine (name);\n\n*JAY*\n*MARY*\n*HARRY*\n```", "```cs\nvoid Test()\n{\n  foreach (char c in \"string1\") Console.Write (c);\n  foreach (char c in \"string2\") Console.Write (c);\n  foreach (char c in \"string3\") Console.Write (c);\n}\n```", "```cs\npublic static IEnumerable<TSource> Where<TSource>\n  (this IEnumerable<TSource> source, Func<TSource,bool> predicate)\n\npublic static IEnumerable<TSource> OrderBy<TSource,TKey>\n  (this IEnumerable<TSource> source, Func<TSource,TKey> keySelector)\n\npublic static IEnumerable<TResult> Select<TSource,TResult>\n  (this IEnumerable<TSource> source, Func<TSource,TResult> selector)\n```", "```cs\n// You must import the System.Linq namespace for this to compile:\n\nIEnumerable<string> filtered   = names   .Where   (n => n.Contains (\"a\"));\nIEnumerable<string> sorted     = filtered.OrderBy (n => n.Length);\nIEnumerable<string> finalQuery = sorted  .Select  (n => n.ToUpper());\n```", "```cs\nforeach (string name in filtered)\n  Console.Write (name + \"|\");        // Harry|Mary|Jay|\n\nConsole.WriteLine();\nforeach (string name in sorted)\n  Console.Write (name + \"|\");        // Jay|Mary|Harry|\n\nConsole.WriteLine();\nforeach (string name in finalQuery)\n  Console.Write (name + \"|\");        // JAY|MARY|HARRY|\n```", "```cs\nIEnumerable<string> filtered = Enumerable.Where (names,\n                                                 n => n.Contains (\"a\"));\nIEnumerable<string> sorted = Enumerable.OrderBy (filtered, n => n.Length);\nIEnumerable<string> finalQuery = Enumerable.Select (sorted,\n                                                    n => n.ToUpper());\n```", "```cs\nIEnumerable<string> query = names.Where   (n => n.Contains (\"a\"))\n                                 .OrderBy (n => n.Length)\n                                 .Select  (n => n.ToUpper());\n```", "```cs\nIEnumerable<string> query =\n  Enumerable.Select (\n    Enumerable.OrderBy (\n      Enumerable.Where (\n        names, n => n.Contains (\"a\")\n      ), n => n.Length\n    ), n => n.ToUpper()\n  );\n```", "```cs\nn => n.Contains (\"a\")      // Input type = string, return type = bool.\n```", "```cs\npublic static IEnumerable<TSource> Where<TSource>\n  (this IEnumerable<TSource> source, Func<TSource,bool> predicate)\n{\n  foreach (TSource element in source)\n    if (predicate (element))\n      yield return element;\n}\n```", "```cs\npublic static IEnumerable<TResult> Select<TSource,TResult>\n  (this IEnumerable<TSource> source, Func<TSource,TResult> selector)\n```", "```cs\nstring[] names = { \"Tom\", \"Dick\", \"Harry\", \"Mary\", \"Jay\" };\nIEnumerable<int> query = names.Select (n => n.Length);\n\nforeach (int length in query)\n  Console.Write (length + \"|\");    // 3|4|5|4|3|\n```", "```cs\npublic static IEnumerable<TSource> Where<TSource>\n  (this IEnumerable<TSource> source, Func<TSource,bool> predicate)\n```", "```cs\n// Slightly simplified:\npublic static IEnumerable<TSource> OrderBy<TSource,TKey>\n  (this IEnumerable<TSource> source, Func<TSource,TKey> keySelector)\n```", "```cs\nstring[] names = { \"Tom\", \"Dick\", \"Harry\", \"Mary\", \"Jay\" };\nIEnumerable<string> sortedByLength, sortedAlphabetically;\nsortedByLength       = names.OrderBy (n => n.Length);   // int key\nsortedAlphabetically = names.OrderBy (n => n);          // string key\n```", "```cs\nint[] numbers  = { 10, 9, 8, 7, 6 };\nIEnumerable<int> firstThree = numbers.Take (3);     // { 10, 9, 8 }\n```", "```cs\nIEnumerable<int> lastTwo    = numbers.Skip (3);     // { 7, 6 }\n```", "```cs\nIEnumerable<int> reversed   = numbers.Reverse();    // { 6, 7, 8, 9, 10 }\n```", "```cs\nint[] numbers    = { 10, 9, 8, 7, 6 };\nint firstNumber  = numbers.First();                        // 10\nint lastNumber   = numbers.Last();                         // 6\nint secondNumber = numbers.ElementAt(1);                   // 9\nint secondLowest = numbers.OrderBy(n=>n).Skip(1).First();  // 7\n```", "```cs\nint count = numbers.Count();          // 5;\nint min = numbers.Min();              // 6;\n```", "```cs\nbool hasTheNumberNine = numbers.Contains (9);          // true\nbool hasMoreThanZeroElements = numbers.Any();          // true\nbool hasAnOddElement = numbers.Any (n => n % 2 != 0);  // true\n```", "```cs\nint[] seq1 = { 1, 2, 3 };\nint[] seq2 = { 3, 4, 5 };\nIEnumerable<int> concat = seq1.Concat (seq2);    //  { 1, 2, 3, 3, 4, 5 }\nIEnumerable<int> union  = seq1.Union (seq2);     //  { 1, 2, 3, 4, 5 }\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nstring[] names = { \"Tom\", \"Dick\", \"Harry\", \"Mary\", \"Jay\" };\n\nIEnumerable<string> query =\n from    n in names\n where   n.Contains (\"a\")     // Filter elements\n orderby n.Length             // Sort elements\n select  n.ToUpper();         // Translate each element (project)\n\nforeach (string name in query) Console.WriteLine (name);\n\n*JAY*\n*MARY*\n*HARRY*\n```", "```cs\nIEnumerable<string> query = names.Where   (n => n.Contains (\"a\"))\n                                 .OrderBy (n => n.Length)\n                                 .Select  (n => n.ToUpper());\n```", "```cs\nfrom    n in names           // n is our range variable\nwhere   n.Contains (\"a\")     // n = directly from the array\norderby n.Length             // n = subsequent to being filtered\nselect  n.ToUpper()          // n = subsequent to being sorted\n```", "```cs\nnames.Where   (n => n.Contains (\"a\"))      // Locally scoped n\n     .OrderBy (n => n.Length)              // Locally scoped n\n     .Select  (n => n.ToUpper())           // Locally scoped n\n```", "```cs\nWhere, Select, SelectMany\nOrderBy, ThenBy, OrderByDescending, ThenByDescending\nGroupBy, Join, GroupJoin\n```", "```cs\nstring[] names = { \"Tom\", \"Dick\", \"Harry\", \"Mary\", \"Jay\" };\n```", "```cs\nint matches = (from n in names where n.Contains (\"a\") select n).Count();\n// 3\n```", "```cs\nstring first = (from n in names orderby n select n).First();   // Dick\n```", "```cs\nint matches = names.Where (n => n.Contains (\"a\")).Count();   // 3\nstring first = names.OrderBy (n => n).First();               // Dick\n```", "```cs\nvar numbers = new List<int> { 1 };\n\nIEnumerable<int> query = numbers.Select (n => n * 10);    // Build query\n\nnumbers.Add (2);                    // Sneak in an extra element\n\nforeach (int n in query)\n  Console.Write (n + \"|\");          // 10|20|\n```", "```cs\nAction a = () => Console.WriteLine (\"Foo\");\n// We’ve not written anything to the Console yet. Now let’s run it:\na();  // Deferred execution!\n```", "```cs\n    ToArray, ToList, ToDictionary, ToLookup, ToHashSet\n    ```", "```cs\nint matches = numbers.Where (n => n <= 2).Count();    // 1\n```", "```cs\nvar numbers = new List<int>() { 1, 2 };\n\nIEnumerable<int> query = numbers.Select (n => n * 10);\nforeach (int n in query) Console.Write (n + \"|\");   // 10|20|\n\nnumbers.Clear();\nforeach (int n in query) Console.Write (n + \"|\");   // <nothing>\n```", "```cs\nvar numbers = new List<int>() { 1, 2 };\n\nList<int> timesTen = numbers\n  .Select (n => n * 10)\n\n .ToList();                // Executes immediately into a List<int>\n\nnumbers.Clear();\nConsole.WriteLine (timesTen.Count);      // Still 2\n```", "```cs\nint[] numbers = { 1, 2 };\n\nint factor = 10;\nIEnumerable<int> query = numbers.Select (n => n * factor);\nfactor = 20;\nforeach (int n in query) Console.Write (n + \"|\");   // 20|40|\n```", "```cs\nIEnumerable<char> query = \"Not what you might expect\";\n\nquery = query.Where (c => c != 'a');\nquery = query.Where (c => c != 'e');\nquery = query.Where (c => c != 'i');\nquery = query.Where (c => c != 'o');\nquery = query.Where (c => c != 'u');\n\nforeach (char c in query) Console.Write (c);  // Nt wht y mght xpct\n```", "```cs\nIEnumerable<char> query = \"Not what you might expect\";\nstring vowels = \"aeiou\";\n\nfor (int i = 0; i < vowels.Length; i++)\n  query = query.Where (c => c != vowels[i]);\n\nforeach (char c in query) Console.Write (c);\n```", "```cs\nfor (int i = 0; i < vowels.Length; i++)\n{\n  char vowel = vowels[i];\n  query = query.Where (c => c != vowel);\n}\n```", "```cs\nforeach (char vowel in vowels)\n  query = query.Where (c => c != vowel);\n```", "```cs\nIEnumerable<int> lessThanTen = new int[] { 5, 12, 3 }.Where (n => n < 10);\n```", "```cs\npublic static IEnumerable<TResult> MySelect<TSource,TResult>\n  (this IEnumerable<TSource> source, Func<TSource,TResult> selector)\n{\n  foreach (TSource element in source)\n    yield return selector (element);\n}\n```", "```cs\npublic static IEnumerable<TResult> MySelect<TSource,TResult>\n  (this IEnumerable<TSource> source, Func<TSource,TResult> selector)\n{\n  return new *SelectSequence* (source, selector);\n}\n```", "```cs\nIEnumerable<int> query = new int[] { 5, 12, 3 }.Where   (n => n < 10)\n                                               .OrderBy (n => n)\n                                               .Select  (n => n * 10);\n```", "```cs\nIEnumerable<int>\n  source    = new int[] { 5, 12, 3 },\n  filtered  = source   .Where   (n => n < 10),\n  sorted    = filtered .OrderBy (n => n),\n  query     = sorted   .Select  (n => n * 10);\n```", "```cs\nforeach (int n in query) Console.WriteLine (n);\n\n*30*\n*50*\n```", "```cs\nstring[] musos = \n  { \"David Gilmour\", \"Roger Waters\", \"Rick Wright\", \"Nick Mason\" };\n\nIEnumerable<string> query = musos.OrderBy (m => m.Split().Last());\n```", "```cs\nstring[] names = { \"Tom\", \"Dick\", \"Harry\", \"Mary\", \"Jay\" };\n\nIEnumerable<string> outerQuery = names\n  .Where (n => n.Length == names.OrderBy (n2 => n2.Length)\n .Select  (n2 => n2.Length).First());\n\n*// Tom, Jay*\n```", "```cs\nIEnumerable<string> outerQuery =\n  from   n in names\n  where  n.Length ==\n           (from n2 in names orderby n2.Length select n2.Length).First()\n  select n;\n```", "```cs\nIEnumerable<string> query =\n  from   n in names\n  where  n.Length == names.OrderBy (n2 => n2.Length).First().Length\n  select n;\n```", "```cs\nIEnumerable<string> query =\n  from   n in names\n  where  n.Length == names.Min (n2 => n2.Length)\n  select n;\n```", "```cs\nint shortest = names.Min (n => n.Length);\n\nIEnumerable<string> query = from   n in names\n                            where  n.Length == shortest\n                            select n;\n```", "```cs\nvar filtered   = names    .Where   (n => n.Contains (\"a\"));\nvar sorted     = filtered .OrderBy (n => n);\nvar query      = sorted   .Select  (n => n.ToUpper());\n```", "```cs\n    if (includeFilter) query = query.Where (...)\n    ```", "```cs\n    query = query.Where (n => !includeFilter || *<expression>*)\n    ```", "```cs\nIEnumerable<string> query = names\n  .Select  (n => n.Replace (\"a\", \"\").Replace (\"e\", \"\").Replace (\"i\", \"\")\n                  .Replace (\"o\", \"\").Replace (\"u\", \"\"))\n  .Where   (n => n.Length > 2)\n  .OrderBy (n => n);\n\n*// Dck*\n*// Hrry*\n*// Mry*\n```", "```cs\nn => Regex.Replace (n, \"[aeiou]\", \"\")\n```", "```cs\nIEnumerable<string> query =\n  from    n in names\n  where   n.Length > 2\n  orderby n\n  select  n.Replace (\"a\", \"\").Replace (\"e\", \"\").Replace (\"i\", \"\")\n           .Replace (\"o\", \"\").Replace (\"u\", \"\");\n\n*// Dck*\n*// Hrry*\n*// Jy*\n*// Mry*\n*// Tm*\n```", "```cs\nIEnumerable<string> query =\n  from   n in names\n  select n.Replace (\"a\", \"\").Replace (\"e\", \"\").Replace (\"i\", \"\")\n          .Replace (\"o\", \"\").Replace (\"u\", \"\");\n\nquery = from n in query where n.Length > 2 orderby n select n;\n\n*// Dck*\n*// Hrry*\n*// Mry*\n```", "```cs\nIEnumerable<string> query =\n  from   n in names\n  select n.Replace (\"a\", \"\").Replace (\"e\", \"\").Replace (\"i\", \"\")\n          .Replace (\"o\", \"\").Replace (\"u\", \"\")\n  into noVowel\n    where noVowel.Length > 2 orderby noVowel select noVowel;\n```", "```cs\nvar query =\n  from n1 in names\n  select n1.ToUpper()\n  into n2                              // Only n2 is visible from here on.\n    where n1.Contains (\"x\")            // Illegal: n1 is not in scope.\n    select n2;\n```", "```cs\nvar query = names\n  .Select (n1 => n1.ToUpper())\n  .Where  (n2 => n1.Contains (\"x\"));     // Error: n1 no longer in scope\n```", "```cs\nvar tempQuery = *tempQueryExpr*\nvar finalQuery = from *...* in tempQuery *...*\n```", "```cs\nvar finalQuery = from *...* in (*tempQueryExpr*)\n```", "```cs\nIEnumerable<string> query =\n  from   n in names\n  select n.Replace (\"a\", \"\").Replace (\"e\", \"\").Replace (\"i\", \"\")\n          .Replace (\"o\", \"\").Replace (\"u\", \"\");\n\nquery = from n in query where n.Length > 2 orderby n select n;\n```", "```cs\nIEnumerable<string> query =\n  from n1 in\n  (\n    from   n2 in names\n    select n2.Replace (\"a\", \"\").Replace (\"e\", \"\").Replace (\"i\", \"\")\n             .Replace (\"o\", \"\").Replace (\"u\", \"\")\n  )\n  where n1.Length > 2 orderby n1 select n1;\n```", "```cs\nIEnumerable<string> query = names\n  .Select  (n => n.Replace (\"a\", \"\").Replace (\"e\", \"\").Replace (\"i\", \"\")\n                  .Replace (\"o\", \"\").Replace (\"u\", \"\"))\n  .Where   (n => n.Length > 2)\n  .OrderBy (n => n);\n```", "```cs\nclass TempProjectionItem\n{\n  public string Original;    // Original name\n  public string Vowelless;   // Vowel-stripped name\n}\n```", "```cs\nstring[] names = { \"Tom\", \"Dick\", \"Harry\", \"Mary\", \"Jay\" };\n\nIEnumerable<TempProjectionItem> temp =\n  from n in names\n  select new TempProjectionItem\n  {\n    Original  = n,\n    Vowelless = n.Replace (\"a\", \"\").Replace (\"e\", \"\").Replace (\"i\", \"\")\n .Replace (\"o\", \"\").Replace (\"u\", \"\")\n  };\n```", "```cs\nIEnumerable<string> query = from   item in temp\n                            where  item.Vowelless.Length > 2\n                            select item.Original;\n*// Dick*\n*// Harry*\n*// Mary*\n```", "```cs\nvar intermediate = from n in names\n\n  select new\n  {\n    Original = n,\n    Vowelless = n.Replace (\"a\", \"\").Replace (\"e\", \"\").Replace (\"i\", \"\")\n .Replace (\"o\", \"\").Replace (\"u\", \"\")\n  };\n\nIEnumerable<string> query = from   item in intermediate\n                            where  item.Vowelless.Length > 2\n                            select item.Original;\n```", "```cs\nIEnumerable <*random-compiler-generated-name*>\n```", "```cs\nvar query = from n in names\n  select new\n  {\n     Original = n,\n     Vowelless = n.Replace (\"a\", \"\").Replace (\"e\", \"\").Replace (\"i\", \"\")\n                  .Replace (\"o\", \"\").Replace (\"u\", \"\")\n  }\n  into temp\n  where temp.Vowelless.Length > 2\n  select temp.Original;\n```", "```cs\nstring[] names = { \"Tom\", \"Dick\", \"Harry\", \"Mary\", \"Jay\" };\n\nIEnumerable<string> query =\n  from n in names\n  let vowelless = n.Replace (\"a\", \"\").Replace (\"e\", \"\").Replace (\"i\", \"\")\n .Replace (\"o\", \"\").Replace (\"u\", \"\")\n where vowelless.Length > 2\n  orderby vowelless\n  select n;       // Thanks to let, n is still in scope.\n```", "```cs\ncreate table Customer\n(\n  ID int not null primary key,\n  Name varchar(30)\n)\ninsert Customer values (1, 'Tom')\ninsert Customer values (2, 'Dick')\ninsert Customer values (3, 'Harry')\ninsert Customer values (4, 'Mary')\ninsert Customer values (5, 'Jay')\n```", "```cs\nusing System;\nusing System.Linq;\nusing Microsoft.EntityFrameworkCore;\n\nusing var dbContext = new NutshellContext();\n\nIQueryable<string> query = from c in dbContext.Customers\n where   c.Name.Contains (\"a\")\n orderby c.Name.Length\n select  c.Name.ToUpper();\n\nforeach (string name in query) Console.WriteLine (name);\n\npublic class Customer\n{\n  public int ID { get; set; }\n  public string Name { get; set; }\n}\n\n// We’ll explain the following class in more detail in the next section.\npublic class NutshellContext : DbContext\n{\n  public virtual DbSet<Customer> Customers { get; set; }\n\n  protected override void OnConfiguring (DbContextOptionsBuilder builder)\n    => builder.UseSqlServer (\"...connection string...\");\n\n  protected override void OnModelCreating (ModelBuilder modelBuilder)\n    => modelBuilder.Entity<Customer>().ToTable (\"Customer\")\n                                      .HasKey (c => c.ID);\n}\n```", "```cs\nSELECT UPPER([c].[Name])\nFROM [Customers] AS [c]\nWHERE CHARINDEX(N'a', [c].[Name]) > 0\nORDER BY CAST(LEN([c].[Name]) AS int)\n```", "```cs\n*// JAY*\n*// MARY*\n*// HARRY*\n```", "```cs\nIQueryable<string> query = dbContext.customers\n                                    .Where   (n => n.Name.Contains (\"a\"))\n                                    .OrderBy (n => n.Name.Length)\n                                    .Select  (n => n.Name.ToUpper());\n```", "```cs\npublic static IQueryable<TSource> Where<TSource> (this\n  IQueryable<TSource> source, Expression <Func<TSource,bool>> predicate)\n```", "```cs\npublic static IEnumerable<string> Pair (this IEnumerable<string> source)\n{\n  string firstHalf = null;\n  foreach (string element in source)\n    if (firstHalf == null)\n      firstHalf = element;\n    else\n    {\n      yield return firstHalf + \", \" + element;\n      firstHalf = null;\n    }\n}\n```", "```cs\nusing var dbContext = new NutshellContext ();\nIEnumerable<string> q = dbContext.Customers\n  .Select (c => c.Name.ToUpper())\n  .OrderBy (n => n)\n .Pair()                         // Local from this point on.\n  .Select ((n, i) => \"Pair \" + i.ToString() + \" = \" + n);\n\nforeach (string element in q) Console.WriteLine (element);\n\n*// Pair 0 = DICK, HARRY*\n*// Pair 1 = JAY, MARY*\n```", "```cs\nSELECT UPPER([c].[Name]) FROM [Customers] AS [c] ORDER BY UPPER([c].[Name])\n```", "```cs\npublic static IEnumerable<TSource> AsEnumerable<TSource>\n              (this IEnumerable<TSource> source)\n{\n    return source;\n}\n```", "```cs\nRegex wordCounter = new Regex (@\"\\b(\\w|[-'])+\\b\");\n\nusing var dbContext = new NutshellContext ();\n\nvar query = dbContext.MedicalArticles\n  .Where (article => article.Topic == \"influenza\" &&\n                     wordCounter.Matches (article.Abstract).Count < 100);\n```", "```cs\nRegex wordCounter = new Regex (@\"\\b(\\w|[-'])+\\b\");\n\nusing var dbContext = new NutshellContext ();\n\nIEnumerable<MedicalArticle> efQuery = dbContext.MedicalArticles\n  .Where (article => article.Topic == \"influenza\");\n\nIEnumerable<MedicalArticle> localQuery = efQuery\n  .Where (article => wordCounter.Matches (article.Abstract).Count < 100);\n```", "```cs\nRegex wordCounter = new Regex (@\"\\b(\\w|[-'])+\\b\");\n\nusing var dbContext = new NutshellContext ();\n\nvar query = dbContext.MedicalArticles\n  .Where (article => article.Topic == \"influenza\")\n\n .AsEnumerable()\n  .Where (article => wordCounter.Matches (article.Abstract).Count < 100);\n```", "```cs\npublic class Customer\n{\n  public int ID { get; set; } \n  public string Name { get; set; }\n}\n```", "```cs\npublic class NutshellContext : DbContext\n{\n  public DbSet<Customer> Customers { get; set; }\n  ... properties for other tables ...\n\n}\n```", "```cs\npublic class NutshellContext : DbContext\n{\n  ...\n  protected override void OnConfiguring (DbContextOptionsBuilder \n                                         optionsBuilder) =>\n    optionsBuilder.UseSqlServer \n      (@\"Server=(local);Database=Nutshell;Trusted_Connection=True\");\n}\n```", "```cs\npublic NutshellContext (DbContextOptions<NutshellContext>\n                        options)\n  : base(options) { }\n```", "```cs\nprotected override void OnConfiguring (\n  DbContextOptionsBuilder optionsBuilder)\n{\n  if (!optionsBuilder.IsConfigured)\n  {\n    ...\n  }\n}\n```", "```cs\nprotected override void OnModelCreating (ModelBuilder modelBuilder) =>\n  modelBuilder.Entity<Customer>()\n    .ToTable (\"Customer\");   // Table is called 'Customer'\n```", "```cs\npublic DbSet<Customer> Customers { get; set; }\n```", "```cs\nprotected override void OnModelCreating (ModelBuilder\n                                        modelBuilder)\n{\n  foreach (IMutableEntityType entityType in\n           modelBuilder.Model.GetEntityTypes())\n  {\n    modelBuilder.Entity (entityType.Name)\n      .ToTable (entityType.ClrType.Name);\n  }\n}\n```", "```cs\nprotected override void OnModelCreating (ModelBuilder modelBuilder) =>\n  modelBuilder.Entity<Customer> (entity =>\n  {\n      entity.ToTable (\"Customer\");\n      entity.Property (e => e.Name)\n .HasColumnName (\"Full Name\")  // Column name is 'Full Name'\n .IsRequired();                // Column is not nullable\n  });\n```", "```cs\nbuilder\n  .Entity<Customer>()\n  .ToTable(\"Customer\");\n```", "```cs\nbuilder.Entity<Customer>()\n  .Property(c => c.Name)\n  .HasColumnName(\"Full Name\");\n```", "```cs\nbuilder.Entity<Customer>()\n  .HasKey(c => c.CustomerNr);\n```", "```cs\nbuilder.Entity<Customer>()\n  .Property(c => c.Name)\n  .IsRequired();\n```", "```cs\nbuilder.Entity<Customer>()\n  .Property(c => c.Name)\n  .HasMaxLength(60);\n```", "```cs\nbuilder.Entity<Purchase>()\n  .Property(p => p.Description)\n  .HasColumnType(\"varchar(80)\");\n```", "```cs\nbuilder.Ignore<Products>();\n```", "```cs\nbuilder.Entity<Customer>()\n  .Ignore(c => c.ChatName);\n```", "```cs\n// Compound index:\nbuilder.Entity<Purchase>()\n  .HasIndex(p =>\n     new { p.Date, p.Price });\n\n// Unique index on one property\nbuilder\n  .Entity<MedicalArticle>()\n  .HasIndex(a => a.Topic)\n  .IsUnique();\n```", "```cs\nbuilder.Entity<Purchase>()\n  .HasOne(p => p.Customer)\n  .WithMany(c => c.Purchases);\n```", "```cs\nbuilder.Entity<Customer>()\n  .HasMany(c => c.Purchases)\n  .WithOne(p => p.Customer);\n```", "```cs\ndbContext.Database.EnsureCreated();\n```", "```cs\nInstall-Package Microsoft.EntityFrameworkCore.Tools\nAdd-Migration InitialCreate\nUpdate-Database\n```", "```cs\nusing var dbContext = new NutshellContext();\nConsole.WriteLine (dbContext.Customers.Count());\n// Executes \"SELECT COUNT(*) FROM [Customer] AS [c]\"\n```", "```cs\nusing var dbContext = new NutshellContext();\nCustomer cust = new Customer()\n{\n  Name = \"Sara Wells\"\n};\ndbContext.Customers.Add (cust);\ndbContext.SaveChanges();    // Writes changes back to database\n```", "```cs\nusing var dbContext = new NutshellContext();\nCustomer cust = dbContext.Customers\n  .Single (c => c.Name == \"Sara Wells\")\n```", "```cs\ncust.Name = \"Dr. Sara Wells\";\ndbContext.SaveChanges();\n```", "```cs\nusing var dbContext = new NutshellContext ();\n\nCustomer a = dbContext.Customers.OrderBy (c => c.Name).First();\nCustomer b = dbContext.Customers.OrderBy (c => c.ID).First();\n```", "```cs\ndbContext.Entry (myCustomer).Reload();\n```", "```cs\nforeach (var e in dbContext.ChangeTracker.Entries())\n{\n  Console.WriteLine ($\"{e.Entity.GetType().FullName} is {e.State}\");\n  foreach (var m in e.Members)\n    Console.WriteLine (\n      $\"  {m.Metadata.Name}: '{m.CurrentValue}' modified: {m.IsModified}\");\n}\n```", "```cs\npublic class Customer\n{\n  public int ID { get; set; }\n  public string Name { get; set; }\n\n  // Child navigation property, which must be of type ICollection<T>:\n  public virtual List<Purchase> Purchases {get;set;} = new List<Purchase>();\n}\n\npublic class Purchase\n{        \n  public int ID { get; set; }\n  public DateTime Date { get; set; }\n  public string Description { get; set; }\n  public decimal Price { get; set; }\n  public int CustomerID? { get; set; }     // Foreign key field\n\n  public Customer Customer { get; set; }   // Parent navigation property\n}\n```", "```cs\nmodelBuilder.Entity<Purchase>()\n  .HasOne (e => e.Customer)\n  .WithMany (e => e.Purchases)\n  .HasForeignKey (e => e.CustomerID);\n```", "```cs\nvar customersWithPurchases = Customers.Where (c => c.Purchases.Any());\n```", "```cs\nCustomer cust = dbContext.Customers.Single (c => c.ID == 1);\n\nPurchase p1 = new Purchase { Description=\"Bike\",  Price=500 };\nPurchase p2 = new Purchase { Description=\"Tools\", Price=100 };\n\ncust.Purchases.Add (p1);\ncust.Purchases.Add (p2);\n\ndbContext.SaveChanges();\n```", "```cs\nusing var dbContext = new NutshellContext();\nvar cust = dbContext.Customers.First();\nConsole.WriteLine (cust.Purchases.Count);    // Always 0\n```", "```cs\nvar cust = dbContext.Customers \n  .Include (c => c.Purchases)\n  .Where (c => c.ID == 2).First();\n```", "```cs\nvar custInfo = dbContext.Customers \n  .Where (c => c.ID == 2)\n .Select (c => new\n {\n Name = c.Name,\n Purchases = c.Purchases.Select (p => new { p.Description, p.Price })\n })\n  .First();\n```", "```cs\ndbContext.Entry (cust).Collection (b => b.Purchases).Load();\n// cust.Purchases is now populated.\n```", "```cs\nprotected override void OnConfiguring (DbContextOptionsBuilder \n                                       optionsBuilder)\n{\n  optionsBuilder\n    .UseLazyLoadingProxies()\n    ...\n}\n```", "```cs\nusing var dbContext = new NutshellContext();\nvar cust = dbContext.Customers.First();  \nConsole.WriteLine (cust.GetType());\n// Castle.Proxies.CustomerProxy\n```", "```cs\nusing var dbContext = new NutshellContext ();\n\nvar query = from c in dbContext.Customers\n            select\n               from p in c.Purchases\n               select new { c.Name, p.Price };\n\nforeach (var customerPurchaseResults in query)\n  foreach (var namePrice in customerPurchaseResults)\n    Console.WriteLine ($\"{ namePrice.Name} spent { namePrice.Price}\");\n```", "```cs\nvar query = from c in dbContext.Customers\n            select new { c.Name, c.Purchases };\n\nforeach (var row in query)\n foreach (Purchase p in row.Purchases)   // No extra round-tripping\n    Console.WriteLine (row.Name + \" spent \" + p.Price);\n```", "```cs\nforeach (Customer c in dbContext.Customers.ToArray())\n  foreach (Purchase p in c.Purchases)    // Another SQL round-trip\n    Console.WriteLine (c.Name + \" spent \" + p.Price);\n```", "```cs\nforeach (Customer c in dbContext.Customers.ToArray())\n  if (*myWebService.HasBadCreditHistory (c.ID)*)\n    foreach (Purchase p in c.Purchases)   // Another SQL round trip\n      Console.WriteLine (c.Name + \" spent \" + p.Price);\n```", "```cs\npublic class Product\n{\n  public int ID { get; set; }\n  public string Description { get; set; }\n  public bool Discontinued { get; set; }\n  public DateTime LastSale { get; set; }\n}\n```", "```cs\npublic static IEnumerable<TSource> Where<TSource> (this\n  IEnumerable<TSource> source, Func<TSource,bool> predicate)\n\npublic static IQueryable<TSource> Where<TSource> (this\n  IQueryable<TSource> source, Expression<Func<TSource,bool>> predicate)\n```", "```cs\nIEnumerable<Product> q1 = localProducts.Where (p => !p.Discontinued);\nIQueryable<Product>  q2 = sqlProducts.Where   (p => !p.Discontinued);\n```", "```cs\nFunc <Product, bool> predicate1 = p => !p.Discontinued;\nIEnumerable<Product> q1 = localProducts.Where (predicate1);\n\nExpression <Func <Product, bool>> predicate2 = p => !p.Discontinued;\nIQueryable<Product> q2 = sqlProducts.Where (predicate2);\n```", "```cs\npublic class Product\n{\n  public static Expression<Func<Product, bool>> IsSelling()\n  {\n    return p => !p.Discontinued && p.LastSale > DateTime.Now.AddDays (-30);\n  }\n}\n```", "```cs\nvoid Test()\n{\n  var dbContext = new NutshellContext();\n  Product[] localProducts = dbContext.Products.ToArray();\n\n  IQueryable<Product> sqlQuery =\n    dbContext.Products.Where (Product.IsSelling());\n\n  IEnumerable<Product> localQuery =\n    localProducts.Where (Product.IsSelling().Compile());\n}\n```", "```cs\nIQueryable<Product> FilterSortProducts (IQueryable<Product> input)\n{\n  return from p in input\n         where ...\n         orderby ...\n         select p;\n}\n\nvoid Test()\n{\n  var dbContext = new NutshellContext();\n  Product[] localProducts = dbContext.Products.ToArray();\n\n  var sqlQuery   = FilterSortProducts (dbContext.Products);\n  var localQuery = FilterSortProducts (localProducts.AsQueryable());\n  ...\n}\n```", "```cs\nLambdaExpression<Func<Customer,bool>> f = ...\n```", "```cs\nExpression<Func<string, bool>> f = s => s.Length < 5;\n```", "```cs\nConsole.WriteLine (f.Body.NodeType);                     // LessThan\nConsole.WriteLine (((BinaryExpression) f.Body).Right);   // 5\n```", "```cs\nParameterExpression p = Expression.Parameter (typeof (string), \"s\");\n```", "```cs\nMemberExpression stringLength = Expression.Property (p, \"Length\");\nConstantExpression five = Expression.Constant (5);\n```", "```cs\nBinaryExpression comparison = Expression.LessThan (stringLength, five);\n```", "```cs\nExpression<Func<string, bool>> lambda\n  = Expression.Lambda<Func<string, bool>> (comparison, p);\n```", "```cs\nFunc<string, bool> runnable = lambda.Compile();\n\nConsole.WriteLine (runnable (\"kangaroo\"));           // False\nConsole.WriteLine (runnable (\"dog\"));                // True\n```"]