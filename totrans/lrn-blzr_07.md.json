["```cs\nnamespace Learning.Blazor.Api.Hubs;\n [Authorize, RequiredScope(new[] { \"User.ApiAccess\" })] ![1](assets/1.png)\npublic partial class NotificationHub : Hub\n{\n    private readonly ITwitterService _twitterService;\n    private readonly IStringLocalizer<Shared> _localizer;\n\n    private string _userName => Context.User?.Identity?.Name ?? \"Unknown\";\n    private string[]? _userEmail => Context.User?.GetEmailAddresses();\n\n    public NotificationHub(\n        ITwitterService twitterService,\n        IStringLocalizer<Shared> localizer) =>\n        (_twitterService, _localizer) = (twitterService, localizer);\n\n    public override Task OnConnectedAsync() => ![2](assets/2.png)\n        Clients.All.SendAsync(\n            HubServerEventNames.UserLoggedIn,\n            Notification<Actor>.FromAlert(\n                new(UserName: _userName,\n                    Emails: _userEmail)));\n\n    public override Task OnDisconnectedAsync(Exception? ex) => ![3](assets/3.png)\n        Clients.All.SendAsync(\n            HubServerEventNames.UserLoggedOut,\n            Notification<Actor>.FromAlert(\n                new(UserName: _userName)));\n}\n```", "```cs\nnamespace Learning.Blazor.Api.Hubs;\n\npublic partial class NotificationHub\n{\n    public Task ToggleUserTyping(bool isTyping) => ![1](assets/1.png)\n        Clients.Others.SendAsync(\n            HubServerEventNames.UserTyping,\n            Notification<ActorAction>.FromAlert(\n                new(UserName: _userName ?? \"Unknown\",\n                    IsTyping: isTyping)));\n\n    public Task PostOrUpdateMessage( ![2](assets/2.png)\n        string room, string message, Guid? id = default!) =>\n        Clients.Groups(room).SendAsync(\n            HubServerEventNames.MessageReceived,\n            Notification<ActorMessage>.FromChat(\n                new(Id: id ?? Guid.NewGuid(),\n                   Text: message,\n                   UserName: _userName ?? \"Unknown\",\n                   IsEdit: id.HasValue)));\n\n    public async Task JoinChat(string room) ![3](assets/3.png)\n    {\n        await Groups.AddToGroupAsync(Context.ConnectionId, room);\n\n        await Clients.Caller.SendAsync(\n            HubServerEventNames.MessageReceived,\n            Notification<ActorMessage>.FromChat(\n                new(Id: Guid.NewGuid(),\n                    Text: _localizer[\"WelcomeToChatRoom\", room],\n                    UserName: UTF8.GetString(\n                        new byte[] { 240, 159, 145, 139 }),\n                    IsGreeting: true)));\n    }\n\n    public async Task LeaveChat(string room) ![4](assets/4.png)\n    {\n        await Groups.RemoveFromGroupAsync(Context.ConnectionId, room);\n\n        await Clients.Groups(room).SendAsync(\n            HubServerEventNames.MessageReceived,\n            Notification<ActorMessage>.FromChat(\n                new(Id: Guid.NewGuid(),\n                    Text: _localizer[\"HasLeftTheChatRoom\", _userName ?? \"?\"],\n                    UserName: UTF8.GetString(\n                        new byte[] { 240, 159, 164, 150 }))));\n    }\n}\n```", "```cs\npublic partial class NotificationHub\n{\n    public async Task JoinTweets() ![1](assets/1.png)\n    {\n        await Groups.AddToGroupAsync(\n            Context.ConnectionId,\n            HubGroupNames.Tweets);\n\n        if (_twitterService.CurrentStatus is StreamingStatus status)\n        {\n            await Clients.Caller.SendAsync(\n                HubServerEventNames.StatusUpdated,\n                Notification<StreamingStatus>.FromStatus(status));\n        }\n\n        if (_twitterService.LastFiftyTweets is { Count: > 0 })\n        {\n            await Clients.Caller.SendAsync(\n                HubServerEventNames.InitialTweetsLoaded,\n                Notification<List<TweetContents>>.FromTweets(\n                    _twitterService.LastFiftyTweets.ToList()));\n        }\n    }\n\n    public Task LeaveTweets() => ![2](assets/2.png)\n        Groups.RemoveFromGroupAsync(\n            Context.ConnectionId,\n            HubGroupNames.Tweets);\n\n    public Task StartTweetStream() => ![3](assets/3.png)\n        _twitterService.StartTweetStreamAsync();\n}\n```", "```cs\nnamespace Learning.Blazor.Api.Services;\n\npublic sealed class TwitterWorkerService : BackgroundService ![1](assets/1.png)\n{\n    private readonly ITwitterService _twitterService;\n    private readonly IHubContext<NotificationHub> _hubContext;\n\n    public TwitterWorkerService( ![2](assets/2.png)\n        ITwitterService twitterService,\n        IHubContext<NotificationHub> hubContext)\n    {\n        (_twitterService, _hubContext) = (twitterService, hubContext);\n\n        _twitterService.StatusUpdated += OnStatusUpdated;\n        _twitterService.TweetReceived += OnTweetReceived;\n    }\n\n    protected override async Task ExecuteAsync( ![3](assets/3.png)\n        CancellationToken stoppingToken)\n    {\n        while (!stoppingToken.IsCancellationRequested)\n        {\n            await Task.Delay(TimeSpan.FromMinutes(1), stoppingToken);\n        }\n    }\n\n    private Task OnStatusUpdated(StreamingStatus status) => ![4](assets/4.png)\n        _hubContext.Clients\n            .Group(HubGroupNames.Tweets)\n            .SendAsync(\n                HubServerEventNames.StatusUpdated,\n                Notification<StreamingStatus>.FromStatus(status));\n\n    private Task OnTweetReceived(TweetContents tweet) => ![5](assets/5.png)\n        _hubContext.Clients\n            .Group(HubGroupNames.Tweets)\n            .SendAsync(\n                HubServerEventNames.TweetReceived,\n                Notification<TweetContents>.FromTweet(tweet));\n}\n```", "```cs\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\n\n    <PropertyGroup>\n        <RootNamespace>Learning.Blazor.Api</RootNamespace>\n        <TargetFramework>net6.0</TargetFramework>\n        <Nullable>enable</Nullable>\n        <ImplicitUsings>true</ImplicitUsings>\n        <DockerDefaultTargetOS>Linux</DockerDefaultTargetOS>\n        <DockerfileContext>..\\..</DockerfileContext>\n    </PropertyGroup>\n\n    <ItemGroup>\n        <PackageReference Version=\"6.0.1\"\n            Include=\"Microsoft.AspNetCore.SignalR.Protocols.MessagePack\" /> ![1](assets/1.png)\n        <!-- Additional package references omitted for brevity -->\n    </ItemGroup>\n    <ItemGroup>\n        <!--\n            Project references omitted for brevity:\n                Abstractions, Cosmos DB, Distributed Caching,\n                Extensions, Http.Extensions, LogicAppServices, TwitterServices\n        -->\n    </ItemGroup>\n\n    <!-- Omitted for brevity -->\n</Project>\n```", "```cs\nnamespace Learning.Blazor.Api;\n\npublic sealed partial class Startup\n{\n    readonly IConfiguration _configuration;\n\n    public Startup(IConfiguration configuration) =>\n        _configuration = configuration;\n}\n```", "```cs\nnamespace Learning.Blazor.Api;\n\npublic sealed partial class Startup\n{\n    public void ConfigureServices(IServiceCollection services) ![1](assets/1.png)\n    {\n        services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme) ![2](assets/2.png)\n            .AddMicrosoftIdentityWebApi(\n                _configuration.GetSection(\"AzureAdB2C\"));\n\n        services.Configure<JwtBearerOptions>(\n            JwtBearerDefaults.AuthenticationScheme,\n            options =>\n            options.TokenValidationParameters.NameClaimType = \"name\");\n\n        services.AddApiServices(_configuration);\n\n        var webClientOrigin = _configuration[\"WebClientOrigin\"];\n        services.AddCors(\n            options => options.AddDefaultPolicy(\n                builder => builder.WithOrigins(\n                    \"https://localhost:5001\", webClientOrigin)\n                    .AllowAnyMethod()\n                    .AllowAnyHeader()\n                    .AllowCredentials()));\n\n        services.AddControllers();\n\n        services.AddSignalR( ![3](assets/3.png)\n            options => options.EnableDetailedErrors = true)\n                .AddMessagePackProtocol();\n    }\n}\n```", "```cs\nnamespace Learning.Blazor.Api;\n\npublic sealed partial class Startup\n{\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env) ![1](assets/1.png)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n\n        app.UseHttpsRedirection();\n        app.UseRouting();\n\n        var webClientOrigin = _configuration[\"WebClientOrigin\"];\n        app.UseCors(options =>\n            options.WithOrigins(\n                    \"https://localhost:5001\", webClientOrigin)\n                .AllowAnyHeader()\n                .AllowAnyMethod()\n                .AllowCredentials());\n\n        var localizationOptions = new RequestLocalizationOptions() ![2](assets/2.png)\n            .SetDefaultCulture(Cultures.Default)\n            .AddSupportedCultures(Cultures.Supported)\n            .AddSupportedUICultures(Cultures.Supported);\n\n        app.UseRequestLocalization(localizationOptions);\n        app.UseAuthentication();\n        app.UseAuthorization();\n        app.UseResponseCaching();\n        app.UseEndpoints(endpoints => ![3](assets/3.png)\n        {\n            endpoints.MapControllers();\n            endpoints.MapHub<NotificationHub>(\"/notifications\");\n        });\n    }\n}\n```", "```cs\nnamespace Learning.Blazor;\n\npublic sealed partial class SharedHubConnection : IAsyncDisposable ![1](assets/1.png)\n{\n    private readonly IServiceProvider _serviceProvider = null!; ![2](assets/2.png)\n    private readonly ILogger<SharedHubConnection> _logger = null!;\n    private readonly CultureService _cultureService = null!;\n    private readonly HubConnection _hubConnection = null!;\n    private readonly SemaphoreSlim _lock = new(1, 1);\n    private readonly HashSet<ComponentBase> _activeComponents = new();\n\n    /// <summary>\n    /// Indicates the state of the <see cref=\"HubConnection\"/> to the server.\n    /// </summary>\n    public HubConnectionState State =>\n        _hubConnection?.State ?? HubConnectionState.Disconnected;\n\n    public SharedHubConnection( ![3](assets/3.png)\n        IServiceProvider serviceProvider,\n        IOptions<WebApiOptions> options,\n        CultureService cultureService,\n        ILogger<SharedHubConnection> logger)\n    {\n        (_serviceProvider, _cultureService, _logger) =\n            (serviceProvider, cultureService, logger);\n\n        var notificationHub =\n            new Uri($\"{options.Value.WebApiServerUrl}/notifications\");\n\n        _hubConnection = new HubConnectionBuilder()\n            .WithUrl(notificationHub,\n                 options =>\n                 {\n                     options.AccessTokenProvider = GetAccessTokenValueAsync;\n                     options.Headers.Add(\n                         \"Accept-Language\",\n                         _cultureService.CurrentCulture\n                             .TwoLetterISOLanguageName);\n                 })\n            .WithAutomaticReconnect()\n            .AddMessagePackProtocol()\n            .Build();\n\n        _hubConnection.Closed += OnHubConnectionClosedAsync;\n        _hubConnection.Reconnected += OnHubConnectionReconnectedAsync;\n        _hubConnection.Reconnecting += OnHubConnectionReconnectingAsync;\n    }\n\n    Task OnHubConnectionClosedAsync(Exception? exception)\n    {\n        _logger.LogHubConnectionClosed(exception);\n        return Task.CompletedTask;\n    }\n\n    Task OnHubConnectionReconnectedAsync(string? message)\n    {\n        _logger.LogHubConnectionReconnected(message);\n        return Task.CompletedTask;\n    }\n\n    Task OnHubConnectionReconnectingAsync(Exception? exception)\n    {\n        _logger.LogHubConnectionReconnecting(exception);\n        return Task.CompletedTask;\n    }\n\n    async ValueTask IAsyncDisposable.DisposeAsync() ![4](assets/4.png)\n    {\n        if (_hubConnection is not null)\n        {\n            _hubConnection.Closed -= OnHubConnectionClosedAsync;\n            _hubConnection.Reconnected -= OnHubConnectionReconnectedAsync;\n            _hubConnection.Reconnecting -= OnHubConnectionReconnectingAsync;\n\n            await _hubConnection.StopAsync();\n            await _hubConnection.DisposeAsync();\n        }\n\n        _lock?.Dispose();\n    }\n}\n```", "```cs\nnamespace Learning.Blazor;\n\npublic sealed partial class SharedHubConnection\n{\n    private async Task<string?> GetAccessTokenValueAsync()\n    {\n        using (var scope = _serviceProvider.CreateScope())\n        {\n            var tokenProvider =\n                scope.ServiceProvider\n                    .GetRequiredService<IAccessTokenProvider>();\n            var result =\n                await tokenProvider.RequestAccessToken();\n\n            if (result.TryGetToken(out var accessToken))\n            {\n                return accessToken.Value;\n            }\n\n            _logger.LogUnableToGetAccessToken(\n                result.Status, result.RedirectUrl);\n\n            return null;\n        }\n    }\n}\n```", "```cs\nnamespace Learning.Blazor;\n\npublic sealed partial class SharedHubConnection\n{\n    public async Task StartAsync(CancellationToken token = default) ![1](assets/1.png)\n    {\n        await _lock.WaitAsync(token);\n\n        try\n        {\n            if (State is HubConnectionState.Disconnected)\n            {\n                await _hubConnection.StartAsync(token);\n            }\n            else\n            {\n                _logger.LogUnableToStartHubConnection(State);\n            }\n        }\n        finally\n        {\n            _lock.Release();\n        }\n    }\n}\n```", "```cs\nnamespace Learning.Blazor;\n\npublic sealed partial class SharedHubConnection\n{\n    /// <inheritdoc cref=\"HubClientMethodNames.JoinChat\" />\n    public Task JoinChatAsync(string room) => ![1](assets/1.png)\n        _hubConnection.InvokeAsync(\n            methodName: HubClientMethodNames.JoinChat, room);\n\n    /// <inheritdoc cref=\"HubClientMethodNames.LeaveChat\" />\n    public Task LeaveChatAsync(string room) =>\n        _hubConnection.InvokeAsync(\n            methodName: HubClientMethodNames.LeaveChat, room);\n\n    /// <inheritdoc cref=\"HubClientMethodNames.PostOrUpdateMessage\" />\n    public Task PostOrUpdateMessageAsync(\n        string room, string message, Guid? id = default) =>\n        _hubConnection.InvokeAsync(\n            methodName: HubClientMethodNames.PostOrUpdateMessage,\n            room, message, id);\n\n    /// <inheritdoc cref=\"HubClientMethodNames.ToggleUserTyping\" />\n    public Task ToggleUserTypingAsync(bool isTyping) =>\n        _hubConnection.InvokeAsync(\n            methodName: HubClientMethodNames.ToggleUserTyping, isTyping);\n\n    /// <inheritdoc cref=\"HubServerEventNames.UserLoggedIn\" />\n    public IDisposable SubscribeToUserLoggedIn( ![2](assets/2.png)\n        Func<Notification<Actor>, Task> onUserLoggedIn) =>\n        _hubConnection.On(\n            methodName: HubServerEventNames.UserLoggedIn,\n            handler: onUserLoggedIn);\n\n    /// <inheritdoc cref=\"HubServerEventNames.UserLoggedOut\" />\n    public IDisposable SubscribeToUserLoggedOut(\n        Func<Notification<Actor>, Task> onUserLoggedOut) =>\n        _hubConnection.On(\n            methodName: HubServerEventNames.UserLoggedOut,\n            handler: onUserLoggedOut);\n\n    /// <inheritdoc cref=\"HubServerEventNames.UserTyping\" />\n    public IDisposable SubscribeToUserTyping(\n        Func<Notification<ActorAction>, Task> onUserTyping) =>\n        _hubConnection.On(\n            methodName: HubServerEventNames.UserTyping,\n            handler: onUserTyping);\n\n    /// <inheritdoc cref=\"HubServerEventNames.MessageReceived\" />\n    public IDisposable SubscribeToMessageReceived(\n        Func<Notification<ActorMessage>, Task> onMessageReceived) =>\n        _hubConnection.On(\n            methodName: HubServerEventNames.MessageReceived,\n            handler: onMessageReceived);\n}\n```", "```cs\nnamespace Learning.Blazor;\n\npublic sealed partial class SharedHubConnection\n{\n    /// <inheritdoc cref=\"HubClientMethodNames.JoinTweets\" />\n    public Task JoinTweetsAsync() => ![1](assets/1.png)\n        _hubConnection.InvokeAsync(\n            methodName: HubClientMethodNames.JoinTweets);\n\n    /// <inheritdoc cref=\"HubClientMethodNames.LeaveTweets\" />\n    public Task LeaveTweetsAsync() =>\n        _hubConnection.InvokeAsync(\n            methodName: HubClientMethodNames.LeaveTweets);\n\n    /// <inheritdoc cref=\"HubClientMethodNames.StartTweetStream\" />\n    public Task StartTweetStreamAsync() =>\n        _hubConnection.InvokeAsync(\n            methodName: HubClientMethodNames.StartTweetStream);\n\n    /// <inheritdoc cref=\"HubServerEventNames.StatusUpdated\" />\n    public IDisposable SubscribeToStatusUpdated( ![2](assets/2.png)\n        Func<Notification<StreamingStatus>, Task> onStatusUpdated) =>\n        _hubConnection.On(\n            methodName: HubServerEventNames.StatusUpdated,\n            handler: onStatusUpdated);\n\n    /// <inheritdoc cref=\"HubServerEventNames.TweetReceived\" />\n    public IDisposable SubscribeToTweetReceived(\n        Func<Notification<TweetContents>, Task> onTweetReceived) =>\n        _hubConnection.On(\n            methodName: HubServerEventNames.TweetReceived,\n            handler: onTweetReceived);\n\n    /// <inheritdoc cref=\"HubServerEventNames.InitialTweetsLoaded\" />\n    public IDisposable SubscribeToTweetsLoaded(\n        Func<Notification<List<TweetContents>>, Task> onTweetsLoaded) =>\n        _hubConnection.On(\n            methodName: HubServerEventNames.InitialTweetsLoaded,\n            handler: onTweetsLoaded);\n}\n```", "```cs\n@page \"/chat/{room?}\" ![1](assets/1.png) @attribute [Authorize]\n@inherits LocalizableComponentBase<Chat>\n\n<PageTitle> @Localizer[\"Chat\"] </PageTitle>\n\n<AuthorizeView> @if (User is { Identity: { } } user)\n    { <div class=\"is-hidden\">@user.Identity.Name</div> } </AuthorizeView>\n\n    <div class=\"columns\">\n        <section class=\"column is-10 is-offset-1\">\n            <div class=\"field has-addons\">\n                <div class=\"control is-fullwidth has-icons-left\">\n                    <input class=\"input is-large\" spellcheck=\"true\" ![2](assets/2.png)\n                       type=\"text\" placeholder=@Localizer[\"ChatMessage\"]\n                       @ref=\"_messageInput\"\n                       @bind-value=\"@_message\"\n                       @oninput=\"@InitiateDebounceUserIsTypingAsync\"\n                       @onkeyup=\"@OnKeyUpAsync\"\n                       autocomplete=\"off\">\n                    <span class=\"icon is-small is-left\">\n                        <i class=\"fas\">&#x1F4AD;</i>\n                    </span>\n                </div>\n                <div class=\"control\">\n                    <a class=\"button is-info is-large\"\n                        @onclick=\"@SendMessageAsync\"> @Localizer[\"Send\"] </a>\n                </div>\n            </div>\n\n            <article class=\"panel is-info has-dotnet-scrollbar\">\n                <p class=\"panel-heading has-text-left\">\n                    <span> @Localizer[\"Messages\"] </span>\n                    <span class=\"is-pulled-right\"> @if (TryGetUsersTypingText(out var text)) ![3](assets/3.png) {\n                        MarkupString isTypingMarkup = new(text); <span class=\"has-text-grey-light is-strobing\"> @isTypingMarkup </span> } </span>\n            </p> @foreach (var (id, message) in _messages.Reverse()) ![4](assets/4.png) { <ChatMessageComponent Message=@message\n                    IsEditable=@(OwnsMessage(message.UserName))\n                    EditMessage=@OnEditMessageAsync /> } </article>\n    </section>\n</div>\n```", "```cs\nnamespace Learning.Blazor.Models;\n\npublic record class ActorMessage(\n    Guid Id,\n    string Text,\n    string UserName,\n    bool IsGreeting = false,\n    bool IsEdit = false) : Actor(UserName);\n\npublic record class ActorAction(\n    string UserName, bool IsTyping) : Actor(UserName);\n\npublic record class Actor(\n    string UserName,\n    string[]? Emails = null);\n```", "```cs\n<a id=\"@Message.Id\" ![1](assets/1.png)\n    class=\"panel-block is-size-5 @_dynamicCss\"\n\t@onclick=@StartEditAsync>\n    <span> @Message.UserName </span>\n    <span class=\"panel-icon px-4\">\n        <i class=\"fas fa-chevron-right\" aria-hidden=\"true\"></i>\n    </span>\n    <span class=\"pl-2\"> @{ ![2](assets/2.png) MarkupString messageMarkup = new(Message.Text); <span> @messageMarkup </span> @if (Message.IsEdit)\n        { <span class=\"pl-2\">\n                <span class=\"tag is-success-dark\">edited</span>\n            </span> }\n    } </span>\n</a> @code {\n    private string _dynamicCss ![3](assets/3.png) {\n        get\n        {\n            return string.Join(\" \", GetStyles()).Trim();\n\n            IEnumerable<string> GetStyles()\n            {\n                if (!IsEditable)\n                    yield return \"is-unselectable\";\n\n                if (Message.IsGreeting)\n                    yield return \"greeting\";\n            };\n        }\n    }\n\n    [Parameter, EditorRequired]\n    public bool IsEditable { get; set; }\n\n    [Parameter, EditorRequired]\n    public ActorMessage Message { get; set; } = null!;\n\n    [Parameter, EditorRequired]\n    public EventCallback<ActorMessage> EditMessage { get; set; }\n\n    private async Task StartEditAsync() ![4](assets/4.png) {\n        if (IsEditable && EditMessage.HasDelegate)\n        {\n            await EditMessage.InvokeAsync(Message);\n        }\n    }\n}\n```", "```cs\nnamespace Learning.Blazor.Pages\n{\n    public sealed partial class Chat : IAsyncDisposable\n    {\n        private const string DefaultRoomName = \"public\";\n\n        private readonly Stack<IDisposable> _subscriptions = new(); ![1](assets/1.png)\n [Parameter]\n        public string? Room { get; set; } = DefaultRoomName;\n [Inject]\n        public SharedHubConnection HubConnection { get; set; } = null!; ![2](assets/2.png)\n\n        protected override async Task OnInitializedAsync() ![3](assets/3.png)\n        {\n            await base.OnInitializedAsync();\n\n            _subscriptions.Push(\n                HubConnection.SubscribeToMessageReceived(\n                    OnMessageReceivedAsync));\n            _subscriptions.Push(\n                HubConnection.SubscribeToUserTyping(\n                    OnUserTypingAsync));\n\n            await HubConnection.StartAsync();\n            await HubConnection.JoinChatAsync(\n                Room ?? DefaultRoomName);\n        }\n\n        protected override async Task OnAfterRenderAsync(bool firstRender) ![4](assets/4.png)\n        {\n            if (firstRender)\n            {\n                await _messageInput.FocusAsync();\n            }\n        }\n\n        async ValueTask IAsyncDisposable.DisposeAsync() ![5](assets/5.png)\n        {\n            if (HubConnection is not null)\n            {\n                await HubConnection.LeaveChatAsync(\n                    Room ?? DefaultRoomName);\n            }\n\n            while (_subscriptions.TryPop(out var disposable))\n            {\n                disposable.Dispose();\n            }\n        }\n    }\n}\n```", "```cs\nnamespace Learning.Blazor.Pages\n{\n    public sealed partial class Chat\n    {\n        private readonly Dictionary<Guid, ActorMessage> _messages = new(); ![1](assets/1.png)\n\n        private Guid? _messageId = null!;\n        private string? _message = null!;\n        private bool _isSending = false;\n        private ElementReference _messageInput;\n\n        bool OwnsMessage(string user) => User?.Identity?.Name == user;\n\n        Task OnMessageReceivedAsync(Notification<ActorMessage> message) => ![2](assets/2.png)\n            InvokeAsync(\n                async () =>\n                {\n                    _messages[message.Payload.Id] = message;\n\n                    StateHasChanged();\n\n                    await JavaScript.ScrollIntoViewAsync(\n                        $\"[id='{message.Payload.Id}']\");\n                });\n\n        Task OnKeyUpAsync(KeyboardEventArgs args) ![3](assets/3.png)\n        {\n            if (_isSending)\n            {\n                return Task.CompletedTask;\n            }\n\n            return args switch\n            {\n                { Key: \"Enter\" } => SendMessageAsync(),\n                _ => Task.CompletedTask\n            };\n        }\n\n        async Task SendMessageAsync() ![4](assets/4.png)\n        {\n            if (_isSending || string.IsNullOrWhiteSpace(_message))\n            {\n                return;\n            }\n\n            try\n            {\n                _isSending = true;\n\n                await HubConnection.PostOrUpdateMessageAsync(\n                    Room ?? DefaultRoomName, _message, _messageId);\n\n                _message = null;\n                _messageId = null;\n            }\n            finally\n            {\n                _isSending = false;\n            }\n        }\n\n        async Task OnEditMessageAsync(ActorMessage message) ![5](assets/5.png)\n        {\n            if (!OwnsMessage(message.UserName))\n            {\n                return;\n            }\n\n            _messageId = message.Id;\n            _message = message.Text;\n\n            await _messageInput.FocusAsync();\n        }\n    }\n}\n```", "```cs\nnamespace Learning.Blazor.Pages\n{\n    public sealed partial class Chat\n    {\n        private readonly HashSet<Actor> _usersTyping = new(); ![1](assets/1.png)\n        private readonly SystemTimerAlias _debounceTimer = new()\n        {\n            Interval = 750,\n            AutoReset = false\n        };\n\n        private bool _isTyping = false;\n\n        public Chat() => ![2](assets/2.png)\n            _debounceTimer.Elapsed += OnDebounceElapsed;\n\n        Task InitiateDebounceUserIsTypingAsync() ![3](assets/3.png)\n        {\n            _debounceTimer.Stop();\n            _debounceTimer.Start();\n\n            return SetIsTypingAsync(true);\n        }\n\n        Task OnUserTypingAsync(Notification<ActorAction> actorAction) => ![4](assets/4.png)\n            InvokeAsync(() =>\n            {\n                var (_, (user, isTyping)) = actorAction;\n                _ = isTyping\n                    ? _usersTyping.Add(new(user))\n                    : _usersTyping.Remove(new(user));\n\n                StateHasChanged();\n            });\n\n        Task SetIsTypingAsync(bool isTyping) ![5](assets/5.png)\n        {\n            if (_isTyping && isTyping)\n            {\n                return Task.CompletedTask;\n            }\n\n            return HubConnection.ToggleUserTypingAsync(\n                _isTyping = isTyping);\n        }\n\n        bool TryGetUsersTypingText( ![6](assets/6.png)\n [NotNullWhen(true)] out string? text)\n        {\n            var ut = _usersTyping\n                ?.Select(a => a.UserName)\n                ?.ToArray();\n\n            text = ut?.Length switch\n            {\n                0 or null => null,\n                1 => Localizer[\"UserIsTypingFormat\", ut[0]],\n                2 => Localizer[\"TwoUsersAreTypingFormat\", ut[0], ut[1]],\n                _ => Localizer[\"MultiplePeopleAreTyping\"]\n            };\n\n            return text is not null;\n        }\n\n        async void OnDebounceElapsed(object? _, ElapsedEventArgs e) => ![7](assets/7.png)\n            await SetIsTypingAsync(false);\n    }\n}\n```"]