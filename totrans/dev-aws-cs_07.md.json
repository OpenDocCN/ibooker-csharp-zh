["```cs\ndotnet lambda deploy-function SingleCSharpLambda\n```", "```cs\nusing TestCloudWatchLogPublishing;\n\nawait using (var logger = await CloudWatchLogger.CreateNew())\n{\n    logger.WriteLine(\"Developing\");\n    logger.WriteLine(\"on AWS\");\n    logger.WriteLine(\"With C#!\");\n}\n```", "```cs\nusing Amazon.CloudWatchLogs;\nusing Amazon.CloudWatchLogs.Model;\n\nnamespace TestCloudWatchLogPublishing;\n\npublic class CloudWatchLogger : IAsyncDisposable\n{\n    const string LogGroup = \"/my-app/process/test-process\"; ![1](assets/1.png)\n\n    private readonly AmazonCloudWatchLogsClient _client;\n    private readonly string _logStreamName;\n    private readonly List<InputLogEvent> _logs = new List<InputLogEvent>(); ![2](assets/2.png)\n\n    public CloudWatchLogger(AmazonCloudWatchLogsClient client, string name)\n    {\n        _client = client;\n        _logStreamName = name;\n    }\n\n    public async static Task<CloudWatchLogger> CreateNew()\n    {\n        var client = new AmazonCloudWatchLogsClient();\n\n        var logStreamName = DateTime.UtcNow.ToString(\"yyyy/MM/dd/\")\n                            + Guid.NewGuid().ToString(); ![3](assets/3.png)\n\n        await client.CreateLogStreamAsync(new CreateLogStreamRequest ![4](assets/4.png)\n        {\n            LogGroupName = LogGroup,\n            LogStreamName = logStreamName\n        });\n\n        return new CloudWatchLogger(client, logStreamName);\n    }\n\n    public void WriteLine(string message)\n    {\n        _logs.Add(new InputLogEvent\n        {\n            Message = message,\n            Timestamp = DateTime.Now\n        });\n    }\n\n    public async ValueTask DisposeAsync()\n    {\n        await _client.PutLogEventsAsync(new PutLogEventsRequest ![5](assets/5.png)\n        {\n            LogEvents = _logs,\n            LogGroupName = LogGroup,\n            LogStreamName = _logStreamName\n        });\n    }\n}\n```", "```cs\n{\n  \"Serilog\": {\n    \"Using\": [ \"Serilog.Sinks.Console\" ],\n    \"MinimumLevel\": \"Debug\",\n    \"WriteTo\": [\n      { \"Name\": \"Console\" }\n    ],\n    \"Properties\": {\n      \"Application\": \"SerilogLoggingInLambda\"\n    }\n  }\n}\n```", "```cs\nusing Amazon.CloudWatch;\nusing Amazon.CloudWatch.Model;\nusing System.Diagnostics;\n\nvar client = new AmazonCloudWatchClient();\n\nawait client.PutMetricDataAsync(new Amazon.CloudWatch.Model.PutMetricDataRequest\n{\n    Namespace = \"MyApplication\",\n    MetricData = new List<MetricDatum>\n    {\n        new MetricDatum\n        {\n            MetricName = \"ProcessCount\",\n            Value = Process.GetProcesses().Length,\n        }\n    }\n});\n```", "```cs\nAWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\nDescription: My Lambda function with X-Ray active tracing enabled\nResources:\n  MyLambdaFunction:\n    Type: AWS::Lambda::Function\n    Properties:\n      Handler: MyApp::MyApp.Function::Handler\n      Runtime: dotnet6\n      Tracing: Active\n```", "```cs\n#!/bin/bash\ncurl https://s3.us-east-2.amazonaws.com/aws-xray-assets.us-east-2/\nxray-daemon/aws-xray-daemon-3.x.rpm -o /home/ec2-user/xray.rpm\nsudo yum install -y /home/ec2-user/xray.rpm\n```", "```cs\nusing Amazon.XRay.Recorder.Core;\nusing Amazon.XRay.Recorder.Handlers.AwsSdk;\n\nAWSXRayRecorder.InitializeInstance(); ![1](assets/1.png)\n\nAWSSDKHandler.RegisterXRayForAllServices(); ![2](assets/2.png)\n\n// ... \napp.UseXRay(\"ElasticBeanstalkAppExample\"); ![3](assets/3.png)\n\napp.Run();\n```", "```cs\n[HttpPost]\npublic async Task<IActionResult> InvokedMyTracedLambda()\n{\n    AWSXRayRecorder.Instance.BeginSubsegment(\"Executing Controller Action\");\n\n    var lambdaClient = new AmazonLambdaClient(Amazon.RegionEndpoint.EUWest2);\n    await lambdaClient.InvokeAsync(new Amazon.Lambda.Model.InvokeRequest\n    {\n        FunctionName = \"TracedLambdaFunction\"\n    });\n\n    AWSXRayRecorder.Instance.EndSubsegment();\n\n    return Ok();\n}\n```", "```cs\nResources:\n  ExchangeRateApi:\n    Type: AWS::ApiGatewayV2::Api\n    Properties:\n      Name: ExchangeRateApi\n      ProtocolType: HTTP\n\n  ExternalERServiceIntegration:\n    Type: \"AWS::ApiGatewayV2::Integration\"\n    Properties:\n      ConnectionType: INTERNET\n      IntegrationType: HTTP_PROXY\n      IntegrationMethod: GET\n      IntegrationUri: https://api.example.com/exchange-rate/\n      PayloadFormatVersion: 1.0\n      ApiId: !Ref ExchangeRateApi\n      RequestParameters:\n        \"overwrite:header.apikey\": \"{{API-KEY}}\"\n\n  LatestRoute:\n    Type: 'AWS::ApiGatewayV2::Route'\n    Properties:\n      ApiId: !Ref ExchangeRateApi\n      RouteKey: 'GET /latest'\n      AuthorizationType: NONE\n      Target: !Join\n        - /\n        - - integrations\n          - !Ref ExternalERServiceIntegration\n```", "```cs\nusing System.Threading.Tasks;\nusing Amazon.ApiGatewayV2;\nusing Amazon.ApiGatewayV2.Model;\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.Serialization.SystemTextJson;\n\n[assembly: LambdaSerializer(typeof(DefaultLambdaJsonSerializer))]\n\nnamespace TriggerCircuitBreaker\n{\n    public class Function\n    {\n        public async Task FunctionHandler(object input, ILambdaContext context)\n        {\n            const string apiGatewayId = \"abcabc\";\n            const string exchangeRateRouteId = \"defdef\";\n            const string fallbackIntegrationId = \"xyzxyz\";\n\n            var apiGatewayClient = new AmazonApiGatewayV2Client();\n\n            await apiGatewayClient.UpdateRouteAsync(new UpdateRouteRequest\n            {\n                RouteId = exchangeRateRouteId,\n                ApiId = apiGatewayId,\n                Target = $\"integrations/{fallbackIntegrationId}\"\n            });\n        }\n    }\n}\n```", "```cs\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing Amazon.CloudWatch;\nusing Amazon.CloudWatch.Model;\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.Serialization.SystemTextJson;\n\n[assembly: LambdaSerializer(typeof(DefaultLambdaJsonSerializer))]\n\nnamespace ProbeExchangeRateEndpoint\n{\n    public class Function\n    {\n        public async Task FunctionHandler(object input, ILambdaContext context)\n        {\n\n            var watch = Stopwatch.StartNew();\n\n            var response = await new HttpClient()\n                          .GetAsync(\"https://external-api.com/latest-rate\");\n\n            response.EnsureSuccessStatusCode();\n\n            watch.Stop();\n\n            var cloudWatch = new AmazonCloudWatchClient();\n            await cloudWatch.PutMetricDataAsync(new PutMetricDataRequest\n            {\n                Namespace = \"CircuitBreakerExample\",\n                MetricData = new List<MetricDatum>\n                {\n                    new MetricDatum\n                    {\n                        MetricName = \"ExchangeRateProbeLatency\",\n                        Value = watch.ElapsedMilliseconds\n                    }\n                }\n            });\n\n        }\n    }\n}\n```"]