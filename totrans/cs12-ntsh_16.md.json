["```cs\nIPAddress a1 = new IPAddress (new byte[] { 101, 102, 103, 104 });\nIPAddress a2 = IPAddress.Parse (\"101.102.103.104\");\nConsole.WriteLine (a1.Equals (a2));                     // True\nConsole.WriteLine (a1.AddressFamily);                   // InterNetwork\n\nIPAddress a3 = IPAddress.Parse\n  (\"[3EA0:FFFF:198A:E4A3:4FF2:54fA:41BC:8D31]\");\nConsole.WriteLine (a3.AddressFamily);   // InterNetworkV6\n```", "```cs\nIPAddress a = IPAddress.Parse (\"101.102.103.104\");\nIPEndPoint ep = new IPEndPoint (a, 222);           // Port 222\nConsole.WriteLine (ep.ToString());                 // 101.102.103.104:222\n```", "```cs\nUri info = new Uri (\"http://www.domain.com:80/info/\");\nUri page = new Uri (\"http://www.domain.com/info/page.html\");\n\nConsole.WriteLine (info.Host);     // www.domain.com\nConsole.WriteLine (info.Port);     // 80\nConsole.WriteLine (page.Port);     // 80  (Uri knows the default HTTP port)\n\nConsole.WriteLine (info.IsBaseOf (page));         // True\nUri relative = info.MakeRelativeUri (page);\nConsole.WriteLine (relative.IsAbsoluteUri);       // False\nConsole.WriteLine (relative.ToString());          // page.html\n```", "```cs\nUri u = new Uri (\"page.html\", UriKind.Relative);\n```", "```cs\nstring html = await new HttpClient().GetStringAsync (\"http://linqpad.net\");\n```", "```cs\nvar client = new HttpClient();\nvar task1 = client.GetStringAsync (\"http://www.linqpad.net\");\nvar task2 = client.GetStringAsync (\"http://www.albahari.com\");\nConsole.WriteLine (await task1);\nConsole.WriteLine (await task2);\n```", "```cs\nvar handler = new HttpClientHandler { UseProxy = false };\nvar client = new HttpClient (handler);\n...\n```", "```cs\nvar client = new HttpClient();\n// The GetAsync method also accepts a CancellationToken.\nHttpResponseMessage response = await client.GetAsync (\"http://...\");\nresponse.EnsureSuccessStatusCode();\nstring html = await response.Content.ReadAsStringAsync();\n```", "```cs\nusing (var fileStream = File.Create (\"linqpad.html\"))\n  await response.Content.CopyToAsync (fileStream);\n```", "```cs\nvar client = new HttpClient();\nvar request = new HttpRequestMessage (HttpMethod.Get, \"http://...\");\nHttpResponseMessage response = await client.SendAsync (request);\nresponse.EnsureSuccessStatusCode();\n...\n```", "```cs\nvar client = new HttpClient (new HttpClientHandler { UseProxy = false });\nvar request = new HttpRequestMessage (\n  HttpMethod.Post, \"http://www.albahari.com/EchoPost.aspx\");\nrequest.Content = new StringContent (\"This is a test\");\nHttpResponseMessage response = await client.SendAsync (request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine (await response.Content.ReadAsStringAsync());\n```", "```cs\npublic abstract class HttpMessageHandler : IDisposable\n{\n protected internal abstract Task<HttpResponseMessage> SendAsync\n (HttpRequestMessage request, CancellationToken cancellationToken);\n\n  public void Dispose();\n  protected virtual void Dispose (bool disposing);\n}\n```", "```cs\nclass MockHandler : HttpMessageHandler\n{\n  Func <HttpRequestMessage, HttpResponseMessage> _responseGenerator;\n\n  public MockHandler\n    (Func <HttpRequestMessage, HttpResponseMessage> responseGenerator)\n  {\n    _responseGenerator = responseGenerator;\n  }\n\n  protected override Task <HttpResponseMessage> SendAsync\n    (HttpRequestMessage request, CancellationToken cancellationToken)\n  {\n    cancellationToken.ThrowIfCancellationRequested();\n    var response = _responseGenerator (request);\n    response.RequestMessage = request;\n    return Task.FromResult (response);\n  }\n}\n```", "```cs\nvar mocker = new MockHandler (request => \n  new HttpResponseMessage (HttpStatusCode.OK)\n  {\n    Content = new StringContent (\"You asked for \" + request.RequestUri)\n  });\n\nvar client = new HttpClient (mocker);    \nvar response = await client.GetAsync (\"http://www.linqpad.net\");\nstring result = await response.Content.ReadAsStringAsync();\nAssert.AreEqual (\"You asked for *http://www.linqpad.net/*\", result);\n```", "```cs\nclass LoggingHandler : DelegatingHandler \n{\n  public LoggingHandler (HttpMessageHandler nextHandler)\n  {\n     InnerHandler = nextHandler;\n  }\n\n  protected async override Task <HttpResponseMessage> SendAsync\n    (HttpRequestMessage request, CancellationToken cancellationToken)\n  {\n    Console.WriteLine (\"Requesting: \" + request.RequestUri);\n    var response = await base.SendAsync (request, cancellationToken);\n    Console.WriteLine (\"Got response: \" + response.StatusCode);\n    return response;\n  }\n}\n```", "```cs\nWebProxy p = new WebProxy (\"192.178.10.49\", 808);\np.Credentials = new NetworkCredential (\"*username*\", \"*password*\", \"*domain*\");\n\nvar handler = new HttpClientHandler { Proxy = p };\nvar client = new HttpClient (handler);\n...\n```", "```cs\nHttpClient.DefaultWebProxy = myWebProxy;\n```", "```cs\nstring username = \"myuser\";\nstring password = \"mypassword\";\n\nvar handler = new HttpClientHandler();\nhandler.Credentials = new NetworkCredential (username, password);\nvar client = new HttpClient (handler);\n...\n```", "```cs\nHTTP/1.1 401 Unauthorized\nContent-Length: 83\nContent-Type: text/html\nServer: Microsoft-IIS/6.0\nWWW-Authenticate: Negotiate\nWWW-Authenticate: NTLM\nWWW-Authenticate: Basic realm=\"exchange.somedomain.com\"\nX-Powered-By: ASP.NET\nDate: Sat, 05 Aug 2006 12:37:23 GMT\n```", "```cs\nAuthorization: Negotiate TlRMTVNTUAAABAAAt5II2gjACDArAAACAwACACgAAAAQ\nATmKAAAAD0lVDRdPUksHUq9VUA==\n```", "```cs\nCredentialCache cache = new CredentialCache();\nUri prefix = new Uri (\"http://exchange.somedomain.com\");\ncache.Add (prefix, \"Digest\",  new NetworkCredential (\"joe\", \"passwd\"));\ncache.Add (prefix, \"Negotiate\", new NetworkCredential (\"joe\", \"passwd\"));\n\nvar handler = new HttpClientHandler();\nhandler.Credentials = cache;\n...\n```", "```cs\nBasic, Digest, NTLM, Kerberos, Negotiate\n```", "```cs\ncache.Add (prefix, \"Negotiate\", CredentialCache.DefaultNetworkCredentials);\n```", "```cs\nvar client = new HttpClient();\nclient.DefaultRequestHeaders.Authorization = \n  new AuthenticationHeaderValue (\"Basic\",\n    Convert.ToBase64String (Encoding.UTF8.GetBytes (\"username:password\")));\n...\n```", "```cs\nvar client = new HttpClient (handler);\n\nclient.DefaultRequestHeaders.UserAgent.Add (\n  new ProductInfoHeaderValue (\"VisualStudio\", \"2022\"));\n\nclient.DefaultRequestHeaders.Add (\"CustomHeader\", \"VisualStudio/2022\");\n```", "```cs\n?key1=value1&key2=value2&key3=value3...\n```", "```cs\nstring requestURI = \"http://www.google.com/search?q=HttpClient&hl=fr\";\n```", "```cs\nstring search = Uri.EscapeDataString (\"(HttpClient or HttpRequestMessage)\");\nstring language = Uri.EscapeDataString (\"fr\");\nstring requestURI = \"http://www.google.com/search?q=\" + search +\n                    \"&hl=\" + language;\n```", "```cs\nhttp://www.google.com/search?q=(HttpClient%20OR%20HttpRequestMessage)&hl=fr\n```", "```cs\nstring uri = \"http://www.albahari.com/EchoPost.aspx\";\nvar client = new HttpClient();\nvar dict = new Dictionary<string,string> \n{\n    { \"Name\", \"Joe Albahari\" },\n    { \"Company\", \"O'Reilly\" }\n};\nvar values = new FormUrlEncodedContent (dict);\nvar response = await client.PostAsync (uri, values);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine (await response.Content.ReadAsStringAsync());\n```", "```cs\nvar cc = new CookieContainer();\nvar handler = new HttpClientHandler();\nhandler.CookieContainer = cc;\nvar client = new HttpClient (handler);\n...\n```", "```cs\nCookie c = new Cookie (\"PREF\",\n                       \"ID=6b10df1da493a9c4:TM=1179...\",\n                       \"/\",\n                       \".google.com\");\nfreshCookieContainer.Add (c);\n```", "```cs\nvar app = WebApplication.CreateBuilder().Build();\napp.MapGet (\"/\", () => \"Hello, world!\");\napp.Run();\n```", "```cs\nusing var server = new SimpleHttpServer();\n\n// Make a client request:\nConsole.WriteLine (await new HttpClient().GetStringAsync\n  (\"http://localhost:51111/MyApp/Request.txt\"));\n\nclass SimpleHttpServer : IDisposable\n{\n  readonly HttpListener listener = new HttpListener();\n\n  public SimpleHttpServer() => ListenAsync();  \n  async void ListenAsync()\n  {\n    listener.Prefixes.Add (\"http://localhost:51111/MyApp/\");  // Listen on\n    listener.Start();                                         // port 51111\n\n    // Await a client request:\n    HttpListenerContext context = await listener.GetContextAsync();\n\n    // Respond to the request:\n    string msg = \"You asked for: \" + context.Request.RawUrl;\n    context.Response.ContentLength64 = Encoding.UTF8.GetByteCount (msg);\n    context.Response.StatusCode = (int)HttpStatusCode.OK;\n\n    using (Stream s = context.Response.OutputStream)\n    using (StreamWriter writer = new StreamWriter (s))\n      await writer.WriteAsync (msg);\n  }\n\n  public void Dispose() => listener.Close();\n}\n\nOUTPUT: You asked for: /MyApp/Request.txt\n```", "```cs\nusing System;\nusing System.IO;\nusing System.Net;\nusing System.Text;\nusing System.Threading.Tasks;\n\nclass WebServer\n{\n  HttpListener _listener;\n  string _baseFolder;      // Your web page folder.\n\n  public WebServer (string uriPrefix, string baseFolder)\n  {\n    _listener = new HttpListener();\n    _listener.Prefixes.Add (uriPrefix);\n    _baseFolder = baseFolder;\n  }\n\n  public async void Start()\n  {\n    _listener.Start();\n    while (true)\n      try \n      {\n        var context = await _listener.GetContextAsync();\n        Task.Run (() => ProcessRequestAsync (context));\n      }\n      catch (HttpListenerException)     { break; }   // Listener stopped.\n      catch (InvalidOperationException) { break; }   // Listener stopped.\n  }\n\n  public void Stop() => _listener.Stop();\n\n  async void ProcessRequestAsync (HttpListenerContext context)\n  {\n    try\n    {\n      string filename = Path.GetFileName (context.Request.RawUrl);\n      string path = Path.Combine (_baseFolder, filename);\n      byte[] msg;\n      if (!File.Exists (path))\n      {\n        Console.WriteLine (\"Resource not found: \" + path);\n        context.Response.StatusCode = (int) HttpStatusCode.NotFound;\n        msg = Encoding.UTF8.GetBytes (\"Sorry, that page does not exist\");\n      }\n      else\n      {\n        context.Response.StatusCode = (int) HttpStatusCode.OK;\n        msg = File.ReadAllBytes (path);\n      }\n      context.Response.ContentLength64 = msg.Length;\n      using (Stream s = context.Response.OutputStream)\n        await s.WriteAsync (msg, 0, msg.Length);\n    }\n    catch (Exception ex) { Console.WriteLine (\"Request error: \" + ex); }\n  }\n}\n```", "```cs\n// Listen on port 51111, serving files in d:\\webroot:\nvar server = new WebServer (\"http://localhost:51111/\", @\"d:\\webroot\");\ntry\n{\n  server.Start();\n  Console.WriteLine (\"Server running... press Enter to stop\");\n  Console.ReadLine();\n}\nfinally { server.Stop(); }\n```", "```cs\nTask.Run (Start);\n```", "```cs\nforeach (IPAddress a in Dns.GetHostAddresses (\"albahari.com\"))\n  Console.WriteLine (a.ToString());     // 205.210.42.167\n```", "```cs\nIPHostEntry entry = Dns.GetHostEntry (\"205.210.42.167\");\nConsole.WriteLine (entry.HostName);                    // albahari.com\n```", "```cs\nIPAddress address = new IPAddress (new byte[] { 205, 210, 42, 167 });\nIPHostEntry entry = Dns.GetHostEntry (address);\nConsole.WriteLine (entry.HostName);                    // albahari.com\n```", "```cs\nforeach (IPAddress a in await Dns.GetHostAddressesAsync (\"albahari.com\"))\n  Console.WriteLine (a.ToString());\n```", "```cs\nSmtpClient client = new SmtpClient();\nclient.Host = \"mail.myserver.com\";\nclient.Send (\"from@adomain.com\", \"to@adomain.com\", \"subject\", \"body\");\n```", "```cs\nSmtpClient client = new SmtpClient();\nclient.Host = \"mail.myisp.net\";\nMailMessage mm = new MailMessage();\n\nmm.Sender = new MailAddress (\"kay@domain.com\", \"Kay\");\nmm.From   = new MailAddress (\"kay@domain.com\", \"Kay\");\nmm.To.Add  (new MailAddress (\"bob@domain.com\", \"Bob\"));\nmm.CC.Add  (new MailAddress (\"dan@domain.com\", \"Dan\"));\nmm.Subject = \"Hello!\";\nmm.Body = \"Hi there. Here's the photo!\";\nmm.IsBodyHtml = false;\nmm.Priority = MailPriority.High;\n\nAttachment a = new Attachment (\"photo.jpg\",\n                               System.Net.Mime.MediaTypeNames.Image.Jpeg);\nmm.Attachments.Add (a);\nclient.Send (mm);\n```", "```cs\nvar client = new SmtpClient (\"smtp.myisp.com\", 587)\n{\n  Credentials = new NetworkCredential (\"me@myisp.com\", \"MySecurePass\"),\n  EnableSsl = true\n};\nclient.Send (\"me@myisp.com\", \"someone@somewhere.com\", \"Subject\", \"Body\");\nConsole.WriteLine (\"Sent\");\n```", "```cs\nSmtpClient client = new SmtpClient();\nclient.DeliveryMethod = SmtpDeliveryMethod.SpecifiedPickupDirectory;\nclient.PickupDirectoryLocation = @\"c:\\mail\";\n```", "```cs\nusing (TcpClient client = new TcpClient())\n{\n  client.Connect (\"address\", port);\n  using (NetworkStream n = client.GetStream())\n  {\n    // Read and write to the network stream...\n  }\n}\n```", "```cs\nTcpListener listener = new TcpListener (*<ip address>*, port);\nlistener.Start();\n\nwhile (*keepProcessingRequests*)\n  using (TcpClient c = listener.AcceptTcpClient())\n  using (NetworkStream n = c.GetStream())\n  {\n    // Read and write to the network stream...\n  }\n\nlistener.Stop();\n```", "```cs\nusing System;\nusing System.IO;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Threading;\n\nnew Thread (Server).Start();       // Run server method concurrently.\nThread.Sleep (500);                // Give server time to start.\nClient();\n\nvoid Client()\n{\n  using (TcpClient client = new TcpClient (\"localhost\", 51111))\n  using (NetworkStream n = client.GetStream())\n  {\n    BinaryWriter w = new BinaryWriter (n);\n    w.Write (\"Hello\");\n    w.Flush();\n    Console.WriteLine (new BinaryReader (n).ReadString());\n  }\n}\n\nvoid Server()     // Handles a single client request, then exits.\n{\n  TcpListener listener = new TcpListener (IPAddress.Any, 51111);\n  listener.Start();\n  using (TcpClient c = listener.AcceptTcpClient())\n  using (NetworkStream n = c.GetStream())\n  {\n    string msg = new BinaryReader (n).ReadString();\n    BinaryWriter w = new BinaryWriter (n);\n    w.Write (msg + \" right back!\");\n    w.Flush();                      // Must call Flush because we're not\n  }                                 // disposing the writer.\n  listener.Stop();\n}\n\n// OUTPUT: Hello right back!\n```", "```cs\nasync void RunServerAsync ()\n{\n  var listener = new TcpListener (IPAddress.Any, 51111);\n  listener.Start ();\n  try\n  {\n    while (true)\n      Accept (await listener.AcceptTcpClientAsync ());\n  }\n  finally { listener.Stop(); }\n}\n\nasync Task Accept (TcpClient client)\n{\n  await Task.Yield ();\n  try\n  {\n    using (client)\n    using (NetworkStream n = client.GetStream ())\n    {\n      byte[] data = new byte [5000];\n\n      int bytesRead = 0; int chunkSize = 1;\n      while (bytesRead < data.Length && chunkSize > 0)\n        bytesRead += chunkSize =\n          await n.ReadAsync (data, bytesRead, data.Length - bytesRead);\n\n      Array.Reverse (data);   // Reverse the byte sequence\n      await n.WriteAsync (data, 0, data.Length);\n    }\n  }\n  catch (Exception ex) { Console.WriteLine (ex.Message); }\n}\n```", "```cs\nstring ReadLine (Stream s)\n{\n  List<byte> lineBuffer = new List<byte>();\n  while (true)\n  {\n    int b = s.ReadByte();\n    if (b == 10 || b < 0) break;\n    if (b != 13) lineBuffer.Add ((byte)b);\n  }\n  return Encoding.UTF8.GetString (lineBuffer.ToArray());\n}\n```", "```cs\nvoid SendCommand (Stream stream, string line)\n{\n  byte[] data = Encoding.UTF8.GetBytes (line + \"\\r\\n\");\n  stream.Write (data, 0, data.Length);\n  string response = ReadLine (stream);\n  if (!response.StartsWith (\"+OK\"))\n    throw new Exception (\"POP Error: \" + response);\n}\n```", "```cs\nusing (TcpClient client = new TcpClient (\"*mail.isp.com*\", 110))\nusing (NetworkStream n = client.GetStream())\n{\n  ReadLine (n);                             // Read the welcome message.\n  SendCommand (n, \"USER username\");\n  SendCommand (n, \"PASS password\");\n  SendCommand (n, \"LIST\");                  // Retrieve message IDs\n  List<int> messageIDs = new List<int>();\n  while (true)\n  {\n    string line = ReadLine (n);             // e.g.,  \"1 1876\"\n    if (line == \".\") break;\n    messageIDs.Add (int.Parse (line.Split (' ')[0] ));   // Message ID\n  }\n\n  foreach (int id in messageIDs)         // Retrieve each message.\n  {\n    SendCommand (n, \"RETR \" + id);\n    string randomFile = Guid.NewGuid().ToString() + \".eml\";\n    using (StreamWriter writer = File.CreateText (randomFile))\n      while (true)\n      {\n        string line = ReadLine (n);      // Read next line of message.\n        if (line == \".\") break;          // Single dot = end of message.\n        if (line == \"..\") line = \".\";    // \"Escape out\" double dot.\n        writer.WriteLine (line);         // Write to output file.\n      }\n    SendCommand (n, \"DELE \" + id);       // Delete message off server.\n  }\n  SendCommand (n, \"QUIT\");\n}\n```"]