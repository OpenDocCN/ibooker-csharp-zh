["```cs\nstring[] names = { \"Tom\", \"Dick\", \"Harry\", \"Mary\", \"Jay\" };\n```", "```cs\nvar dbContext = new NutshellContext();\n```", "```cs\npublic class NutshellContext : DbContext\n{\n  public DbSet<Customer> Customers { get; set; }\n  public DbSet<Purchase> Purchases { get; set; }\n\n  protected override void OnModelCreating(ModelBuilder modelBuilder)\n  {\n    modelBuilder.Entity<Customer>(entity =>\n    {\n      entity.ToTable(\"Customer\");\n      entity.Property(e => e.Name).IsRequired();  // Column is not nullable\n    });\n    modelBuilder.Entity<Purchase>(entity =>\n    {\n      entity.ToTable(\"Purchase\");\n      entity.Property(e => e.Date).IsRequired();     \n      entity.Property(e => e.Description).IsRequired();     \n    });\n  }\n}\n\npublic class Customer\n{\n  public int ID { get; set; }\n  public string Name { get; set; }\n\n  public virtual List<Purchase> Purchases { get; set; }\n    = new List<Purchase>();\n}\n\npublic class Purchase\n{        \n  public int ID { get; set; }\n  public int? CustomerID { get; set; }\n  public DateTime Date { get; set; }\n  public string Description { get; set; }\n  public decimal Price { get; set; }\n\n  public virtual Customer Customer { get; set; }\n}\n```", "```cs\nCREATE TABLE Customer (\n  ID int NOT NULL IDENTITY PRIMARY KEY,\n  Name nvarchar(30) NOT NULL\n)\n\nCREATE TABLE Purchase (\n  ID int NOT NULL IDENTITY PRIMARY KEY,\n  CustomerID int NOT NULL REFERENCES Customer(ID),\n  Date datetime NOT NULL,\n  Description nvarchar(30) NOT NULL,\n  Price decimal NOT NULL\n)\n```", "```cs\nWhere, Take, TakeLast, TakeWhile, Skip, SkipLast, SkipWhile, \nDistinct, DistinctBy\n```", "```cs\nSelect, SelectMany\n```", "```cs\nJoin, GroupJoin, Zip\n```", "```cs\nOrderBy, OrderByDescending, ThenBy, ThenByDescending, Reverse\n```", "```cs\nGroupBy, Chunk\n```", "```cs\nConcat, Union, UnionBy, Intersect, IntersectBy, Except, ExceptBy\n```", "```cs\nOfType, Cast\n```", "```cs\nToArray, ToList, ToDictionary, ToLookup, AsEnumerable, AsQueryable\n```", "```cs\nFirst, FirstOrDefault, Last, LastOrDefault, Single, SingleOrDefault,\nElementAt, ElementAtOrDefault, MinBy, MaxBy, DefaultIfEmpty\n```", "```cs\nAggregate, Average, Count, LongCount, Sum, Max, Min\n```", "```cs\nAll, Any, Contains, SequenceEqual\n```", "```cs\nEmpty, Range, Repeat\n```", "```cs\nwhere *bool-expression*\n```", "```cs\npublic static IEnumerable<TSource> Where<TSource>\n  (this IEnumerable<TSource> source, Func <TSource, bool> predicate)\n{\n  foreach (TSource element in source)\n    if (predicate (element))\n      yield return element;\n}\n```", "```cs\nstring[] names = { \"Tom\", \"Dick\", \"Harry\", \"Mary\", \"Jay\" };\nIEnumerable<string> query = names.Where (name => name.EndsWith (\"y\"));\n\n*// Harry*\n*// Mary*\n*// Jay*\n```", "```cs\nIEnumerable<string> query = from n in names\n                            where n.EndsWith (\"y\")\n                            select n;\n```", "```cs\nfrom n in names\nwhere n.Length > 3\nlet u = n.ToUpper()\nwhere u.EndsWith (\"Y\")\nselect u;           \n\n*// HARRY*\n*// MARY*\n```", "```cs\nIEnumerable<string> query = names.Where ((n, i) => i % 2 == 0);\n\n*// Tom*\n*// Harry*\n*// Jay*\n```", "```cs\nContains, StartsWith, EndsWith\n```", "```cs\n... where EF.Functions.Like (c.Description, \"%\" + c.Name + \"%\")\n```", "```cs\ndbContext.Purchases.Where (p => p.Description.CompareTo (\"C\") < 0)\n```", "```cs\nstring[] chosenOnes = { \"Tom\", \"Jay\" };\n\nfrom c in dbContext.Customers\nwhere chosenOnes.Contains (c.Name)\n...\n```", "```cs\nWHERE customer.Name IN (\"Tom\", \"Jay\")\n```", "```cs\nIQueryable<Book> query = dbContext.Books\n  .Where   (b => b.Title.Contains (\"mercury\"))\n  .OrderBy (b => b.Title)\n  .Take (20);\n```", "```cs\nIQueryable<Book> query = dbContext.Books\n  .Where   (b => b.Title.Contains (\"mercury\"))\n  .OrderBy (b => b.Title)\n  .Skip (20).Take (20);\n```", "```cs\nint[] numbers      = { 3, 5, 2, 234, 4, 1 };\nvar takeWhileSmall = numbers.TakeWhile (n => n < 100);   // { 3, 5, 2 }\n```", "```cs\nint[] numbers      = { 3, 5, 2, 234, 4, 1 };\nvar skipWhileSmall = numbers.SkipWhile (n => n < 100);   // { 234, 4, 1 }\n```", "```cs\nchar[] distinctLetters = \"HelloWorld\".Distinct().ToArray();\nstring s = new string (distinctLetters);                     // HeloWrd\n```", "```cs\nnew[] { 1.0, 1.1, 2.0, 2.1, 3.0, 3.1 }.DistinctBy (n => Math.Round (n, 0))\n```", "```cs\nselect *projection-expression*\n```", "```cs\npublic static IEnumerable<TResult> Select<TSource,TResult>\n  (this IEnumerable<TSource> source, Func<TSource,TResult> selector)\n{\n  foreach (TSource element in source)\n    yield return selector (element);\n}\n```", "```cs\nIEnumerable<string> query = from f in FontFamily.Families\n                            select f.Name;\n\nforeach (string name in query) Console.WriteLine (name);\n```", "```cs\nIEnumerable<string> query = FontFamily.Families.Select (f => f.Name);\n```", "```cs\nvar query =\n  from f in FontFamily.Families\n  select new { f.Name, LineSpacing = f.GetLineSpacing (FontStyle.Bold) };\n```", "```cs\nIEnumerable<FontFamily> query =\n  from f in FontFamily.Families\n  where f.IsStyleAvailable (FontStyle.Strikeout)\n  select f;\n\nforeach (FontFamily ff in query) Console.WriteLine (ff.Name);\n```", "```cs\nstring[] names = { \"Tom\", \"Dick\", \"Harry\", \"Mary\", \"Jay\" };\n\nIEnumerable<string> query = names\n  .Select ((s,i) => i + \"=\" + s);     //  { \"0=Tom\", \"1=Dick\", ... }\n```", "```cs\nstring tempPath = Path.GetTempPath();\nDirectoryInfo[] dirs = new DirectoryInfo (tempPath).GetDirectories();\n\nvar query =\n  from d in dirs\n  where (d.Attributes & FileAttributes.System) == 0\n  select new\n  {\n    DirectoryName = d.FullName,\n    Created = d.CreationTime,\n\n    Files = from f in d.GetFiles()\n where (f.Attributes & FileAttributes.Hidden) == 0\n select new { FileName = f.Name, f.Length, }\n  };\n\nforeach (var dirFiles in query)\n{\n  Console.WriteLine (\"Directory: \" + dirFiles.DirectoryName);\n  foreach (var file in dirFiles.Files)\n    Console.WriteLine (\"  \" + file.FileName + \" Len: \" + file.Length);\n}\n```", "```cs\nvar query =\n  from c in dbContext.Customers\n  select new {\n               c.Name,\n Purchases = (from p in dbContext.Purchases\n                           where p.CustomerID == c.ID && p.Price > 1000\n select new { p.Description, p.Price })\n .ToList()\n             };\n\nforeach (var namePurchases in query)\n{\n  Console.WriteLine (\"Customer: \" + namePurchases.Name);\n  foreach (var purchaseDetail in namePurchases.Purchases)\n    Console.WriteLine (\"  - $$$: \" + purchaseDetail.Price);\n}\n```", "```cs\nfrom c in dbContext.Customers\nselect new\n{\n  c.Name,\n  Purchases = from p in c.Purchases    // Purchases is List<Purchase>\n              where p.Price > 1000\n              select new { p.Description, p.Price }\n};\n```", "```cs\nfrom c in dbContext.Customers\nwhere c.Purchases.Any (p => p.Price > 1000)\nselect new {\n             c.Name,\n             Purchases = from p in c.Purchases\n                         where p.Price > 1000\n                         select new { p.Description, p.Price }\n           };\n```", "```cs\nfrom c in dbContext.Customers\nlet highValueP = from p in c.Purchases\n where p.Price > 1000\n select new { p.Description, p.Price }\nwhere highValueP.Any()\nselect new { c.Name, Purchases = highValueP };\n```", "```cs\n...\nwhere highValueP.Count() >= 2\nselect new { c.Name, Purchases = highValueP };\n```", "```cs\nIQueryable<CustomerEntity> query =\n  from c in dbContext.Customers\n  select new CustomerEntity\n  {\n    Name = c.Name,\n    Purchases =\n      (from p in c.Purchases\n       where p.Price > 1000\n select new PurchaseEntity {\n Description = p.Description,\n Value = p.Price\n }\n      ).ToList()\n  };\n\n// Force query execution, converting output to a more convenient List:\nList<CustomerEntity> result = query.ToList();\n```", "```cs\nfrom *identifier1* in *enumerable-expression1*\nfrom *identifier2* in *enumerable-expression2*\n...\n```", "```cs\npublic static IEnumerable<TResult> SelectMany<TSource,TResult>\n  (IEnumerable<TSource> source,\n   Func <TSource,IEnumerable<TResult>> selector)\n{\n  foreach (TSource element in source)\n    foreach (TResult subElement in selector (element))\n      yield return subElement;\n}\n```", "```cs\nstring[] fullNames = { \"Anne Williams\", \"John Fred Smith\", \"Sue Green\" };\n```", "```cs\n\"Anne\", \"Williams\", \"John\", \"Fred\", \"Smith\", \"Sue\", Green\"\n```", "```cs\nstring testInputElement = \"Anne Williams\";\nstring[] childSequence  = testInputElement.Split();\n\n// childSequence is { \"Anne\", \"Williams\" };\n```", "```cs\nIEnumerable<string> query = fullNames.SelectMany (name => name.Split());\n\nforeach (string name in query)\n  Console.Write (name + \"|\");  // Anne|Williams|John|Fred|Smith|Sue|Green|\n```", "```cs\nIEnumerable<string[]> query =\n  fullNames.Select (name => name.Split());\n\nforeach (string[] stringArray in query)\n  foreach (string name in stringArray)\n    Console.Write (name + \"|\");\n```", "```cs\nIEnumerable<string> query =\n  from fullName in fullNames\n  from name in fullName.Split()     // Translates to SelectMany\n  select name;\n```", "```cs\nIEnumerable<string> query =\n  from fullName in fullNames\n  from name in fullName.Split()\n  select name + \" came from \" + fullName;\n\n*Anne came from Anne Williams*\n*Williams came from Anne Williams*\n*John came from John Fred Smith*\n...\n```", "```cs\nfrom fullName in fullNames\nfrom name in fullName.Split()\norderby fullName, name\nselect name + \" came from \" + fullName;\n```", "```cs\nfrom fullName in fullNames\nfrom x in fullName.Split().Select (name => new { name, fullName } )\norderby x.fullName, x.name\nselect x.name + \" came from \" + x.fullName;\n```", "```cs\nIEnumerable<string> query = fullNames\n  .SelectMany (fName => fName.Split()\n                             .Select (name => new { name, fName } ))\n  .OrderBy (x => x.fName)\n  .ThenBy  (x => x.name)\n  .Select  (x => x.name + \" came from \" + x.fName);\n```", "```cs\nfrom fullName in fullNames\nfrom name in fullName.Split()\n```", "```cs\nIEnumerable<string> query = from c in dbContext.Customers\n                            from p in c.Purchases\n                            select c.Name + \" bought a \" + p.Description;\n\n*Tom bought a Bike*\n*Tom bought a Holiday*\n*Dick bought a Phone*\n*Harry bought a Car*\n*...*\n```", "```cs\nint[] numbers = { 1, 2, 3 };  string[] letters = { \"a\", \"b\" };\n\nIEnumerable<string> query = from n in numbers\n                            from l in letters\n                            select n.ToString() + l;\n\n// RESULT: { \"1a\", \"1b\", \"2a\", \"2b\", \"3a\", \"3b\" }\n```", "```cs\nstring[] players = { \"Tom\", \"Jay\", \"Mary\" };\n\nIEnumerable<string> query = from name1 in players\n                            from name2 in players\n                            select name1 + \" vs \" + name2;\n\n//RESULT: { \"Tom vs Tom\", \"Tom vs Jay\", \"Tom vs Mary\",\n//          \"Jay vs Tom\", \"Jay vs Jay\", \"Jay vs Mary\",\n//          \"Mary vs Tom\", \"Mary vs \"Jay\", \"Mary vs Mary\" }\n```", "```cs\nIEnumerable<string> query = from name1 in players\n                            from name2 in players\n                            where name1.CompareTo (name2) < 0\n                            orderby name1, name2\n                            select name1 + \" vs \" + name2;\n\n//RESULT: { \"Jay vs Mary\", \"Jay vs Tom\", \"Mary vs Tom\" }\n```", "```cs\nvar query = from c in dbContext.Customers\n            from p in dbContext.Purchases\n            select c.Name + \" might have bought a \" + p.Description;\n```", "```cs\nvar query = from c in dbContext.Customers\n            from p in dbContext.Purchases\n            where c.ID == p.CustomerID\n            select c.Name + \" bought a \" + p.Description;\n```", "```cs\nfrom c in dbContext.Customers\nfrom p in c.Purchases\nselect new { c.Name, p.Description };\n```", "```cs\nfrom c in dbContext.Customers\nwhere c.Name.StartsWith (\"T\")\nfrom p in c.Purchases\nselect new { c.Name, p.Description };\n```", "```cs\nfrom c in dbContext.Customers\nfrom p in c.Purchases\nfrom pi in p.PurchaseItems\nselect new { c.Name, p.Description, pi.Detail };\n```", "```cs\nfrom c in dbContext.Customers\nselect new { Name = c.Name, SalesPerson = c.SalesPerson.Name };\n```", "```cs\nfrom c in dbContext.Customers\nselect new {\n             c.Name,\n             Purchases = from p in c.Purchases\n                         where p.Price > 1000\n                         select new { p.Description, p.Price }\n           };\n```", "```cs\nfrom c in dbContext.Customers\nfrom p in c.Purchases\nwhere p.Price > 1000\nselect new { c.Name, p.Description, p.Price };\n```", "```cs\nfrom c in dbContext.Customers\nfrom p in c.Purchases.DefaultIfEmpty()\nselect new { c.Name, p.Description, Price = (decimal?) p.Price };\n```", "```cs\nfrom c in dbContext.Customers\nfrom p in c.Purchases.DefaultIfEmpty()\nselect new {\n             c.Name,\n             Descript = p == null ? null : p.Description,\n             Price = p == null ? (decimal?) null : p.Price\n           };\n```", "```cs\nfrom c in dbContext.Customers\nfrom p in c.Purchases.DefaultIfEmpty()\nwhere p.Price > 1000...\n```", "```cs\nfrom c in dbContext.Customers\nfrom p in c.Purchases.Where (p => p.Price > 1000).DefaultIfEmpty()\nselect new {\n             c.Name,\n             Descript = p == null ? null : p.Description,\n             Price = p == null ? (decimal?) null : p.Price\n           };\n```", "```cs\nfrom *outer-var* in *outer-enumerable*\njoin *inner-var* in *inner-enumerable* on *outer-key-expr* equals *inner-key-expr*\n [ into *identifier* ]\n```", "```cs\nIQueryable<string> query =\n  from c in dbContext.Customers\n  join p in dbContext.Purchases on c.ID equals p.CustomerID\n  select c.Name + \" bought a \" + p.Description;\n```", "```cs\n*Tom bought a Bike*\n*Tom bought a Holiday*\n*Dick bought a Phone*\n*Harry bought a Car*\n```", "```cs\nCustomer[] customers = dbContext.Customers.ToArray();\nPurchase[] purchases = dbContext.Purchases.ToArray();\nvar slowQuery = from c in customers\n                from p in purchases where c.ID == p.CustomerID\n                select c.Name + \" bought a \" + p.Description;\n\nvar fastQuery = from c in customers\n                join p in purchases on c.ID equals p.CustomerID\n                select c.Name + \" bought a \" + p.Description;\n```", "```cs\njoin *inner-var* in *inner-sequence* on *outer-key-expr* equals *inner-key-expr*\n```", "```cs\nfrom p in purchases                                // p is now outer\njoin c in customers on p.CustomerID equals c.ID    // c is now inner\n...\n```", "```cs\nfrom c in customers\njoin p in purchases on c.ID equals p.CustomerID           // first join\njoin pi in purchaseItems on p.ID equals pi.PurchaseID     // second join\n...\n```", "```cs\nforeach (Customer c in customers)\n  foreach (Purchase p in purchases)\n    if (c.ID == p.CustomerID)\n      foreach (PurchaseItem pi in purchaseItems)\n        if (p.ID == pi.PurchaseID)\n          Console.WriteLine (c.Name + \",\" + p.Price + \",\" + pi.Detail);\n```", "```cs\nfrom x in sequenceX\njoin y in sequenceY on new { K1 = x.Prop1, K2 = x.Prop2 }\n                equals new { K1 = y.Prop3, K2 = y.Prop4 }\n...\n```", "```cs\n from c in customers\n join p in purchases on c.ID equals p.CustomerID\n select new { c.Name, p.Description, p.Price };\n```", "```cs\n customers.Join (                // outer collection\n       purchases,                // inner collection\n       c => c.ID,                // outer key selector\n       p => p.CustomerID,        // inner key selector\n       (c, p) => new\n          { c.Name, p.Description, p.Price }    // result selector\n );\n```", "```cs\nfrom c in customers\njoin p in purchases on c.ID equals p.CustomerID\norderby p.Price\nselect c.Name + \" bought a \" + p.Description;\n```", "```cs\ncustomers.Join (                  // outer collection\n      purchases,                  // inner collection\n      c => c.ID,                  // outer key selector\n      p => p.CustomerID,          // inner key selector\n      (c, p) => new { c, p } )    // result selector\n  .OrderBy (x => x.p.Price)\n  .Select  (x => x.c.Name + \" bought a \" + x.p.Description);\n```", "```cs\nCustomer[] customers = dbContext.Customers.ToArray();\nPurchase[] purchases = dbContext.Purchases.ToArray();\n\nIEnumerable<IEnumerable<Purchase>> query =\n  from c in customers\n  join p in purchases on c.ID equals p.CustomerID\n  into custPurchases\n  select custPurchases;   // custPurchases is a sequence\n```", "```cs\nforeach (IEnumerable<Purchase> purchaseSequence in query)\n  foreach (Purchase p in purchaseSequence)\n    Console.WriteLine (p.Description);\n```", "```cs\nfrom c in customers\njoin p in purchases on c.ID equals p.CustomerID\ninto custPurchases\nselect new { CustName = c.Name, custPurchases };\n```", "```cs\nfrom c in customers\nselect new\n{\n  CustName = c.Name,\n  custPurchases = purchases.Where (p => c.ID == p.CustomerID)\n};\n```", "```cs\nfrom c in customers join p in purchases on c.ID equals p.CustomerID\ninto custPurchases\nwhere custPurchases.Any()\nselect ...\n```", "```cs\nfrom c in customers\njoin p in purchases.Where (p2 => p2.Price > 1000)\n  on c.ID equals p.CustomerID\ninto custPurchases ...\n```", "```cs\nfrom c in customers\njoin p in purchases on c.ID equals p.CustomerID into custPurchases\nfrom cp in custPurchases.DefaultIfEmpty()\nselect new\n{\n  CustName = c.Name,\n  Price = cp == null ? (decimal?) null : cp.Price\n};\n```", "```cs\npublic interface ILookup<TKey,TElement> :\n   IEnumerable<IGrouping<TKey,TElement>>, IEnumerable\n{\n  int Count { get; }\n  bool Contains (TKey key);\n  IEnumerable<TElement> this [TKey key] { get; }\n}\n```", "```cs\nILookup<int?,Purchase> purchLookup =\n  purchases.ToLookup (p => p.CustomerID, p => p);\n```", "```cs\nforeach (Purchase p in purchLookup [1])\n  Console.WriteLine (p.Description);\n```", "```cs\nfrom c in customers\nfrom p in purchLookup [c.ID]\nselect new { c.Name, p.Description, p.Price };\n\nTom Bike 500\nTom Holiday 2000\nDick Bike 600\nDick Phone 300\n...\n```", "```cs\nfrom c in customers\nfrom p in purchLookup [c.ID].DefaultIfEmpty()\n select new {\n              c.Name,\n Descript = p == null ? null : p.Description,\n Price = p == null ? (decimal?) null : p.Price\n            };\n```", "```cs\nfrom c in customers\nselect new {\n             CustName = c.Name,\n             CustPurchases = purchLookup [c.ID]\n           };\n```", "```cs\npublic static IEnumerable <TResult> Join\n                                    <TOuter,TInner,TKey,TResult> (\n  this IEnumerable <TOuter>     outer,\n  IEnumerable <TInner>          inner,\n  Func <TOuter,TKey>            outerKeySelector,\n  Func <TInner,TKey>            innerKeySelector,\n  Func <TOuter,TInner,TResult>  resultSelector)\n{\n  ILookup <TKey, TInner> lookup = inner.ToLookup (innerKeySelector);\n  return\n    from outerItem in outer\n    from innerItem in lookup [outerKeySelector (outerItem)]\n    select resultSelector (outerItem, innerItem);\n}\n```", "```cs\npublic static IEnumerable <TResult> GroupJoin\n                                    <TOuter,TInner,TKey,TResult> (\n  this IEnumerable <TOuter>     outer,\n  IEnumerable <TInner>          inner,\n  Func <TOuter,TKey>            outerKeySelector,\n  Func <TInner,TKey>            innerKeySelector,\n  Func <TOuter,IEnumerable<TInner>,TResult>  resultSelector)\n{\n  ILookup <TKey, TInner> lookup = inner.ToLookup (innerKeySelector);\n  return\n    from outerItem in outer\n    select resultSelector\n     (outerItem, lookup [outerKeySelector (outerItem)]);\n}\n```", "```cs\nint[] numbers = { 3, 5, 7 };\nstring[] words = { \"three\", \"five\", \"seven\", \"ignored\" };\nIEnumerable<string> zip = numbers.Zip (words, (n, w) => n + \"=\" + w);\n```", "```cs\n*3=three*\n*5=five*\n*7=seven*\n```", "```cs\norderby *expression1* [*descending*] [, *expression2* [descending] *...* ]\n```", "```cs\nIEnumerable<string> query = names.OrderBy (s => s);\n```", "```cs\nIEnumerable<string> query = names.OrderBy (s => s.Length);\n\n// Result: { \"Jay\", \"Tom\", \"Mary\", \"Dick\", \"Harry\" };\n```", "```cs\nIEnumerable<string> query = names.OrderBy (s => s.Length).ThenBy (s => s);\n\n// Result: { \"Jay\", \"Tom\", \"Dick\", \"Mary\", \"Harry\" };\n```", "```cs\nnames.OrderBy (s => s.Length).ThenBy (s => s[1]).ThenBy (s => s[0]);\n```", "```cs\nfrom s in names\norderby s.Length, s[1], s[0]\nselect s;\n```", "```cs\nfrom s in names\norderby s.Length\norderby s[1]\n...\n```", "```cs\ndbContext.Purchases.OrderByDescending (p => p.Price)\n                     .ThenBy (p => p.Description);\n```", "```cs\nfrom p in dbContext.Purchases\norderby p.Price descending, p.Description\nselect p;\n```", "```cs\nnames.OrderBy (n => n, StringComparer.CurrentCultureIgnoreCase);\n```", "```cs\nfrom p in dbContext.Purchases\norderby p.Description.ToUpper()\nselect p;\n```", "```cs\nIOrderedEnumerable<string> query1 = names.OrderBy (s => s.Length);\nIOrderedEnumerable<string> query2 = query1.ThenBy (s => s);\n```", "```cs\nvar query1 = names.OrderBy (s => s.Length);\nvar query2 = query1.ThenBy (s => s);\n```", "```cs\nvar query = names.OrderBy (s => s.Length);\nquery = query.Where (n => n.Length > 3);       // Compile-time error\n```", "```cs\nvar query = names.OrderBy (s => s.Length).AsEnumerable();\nquery = query.Where (n => n.Length > 3);                   // OK\n```", "```cs\ngroup *element-expression* by *key-expression*\n```", "```cs\nstring[] files = Directory.GetFiles (Path.GetTempPath());\n\nIEnumerable<IGrouping<string,string>> query =\n  files.GroupBy (file => Path.GetExtension (file));\n```", "```cs\nvar query = files.GroupBy (file => Path.GetExtension (file));\n```", "```cs\nforeach (IGrouping<string,string> grouping in query)\n{\n  Console.WriteLine (\"Extension: \" + grouping.Key);\n  foreach (string filename in grouping)\n    Console.WriteLine (\"   - \" + filename);\n}\n\n*Extension: .pdf*\n *-- chapter03.pdf*\n *-- chapter04.pdf*\n*Extension: .doc*\n *-- todo.doc*\n *-- menu.doc*\n *-- Copy of menu.doc*\n*...*\n```", "```cs\npublic interface IGrouping <TKey,TElement> : IEnumerable<TElement>,\n                                             IEnumerable\n{\n  TKey Key { get; }    // Key applies to the subsequence as a whole\n}\n```", "```cs\nfiles.GroupBy (file => Path.GetExtension (file), file => file.ToUpper());\n```", "```cs\nExtension: .pdf\n  -- CHAPTER03.PDF\n  -- CHAPTER04.PDF\nExtension: .doc\n  -- TODO.DOC\n```", "```cs\nfiles.GroupBy (file => Path.GetExtension (file), file => file.ToUpper())\n     .OrderBy (grouping => grouping.Key);\n```", "```cs\ngroup *element-expr* by *key-expr*\n```", "```cs\nfrom file in files\ngroup file.ToUpper() by Path.GetExtension (file);\n```", "```cs\nfrom file in files\ngroup file.ToUpper() by Path.GetExtension (file) into grouping\norderby grouping.Key\nselect grouping;\n```", "```cs\nfrom file in files\ngroup file.ToUpper() by Path.GetExtension (file) into grouping\nwhere grouping.Count() >= 5\nselect grouping;\n```", "```cs\nstring[] votes = { \"Dogs\", \"Cats\", \"Cats\", \"Dogs\", \"Dogs\" };\n\nIEnumerable<string> query = from vote in votes\n                            group vote by vote into g\n                            orderby g.Count() descending\n                            select g.Key;\n\nstring winner = query.First();    // Dogs\n```", "```cs\nfrom c in dbContext.Customers\nwhere c.Purchases.Count >= 2\nselect c.Name + \" has made \" + c.Purchases.Count + \" purchases\";\n```", "```cs\nfrom p in dbContext.Purchases\ngroup p.Price by p.Date.Year into salesByYear\nselect new {\n             Year       = salesByYear.Key,\n             TotalValue = salesByYear.Sum()\n           };\n```", "```cs\nfrom p in dbContext.Purchases\ngroup p by p.Date.Year\nDate.Year\n```", "```cs\nfrom n in names\ngroup n by new { FirstLetter = n[0], Length = n.Length };\n```", "```cs\ngroup n by n*.ToUpper()*\n```", "```cs\nforeach (int[] chunk in new[] { 1, 2, 3, 4, 5, 6, 7, 8 }.Chunk (3))\n  Console.WriteLine (string.Join (\", \", chunk));\n```", "```cs\n1, 2, 3\n4, 5, 6\n7, 8\n```", "```cs\nint[] seq1 = { 1, 2, 3 }, seq2 = { 3, 4, 5 };\n\nIEnumerable<int>\n  concat = seq1.Concat (seq2),    //  { 1, 2, 3, 3, 4, 5 }\n  union  = seq1.Union  (seq2);    //  { 1, 2, 3, 4, 5 }\n```", "```cs\nMethodInfo[] methods = typeof (string).GetMethods();\nPropertyInfo[] props = typeof (string).GetProperties();\nIEnumerable<MemberInfo> both = methods.Concat<MemberInfo> (props);\n```", "```cs\nvar methods = typeof (string).GetMethods().Where (m => !m.IsSpecialName);\nvar props = typeof (string).GetProperties();\nvar both = methods.Concat<MemberInfo> (props);\n```", "```cs\nstring[] seq1 = { \"A\", \"b\", \"C\" };\nstring[] seq2 = { \"a\", \"B\", \"c\" };\nvar union = seq1.UnionBy (seq2, x => x.ToUpperInvariant());\n// union is { \"A\", \"b\", \"C\" }\n```", "```cs\nvar union = seq1.Union (seq2, StringComparer.InvariantCultureIgnoreCase);\n```", "```cs\nint[] seq1 = { 1, 2, 3 }, seq2 = { 3, 4, 5 };\n\nIEnumerable<int>\n  commonality = seq1.Intersect (seq2),    //  { 3 }\n  difference1 = seq1.Except    (seq2),    //  { 1, 2 }\n  difference2 = seq2.Except    (seq1);    //  { 4, 5 }\n```", "```cs\nSELECT number FROM numbers1Table\nWHERE number NOT IN (SELECT number FROM numbers2Table)\n```", "```cs\nArrayList classicList = new ArrayList();          // in System.Collections\nclassicList.AddRange ( new int[] { 3, 4, 5 } );\nIEnumerable<int> sequence1 = classicList.Cast<int>();\n```", "```cs\nDateTime offender = DateTime.Now;\nclassicList.Add (offender);\nIEnumerable<int>\n  sequence2 = classicList.OfType<int>(), // OK - ignores offending DateTime\n  sequence3 = classicList.Cast<int>();   // Throws exception\n```", "```cs\npublic static IEnumerable<TSource> OfType <TSource> (IEnumerable source)\n{\n  foreach (object element in source)\n    if (element is TSource)\n      yield return (TSource)element;\n}\n```", "```cs\npublic static IEnumerable<TSource> Cast <TSource> (IEnumerable source)\n{\n  foreach (object element in source)\n    yield return (TSource)element;\n}\n```", "```cs\nint i = 3;\nlong l = i;         // Implicit *numeric conversion* int->long\nint i2 = (int) l;   // Explicit *numeric conversion* long->int\n```", "```cs\nint[] integers = { 1, 2, 3 };\n\nIEnumerable<long> test1 = integers.OfType<long>();\nIEnumerable<long> test2 = integers.Cast<long>();\n```", "```cs\n(element is long)\n```", "```cs\nint value = 123;\nobject element = value;\nlong result = (long) element;  // exception\n```", "```cs\nIEnumerable<long> castLong = integers.Select (s => (long) s);\n```", "```cs\nfrom TreeNode node in myTreeView.Nodes\n...\n```", "```cs\nint[] numbers  = { 1, 2, 3, 4, 5 };\nint first      = numbers.First();                      // 1\nint last       = numbers.Last();                       // 5\nint firstEven  = numbers.First  (n => n % 2 == 0);     // 2\nint lastEven   = numbers.Last   (n => n % 2 == 0);     // 4\n```", "```cs\nint firstBigError  = numbers.First          (n => n > 10);   // Exception\nint firstBigNumber = numbers.FirstOrDefault (n => n > 10);   // 0\n```", "```cs\nint onlyDivBy3 = numbers.Single (n => n % 3 == 0);   // 3\nint divBy2Err  = numbers.Single (n => n % 2 == 0);   // Error: 2 & 4 match\n\nint singleError = numbers.Single          (n => n > 10);      // Error\nint noMatches   = numbers.SingleOrDefault (n => n > 10);      // 0\nint divBy2Error = numbers.SingleOrDefault (n => n % 2 == 0);  // Error\n```", "```cs\nCustomer cust = dataContext.Customers.Single (c => c.ID == 3);\n```", "```cs\nint[] numbers  = { 1, 2, 3, 4, 5 };\nint third      = numbers.ElementAt (2);            // 3\nint tenthError = numbers.ElementAt (9);            // Exception\nint tenth      = numbers.ElementAtOrDefault (9);   // 0\n```", "```cs\nstring[] names = { \"Tom\", \"Dick\", \"Harry\", \"Mary\", \"Jay\" };\nConsole.WriteLine (names.MaxBy (n => n.Length));   // Harry\n```", "```cs\nConsole.WriteLine (names.Max   (n => n.Length));   // 5\n```", "```cs\nConsole.WriteLine (names.MinBy (n => n.Length));   // Tom\n```", "```cs\nint fullCount = new int[] { 5, 6, 7 }.Count();    // 3\n```", "```cs\nint digitCount = \"pa55w0rd\".Count (c => char.IsDigit (c));   // 3\n```", "```cs\nint[] numbers = { 28, 32, 14 };\nint smallest = numbers.Min();  // 14;\nint largest  = numbers.Max();  // 32;\n```", "```cs\nint smallest = numbers.Max (n => n % 10);  // 8;\n```", "```cs\nPurchase runtimeError = dbContext.Purchases.Min ();             // Error\ndecimal? lowestPrice = dbContext.Purchases.Min (p => p.Price);  // OK\n```", "```cs\nPurchase cheapest = dbContext.Purchases\n  .Where (p => p.Price == dbContext.Purchases.Min (p2 => p2.Price))\n  .FirstOrDefault();\n```", "```cs\ndecimal[] numbers  = { 3, 4, 8 };\ndecimal sumTotal   = numbers.Sum();               // 15\ndecimal average    = numbers.Average();           // 5   (mean value)\n```", "```cs\nint combinedLength = names.Sum (s => s.Length);   // 19\n```", "```cs\nint avg = new int[] { 3, 4 }.Average();\n```", "```cs\ndouble avg = new int[] { 3, 4 }.Average();   // 3.5\n```", "```cs\ndouble avg = numbers.Average (n => (double) n);\n```", "```cs\nfrom c in dbContext.Customers\nwhere c.Purchases.Average (p => p.Price) > 500\nselect c.Name;\n```", "```cs\nint[] numbers = { 1, 2, 3 };\nint sum = numbers.Aggregate (0, (total, n) => total + n);   // 6\n```", "```cs\nint[] numbers = { 1, 2, 3 };\nint sum = numbers.Aggregate ((total, n) => total + n);   // 6\n```", "```cs\nint[] numbers = { 1, 2, 3 };\nint x = numbers.Aggregate (0, (prod, n) => prod * n);   // 0*1*2*3 = 0\nint y = numbers.Aggregate (   (prod, n) => prod * n);   //   1*2*3 = 6\n```", "```cs\n(total, n) => total + n * n\n```", "```cs\nint[] numbers = { 2, 3, 4 };\nint sum = numbers.Aggregate ((total, n) => total + n * n);    // 27\n```", "```cs\n2*2 + 3*3 + 4*4    // 29\n```", "```cs\n2 + 3*3 + 4*4      // 27\n```", "```cs\nint[] numbers = { 0, 2, 3, 4 };\n```", "```cs\nf(total, n) => total + n * n\n```", "```cs\nf(f(f(0, 2),3),4)\n```", "```cs\nf(f(0,2),f(3,4))\n```", "```cs\nFirst partition:   a = 0 + 2*2  (= 4)\nSecond partition:  b = 3 + 4*4  (= 19)\nFinal result:          a + b*b  (= 365)\nOR EVEN:               b + a*a  (= 35) \n```", "```cs\nint sum = numbers.Select (n => n * n).Aggregate ((total, n) => total + n);\n```", "```cs\nint sum = numbers.Sum (n => n * n);\n```", "```cs\nMath.Sqrt (numbers.Average (n => n * n))\n```", "```cs\ndouble mean = numbers.Average();\ndouble sdev = Math.Sqrt (numbers.Average (n =>\n              {\n                double dif = n - mean;\n                return dif * dif;\n              }));\n```", "```cs\nbool hasAThree = new int[] { 2, 3, 4 }.Contains (3);       // true;\n```", "```cs\nbool hasAThree = new int[] { 2, 3, 4 }.Any (n => n == 3);  // true;\n```", "```cs\nbool hasABigNumber = new int[] { 2, 3, 4 }.Any (n => n > 10);  // false;\n```", "```cs\nbool hasABigNumber = new int[] { 2, 3, 4 }.Where (n => n > 10).Any();\n```", "```cs\nfrom c in dbContext.Customers\nwhere c.Purchases.Any (p => p.Price > 1000)\nselect c\n```", "```cs\ndbContext.Customers.Where (c => c.Purchases.All (p => p.Price < 100));\n```", "```cs\nforeach (string s in Enumerable.Empty<string>())\n  Console.Write (s);                              // <nothing>\n```", "```cs\nint[][] numbers =\n{\n  new int[] { 1, 2, 3 },\n  new int[] { 4, 5, 6 },\n  null                     // this null makes the query below fail.\n};\n\nIEnumerable<int> flat = numbers.SelectMany (innerArray => innerArray);\n```", "```cs\nIEnumerable<int> flat = numbers\n  .SelectMany (innerArray => innerArray ?? Enumerable.Empty <int>());\n\nforeach (int i in flat)\n  Console.Write (i + \" \");     // 1 2 3 4 5 6\n```", "```cs\nforeach (int i in Enumerable.Range (5, 3))\n  Console.Write (i + \" \");                    // 5 6 7\n```", "```cs\nforeach (bool x in Enumerable.Repeat (true, 3))\n  Console.Write (x + \" \");                    // True True True\n```"]