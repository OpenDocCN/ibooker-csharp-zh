["```cs\nusing System;\nusing System.IO;\n\npublic class DeploymentProcess\n{\n    StreamWriter report = new StreamWriter(\"DeploymentReport.txt\");\n\n    public bool CheckStatus()\n    {\n        report.WriteLine($\"{DateTime.Now} Application Deployed.\");\n\n        return true;\n    }\n}\n```", "```cs\nusing System;\nusing System.IO;\n\npublic class DeploymentProcess : IDisposable\n{\n    bool disposed;\n\n    readonly StreamWriter report = new StreamWriter(\"DeploymentReport.txt\");\n\n    public bool CheckStatus()\n    {\n        report.WriteLine($\"{DateTime.Now} Application Deployed.\");\n\n        return true;\n    }\n\n    protected virtual void Dispose(bool disposing)\n    {\n        if (!disposed)\n        {\n            if (disposing)\n            {\n                // disposal of purely managed resources goes here\n            }\n\n            report?.Close();\n            disposed = true;\n        }\n    }\n\n    ~DeploymentProcess()\n    {\n        Dispose(disposing: false);\n    }\n\n    public void Dispose()\n    {\n        Dispose(disposing: true);\n        GC.SuppressFinalize(this);\n    }\n}\n```", "```cs\nstatic void Main(string[] args)\n{\n    using (var deployer = new DeploymentProcess())\n    {\n        deployer.CheckStatus();\n    }\n}\n```", "```cs\npublic class DeploymentArtifacts\n{\n    public void Validate()\n    {\n        System.Console.WriteLine(\"Validating...\");\n    }\n}\n\npublic class DeploymentRepository\n{\n    public void SaveStatus(string status)\n    {\n        System.Console.WriteLine(\"Saving status...\");\n    }\n}\n\ninterface IDeploymentService\n{\n    void PerformValidation();\n}\n\npublic class DeploymentService : IDeploymentService\n{\n    readonly DeploymentArtifacts artifacts;\n    readonly DeploymentRepository repository;\n\n    public DeploymentService(\n        DeploymentArtifacts artifacts,\n        DeploymentRepository repository)\n    {\n        this.artifacts = artifacts;\n        this.repository = repository;\n    }\n\n    public void PerformValidation()\n    {\n        artifacts.Validate();\n        repository.SaveStatus(\"status\");\n    }\n}\n```", "```cs\nusing Microsoft.Extensions.DependencyInjection;\nusing System;\n\nclass Program\n{\n    readonly IDeploymentService service;\n\n    public Program(IDeploymentService service)\n    {\n        this.service = service;\n    }\n\n    static void Main()\n    {\n        var services = new ServiceCollection();\n\n        services.AddTransient<DeploymentArtifacts>();\n        services.AddTransient<DeploymentRepository>();\n        services.AddTransient<IDeploymentService, DeploymentService>();\n\n        ServiceProvider serviceProvider =\n            services.BuildServiceProvider();\n\n        IDeploymentService deploymentService =\n            serviceProvider.GetRequiredService<IDeploymentService>();\n\n        var program = new Program(deploymentService);\n\n        program.StartDeployment();\n    }\n\n    public void StartDeployment()\n    {\n        service.PerformValidation();\n        Console.WriteLine(\"Validation complete - continuing...\");\n    }\n}\n```", "```cs\nusing System;\n\npublic class ThirdPartyDeploymentService\n{\n    public void Validate()\n    {\n        Console.WriteLine(\"Validated\");\n    }\n}\n```", "```cs\npublic interface IValidatorFactory\n{\n    ThirdPartyDeploymentService CreateDeploymentService();\n}\n```", "```cs\npublic class ValidatorFactory : IValidatorFactory\n{\n    public ThirdPartyDeploymentService CreateDeploymentService()\n    {\n        return new ThirdPartyDeploymentService();\n    }\n}\n```", "```cs\npublic class Program\n{\n    readonly ThirdPartyDeploymentService service;\n\n    public Program(IValidatorFactory factory)\n    {\n        service = factory.CreateDeploymentService();\n    }\n\n    static void Main()\n    {\n        var factory = new ValidatorFactory();\n        var program = new Program(factory);\n        program.PerformValidation();\n    }\n\n    void PerformValidation()\n    {\n        service.Validate();\n    }\n}\n```", "```cs\npublic abstract class DeploymentManagementBase\n{\n    IDeploymentPlugin deploymentService;\n\n    protected abstract IDeploymentPlugin CreateDeploymentService();\n\n    public bool Validate()\n    {\n        if (deploymentService == null)\n            deploymentService = CreateDeploymentService();\n\n        return deploymentService.Validate();\n    }\n}\n```", "```cs\npublic class DeploymentManager1 : DeploymentManagementBase\n{\n    protected override IDeploymentPlugin CreateDeploymentService()\n    {\n        return new DeploymentPlugin1();\n    }\n}\n\npublic class DeploymentManager2 : DeploymentManagementBase\n{\n    protected override IDeploymentPlugin CreateDeploymentService()\n    {\n        return new DeploymentPlugin2();\n    }\n}\n```", "```cs\npublic interface IDeploymentPlugin\n{\n    bool Validate();\n}\n```", "```cs\npublic class DeploymentPlugin1 : IDeploymentPlugin\n{\n    public bool Validate()\n    {\n        Console.WriteLine(\"Validated Plugin 1\");\n        return true;\n    }\n}\n\npublic class DeploymentPlugin2 : IDeploymentPlugin\n{\n    public bool Validate()\n    {\n        Console.WriteLine(\"Validated Plugin 2\");\n        return true;\n    }\n}\n```", "```cs\nclass Program\n{\n    readonly DeploymentManagementBase[] deploymentManagers;\n\n    public Program(DeploymentManagementBase[] deploymentManagers)\n    {\n        this.deploymentManagers = deploymentManagers;\n    }\n\n    static DeploymentManagementBase[] GetPlugins()\n    {\n        return new DeploymentManagementBase[]\n        {\n            new DeploymentManager1(),\n            new DeploymentManager2()\n        };\n    }\n\n    static void Main()\n    {\n        DeploymentManagementBase[] deploymentManagers = GetPlugins();\n\n        var program = new Program(deploymentManagers);\n\n        program.Run();\n    }\n\n    void Run()\n    {\n        foreach (var manager in deploymentManagers)\n            manager.Validate();\n    }\n}\n```", "```cs\npublic class GreetingRepository\n{\n    public string GetNewGreeting() => \"Welcome!\";\n\n    public string GetVisitGreeting() => \"Welcome back!\";\n}\n```", "```cs\npublic class Greeting\n{\n    GreetingRepository greetRep = new GreetingRepository();\n\n    public string GetGreeting(bool isNew) =>\n        isNew ? greetRep.GetNewGreeting() : greetRep.GetVisitGreeting();\n}\n```", "```cs\npublic class SignIn\n{\n    Greeting greeting = new Greeting();\n\n    public void Greet()\n    {\n        Console.Write(\"Is this your first visit? (true/false): \");\n        string newResponse = Console.ReadLine();\n\n        bool.TryParse(newResponse, out bool isNew);\n\n        string greetResponse = greeting.GetGreeting(isNew);\n\n        Console.WriteLine($\"\\n*\\n* {greetResponse} \\n*\\n\");\n    }\n}\n\npublic class Menu\n{\n    public void Show()\n    {\n        Console.WriteLine(\n            \"*------*\\n\" +\n            \"* Menu *\\n\" +\n            \"*------*\\n\" +\n            \"\\n\" +\n            \"1\\. ...\\n\" +\n            \"2\\. ...\\n\" +\n            \"3\\. ...\\n\" +\n            \"\\n\" +\n            \"Choose: \");\n    }\n}\n```", "```cs\nclass Program\n{\n    SignIn signIn = new SignIn();\n    Menu menu = new Menu();\n\n    static void Main()\n    {\n        new Program().Start();\n    }\n\n    void Start()\n    {\n        signIn.Greet();\n        menu.Show();\n    }\n}\n```", "```cs\npublic class ValidationStatus\n{\n    public bool Deployment { get; set; }\n    public bool SmokeTest { get; set; }\n    public bool Artifacts { get; set; }\n\n    public void Deconstruct(\n        out bool isPreviousDeploymentComplete,\n        out bool isSmokeTestComplete,\n        out bool areArtifactsReady)\n    {\n        isPreviousDeploymentComplete = Deployment;\n        isSmokeTestComplete = SmokeTest;\n        areArtifactsReady = Artifacts;\n    }\n}\n```", "```cs\npublic class DeploymentService\n{\n    public\n    (bool deployment, bool smokeTest, bool artifacts)\n    PrepareDeployment()\n    {\n        ValidationStatus status = Validate();\n\n        (bool deployment, bool smokeTest, bool artifacts) = status;\n\n        return (deployment, smokeTest, artifacts);\n    }\n\n    ValidationStatus Validate()\n    {\n        return new ValidationStatus\n        {\n            Deployment = true,\n            SmokeTest = true,\n            Artifacts = true\n        };\n    }\n}\n```", "```cs\nclass Program\n{\n    readonly DeploymentService deployment = new DeploymentService();\n    static void Main(string[] args)\n    {\n        new Program().Start();\n    }\n\n    void Start()\n    {\n        (bool deployed, bool smokeTest, bool artifacts) =\n            deployment.PrepareDeployment();\n\n        Console.WriteLine(\n            $\"\\nDeployment Status:\\n\\n\" +\n            $\"Is Previous Deployment Complete? {deployed}\\n\" +\n            $\"Is Previous Smoke Test Complete? {smokeTest}\\n\" +\n            $\"Are artifacts for this deployment ready? {artifacts}\\n\\n\" +\n            $\"Can deploy: {deployed && smokeTest && artifacts}\");\n    }\n}\n```", "```cs\npublic class Deployment\n{\n    string config;\n\n    public Deployment(string config)\n    {\n        this.config = config;\n    }\n\n    public bool PerformHealthCheck()\n    {\n        Console.WriteLine(\n            $\"Performed health check for config {config}.\");\n        return true;\n    }\n}\n```", "```cs\npublic class CircularQueue\n{\n    int current = 0;\n    int last = 0;\n    object[] items;\n\n    public CircularQueue(int size)\n    {\n        items = new object[size];\n    }\n\n    public void Add(object obj)\n    {\n        if (last >= items.Length)\n            throw new IndexOutOfRangeException();\n\n        items[last++] = obj;\n    }\n\n    public object Next()\n    {\n        current %= last;\n        object item = items[current];\n        current++;\n\n        return item;\n    }\n}\n```", "```cs\npublic class HealthChecksObjects\n{\n    public void PerformHealthChecks(int cycles)\n    {\n        CircularQueue checks = Configure();\n\n        for (int i = 0; i < cycles; i++)\n        {\n            Deployment deployment = (Deployment)checks.Next();\n            deployment.PerformHealthCheck();\n        }\n    }\n\n    private CircularQueue Configure()\n    {\n        var queue = new CircularQueue(5);\n\n        queue.Add(new Deployment(\"a\"));\n        queue.Add(new Deployment(\"b\"));\n        queue.Add(new Deployment(\"c\"));\n\n        return queue;\n    }\n}\n```", "```cs\npublic class CircularQueue<T>\n{\n    int current = 0;\n    int last = 0;\n    T[] items;\n\n    public CircularQueue(int size)\n    {\n        items = new T[size];\n    }\n\n    public void Add(T obj)\n    {\n        if (last >= items.Length)\n            throw new IndexOutOfRangeException();\n\n        items[last++] = obj;\n    }\n\n    public T Next()\n    {\n        current %= last;\n        T item = items[current];\n        current++;\n\n        return item;\n    }\n}\n```", "```cs\npublic class HealthChecksGeneric\n{\n    public void PerformHealthChecks(int cycles)\n    {\n        CircularQueue<Deployment> checks = Configure();\n\n        for (int i = 0; i < cycles; i++)\n        {\n            Deployment deployment = checks.Next();\n            deployment.PerformHealthCheck();\n        }\n    }\n\n    private CircularQueue<Deployment> Configure()\n    {\n        var queue = new CircularQueue<Deployment>(5);\n\n        queue.Add(new Deployment(\"a\"));\n        queue.Add(new Deployment(\"b\"));\n        queue.Add(new Deployment(\"c\"));\n\n        return queue;\n    }\n}\n```", "```cs\nclass Program\n{\n    static void Main(string[] args)\n    {\n        new HealthChecksObjects().PerformHealthChecks(5);\n        new HealthChecksGeneric().PerformHealthChecks(5);\n    }\n}\n```", "```cs\npublic interface IDeploymentService\n{\n    void Validate();\n}\n```", "```cs\npublic class DeploymentService1 : IDeploymentService\n{\n    public void Validate()\n    {\n        Console.WriteLine(\"Deployment Service 1 Validated\");\n    }\n}\n\npublic class DeploymentService2 : IDeploymentService\n{\n    public void Validate()\n    {\n        Console.WriteLine(\"Deployment Service 2 Validated\");\n    }\n}\n```", "```cs\npublic class ThirdPartyDeploymentService\n{\n    public void PerformValidation()\n    {\n        Console.WriteLine(\"3rd Party Deployment Service 1 Validated\");\n    }\n}\n```", "```cs\npublic class ThirdPartyDeploymentAdapter : IDeploymentService\n{\n    ThirdPartyDeploymentService service = new ThirdPartyDeploymentService();\n\n    public void Validate()\n    {\n        service.PerformValidation();\n    }\n}\n```", "```cs\nclass Program\n{\n    static void Main(string[] args)\n    {\n        new Program().Start();\n    }\n\n    void Start()\n    {\n        List<IDeploymentService> services = Configure();\n\n        foreach (var svc in services)\n            svc.Validate();\n    }\n\n    List<IDeploymentService> Configure()\n    {\n        return new List<IDeploymentService>\n        {\n            new DeploymentService1(),\n            new DeploymentService2(),\n            new ThirdPartyDeploymentAdapter()\n        };\n    }\n}\n```", "```cs\n[Serializable]\npublic class DeploymentValidationException : Exception\n{\n    public DeploymentValidationException() :\n        this(\"Validation Failed!\", null, ValidationFailureReason.Unknown)\n    {\n    }\n\n    public DeploymentValidationException(\n        string message) :\n        this(message, null, ValidationFailureReason.Unknown)\n    {\n    }\n\n    public DeploymentValidationException(\n        string message, Exception innerException) :\n        this(message, innerException, ValidationFailureReason.Unknown)\n    {\n    }\n\n    public DeploymentValidationException(\n        string message, ValidationFailureReason reason) :\n        this(message, null, reason)\n    {\n    }\n\n    public DeploymentValidationException(\n        string message,\n        Exception innerException,\n        ValidationFailureReason reason) :\n        base(message, innerException)\n    {\n        Reason = reason;\n    }\n\n    public ValidationFailureReason Reason { get; set; }\n\n    public override string ToString()\n    {\n        return\n            base.ToString() +\n            $\" - Reason: {Reason} \";\n    }\n}\n```", "```cs\npublic enum ValidationFailureReason\n{\n    Unknown,\n    PreviousDeploymentFailed,\n    SmokeTestFailed,\n    MissingArtifacts\n}\n```", "```cs\npublic class DeploymentService\n{\n    public void Validate()\n    {\n        throw new DeploymentValidationException(\n            \"Smoke test failed - check with qa@example.com.\",\n            ValidationFailureReason.SmokeTestFailed);\n    }\n}\n```", "```cs\nclass Program\n{\n    static void Main()\n    {\n        try\n        {\n            new DeploymentService().Validate();\n        }\n        catch (DeploymentValidationException ex)\n        {\n            Console.WriteLine(\n                $\"Message: {ex.Message}\\n\" +\n                $\"Reason: {ex.Reason}\\n\" +\n                $\"Full Description: \\n {ex}\");\n        }\n    }\n}\n```", "```cs\npublic class DeploymentService\n{\n    public int StartDelay { get; set; } = 2000;\n    public int ErrorRetries { get; set; } = 5;\n    public string ReportFormat { get; set; } = \"pdf\";\n\n    public void Start()\n    {\n        Console.WriteLine(\n            $\"Deployment started with:\\n\" +\n            $\"    Start Delay:   {StartDelay}\\n\" +\n            $\"    Error Retries: {ErrorRetries}\\n\" +\n            $\"    Report Format: {ReportFormat}\");\n    }\n}\n```", "```cs\npublic class DeploymentBuilder\n{\n    DeploymentService service = new DeploymentService();\n\n    public DeploymentBuilder SetStartDelay(int delay)\n    {\n        service.StartDelay = delay;\n        return this;\n    }\n\n    public DeploymentBuilder SetErrorRetries(int retries)\n    {\n        service.ErrorRetries = retries;\n        return this;\n    }\n\n    public DeploymentBuilder SetReportFormat(string format)\n    {\n        service.ReportFormat = format;\n        return this;\n    }\n\n    public DeploymentService Build()\n    {\n        return service;\n    }\n}\n```", "```cs\nclass Program\n{\n    static void Main()\n    {\n        DeploymentService service =\n            new DeploymentBuilder()\n                .SetStartDelay(3000)\n                .SetErrorRetries(3)\n                .SetReportFormat(\"html\")\n                .Build();\n\n        service.Start();\n    }\n}\n```"]