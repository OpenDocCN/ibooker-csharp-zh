["```cs\n[AttributeUsage(\n AttributeTargets.Property | AttributeTargets.Method,\n AllowMultiple = false)]\npublic class ColumnAttribute : Attribute\n{\n    public ColumnAttribute(string name)\n    {\n        Name = name;\n    }\n\n    public string Name { get; set; }\n\n    public string Format { get; set; }\n}\n```", "```cs\npublic class InventoryItem\n{\n [Column(\"Part #\")]\n    public string PartNumber { get; set; }\n\n [Column(\"Name\")]\n    public string Description { get; set; }\n\n [Column(\"Amount\")]\n    public int Count { get; set; }\n\n [Column(\"Price\")]\n    public decimal ItemPrice { get; set; }\n\n [Column(\"Total\")]\n    public decimal CalculateTotal()\n    {\n        return ItemPrice * Count;\n    }\n}\n```", "```cs\nstatic void Main()\n{\n    var inventory = new List<object>\n    {\n        new InventoryItem\n        {\n            PartNumber = \"1\",\n            Description = \"Part #1\",\n            Count = 3,\n            ItemPrice = 5.26m\n        },\n        new InventoryItem\n        {\n            PartNumber = \"2\",\n            Description = \"Part #2\",\n            Count = 1,\n            ItemPrice = 7.95m\n        },\n        new InventoryItem\n        {\n            PartNumber = \"3\",\n            Description = \"Part #3\",\n            Count = 2,\n            ItemPrice = 23.13m\n        },\n    };\n\n    string report = new Report().Generate(inventory);\n\n    Console.WriteLine(report);\n}\n```", "```cs\npublic class Report\n{\n    // contains Generate and GetHeaders methods\n}\n```", "```cs\npublic string Generate(List<object> items)\n{\n    _ = items ??\n        throw new ArgumentNullException(\n            $\"{nameof(items)} is required\");\n\n    MemberInfo[] members =\n        items.First().GetType().GetMembers();\n\n    var report = new StringBuilder(\"# Report\\n\\n\");\n\n    report.Append(GetHeaders(members));\n\n    return report.ToString();\n}\n```", "```cs\nconst string ColumnSeparator = \" | \";\n\nStringBuilder GetHeaders(MemberInfo[] members)\n{\n    var columnNames = new List<string>();\n    var underscores = new List<string>();\n\n    foreach (var member in members)\n    {\n        var attribute =\n            member.GetCustomAttribute<ColumnAttribute>();\n\n        if (attribute != null)\n        {\n            string columnTitle = attribute.Name;\n            string dashes = \"\".PadLeft(columnTitle.Length, '-');\n\n            columnNames.Add(columnTitle);\n            underscores.Add(dashes);\n        }\n    }\n\n    var header = new StringBuilder();\n\n    header.AppendJoin(ColumnSeparator, columnNames);\n    header.Append(\"\\n\");\n\n    header.AppendJoin(ColumnSeparator, underscores);\n    header.Append(\"\\n\");\n\n    return header;\n}\n```", "```cs\n# Report\n\nTotal | Part # | Name | Amount | Price\n----- | ------ | ---- | ------ | -----\n```", "```cs\npublic class InventoryItem\n{\n [Column(\"Part #\")]\n    public string PartNumber { get; set; }\n\n [Column(\"Name\")]\n    public string Description { get; set; }\n\n [Column(\"Amount\")]\n    public int Count { get; set; }\n\n [Column(\"Price\", Format = \"{0:c}\")]\n    public decimal ItemPrice { get; set; }\n}\n```", "```cs\npublic class ColumnDetail\n{\n    public string Name { get; set; }\n\n    public ColumnAttribute Attribute { get; set; }\n\n    public PropertyInfo PropertyInfo { get; set; }\n}\n```", "```cs\nDictionary<string, ColumnDetail> GetColumnDetails(\n    List<object> items)\n{\n     object itemInstance = items.First();\n     Type itemType = itemInstance.GetType();\n     PropertyInfo[] itemProperties = itemType.GetProperties();\n\n    return\n        (from prop in itemProperties\n         let attribute = prop.GetCustomAttribute<ColumnAttribute>()\n         where attribute != null\n         select new ColumnDetail\n         {\n             Name = prop.Name,\n             Attribute = attribute,\n             PropertyInfo = prop\n         })\n        .ToDictionary(\n            key => key.Name,\n            val => val);\n}\n```", "```cs\nStringBuilder GetHeaders(\n    Dictionary<string, ColumnDetail> details)\n{\n    var header = new StringBuilder();\n\n    header.AppendJoin(\n        ColumnSeparator,\n        from detail in details.Values\n        select detail.Attribute.Name);\n\n    header.Append(\"\\n\");\n\n    header.AppendJoin(\n        ColumnSeparator,\n        from detail in details.Values\n        let length = detail.Attribute.Name.Length\n        select \"\".PadLeft(length, '-'));\n\n    header.Append(\"\\n\");\n\n    return header;\n}\n```", "```cs\n(object, Type) GetReflectedResult(\n    object item, PropertyInfo property)\n{\n    object result = property.GetValue(item);\n    Type type = property.PropertyType;\n\n    return (result, type);\n}\n```", "```cs\nList<string> GetColumns(\n    IEnumerable<ColumnDetail> details,\n    object item)\n{\n    var columns = new List<string>();\n\n    foreach (var detail in details)\n    {\n        PropertyInfo member = detail.PropertyInfo;\n        string format =\n            string.IsNullOrWhiteSpace(\n                detail.Attribute.Format) ?\n                \"{0}\" :\n                detail.Attribute.Format;\n\n        (object result, Type columnType) =\n            GetReflectedResult(item, member);\n\n        switch (columnType.FullName)\n        {\n            case \"System.Decimal\":\n                columns.Add(\n                    string.Format(format, (decimal)result));\n                break;\n            case \"System.Int32\":\n                columns.Add(\n                    string.Format(format, (int)result));\n                break;\n            case \"System.String\":\n                columns.Add(\n                    string.Format(format, (string)result));\n                break;\n            default:\n                break;\n        }\n    }\n\n    return columns;\n}\n```", "```cs\nStringBuilder GetRows(\n    List<object> items,\n    Dictionary<string, ColumnDetail> details)\n{\n    var rows = new StringBuilder();\n\n    foreach (var item in items)\n    {\n        List<string> columns =\n            GetColumns(details.Values, item);\n\n        rows.AppendJoin(ColumnSeparator, columns);\n\n        rows.Append(\"\\n\");\n    }\n\n    return rows;\n}\n```", "```cs\nconst string ColumnSeparator = \" | \";\n\npublic string Generate(List<object> items)\n{\n    var report = new StringBuilder(\"# Report\\n\\n\");\n\n    Dictionary<string, ColumnDetail> columnDetails =\n        GetColumnDetails(items);\n    report.Append(GetHeaders(columnDetails));\n    report.Append(GetRows(items, columnDetails));\n\n    return report.ToString();\n}\n```", "```cs\n|| Total | Part # | Name | Amount | Price ||\n| $15.78 | 1 | Part #1 | 3 | 5.26 |\n| $7.95 | 2 | Part #2 | 1 | 7.95 |\n| $46.26 | 3 | Part #3 | 2 | 23.13 |\n```", "```cs\npublic enum ReportType\n{\n    Html,\n    Markdown\n}\n```", "```cs\npublic abstract class GeneratorBase<TData>\n{\n    public string Generate(List<TData> items)\n    {\n        StringBuilder report = GetTitle();\n\n        Dictionary<string, ColumnDetail> columnDetails =\n            GetColumnDetails(items);\n        report.Append(GetHeaders(columnDetails));\n        report.Append(GetRows(items, columnDetails));\n\n        return report.ToString();\n    }\n\n    protected abstract StringBuilder GetTitle();\n\n    protected abstract StringBuilder GetHeaders(\n        Dictionary<string, ColumnDetail> details);\n\n    protected abstract StringBuilder GetRows(\n        List<TData> items,\n        Dictionary<string, ColumnDetail> details);\n\n    Dictionary<string, ColumnDetail> GetColumnDetails(\n        List<TData> items)\n    {\n        TData itemInstance = items.First();\n        Type itemType = itemInstance.GetType();\n        PropertyInfo[] itemProperties = itemType.GetProperties();\n\n        return\n            (from prop in itemProperties\n             let attribute = prop.GetCustomAttribute<ColumnAttribute>()\n             where attribute != null\n             select new ColumnDetail\n             {\n                 Name = prop.Name,\n                 Attribute = attribute,\n                 PropertyInfo = prop\n             })\n            .ToDictionary(\n                key => key.Name,\n                val => val);\n    }\n\n    protected List<string> GetColumns(\n        IEnumerable<ColumnDetail> details,\n        TData item)\n    {\n        var columns = new List<string>();\n\n        foreach (var detail in details)\n        {\n            PropertyInfo member = detail.PropertyInfo;\n            string format =\n                string.IsNullOrWhiteSpace(\n                    detail.Attribute.Format) ?\n                    \"{0}\" :\n                    detail.Attribute.Format;\n\n            (object result, Type columnType) =\n                GetReflectedResult(item, member);\n\n            switch (columnType.Name)\n            {\n                case \"Decimal\":\n                    columns.Add(\n                        string.Format(format, (decimal)result));\n                    break;\n                case \"Int32\":\n                    columns.Add(\n                        string.Format(format, (int)result));\n                    break;\n                case \"String\":\n                    columns.Add(\n                        string.Format(format, (string)result));\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return columns;\n    }\n\n    (object, Type) GetReflectedResult(TData item, PropertyInfo property)\n    {\n        object result = property.GetValue(item);\n        Type type = property.PropertyType;\n\n        return (result, type);\n    }\n}\n```", "```cs\npublic class MarkdownGenerator<TData> : GeneratorBase<TData>\n{\n    const string ColumnSeparator = \" | \";\n\n    protected override StringBuilder GetTitle()\n    {\n        return new StringBuilder(\"# Report\\n\\n\");\n    }\n\n    protected override StringBuilder GetHeaders(\n        Dictionary<string, ColumnDetail> details)\n    {\n        var header = new StringBuilder();\n\n        header.AppendJoin(\n            ColumnSeparator,\n            from detail in details.Values\n            select detail.Attribute.Name);\n\n        header.Append(\"\\n\");\n\n        header.AppendJoin(\n            ColumnSeparator,\n            from detail in details.Values\n            let length = detail.Attribute.Name.Length\n            select \"\".PadLeft(length, '-'));\n\n        header.Append(\"\\n\");\n\n        return header;\n    }\n\n    protected override StringBuilder GetRows(\n        List<TData> items,\n        Dictionary<string, ColumnDetail> details)\n    {\n        var rows = new StringBuilder();\n\n        foreach (var item in items)\n        {\n            List<string> columns =\n                GetColumns(details.Values, item);\n\n            rows.AppendJoin(ColumnSeparator, columns);\n\n            rows.Append(\"\\n\");\n        }\n\n        return rows;\n    }\n}\n```", "```cs\npublic class HtmlGenerator<TData> : GeneratorBase<TData>\n{\n    protected override StringBuilder GetTitle()\n    {\n        return new StringBuilder(\"<h1>Report</h1>\\n\");\n    }\n\n    protected override StringBuilder GetHeaders(\n        Dictionary<string, ColumnDetail> details)\n    {\n        var header = new StringBuilder(\"<tr>\\n\");\n\n        header.AppendJoin(\n            \"\\n\",\n            from detail in details.Values\n            let columnName = detail.Attribute.Name\n            select $\"  <th>{columnName}</th>\");\n\n        header.Append(\"\\n</tr>\\n\");\n\n        return header;\n    }\n\n    protected override StringBuilder GetRows(\n        List<TData> items,\n        Dictionary<string, ColumnDetail> details)\n    {\n        StringBuilder rows = new StringBuilder();\n        Type itemType = items.First().GetType();\n\n        foreach (var item in items)\n        {\n            rows.Append(\"<tr>\\n\");\n\n            List<string> columns =\n                GetColumns(details.Values, item);\n\n            rows.AppendJoin(\n                \"\\n\",\n                from columnValue in columns\n                select $\"  <td>{columnValue}</td>\");\n\n            rows.Append(\"\\n</tr>\\n\");\n        }\n\n        return rows;\n    }\n}\n```", "```cs\npublic string Generate(List<TData> items, ReportType reportType)\n{\n    GeneratorBase<TData> generator = CreateGenerator(reportType);\n\n    string report = generator.Generate(items);\n\n    return report;\n}\n```", "```cs\nGeneratorBase<TData> CreateGenerator(ReportType reportType)\n{\n    Type generatorType;\n\n    switch (reportType)\n    {\n        case ReportType.Html:\n            generatorType = typeof(HtmlGenerator<>);\n            break;\n        case ReportType.Markdown:\n            generatorType = typeof(MarkdownGenerator<>);\n            break;\n        default:\n            throw new ArgumentException(\n                $\"Unexpected ReportType: '{reportType}'\");\n    }\n\n    Type dataType = typeof(TData);\n    Type genericType = generatorType.MakeGenericType(dataType);\n\n    object generator = Activator.CreateInstance(genericType);\n\n    return (GeneratorBase<TData>)generator;\n}\n```", "```cs\nGeneratorBase<TData> CreateGenerator(ReportType reportType)\n{\n    Type dataType = typeof(TData);\n\n    string generatorNamespace = \"Section_05_03.\";\n    string generatorTypeName = $\"{reportType}Generator`1\";\n    string typeParameterName = $\"[[{dataType.FullName}]]\";\n\n    string fullyQualifiedTypeName =\n        generatorNamespace +\n        generatorTypeName +\n        typeParameterName;\n\n    Type generatorType = Type.GetType(fullyQualifiedTypeName);\n\n    object generator = Activator.CreateInstance(generatorType);\n\n    return (GeneratorBase<TData>)generator;\n}\n```", "```cs\nstatic void Main()\n{\n    var inventory = new List<InventoryItem>\n    {\n        new InventoryItem\n        {\n            PartNumber = \"1\",\n            Description = \"Part #1\",\n            Count = 3,\n            ItemPrice = 5.26m\n        },\n        new InventoryItem\n        {\n            PartNumber = \"2\",\n            Description = \"Part #2\",\n            Count = 1,\n            ItemPrice = 7.95m\n        },\n        new InventoryItem\n        {\n            PartNumber = \"3\",\n            Description = \"Part #3\",\n            Count = 2,\n            ItemPrice = 23.13m\n        },\n    };\n\n    string report =\n        new Report<InventoryItem>()\n        .Generate(inventory, ReportType.Markdown);\n\n    Console.WriteLine(report);\n}\n```", "```cs\n# Report\n\nPart # | Name | Amount | Price\n------ | ---- | ------ | -----\n1 | Part #1 | 3 | $5.26\n2 | Part #2 | 1 | $7.95\n3 | Part #3 | 2 | $23.13\n```", "```cs\npublic class ColumnDetail\n{\n    public string Name { get; set; }\n\n    public ColumnAttribute Attribute { get; set; }\n\n    public MemberInfo MemberInfo { get; set; }\n}\n```", "```cs\npublic class InventoryItem\n{\n [Column(\"Part #\")]\n    public string PartNumber { get; set; }\n\n [Column(\"Name\")]\n    public string Description { get; set; }\n\n [Column(\"Amount\")]\n    public int Count { get; set; }\n\n [Column(\"Price\", Format = \"{0:c}\")]\n    public decimal ItemPrice { get; set; }\n\n [Column(\"Total\", Format = \"{0:c}\")]\n    public decimal CalculateTotal()\n    {\n        return ItemPrice * Count;\n    }\n}\n```", "```cs\nDictionary<string, ColumnDetail> GetColumnDetails(\n    List<object> items)\n{\n    return\n        (from member in\n            items.First().GetType().GetMembers()\n         let attribute =\n            member.GetCustomAttribute<ColumnAttribute>()\n         where attribute != null\n         select new ColumnDetail\n         {\n             Name = member.Name,\n             Attribute = attribute,\n             MemberInfo = member\n         })\n        .ToDictionary(\n            key => key.Name,\n            val => val);\n}\n```", "```cs\n(object, Type) GetReflectedResult(\n    Type itemType, object item, MemberInfo member)\n{\n    object result;\n    Type type;\n\n    switch (member.MemberType)\n    {\n        case MemberTypes.Method:\n            MethodInfo method =\n                itemType.GetMethod(member.Name);\n            result = method.Invoke(item, null);\n            type = method.ReturnType;\n            break;\n        case MemberTypes.Property:\n            PropertyInfo property =\n                itemType.GetProperty(member.Name);\n            result = property.GetValue(item);\n            type = property.PropertyType;\n            break;\n        default:\n            throw new ArgumentException(\n                \"Expected property or method.\");\n    }\n\n    return (result, type);\n}\n```", "```cs\npublic class Inventory\n{\n    public string Title { get; set; }\n\n    public List<object> Data { get; set; }\n}\n```", "```cs\nstatic void Main()\n{\n    var inventory = new Inventory\n    {\n        Title = \"Inventory Report\",\n        Data = new List<object>\n        {\n            new InventoryItem\n            {\n                PartNumber = \"1\",\n                Description = \"Part #1\",\n                Count = 3,\n                ItemPrice = 5.26m\n            },\n            new InventoryItem\n            {\n                PartNumber = \"2\",\n                Description = \"Part #2\",\n                Count = 1,\n                ItemPrice = 7.95m\n            },\n            new InventoryItem\n            {\n                PartNumber = \"3\",\n                Description = \"Part #3\",\n                Count = 2,\n                ItemPrice = 23.13m\n            },\n        }\n    };\n\n    string report = new Report().Generate(inventory);\n\n    Console.WriteLine(report);\n}\n```", "```cs\npublic string Generate(object reportDetails)\n{\n    Type reportType = reportDetails.GetType();\n    PropertyInfo titleProp = reportType.GetProperty(\"Title\");\n    string title = (string)titleProp.GetValue(reportDetails);\n\n    var report = new StringBuilder($\"# {title}\\n\\n\");\n\n    PropertyInfo dataProp = reportType.GetProperty(\"Data\");\n    List<object> items =\n        (List<object>)dataProp.GetValue(reportDetails);\n\n    Dictionary<string, ColumnDetail> columnDetails =\n        GetColumnDetails(items);\n    report.Append(GetHeaders(columnDetails));\n    report.Append(GetRows(items, columnDetails));\n\n    return report.ToString();\n}\n```", "```cs\npublic string Generate(dynamic reportDetails)\n{\n    string title = reportDetails.Title;\n\n    var report = new StringBuilder(\n        $\"# {title}\\n\\n\");\n\n    List<object> items = reportDetails.Data;\n\n    Dictionary<string, ColumnDetail> columnDetails =\n        GetColumnDetails(items);\n    report.Append(GetHeaders(columnDetails));\n    report.Append(GetRows(items, columnDetails));\n\n    return report.ToString();\n}\n```", "```cs\npublic enum ReportType\n{\n    Html,\n    Markdown,\n    ExcelTyped,\n    ExcelDynamic\n}\n```", "```cs\npublic class ExcelTypedGenerator<TData> : GeneratorBase<TData>\n{\n    ApplicationClass excelApp;\n    Workbook wkBook;\n    Worksheet wkSheet;\n\n    public ExcelTypedGenerator()\n    {\n        excelApp = new ApplicationClass();\n        excelApp.Visible = true;\n\n        wkBook = excelApp.Workbooks.Add(Missing.Value);\n        wkSheet = (Worksheet)wkBook.ActiveSheet;\n    }\n\n    protected override StringBuilder GetTitle()\n    {\n        wkSheet.Cells[1, 1] = \"Report\";\n\n        return new StringBuilder(\"Added Title...\\n\");\n    }\n\n    protected override StringBuilder GetHeaders(\n        Dictionary<string, ColumnDetail> details)\n    {\n        ColumnDetail[] values = details.Values.ToArray();\n\n        for (int i = 0; i < values.Length; i++)\n        {\n            ColumnDetail detail = values[i];\n            wkSheet.Cells[3, i+1] = detail.Attribute.Name;\n        }\n\n        return new StringBuilder(\"Added Header...\\n\");\n    }\n\n    protected override StringBuilder GetRows(\n        List<TData> items,\n        Dictionary<string, ColumnDetail> details)\n    {\n        const int DataStartRow = 4;\n\n        int rows = items.Count;\n        int cols = details.Count;\n\n        var data = new string[rows, cols];\n\n        for (int i = 0; i < rows; i++)\n        {\n            List<string> columns =\n                GetColumns(details.Values, items[i]);\n\n            for (int j = 0; j < cols; j++)\n            {\n                data[i, j] = columns[j];\n            }\n        }\n\n        int FirstCol = 'A';\n        int LastExcelCol = FirstCol + cols - 1;\n        int LastExcelRow = DataStartRow + rows - 1;\n        string EndRangeCol = ((char)LastExcelCol).ToString();\n        string EndRangeRow = LastExcelRow.ToString();\n\n        string EndRange = EndRangeCol + EndRangeRow;\n        string BeginRange = \"A\" + DataStartRow.ToString();\n\n        var dataRange = wkSheet.get_Range(BeginRange, EndRange);\n        dataRange.Value2 = data;\n\n        wkBook.SaveAs(\n            \"Report.xlsx\", Missing.Value, Missing.Value,\n            Missing.Value, Missing.Value, Missing.Value,\n            XlSaveAsAccessMode.xlShared, Missing.Value, Missing.Value,\n            Missing.Value, Missing.Value, Missing.Value);\n\n        return new StringBuilder(\n            \"Added Data...\\n\" +\n            \"Excel file created at Report.xlsx\");\n    }\n}\n```", "```cs\npublic class ExcelDynamicGenerator<TData> : GeneratorBase<TData>\n{\n    ApplicationClass excelApp;\n    dynamic wkBook;\n    Worksheet wkSheet;\n\n    public ExcelDynamicGenerator()\n    {\n        excelApp = new ApplicationClass();\n        excelApp.Visible = true;\n\n        wkBook = excelApp.Workbooks.Add();\n        wkSheet = wkBook.ActiveSheet;\n    }\n\n    protected override StringBuilder GetTitle()\n    {\n        wkSheet.Cells[1, 1] = \"Report\";\n\n        return new StringBuilder(\"Added Title...\\n\");\n    }\n\n    protected override StringBuilder GetHeaders(\n        Dictionary<string, ColumnDetail> details)\n    {\n        ColumnDetail[] values = details.Values.ToArray();\n\n        for (int i = 0; i < values.Length; i++)\n        {\n            ColumnDetail detail = values[i];\n            wkSheet.Cells[3, i+1] = detail.Attribute.Name;\n        }\n\n        return new StringBuilder(\"Added Header...\\n\");\n    }\n\n    protected override StringBuilder GetRows(\n        List<TData> items,\n        Dictionary<string, ColumnDetail> details)\n    {\n        const int DataStartRow = 4;\n\n        int rows = items.Count;\n        int cols = details.Count;\n\n        var data = new string[rows, cols];\n\n        for (int i = 0; i < rows; i++)\n        {\n            List<string> columns =\n                GetColumns(details.Values, items[i]);\n\n            for (int j = 0; j < cols; j++)\n            {\n                data[i, j] = columns[j];\n            }\n        }\n\n        int FirstCol = 'A';\n        int LastExcelCol = FirstCol + cols - 1;\n        int LastExcelRow = DataStartRow + rows - 1;\n        string EndRangeCol = ((char)LastExcelCol).ToString();\n        string EndRangeRow = LastExcelRow.ToString();\n\n        string EndRange = EndRangeCol + EndRangeRow;\n        string BeginRange = \"A\" + DataStartRow.ToString();\n\n        var dataRange = wkSheet.get_Range(BeginRange, EndRange);\n        dataRange.Value2 = data;\n\n        wkBook.SaveAs(\n            \"Report.xlsx\",\n            XlSaveAsAccessMode.xlShared);\n\n        return new StringBuilder(\n            \"Added Data...\\n\" +\n            \"Excel file created at Report.xlsx\");\n    }\n}\n```", "```cs\npublic class LogEntry\n{\n [Column(\"Log Date\", Format = \"{0:yyyy-MM-dd hh:mm}\")]\n    public DateTime CreatedAt { get; set; }\n\n [Column(\"Severity\")]\n    public string Type { get; set; }\n\n [Column(\"Location\")]\n    public string Where { get; set; }\n\n [Column(\"Message\")]\n    public string Description { get; set; }\n}\n```", "```cs\nstatic List<dynamic> GetData()\n{\n    string headers = \"Date|Severity|Location|Message\";\n\n    string logData = GetLogData();\n\n    return\n        (from line in logData.Split('\\n')\n         select new DynamicLog(headers, line))\n        .ToList<dynamic>();\n}\n\nstatic string GetLogData()\n{\n    return\n\"2022-11-12 12:34:56.7890|INFO|Section_05_07.Program|Got this far\\n\" +\n\"2022-11-12 12:35:12.3456|ERROR|Section_05_07.Report|Index out of range\\n\" +\n\"2022-11-12 12:55:34.5678|WARNING|Section_05_07.Report|Please check this\";\n}\n```", "```cs\npublic class DynamicLog : DynamicObject\n{\n    Dictionary<string, string> members =\n        new Dictionary<string, string>();\n\n    public DynamicLog(string headerString, string logString)\n    {\n        string[] headers = headerString.Split('|');\n        string[] logData = logString.Split('|');\n\n        for (int i = 0; i < headers.Length; i++)\n            members[headers[i]] = logData[i];\n    }\n\n    public override bool TryGetMember(\n        GetMemberBinder binder, out object result)\n    {\n        result = members[binder.Name];\n        return true;\n    }\n\n    public override bool TryInvokeMember(\n        InvokeMemberBinder binder, object[] args, out object result)\n    {\n        return base.TryInvokeMember(binder, args, out result);\n    }\n\n    public override bool TrySetMember(\n        SetMemberBinder binder, object value)\n    {\n        members[binder.Name] = (string)value;\n        return true;\n    }\n}\n```", "```cs\nstatic void Main()\n{\n    List<dynamic> logData = GetData();\n\n    var tempDateTime = DateTime.MinValue;\n    List<object> inventory =\n        (from log in logData\n         let canParse =\n            DateTime.TryParse(\n                log.Date, out tempDateTime)\n         select new LogEntry\n         {\n             CreatedAt = tempDateTime,\n             Type = log.Severity,\n             Where = log.Location,\n             Description = log.Message\n         })\n        .ToList<object>();\n\n    string report = new Report().Generate(inventory);\n\n    Console.WriteLine(report);\n}\n```", "```cs\nstring severity = log.Severity;\n```", "```cs\nlog.Severity = \"ERROR\";\n```", "```cs\nstatic List<dynamic> GetData()\n{\n    const int Date = 0;\n    const int Severity = 1;\n    const int Location = 2;\n    const int Message = 3;\n\n    var logEntries = new List<dynamic>();\n\n    string logData = GetLogData();\n\n    foreach (var line in logData.Split('\\n'))\n    {\n        string[] columns = line.Split('|');\n\n        dynamic logEntry = new ExpandoObject();\n\n        logEntry.Date = columns[Date];\n        logEntry.Severity = columns[Severity];\n        logEntry.Location = columns[Location];\n        logEntry.Message = columns[Message];\n\n        logEntries.Add(logEntry);\n    }\n\n    return logEntries;\n}\n\nstatic string GetLogData()\n{\n    return\n        \"2022-11-12 12:34:56.7890|INFO\" +\n        \"|Section_05_07.Program|Got this far\\n\" +\n        \"2022-11-12 12:35:12.3456|ERROR\" +\n        \"|Section_05_07.Report|Index out of range\\n\" +\n        \"2022-11-12 12:55:34.5678|WARNING\" +\n        \"|Section_05_07.Report|Please check this\";\n}\n```", "```cs\nstatic void Main()\n{\n    List<dynamic> logData = GetData();\n\n    var tempDateTime = DateTime.MinValue;\n    List<object> inventory =\n        (from log in logData\n         let canParse =\n            DateTime.TryParse(\n                log.Date, out tempDateTime)\n         select new LogEntry\n         {\n             CreatedAt = tempDateTime,\n             Type = log.Severity,\n             Where = log.Location,\n             Description = log.Message\n         })\n        .ToList<object>();\n\n    string report = new Report().Generate(inventory);\n\n    Console.WriteLine(report);\n}\n```", "```cs\nimport sys\nsys.path.append(\n    \"/System/Library/Frameworks/Python.framework\" +\n    \"/Versions/Current/lib/python2.7\")\n\nfrom random import *\n\nclass SemanticAnalysis:\n    @staticmethod\n    def Eval(text):\n        val = random()\n        return val < .5\n```", "```cs\npublic class Tweet\n{\n [Column(\"Screen Name\")]\n    public string ScreenName { get; set; }\n\n [Column(\"Date\")]\n    public DateTime CreatedAt { get; set; }\n\n [Column(\"Text\")]\n    public string Text { get; set; }\n\n [Column(\"Semantic Analysis\")]\n    public string Semantics { get; set; }\n}\n```", "```cs\nstatic void Main()\n{\n    List<object> tweets = GetTweets();\n\n    string report = new Report().Generate(tweets);\n\n    Console.WriteLine(report);\n}\n```", "```cs\nusing IronPython.Hosting;\nusing Microsoft.Scripting.Hosting;\n```", "```cs\nstatic List<object> GetTweets()\n{\n    ScriptRuntime py = Python.CreateRuntime();\n    dynamic semantic = py.UseFile(\"../../../Semantic.py\");\n    dynamic semanticAnalysis = semantic.SemanticAnalysis();\n\n    DateTime date = DateTime.UtcNow;\n\n    var tweets = new List<object>\n    {\n        new Tweet\n        {\n            ScreenName = \"SomePerson\",\n            CreatedAt = date.AddMinutes(5),\n            Text = \"Comment #1\",\n            Semantics = GetSemanticText(semanticAnalysis, \"Comment #1\")\n        },\n        new Tweet\n        {\n            ScreenName = \"SomePerson\",\n            CreatedAt = date.AddMinutes(7),\n            Text = \"Comment #2\",\n            Semantics = GetSemanticText(semanticAnalysis, \"Comment #2\")\n        },\n        new Tweet\n        {\n            ScreenName = \"SomePerson\",\n            CreatedAt = date.AddMinutes(12),\n            Text = \"Comment #3\",\n            Semantics = GetSemanticText(semanticAnalysis, \"Comment #3\")\n        },\n    };\n\n    return tweets;\n}\n```", "```cs\nstatic string GetSemanticText(dynamic semantic, string text)\n{\n    bool result = semantic.Eval(text);\n    return result ? \"Positive\" : \"Negative\";\n}\n```", "```cs\nimport clr, sys\n\nsys.path.append(\n    r\"C:\\Path Where You Cloned The Project\" +\n    \"\\Chapter05\\Section-05-10\\bin\\Debug\")\nclr.AddReference(\n    r\"C:\\Path Where You Cloned The Project\" +\n    \\Chapter05\\Section-05-10\\bin\\Debug\\PythonToCS.dll\")\n\nfrom PythonToCS import Report\nfrom PythonToCS import InventoryItem\nfrom System import Decimal\n\ninventory = [\n    InventoryItem(\"1\", \"Part #1\", 3, Decimal(5.26)),\n    InventoryItem(\"2\", \"Part #2\", 1, Decimal(7.95)),\n    InventoryItem(\"3\", \"Part #1\", 2, Decimal(23.13))]\n\nrpt = Report()\n\nresult = rpt.GenerateDynamic(inventory)\n\nprint(result)\n```", "```cs\npublic class InventoryItem\n{\n    public InventoryItem(\n        string partNumber, string description,\n        int count, decimal itemPrice)\n    {\n        PartNumber = partNumber;\n        Description = description;\n        Count = count;\n        ItemPrice = itemPrice;\n    }\n\n [Column(\"Part #\")]\n    public string PartNumber { get; set; }\n\n [Column(\"Name\")]\n    public string Description { get; set; }\n\n [Column(\"Amount\")]\n    public int Count { get; set; }\n\n [Column(\"Price\", Format = \"{0:c}\")]\n    public decimal ItemPrice { get; set; }\n}\n```", "```cs\npublic string GenerateDynamic(dynamic[] items)\n{\n    List<object> inventory =\n        (from item in items\n         select new InventoryItem\n         (\n             item.PartNumber,\n             item.Description,\n             item.Count,\n             item.ItemPrice\n         ))\n        .ToList<object>();\n\n    return Generate(inventory);\n}\n```", "```cs\n>pip install pythonnet\n```"]