["```cs\nclass Card\n{\n    public string Value { get; set; }\n    public string Suit { get; set; }\n    public string Name { get { return $\"{Value} of {Suit}\"; } }\n\n    public Card(string value, string suit)\n    {\n        Value = value;\n        Suit = suit;\n    }\n}\n```", "```cs\nCard aceOfSpades = new Card(\"Ace\", \"Spades\");\nConsole.WriteLine(aceOfSpades);  // prints Ace of Spades\n```", "```cs\nSuits mySuit = Suits.Diamonds;\n```", "```cs\nSuits[] myVals= new Suits[3] { Suits.Spades, Suits.Clubs, mySuit };\n```", "```cs\nIsItAHeart(Suits.Oxen);\n```", "```cs\n    List<Card> cards = new List<Card>();\n    ```", "```cs\n    cards.Add(new Card(Values.King, Suits.Diamonds));\n    cards.Add(new Card(Values.Three, Suits.Clubs));\n    cards.Add(new Card(Values.Ace, Suits.Hearts));\n    ```", "```cs\n    class Shoe\n    {\n        public Style Style { \n           get; private set; \n        }\n        public string Color { \n           get; private set;\n        }\n        public Shoe(Style style, string color)\n        {\n            Style = style;\n            Color = color;\n        }\n        public string Description\n        {\n            get { return $\"A {Color} {Style}\"; }\n        }\n    }\n    ```", "```cs\n    The shoe closet is empty.\n    ```", "```cs\n    Press ’a’ to add or ’r’ to remove a shoe: a\n    Add a shoe\n    Press 0 to add a Sneaker\n    Press 1 to add a Loafer\n    Press 2 to add a Sandal\n    Press 3 to add a Flipflop\n    Press 4 to add a Wingtip\n    Press 5 to add a Clog\n    Enter a style: 1\n    Enter the color: black\n\n    The shoe closet contains:\n    Shoe #1: A black Loafer\n    ```", "```cs\n    Press ’a’ to add or ’r’ to remove a shoe: a\n    Add a shoe\n    Press 0 to add a Sneaker\n    Press 1 to add a Loafer\n    Press 2 to add a Sandal\n    Press 3 to add a Flipflop\n    Press 4 to add a Wingtip\n    Press 5 to add a Clog\n    Enter a style: 0\n    Enter the color: blue and white\n\n    The shoe closet contains:\n    Shoe #1: A black Loafer\n    Shoe #2: A blue and white Sneaker\n    ```", "```cs\n    Press ’a’ to add or ’r’ to remove a shoe: r\n    Enter the number of the shoe to remove: 2\n    Removing A blue and white Sneaker\n\n    The shoe closet contains:\n    Shoe #1: A black Loafer\n\n    Press ’a’ to add or ’r’ to remove a shoe: r\n    Enter the number of the shoe to remove: 1\n    Removing A black Loafer\n\n    The shoe closet is empty.\n\n    Press ’a’ to add or ’r’ to remove a shoe:\n    ```", "```cs\nusing System.Collections.Generic;\n```", "```cs\npublic static void PrintDucks(List<Duck> ducks)\n{\n    foreach (Duck duck in ducks) {\n        Console.WriteLine($\"{duck.Size} inch {duck.Kind}\");\n    }\n}\n```", "```cs\nList<Duck> ducks = new List<Duck>() {\n    new Duck() { Kind = KindOfDuck.Mallard, Size = 17 },\n    new Duck() { Kind = KindOfDuck.Muscovy, Size = 18 },\n    new Duck() { Kind = KindOfDuck.Loon, Size = 14 },\n    new Duck() { Kind = KindOfDuck.Muscovy, Size = 11 },\n    new Duck() { Kind = KindOfDuck.Mallard, Size = 14 },\n    new Duck() { Kind = KindOfDuck.Loon, Size = 13 },\n};\n\nPrintDucks(ducks);\n```", "```cs\nusing System.Collections.Generic;\n```", "```cs\nIComparer<Duck> kindComparer = new DuckComparerByKind();\nducks.Sort(kindComparer);\nPrintDucks(ducks);\n```", "```cs\npublic override string ToString()\n{\n    return $\"A {Size} inch {Kind}\";\n}\n```", "```cs\n    foreach (Card card in cards)\n    {\n        Console.WriteLine(card.Name);\n    }\n```", "```cs\n    foreach (Duck duck in ducks) {\n        Console.WriteLine($\"{duck.Size} inch {duck.Kind}\");\n    }\n```", "```cs\n     public static void PrintDucks(List<Duck> ducks) {\n         foreach (Duck duck in ducks) {\n             Console.WriteLine(duck);\n         }\n     }\n```", "```cs\n    public string Name { get { return $\"{Value} of {Suit}\"; } }\n```", "```cs\n    public override string ToString() \n    {\n        return Name;\n    }\n```", "```cs\n    Dictionary<string, string> myDictionary = new Dictionary<string, string>();\n    myDictionary[\"some key\"] = \"some value\";\n    ```", "```cs\n    Dictionary<string, string> myDictionary = new Dictionary<string, string>();\n    myDictionary.Add(\"some key\", \"some value\");\n    ```", "```cs\n    string lookupValue = myDictionary[\"some key\"];\n    ```", "```cs\n    myDictionary.Remove(\"some key\");\n    ```", "```cs\n    foreach (string key in myDictionary.Keys) { ... };\n    ```", "```cs\n    int howMany = myDictionary.Count;\n    ```", "```cs\nDictionary<int, Duck> duckIds = new Dictionary<int, Duck>();\nduckIds.Add(376, new Duck() { Kind = KindOfDuck.Mallard, Size = 15 });\n```", "```cs\nclass RetiredPlayer\n{\n    public string Name { get; private set; }\n    public int YearRetired { get; private set; }\n\n    public RetiredPlayer(string player, int yearRetired)\n    {\n        Name = player;\n        YearRetired = yearRetired;\n    }\n}\n```"]