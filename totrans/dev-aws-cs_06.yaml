- en: Chapter 6\. DevOps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 DevOps
- en: There is a collective realization amongst industry professionals that cloud
    computing enables new workflows. For example, cloud-native solutions like serverless
    computing open new ways to architect solutions in an event-driven manner. Likewise,
    the underlying elastic capabilities of cloud computing enable virtualized storage,
    networking, and computing. DevOps, a blend of practices combining software development
    and operations best practices, is one ideal methodology to harness these new workflows.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 行业专业人士共识认为，云计算使新的工作流程成为可能。例如，像无服务器计算这样的云原生解决方案以事件驱动的方式开辟了新的架构解决方案。同样，云计算的弹性能力支持虚拟化存储、网络和计算。DevOps是一种将软件开发和运营最佳实践结合起来的理想方法，是利用这些新工作流程的理想方法之一。
- en: This chapter’s central focus is identifying the importance of DevOps to utilize
    cloud computing fully. It covers getting started on DevOps for AWS and principles
    supporting DevOps rooted in Japanese culture.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的中心焦点是识别DevOps对充分利用云计算的重要性。它涵盖了在AWS上开始使用DevOps以及根植于日本文化中的支持DevOps的原则。
- en: Getting Started with DevOps on AWS
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AWS上开始使用DevOps
- en: 'An ideal way to get started with DevOps on AWS is with a definition of how
    [AWS sees DevOps](https://oreil.ly/UAhEl): “the combination of cultural philosophies,
    practices, and tools that increases an organization’s ability to deliver applications
    and services at high velocity.” In practice, this means that AWS provides managed
    services that support a high-velocity workflow enabled by DevOps.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在AWS上开始使用DevOps的理想方式是了解[AWS如何看待DevOps](https://oreil.ly/UAhEl)：“结合了文化哲学、实践和工具的组合，提高组织交付应用程序和服务的能力。”在实践中，这意味着AWS提供了支持DevOps高速工作流程的托管服务。
- en: Underneath the surface of DevOps is a definite historical trend of organizational
    best practices supporting the rise of DevOps. Let’s discuss these concepts next.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在DevOps的表面下，有一个明确的历史趋势，即支持DevOps崛起的最佳组织实践。让我们接下来讨论这些概念。
- en: What Are the Principles Behind DevOps?
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps背后的原则是什么？
- en: At the heart of DevOps is the Japanese word *Kaizen*, meaning “improvement”
    or “change for the better.” In [*The Toyota Way*](https://learning.oreilly.com/library/view/the-toyota-way/9781260468526),
    Second Edition (O’Reilly), Jeffrey K. Liker mentions that post-World War II Toyota
    developed a lean manufacturing system that incorporated this Kaizen philosophy.
    Ultimately, this philosophy led to Toyota being one of the leaders in automobile
    manufacturing quality.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 的核心是日语词汇*改善*（Kaizen），意为“改进”或“改变为更好”。在《*丰田方式*》第二版（O’Reilly）中，杰弗里·K·利克提到，二战后，丰田开发了一个融合了这种改善哲学的精益生产系统。最终，这一哲学使丰田成为汽车制造质量的领导者之一。
- en: One of the core principles of the Toyota Production System is that assembly
    line workers will stop the moving production line to fix abnormalities. Another
    way to describe this process is Plan-Do-Check-Act, or PDCA cycle, which is shown
    in [Figure 6-1](#Figure-6-0-13-plan-do-check). First, a problem needs identification;
    next, you try out a solution, analyze the results, implement the fix if it solves
    the problem, or repeat the entire PDCA process.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 丰田生产方式的核心原则之一是组装线工人将停止移动的生产线来修正异常。另一种描述这一过程的方式是计划-执行-检查-执行（PDCA）循环，如[图 6-1](#Figure-6-0-13-plan-do-check)所示。首先需要确定问题；接下来尝试解决方案，分析结果，如果解决了问题则实施修正，或者重复整个PDCA过程。
- en: '![doac 0601](assets/doac_0601.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0601](assets/doac_0601.png)'
- en: Figure 6-1\. Plan-Do-Check-Act lifecycle
  id: totrans-10
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-1\. 计划-执行-检查-执行生命周期
- en: Essentially, PDCA is the scientific method implemented as a manufacturing business
    practice.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，PDCA是作为制造业务实践实施的科学方法。
- en: Note
  id: totrans-12
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: According to *Encylopedia Britannica*, the [scientific method](https://oreil.ly/MP7G4)
    is a “mathematical and experimental technique employed in the sciences. More specifically,
    it is the technique used in the construction and testing of a scientific hypothesis.”
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 根据*大英百科全书*，[科学方法](https://oreil.ly/MP7G4)是“在科学中使用的数学和实验技术。更具体地说，它是用于构建和测试科学假设的技术。”
- en: Related to both Kaizen and the scientific method is the 5 Whys technique in
    debugging the root cause of a problem. This technique works in the following manner.
    First, you identify a problem. Next, you ask “why” when you receive an answer,
    you ask why again, until ultimately, by the fifth time, you get to the root cause
    of the issue and have a solution to fix it. The origin of 5 Whys has a historical
    lineage to the Toyota Production System, and it works well with the concept of
    continuously improving a system. In [Figure 6-2](#Figure-6-0-7-five-whys), a real
    scenario on AWS goes through the five stages of debugging.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 与Kaizen和科学方法相关的是在调试问题的根本原因时使用的“五个为什么”技术。这种技术的工作方式如下。首先，您确定一个问题。接下来，您问“为什么”，当您得到答案时，再次问为什么，直到最终通过第五次，您找到问题的根本原因并找到解决方案。
    “五个为什么”的起源具有历史血统，可以追溯到丰田生产系统，并且它与持续改进系统的概念非常契合。在 [图 6-2](#Figure-6-0-7-five-whys)
    中，AWS的一个真实场景展示了五个调试阶段。
- en: '![doac 0602](assets/doac_0602.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0602](assets/doac_0602.png)'
- en: Figure 6-2\. Using 5 Whys to debug a production system
  id: totrans-16
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-2\. 使用“五个为什么”调试生产系统
- en: Note
  id: totrans-17
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Children are intuitively very good at the 5 Whys technique, which is why they
    ask simple, practical questions such as, “Why is the sky blue?” followed by the
    next question. An incredible way to get in the right mindframe for using the 5
    Whys technique is to ask questions the way a child would ask them.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 儿童在使用“五个为什么”技术时非常擅长，这就是为什么他们会问诸如“为什么天空是蓝色？”这样简单而实际的问题，接着是下一个问题。采用与儿童问问题方式相同的方式来使用“五个为什么”技术，是一个非常有效的方法来进入正确的思维框架。
- en: Notice that the series of questions eventually leads to a reasonably straightforward
    fix, i.e., configure machines differently, i.e., use EBS storage, enable a swap
    partition, and configure the memory constraints of the Java process to match the
    resources on the server.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，一系列问题最终导致了一个相当简单的修复，即不同的机器配置，即使用EBS存储，启用交换分区，并配置Java进程的内存约束以匹配服务器上的资源。
- en: As you can see, DevOps isn’t something invented overnight. DevOps derives from
    centuries of improvements in critical thinking, from the scientific method centuries
    ago to, more recently, Kaizen and the Japanese automobile industry. At the heart
    of DevOps is the ancient concept of the scientific method, i.e., asking why. The
    Japanese automobile industry refined this into the methodology of asking why coupled
    with continuous improvement in manufacturing. DevOps is the further refinement
    of this continuous improvement manufacturing methodology in the software engineering
    domain, which is now ideally suited to cloud-native development. Now that we know
    where DevOps came from, let’s discuss the best practices on the AWS platform.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，DevOps 不是一夜之间发明的。DevOps 源自几个世纪以来对批判性思维的改进，从几个世纪前的科学方法到最近的改善和日本汽车工业的Kaizen。在DevOps的核心是古老的科学方法的概念，即提出“为什么”。日本汽车工业将这一理念精炼为提出“为什么”的方法论，结合制造业中的持续改进。DevOps是这一持续改进制造方法论在软件工程领域的进一步完善，现在非常适合云原生开发。现在我们知道DevOps的起源，让我们讨论AWS平台上的最佳实践。
- en: AWS DevOps Best Practices
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS DevOps 最佳实践
- en: 'An ideal place to start with AWS best practices is the [“Introduction to DevOps
    on AWS”](https://oreil.ly/dfLzx) AWS whitepaper. Inside there are six best practices
    listed:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 开始使用AWS最佳实践的理想位置是 [“在AWS上介绍DevOps”](https://oreil.ly/dfLzx) 的AWS白皮书。内部列出了六个最佳实践：
- en: Continuous integration (CI)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成（CI）
- en: The heart and soul of DevOps is a continuous integration system. Developers
    periodically merge changes into a central source control repository where automated
    tests run on the code. You can see the workflow around CI in [Figure 6-3](#Figure-6-0-1-ci).
    A developer in one environment, perhaps a laptop or Cloud9 workspace, pushes changes
    to the source code repository, triggers the build, tests the code, and allows
    it to merge. Later, a second developer pulls these improvements into their checkout
    in a new local environment. Note the tie-in to the concept of Kaizen here, or
    continuous improvement, since each time the build server tests changes, the system
    can improve the quality of the source code.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps的核心是持续集成系统。开发人员定期将更改合并到中央源代码存储库，在那里自动化测试运行在代码上。您可以在 [图 6-3](#Figure-6-0-1-ci)
    中看到CI周围的工作流程。在一个环境中的开发人员，也许是笔记本电脑或Cloud9工作区，推送更改到源代码仓库，触发构建，测试代码，并允许其合并。稍后，第二个开发人员将这些改进拉入他们的新本地环境的检出。请注意这里与Kaizen的概念的联系，或者说持续改进，因为每次构建服务器测试更改时，系统都可以提高源代码的质量。
- en: '![doac 0603](assets/doac_0603.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0603](assets/doac_0603.png)'
- en: Figure 6-3\. Continuous integration workflow
  id: totrans-26
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-3\. 持续集成工作流
- en: Continuous delivery (CD)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付 (CD)
- en: Continuous delivery builds on the concepts of continuous integration by automatically
    testing software pushed into the repository and preparing the software for release
    to any number of environments. In [Figure 6-4](#Figure-6-0-2-cd), you’ll see the
    foundation established by CI. Now, with the addition of IaC, which automatically
    deploys the infrastructure alongside the existing software, the entire system
    can seamlessly deploy to a new environment because the whole process is automated.
    In a CD workflow, containers are a complementary aspect of the deployment since
    they work side by side with the deployment of the code and infrastructure. Kaizen
    again plays a role in deploying improvements automatically. Each commit to the
    source code repository adds improvements to the system, and since changes are
    easy to make, it encourages frequent minor enhancements.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付通过自动测试推送到仓库的软件并为发布到任意数量的环境做准备来构建在持续集成概念之上。在 [图 6-4](#Figure-6-0-2-cd) 中，您将看到由
    CI 建立的基础。现在，随着 IaC 的添加，它可以自动部署基础设施和现有软件，整个系统可以无缝地部署到新环境，因为整个过程是自动化的。在 CD 工作流中，容器是部署的一个补充方面，因为它们与代码和基础设施的部署并行工作。改进的自动部署再次发挥了改进的作用。每次对源代码仓库的提交都会为系统添加改进，由于更改很容易进行，这鼓励频繁的小幅度增强。
- en: '![doac 0604](assets/doac_0604.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0604](assets/doac_0604.png)'
- en: Figure 6-4\. Continuous delivery workflow
  id: totrans-30
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-4\. 持续交付工作流
- en: Infrastructure as Code (IaC)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 基础设施即代码 (IaC)
- en: IaC is a software development best practice that describes treating the provisioning
    and management of Infrastructure as Code checked into a repository. Looking at
    [Figure 6-5](#Figure-6-0-3-iac), the IaC workflow can do many valuable actions
    beyond initially creating the infrastructure. Some of the use cases of IaC include
    making idempotent changes and cleaning up experiments efficiently by deleting
    the entire stack.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: IaC 是软件开发的最佳实践，描述了将基础设施的规划和管理作为代码提交到仓库中。观察 [图 6-5](#Figure-6-0-3-iac)，IaC 工作流可以执行许多有价值的操作，超出了最初创建基础设施的范围。IaC
    的一些用例包括进行幂等更改和通过删除整个堆栈高效地清理实验。
- en: '![doac 0605](assets/doac_0605.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0605](assets/doac_0605.png)'
- en: Figure 6-5\. Infrastructure as Code workflow
  id: totrans-34
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-5\. 基础设施即代码工作流
- en: Note
  id: totrans-35
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '*Idempotent* is a word frequently used with DevOps because it is essential
    to be able to do the same action repeatedly and always have the same state. An
    outstanding example of an idempotent deployment process is IaC that creates an
    S3 bucket with read-only permissions. No matter how often this code runs, the
    result will be the same: an S3 bucket with read-only permissions.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*Idempotent* 是 DevOps 中经常使用的词汇，因为能够重复执行相同的操作并始终保持相同状态非常重要。一个杰出的 idempotent
    部署流程的例子是 IaC 创建具有只读权限的 S3 存储桶。无论这段代码运行多少次，结果都将是相同的：一个具有只读权限的 S3 存储桶。'
- en: The concept of idempotent actions is essential in DevOps because an automated
    agile workflow depends on automation actions that have the same effect no matter
    how often they run. A fantastic example of the mathematical foundations of idempotency
    is multiplying a series of numbers by zero. The result is always zero, no matter
    what number you multiply by zero.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: idempotent actions 的概念在 DevOps 中非常重要，因为自动化的敏捷工作流依赖于无论运行多少次都具有相同效果的自动化操作。一个出色的数学基础的例子就是将一系列数字乘以零。结果始终为零，无论乘以零的是什么数字。
- en: Monitoring and logging
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 监控和日志
- en: Data science for software systems is a unique way to think about monitoring
    and logging. It is essential to use data about the infrastructure and deployed
    application to determine what actions are necessary to maintain a deployed application.
    In [Figure 6-6](#Figure-6-0-4-monitoring-logging), servers send system- and application-level
    logging, metrics, and data from monitoring agents to AWS CloudWatch, where the
    data is centralized and distributed to dashboards, alerts, search, and automated
    insights.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 用于软件系统的数据科学是思考监控和日志的独特方式。使用基础设施和部署的应用程序的数据来确定需要采取的操作是非常重要的。在 [图 6-6](#Figure-6-0-4-monitoring-logging)
    中，服务器发送系统级和应用程序级日志、指标和来自监控代理的数据到 AWS CloudWatch，数据在那里被集中并分发到仪表板、警报、搜索和自动化见解。
- en: '![doac 0606](assets/doac_0606.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0606](assets/doac_0606.png)'
- en: Figure 6-6\. Monitoring and logging is data science for software systems
  id: totrans-41
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-6\. 监控和日志是软件系统的数据科学
- en: Communication and collaboration
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 通信与协作
- en: DevOps is a behavior, not a specific task to check off a list. As a result,
    when teams work together to implement DevOps practices through communication and
    collaboration, an optimal outcome results. In [Figure 6-7](#Figure-6-0-5-communication-collaboration),
    we see that communication embeds in every step of the DevOps lifecycle, from code
    itself and the conversation around it, to the alerts from production systems that
    emit into a chat channel. Note also the possible human interactions on pull requests,
    pushing to production, and monitoring the application in production.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps是一种行为，而不是一个要在清单上勾选的特定任务。因此，当团队通过沟通和协作来实施DevOps实践时，会产生最佳结果。在[图 6-7](#Figure-6-0-5-communication-collaboration)中，我们看到沟通嵌入到DevOps生命周期的每一个步骤中，从代码本身及其周围的对话，到从生产系统发出的警报进入聊天频道。还要注意可能的人类互动，例如拉取请求、推送到生产环境以及在生产中监控应用程序。
- en: '![doac 0607](assets/doac_0607.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0607](assets/doac_0607.png)'
- en: Figure 6-7\. DevOps communication and collaboration
  id: totrans-45
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-7\. DevOps的沟通和协作
- en: Security
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性
- en: Security needs integration at every level of building a software system. Additionally,
    the continuous integration and delivery systems need strict access control governance
    as they deliver software to production. In [Figure 6-8](#Figure-6-0-6-security),
    notice multiple layers of security in an adequately architected system on the
    AWS cloud. This system includes firewall rules layered into a VPC to prevent unauthorized
    network access and policy control that leverages the principle of least privilege
    to secure the system. Encryption for data in transit and rest hardens the environment
    against leaked data. Finally, auditing all security events via AWS CloudTrail
    and two-factor authentication for access to the AWS console adds even more protection.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 安全需要在构建软件系统的每个级别进行集成。此外，持续集成和交付系统需要严格的访问控制治理，因为它们将软件交付到生产环境。在[图 6-8](#Figure-6-0-6-security)中，请注意在AWS云上充分架构的系统中的多层安全性。这个系统包括了防火墙规则分层到VPC中，以防止未经授权的网络访问，并且利用最小特权原则来控制策略，以保护系统安全。数据传输和静态数据的加密加固了环境，以防止数据泄露。最后，通过AWS
    CloudTrail审计所有安全事件，并为访问AWS控制台添加了双因素认证，进一步增强了保护措施。
- en: '![doac 0608](assets/doac_0608.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0608](assets/doac_0608.png)'
- en: Figure 6-8\. DevOps security integration
  id: totrans-49
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-8\. DevOps安全集成
- en: These core DevOps principles are essential to consider when architecting a modern
    solution on the AWS Cloud. Let’s dive deeper into specific CI/CD (continuous integration
    and continuous delivery) services on the AWS platform.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在AWS云上设计现代解决方案时，这些核心的DevOps原则至关重要。让我们更深入地探讨AWS平台上特定的CI/CD（持续集成和持续交付）服务。
- en: Developing with CI/CD on AWS
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AWS上使用CI/CD进行开发
- en: Several AWS-managed services deal with CI/CD, but two critical services are
    [AWS CodeBuild](https://aws.amazon.com/codebuild) and [CodePipeline](https://aws.amazon.com/codepipeline).
    Let’s dive into how they both work.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: AWS管理的多个服务处理CI/CD，但其中两个关键服务是[AWS CodeBuild](https://aws.amazon.com/codebuild)和[CodePipeline](https://aws.amazon.com/codepipeline)。让我们深入了解它们的工作方式。
- en: AWS Code Deploy Services
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS代码部署服务
- en: AWS CodePipeline, AWS CodeBuild, AWS CodeCommit, and AWS CodeDeploy are deeply
    integrated services on AWS and include complementary workflows. AWS CodePipeline
    is a continuous integration and continuous delivery (CI/CD) managed service that
    fully automates software releases. AWS CodeBuild is a fully managed build service
    that handles the components of a build process, including testing, building, and
    releasing packages. AWS CodeDeploy is a managed service that automates the code
    deployment to any instance, including EC2 instances or on-premise servers. Finally,
    AWS CodeCommit is a fully managed code hosting service similar to GitHub or GitLab.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CodePipeline、AWS CodeBuild、AWS CodeCommit和AWS CodeDeploy是AWS上深度集成的服务，并包括互补的工作流程。AWS
    CodePipeline是一个完全自动化软件发布的持续集成和持续交付（CI/CD）托管服务。AWS CodeBuild是一个完全托管的构建服务，处理构建过程的各个组成部分，包括测试、构建和发布软件包。AWS
    CodeDeploy是一个托管服务，自动化代码部署到任何实例，包括EC2实例或本地服务器。最后，AWS CodeCommit是一个完全托管的代码托管服务，类似于GitHub或GitLab。
- en: 'Let’s take a look at the AWS CodePipeline in [Figure 6-9](#Figure-6-0-CodePipeLine)
    and notice how it flows from left to right: source, then build, then test, then
    staging, then production. This workflow encapsulates the lifecycle of a project
    in the real world running on AWS.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下AWS CodePipeline在[图 6-9](#Figure-6-0-CodePipeLine)中的流程，并注意它是如何从左到右流动的：源码、构建、测试、暂存、然后是生产。这个工作流程完整地包括了运行在AWS上的项目的生命周期。
- en: '![doac 0609](assets/doac_0609.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0609](assets/doac_0609.png)'
- en: Figure 6-9\. CodePipeline workflow
  id: totrans-57
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 6-9\. CodePipeline 工作流程
- en: Next, if you open the AWS Console and type in **`CodePipeline`**, the interface
    that pops up is, as shown in [Figure 6-10](#Figure-6-0-8-codepipeline), mapping
    these same real-world steps to distinct stages in the process of deploying software
    on the AWS platform.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，如果你在 AWS 控制台中输入 **`CodePipeline`**，弹出的界面如 [Figure 6-10](#Figure-6-0-8-codepipeline)
    所示，将这些真实世界的步骤映射到 AWS 平台上软件部署过程中的不同阶段。
- en: '![doac 0610](assets/doac_0610.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0610](assets/doac_0610.png)'
- en: Figure 6-10\. CodePipeline interface
  id: totrans-60
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 6-10\. CodePipeline 界面
- en: Since we already briefly covered continuous delivery of a .NET 6 application
    using AWS CodeBuild in [Chapter 5](ch05.xhtml#Chapter5), let’s take a different
    look at how we could be continuously deploying a [Hugo website](https://gohugo.io)
    using AWS CodeBuild. AWS is a common deployment target for hosting a static website
    via Amazon S3, Amazon Route 53, and Amazon CloudFront, as shown in [Figure 6-11](#Figure-6-0-8-hugo-deploy).
    AWS CodeBuild works very well as the deployment mechanism for these sites. You
    can log into AWS CodeBuild, set up a new build project, and tell it to use a [*buildspec.yml*](https://oreil.ly/KNRop).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经简要介绍了使用 AWS CodeBuild 在 [Chapter 5](ch05.xhtml#Chapter5) 中持续交付 .NET 6
    应用程序，让我们看看如何使用 AWS CodeBuild 持续部署 [Hugo 网站](https://gohugo.io)。AWS 是通过 Amazon
    S3、Amazon Route 53 和 Amazon CloudFront 托管静态网站的常见部署目标，如 [Figure 6-11](#Figure-6-0-8-hugo-deploy)
    所示。AWS CodeBuild 非常适合这些站点的部署机制。你可以登录 AWS CodeBuild，设置一个新的构建项目，并告诉它使用 [*buildspec.yml*](https://oreil.ly/KNRop)。
- en: Note
  id: totrans-62
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Hugo is a unique static website hosting technology written in the [Go programming
    language](https://go.dev) that builds pages at <1ms per page. You don’t need to
    use Go to use Hugo; you can write websites in the [Markdown language](https://oreil.ly/uF0Tk).
    The speed to build websites and the ease of writing pages in Markdown make Hugo
    a superior technology for S3 static websites.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Hugo 是一种独特的静态网站托管技术，用 [Go 编程语言](https://go.dev) 编写，每页构建速度 <1ms。你不需要使用 Go 来使用
    Hugo；你可以用 [Markdown 语言](https://oreil.ly/uF0Tk) 写网站页面。Hugo 的构建速度和在 Markdown 中编写页面的便利性使其成为
    S3 静态网站的优秀技术选择。
- en: 'Once GitHub gets a change event, CodeBuild runs the install in a container:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 GitHub 接收到变更事件，CodeBuild 就会在容器中运行安装：
- en: It grabs the specific version of Hugo noted in the *buildspec.yml*.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它会获取在 *buildspec.yml* 中指定的 Hugo 版本。
- en: It builds the Hugo pages. Thousands of Hugo pages can be rendered in subseconds
    because of the speed of Go.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它会构建 Hugo 页面。由于 Go 语言的速度快，数千个 Hugo 页面可以在亚秒内渲染完毕。
- en: The HTML pages sync to Amazon S3.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: HTML 页面会同步到 Amazon S3。
- en: Because this sync process runs inside of AWS, it is also speedy.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这个同步过程在 AWS 内部运行，所以速度也非常快。
- en: '![doac 0611](assets/doac_0611.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0611](assets/doac_0611.png)'
- en: Figure 6-11\. Hugo continuous deploy on AWS
  id: totrans-70
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 6-11\. Hugo 在 AWS 上的持续部署
- en: 'Following is a more templated version of an AWS *buildspec.yml*, and you can
    swap out templated values with ones that work for your project:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个 AWS *buildspec.yml* 的更模板化版本，你可以用适合你项目的值替换模板化的值：
- en: '[PRE0]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-73
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You can watch a complete walk-through of Hugo continuous delivery on YouTube
    [here](https://oreil.ly/UjqS0), and also follow along with notes on Hugo on the
    Pragmatic AI Labs [website](https://oreil.ly/saRAN).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 YouTube 上观看完整的 Hugo 持续交付过程的视频 [here](https://oreil.ly/UjqS0)，也可以在 Pragmatic
    AI Labs 的 Hugo 网站上查看相关笔记 [website](https://oreil.ly/saRAN)。
- en: Now that we have more insight into the pure AWS build solution, let’s discuss
    how third-party build servers work with .NET on AWS.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对纯 AWS 构建解决方案有了更多了解，让我们讨论一下如何在 AWS 上使用第三方构建服务器来处理 .NET。
- en: Integrating Third-Party Build Servers
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成第三方构建服务器
- en: Not only can you use AWS build servers to build and deploy .NET to AWS, but
    there is beautiful support for third-party build servers, including [Jenkins](https://www.jenkins.io),
    [Azure DevOps](https://oreil.ly/wwt7c), and [GitHub Actions](https://docs.github.com/en/actions).
    Let’s mainly focus on GitHub Actions since it is the most widely used managed
    build service.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅可以使用 AWS 构建服务器构建和部署 .NET 到 AWS，而且还支持包括 [Jenkins](https://www.jenkins.io)、[Azure
    DevOps](https://oreil.ly/wwt7c) 和 [GitHub Actions](https://docs.github.com/en/actions)
    在内的第三方构建服务器，让我们主要关注 GitHub Actions，因为它是最广泛使用的托管构建服务。
- en: Note
  id: totrans-78
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You can watch a walk-through of setting up a C# xUnit project with GitHub Actions
    on [YouTube](https://youtu.be/6OkcNWGA6FY).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以观看在 [YouTube](https://youtu.be/6OkcNWGA6FY) 上设置 C# xUnit 项目与 GitHub Actions
    的视频教程。
- en: In building solutions with GitHub Actions, an ideal place to make code solutions
    is with [GitHub CodeSpaces](https://oreil.ly/YH0i2), as shown launching in [Figure 6-12](#Figure-6-0-9-github-codespaces).
    The code for the repository lives [here](https://oreil.ly/BlklG), and by selecting
    the green Code button, we can launch a 16-core workspace that has a clean Visual
    Studio interface.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 GitHub Actions 构建解决方案时，一个理想的代码解决方案是使用 [GitHub CodeSpaces](https://oreil.ly/YH0i2)，如在
    [Figure 6-12](#Figure-6-0-9-github-codespaces) 中所示。仓库的代码位于[这里](https://oreil.ly/BlklG)，通过选择绿色的
    Code 按钮，我们可以启动一个具有干净的 Visual Studio 界面的 16 核工作区。
- en: '![doac 0612](assets/doac_0612.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0612](assets/doac_0612.png)'
- en: Figure 6-12\. GitHub CodeSpaces
  id: totrans-82
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 6-12\. GitHub CodeSpaces
- en: Note
  id: totrans-83
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: GitHub CodeSpaces is a paid service that allows development in a web-based development
    environment. If your organization does not have access to this service, an alternative
    is AWS Cloud9, which has many similar features, but with the advantage of deep
    AWS integration.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub CodeSpaces 是一项付费服务，允许在基于 web 的开发环境中进行开发。如果你的组织无法访问此服务，一个替代选择是 AWS Cloud9，它具有许多相似的功能，但优势在于深度集成
    AWS。
- en: Notice that we created a file inside the path *.github/workflows* called *dotnet.yml*,
    which contains the entire workflow to build and test our project as shown in [Figure 6-13](#Figure-6-0-11-vscode).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们在路径 *.github/workflows* 中创建了一个名为 *dotnet.yml* 的文件，其中包含了构建和测试项目的整个工作流程，如
    [Figure 6-13](#Figure-6-0-11-vscode) 所示。
- en: '![doac 0613](assets/doac_0613.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0613](assets/doac_0613.png)'
- en: Figure 6-13\. GitHub CodeSpaces workflow
  id: totrans-87
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 6-13\. GitHub CodeSpaces 工作流程
- en: 'The *dotnet.yml* shows that the key steps are to restore the dependency, build
    the project, and then test the project:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*dotnet.yml* 显示的关键步骤是恢复依赖项、构建项目，然后测试项目：'
- en: '[PRE1]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](assets/1.png)](#co_devops_1)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_devops_1)'
- en: Restore dependencies.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 恢复依赖项。
- en: '[![2](assets/2.png)](#co_devops_2)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_devops_2)'
- en: Build the project.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 构建项目。
- en: '[![3](assets/3.png)](#co_devops_3)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_devops_3)'
- en: Test the project.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 测试项目。
- en: 'To create the structure for the project, first, create a directory and `cd`
    into it:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要为项目创建结构，首先创建一个目录并 `cd` 进入其中：
- en: '[PRE2]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, use `dotnet new xunit` to create the project. Finally, paste the following
    code block inside your source code file. Let’s walk through what the code does:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用 `dotnet new xunit` 创建项目。最后，将以下代码块粘贴到你的源代码文件中。让我们分析一下代码的功能：
- en: '[PRE3]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[![1](assets/1.png)](#co_devops_2-1)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_devops_2-1)'
- en: The `[Fact]` block is the unit test that tests the `add` function
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`[Fact]` 块是测试 `add` 函数的单元测试'
- en: '[![2](assets/2.png)](#co_devops_2-2)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_devops_2-2)'
- en: There is an “inline” method, `Add`, which we run tests on.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 存在一个名为 `Add` 的“内联”方法，我们在其上运行测试。
- en: 'To run this project, you perform the following actions:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行此项目，执行以下操作：
- en: 'Install the dependencies: `dotnet restore`.'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装依赖项：`dotnet restore`。
- en: 'Build the project: `dotnet build --no-restore`.'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建项目：`dotnet build --no-restore`。
- en: 'Test the project: `dotnet test --no-build --verbosity normal`.'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试项目：`dotnet test --no-build --verbosity normal`。
- en: You can see the final output in [Figure 6-14](#Figure-6-0-10-github-actions)
    showing a successful run of GitHub Actions. What is extremely useful about this
    entire workflow is how easy it is to add steps for a project, like deploying to
    AWS. A helpful blog post on AWS shows a detailed example of how to [deploy code
    to AWS from GitHub Actions](https://oreil.ly/jNRng).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [Figure 6-14](#Figure-6-0-10-github-actions) 中看到最终的输出，显示了 GitHub Actions
    的成功运行。整个工作流程之所以如此有用，是因为它如何轻松地为项目添加步骤，比如部署到 AWS。AWS 的一篇有帮助的博文展示了如何从 GitHub Actions
    部署代码到 AWS 的详细示例。
- en: '![doac 0614](assets/doac_0614.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0614](assets/doac_0614.png)'
- en: Figure 6-14\. GitHub Actions build process
  id: totrans-110
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 6-14\. GitHub Actions 构建过程
- en: Note
  id: totrans-111
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'It is also worth noting that many AWS services or tools have automatic pipelines
    built in:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 还值得注意的是，许多 AWS 服务或工具都内置了自动流水线：
- en: AWS App Runner
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: AWS App Runner
- en: '[AWS App Runner](https://oreil.ly/mIA74) has a feature for automatic deployments
    from GitHub. When you connect App Runner to your code repository or container
    image registry, App Runner can automatically build and deploy your application
    when you update your source code or container image.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '[AWS App Runner](https://oreil.ly/mIA74) 具有从 GitHub 自动部署的功能。当你将 App Runner
    连接到你的代码仓库或容器镜像注册表时，App Runner 可以在更新源代码或容器镜像时自动构建和部署你的应用程序。'
- en: AWS Copilot
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Copilot
- en: '[AWS Copilot](https://oreil.ly/YQVjZ) can provision multiple deployment environments
    for you, such as testing and production environments. Additionally, Copilot can
    set up a CI/CD pipeline to automatically deploy.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[AWS Copilot](https://oreil.ly/YQVjZ)可以为您配置多个部署环境，如测试和生产环境。此外，Copilot还可以设置CI/CD管道以自动部署。'
- en: Integration with Partner Products
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 合作伙伴产品集成
- en: 'It is worth noting that there are many great options for third-party partner
    products, including Jenkins, TeamCity, Azure DevOps, and Terraform. A great place
    to highlight integrations with AWS CodeDeploy is the [“Integration with partner
    products and services” section of the AWS documentation](https://oreil.ly/cof1J).
    Here are standout highlighted resources:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，有许多优秀的第三方合作伙伴产品选择，包括Jenkins、TeamCity、Azure DevOps和Terraform。强调AWS CodeDeploy与合作伙伴产品集成的最佳地方是[AWS文档的“与合作伙伴产品和服务集成”部分](https://oreil.ly/cof1J)。以下是突出显示的资源：
- en: Jenkins
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins
- en: Jenkins is an open source Swiss Army knife of build systems, and AWS provides
    outstanding support. One key advantage of Jenkins is the ability to mount a network
    filesystem on AWS and integrate that with your build and deploy process. You can
    read about how to [set up CI/CD pipelines with Jenkins](https://oreil.ly/es2pf)
    with AWS App2Container as well as use [AWS CodeBuild with Jenkins](https://oreil.ly/MEAe7).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins是一个开源的构建系统的瑞士军刀，并且AWS提供出色的支持。Jenkins的一个关键优势是能够在AWS上挂载网络文件系统，并将其与您的构建和部署流程集成。您可以阅读有关如何使用[AWS
    App2Container设置CI/CD流水线](https://oreil.ly/es2pf)，以及如何使用[AWS CodeBuild与Jenkins集成](https://oreil.ly/MEAe7)。
- en: TeamCity
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: TeamCity
- en: TeamCity is a classic build system that many experienced and new .NET developers
    love. A team using TeamCity can use the [AWS CodeDeploy Runner plugin](https://oreil.ly/RisFO)
    to deploy directly to AWS.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: TeamCity是许多经验丰富和新手.NET开发人员喜爱的经典构建系统。使用TeamCity的团队可以使用[AWS CodeDeploy Runner插件](https://oreil.ly/RisFO)直接部署到AWS。
- en: Azure DevOps
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Azure DevOps
- en: AWS App2Container has integration with [Microsoft Azure DevOps](https://oreil.ly/sKTWK).
    The [AWS Toolkit for Azure DevOps](https://aws.amazon.com/vsts) allows you to
    deploy .NET code to AWS without leaving the existing build/release pipeline.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: AWS App2Container已与[Microsoft Azure DevOps集成](https://oreil.ly/sKTWK)。[AWS Toolkit
    for Azure DevOps](https://aws.amazon.com/vsts)允许您在不离开现有的构建/发布管道的情况下部署.NET代码到AWS。
- en: Terraform
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform
- en: HashiCorp has integration with [AWS CodeDeploy](https://oreil.ly/NhcdI), allowing
    developers to not only use [Terraform CDK in C#](https://www.terraform.io/cdktf),
    but also products like [Consul](https://oreil.ly/MoiAW).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: HashiCorp已经与[AWS CodeDeploy](https://oreil.ly/NhcdI)集成，使开发人员不仅可以使用[Terraform
    CDK in C#](https://www.terraform.io/cdktf)，还可以使用像[Consul](https://oreil.ly/MoiAW)这样的产品。
- en: Now that you understand how to integrate tests with third-party partner integrations,
    including GitHub Actions, let’s discuss IaC.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了如何与包括GitHub Actions在内的第三方合作伙伴集成进行测试，让我们来讨论IaC。
- en: Developing with IaC on AWS
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AWS上进行IaC开发
- en: IaC is code that defines the infrastructure and maintains it. Ultimately, containers
    and IaC are complementary technologies on the AWS platform. Notice in [Figure 6-15](#Figure-6-1-aws-flavored-devops)
    that GitHub contains the essential elements of a project, including the build
    system file, the IaC file, the source code, and the Dockerfile.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: IaC是定义基础架构并进行维护的代码。在AWS平台上，容器和IaC是互补的技术。请注意，在[图6-15](#Figure-6-1-aws-flavored-devops)中，GitHub包含项目的关键元素，包括构建系统文件、IaC文件、源代码和Dockerfile。
- en: '![doac 0615](assets/doac_0615.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0615](assets/doac_0615.png)'
- en: Figure 6-15\. AWS-flavored containerized DevOps
  id: totrans-131
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6-15\. AWS风格的容器化DevOps
- en: In many scenarios, you could have all elements of a containerized microservice
    defined in a single repository, making it easy to debug and build locally or in
    a new environment. IaC enables part of this workflow. Let’s talk about how an
    AWS IaC solution called Cloud Development Kit (CDK)) helps with this.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多场景中，您可以在单个存储库中定义容器化微服务的所有元素，从而便于在本地或新环境中进行调试和构建。IaC使部分工作流程变得可能。让我们来谈谈AWS的IaC解决方案Cloud
    Development Kit (CDK)如何帮助实现这一点。
- en: Working with AWS CDK in C#
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在C#中使用AWS CDK开发
- en: '[AWS CDK](https://aws.amazon.com/cdk) is open source and supported by AWS.
    It provides many benefits, including faster development and [rich examples](https://oreil.ly/xrLwb).
    The [unit of deployment](https://oreil.ly/mG6iD) in the AWS CDK is called a *stack*.
    For example, to create two stacks representing a “development” and “production”
    environment, use the following C# code:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '[AWS CDK](https://aws.amazon.com/cdk) 是由AWS支持的开源项目。它提供了许多好处，包括更快的开发和[丰富的示例](https://oreil.ly/xrLwb)。在AWS
    CDK中，部署的基本单位称为*堆栈*。例如，要创建代表“开发”和“生产”环境的两个堆栈，可以使用以下C#代码：'
- en: '[PRE4]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To synthesize one stack, you run `cdk synth dev`. Behind the scenes, this then
    [creates the CloudFormation template](https://oreil.ly/UtxOT).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 要合成一个堆栈，您可以运行 `cdk synth dev`。在幕后，这将[创建CloudFormation模板](https://oreil.ly/UtxOT)。
- en: Note
  id: totrans-137
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: It is worth noting that [constructs](https://oreil.ly/l2j1s) are fundamental
    building blocks of AWS CDK apps and contain everything necessary to build a resource,
    say an S3 bucket. The [Construct Hub](https://constructs.dev) includes over 600
    .NET CDK constructs and is a recommended resource for building solutions efficiently
    and with AWS’s best practices behind you.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，[构造](https://oreil.ly/l2j1s) 是AWS CDK应用程序的基本构建块，包含构建资源（比如S3存储桶）所需的一切。[构造中心](https://constructs.dev)包含600多个.NET
    CDK构造，并且是构建高效解决方案的推荐资源，符合AWS最佳实践。
- en: You can see the concepts defined in [Figure 6-16](#Figure-6-11-AppStacks). At
    the core of CDK is the idea of writing code that then turns into infrastructure
    since the infrastructure is a virtual resource. Notice that the C# language compiles
    down to [CloudFormation](https://oreil.ly/pBAiY), which then provisions resources.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以查看在[Figure 6-16](#Figure-6-11-AppStacks)中定义的概念。CDK的核心思想是编写代码，然后将其转换为基础设施，因为基础设施是一种虚拟资源。请注意，C#语言编译成[CloudFormation](https://oreil.ly/pBAiY)，然后为资源提供支持。
- en: '![doac 0616](assets/doac_0616.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0616](assets/doac_0616.png)'
- en: Figure 6-16\. CDK architecture
  id: totrans-141
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-16\. CDK 架构
- en: Note
  id: totrans-142
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '[AWS CloudFormation](https://oreil.ly/lfNIR) is a form of IaC that lets you
    manage AWS resources by treating infrastructure as code written in JSON or YAML.
    Some developers prefer CDK over regular CloudFormation because it takes less code
    to build the same solution. Further, you can create solutions in your favorite
    language, such as C#. This [blog post](https://oreil.ly/CMBVE) is a perfect example
    of what you can do with CloudFormation and .NET.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '[AWS CloudFormation](https://oreil.ly/lfNIR) 是一种基础设施即代码（IaC）的形式，允许您通过将基础设施视为JSON或YAML中编写的代码来管理AWS资源。一些开发者更喜欢CDK而不是常规的CloudFormation，因为它需要更少的代码来构建相同的解决方案。此外，您可以使用您喜爱的语言，比如C#，来创建解决方案。这篇[博客文章](https://oreil.ly/CMBVE)是使用CloudFormation和.NET的完美示例。'
- en: In practice, a developer can use one of two approaches with CDK. The first approach
    is to write CDK in C#, and there is a rich toolchain of examples, including many
    exciting examples on the [.NET Workshop page](https://oreil.ly/acwT1). A second
    approach is to use a high-level abstraction that generates the CDK code for you,
    like `dotnet aws deploy`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际操作中，开发者可以使用CDK的两种方法之一。第一种方法是使用C#编写CDK，其中包括许多精彩的示例在[.NET Workshop页面](https://oreil.ly/acwT1)上。第二种方法是使用高级抽象，它为您生成CDK代码，比如
    `dotnet aws deploy`。
- en: One example of this approach comes from the AWS Deploy Tool to deploy a [Blazor
    WebAssembly application](https://oreil.ly/O9AfD). The key idea is that you must
    run `dotnet aws deploy`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: AWS部署工具中的一个例子是部署[Blazor WebAssembly 应用程序](https://oreil.ly/O9AfD)。关键思想是您必须运行
    `dotnet aws deploy`。
- en: 'For example, in your development environment, you can do the following:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在您的开发环境中，您可以执行以下操作：
- en: 'Install or update the `dotnet` AWS deploy tool: `dotnet tool install -g aws.deploy.tools`.'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装或更新 `dotnet` AWS部署工具：`dotnet tool install -g aws.deploy.tools`。
- en: 'Create a new Blazor WebAssembly application: `dotnet new blazorserver -o BlazorApp
    --no-https && BlazorApp`.'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的Blazor WebAssembly应用程序：`dotnet new blazorserver -o BlazorApp --no-https
    && BlazorApp`。
- en: Finally, deploy by running the command `dotnet aws deploy`.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，通过运行命令 `dotnet aws deploy` 进行部署。
- en: You can refer to the latest documentation on [GitHub](https://oreil.ly/RUgOb)
    to check out the latest options for using this deployment process.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以参考[Github](https://oreil.ly/RUgOb)上的最新文档，了解使用此部署过程的最新选项。
- en: Note
  id: totrans-151
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: There are IaC solutions beyond just CDK. One of the more popular is [Terraform](https://www.terraform.io/cdktf),
    which has a CDKTF or Cloud Development Kit for Terraform with C# support. Another
    solution provider is Pulumi, and you can find a great example of how to publish
    a [C# Lambda, here](https://oreil.ly/3y4NQ).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 除了CDK之外，还有其他IaC解决方案。其中较为流行的之一是[Terraform](https://www.terraform.io/cdktf)，它具有支持C#的CDKTF或云开发工具包。另一个解决方案提供者是Pulumi，你可以在这里找到一个关于如何发布[C#
    Lambda的很好的例子](https://oreil.ly/3y4NQ)。
- en: As a final point, it is essential to point out that some AWS tools automatically
    create and deploy CDK projects. Examples include the [AWS deployment tool for
    .NET CLI](https://oreil.ly/ZmsmQ) and AWS Toolkit for Visual Studio—[Publish to
    AWS feature](https://oreil.ly/jXtPb). Additionally, with [CDK deployment projects](https://oreil.ly/WHjKB),
    you can add additional AWS resources like Amazon SQS queues, Amazon DynamoDB tables,
    and more.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 最后要指出的是，一些AWS工具可以自动创建和部署CDK项目。例如，[AWS .NET CLI的部署工具](https://oreil.ly/ZmsmQ)和AWS
    Toolkit for Visual Studio的[Publish to AWS功能](https://oreil.ly/jXtPb)。此外，通过[CDK部署项目](https://oreil.ly/WHjKB)，您可以添加额外的AWS资源，如Amazon
    SQS队列、Amazon DynamoDB表等。
- en: Now that we have an overview of Infrastructure as Code, let’s wrap up everything
    we covered in this chapter.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对基础设施即代码有了一个概述，让我们总结一下我们在本章中涵盖的所有内容。
- en: Conclusion
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: This chapter covered the historical origin of DevOps, including this history
    of continuous improvement in the Japanese automobile industry. At the heart of
    modern DevOps is an embrace of the cloud. Cloud computing enables even deeper
    coupling of automation, testing, and speed of deployment. One example of this
    integration is IaC, which is the perfect vehicle for DevOps workflows. DevOps
    also enables optimal human interaction at key points of the lifecycle of software
    engineering, from code reviews via pull requests to working with a release manager
    on a production software release to finally monitoring the production system.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了DevOps的历史起源，包括日本汽车工业持续改进的历史。现代DevOps的核心是对云的拥抱。云计算使自动化、测试和部署速度进一步耦合。一个这种集成的例子是IaC，这是DevOps工作流的完美工具。DevOps还通过在软件工程的生命周期关键点上进行人类交互，从代码审查通过拉取请求到与发布经理在生产软件发布上的工作，实现了最佳化。
- en: Another topic we covered is how AWS thinks of DevOps and the best practices
    of DevOps on AWS. We then used build systems like AWS CodeBuild and third-party
    systems like GitHub Actions. AWS has tight integration of each component and can
    replace any third-party tool if your organization chooses or integrates with them.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还涵盖了AWS如何看待DevOps以及在AWS上的DevOps最佳实践。然后我们使用了构建系统，如AWS CodeBuild和第三方系统，如GitHub
    Actions。AWS对每个组件有紧密集成，并可以替换任何第三方工具，如果您的组织选择或与其集成。
- en: Finally, we ended the chapter with IaC, an essential tool for DevOps automation
    of infrastructure. We showed how you could do a one-line command to deploy static
    websites to AWS S3 using the AWS .NET deployment tool. This tool’s ability to
    wrap up CDK and make it part of the automation lifecycle is extremely powerful.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们以IaC结束了这一章，这是DevOps基础设施自动化的重要工具。我们展示了如何使用AWS .NET部署工具对静态网站进行一行命令部署到AWS
    S3。这个工具将CDK集成并将其作为自动化生命周期的一部分，功能非常强大。
- en: This chapter’s big takeaway is that AWS takes DevOps seriously and provides
    a whole set of managed services and best practices to enable you to build maintainable
    and agile solutions. Next up in [Chapter 7](ch07.xhtml#Chapter7), we cover logging,
    monitoring, and instrumentation for .NET, which builds upon the foundational knowledge
    we covered on DevOps. Before heading to that chapter, try some critical thinking
    questions and examples to cement your DevOps understanding further.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的重要收获是AWS认真对待DevOps，并提供一整套托管服务和最佳实践，使您能够构建可维护和敏捷的解决方案。接下来在[第七章](ch07.xhtml#Chapter7)，我们将讨论.NET的日志记录、监控和仪表化，这进一步建立在我们对DevOps的基础知识之上。在转向该章之前，尝试一些批判性思维的问题和例子，以进一步巩固您对DevOps的理解。
- en: Critical Thinking Discussion Questions
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 批判性思维讨论问题
- en: What is your definition of DevOps, and how can you use it to enhance organizational
    outcomes?
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你对DevOps的定义是什么，以及如何利用它来增强组织的成果？
- en: What is the advantage of using the [.NET AWS CDK framework](https://oreil.ly/6xBjV)
    to define cloud application resources on AWS?
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[.NET AWS CDK框架](https://oreil.ly/6xBjV)定义AWS上的云应用资源的优势是什么？
- en: Which [AWS deployment strategy](https://oreil.ly/MRqXj) most closely aligns
    with where your organization works best?
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哪种 [AWS 部署策略](https://oreil.ly/MRqXj) 最符合您组织的最佳工作方式？
- en: Why is it essential to use [AWS CloudTrail](https://oreil.ly/aa2ID) for any
    AWS deployment?
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为任何 AWS 部署使用 [AWS CloudTrail](https://oreil.ly/aa2ID) 的重要性是什么？
- en: What could be an advantage of using AWS CodeCommit versus a third-party source
    code hosting service?
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 AWS CodeCommit 相比第三方源代码托管服务的优势是什么？
- en: Exercises
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: Use AWS CodeBuild to deploy a static S3 site using [AWS CDK in C#](https://oreil.ly/TK8X2).
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 AWS CodeBuild 部署一个静态 S3 站点，使用 [AWS CDK in C#](https://oreil.ly/TK8X2)。
- en: Set up a continuous integration workflow for a .NET 6 project using GitHub Actions
    that tests code automatically upon check-in.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GitHub Actions 为 .NET 6 项目设置持续集成工作流程，以便在提交后自动测试代码。
- en: Set up a continuous integration workflow for a .NET 6 project using AWS Code
    Build.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 AWS CodeBuild 为 .NET 6 项目设置持续集成工作流程。
- en: Find an example CDK application in the [csharp](https://oreil.ly/JIHP3) repo
    and deploy it to your AWS environment.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [csharp](https://oreil.ly/JIHP3) 存储库中找到一个 CDK 应用程序示例，并将其部署到您的 AWS 环境。
- en: Continuously deploy your own Hugo website and blog about .NET on AWS using your
    own homegrown CMS.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续部署您自己的 Hugo 网站，并使用自己开发的 CMS 在 AWS 上发布关于 .NET 的博客。
