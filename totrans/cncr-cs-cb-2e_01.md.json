["```cs\nasync Task DoSomethingAsync()\n{\n  int value = 13;\n\n  // Asynchronously wait 1 second.\n  await Task.Delay(TimeSpan.FromSeconds(1));\n\n  value *= 2;\n\n  // Asynchronously wait 1 second.\n  await Task.Delay(TimeSpan.FromSeconds(1));\n\n  Trace.WriteLine(value);\n}\n```", "```cs\nasync Task DoSomethingAsync()\n{\n  int value = 13;\n\n  // Asynchronously wait 1 second.\n  await Task.Delay(TimeSpan.FromSeconds(1)).ConfigureAwait(false);\n\n  value *= 2;\n\n  // Asynchronously wait 1 second.\n  await Task.Delay(TimeSpan.FromSeconds(1)).ConfigureAwait(false);\n\n  Trace.WriteLine(value);\n}\n```", "```cs\nasync Task TrySomethingAsync()\n{\n  try\n  {\n    await PossibleExceptionAsync();\n  }\n  catch (NotSupportedException ex)\n  {\n    LogException(ex);\n    throw;\n  }\n}\n```", "```cs\nasync Task TrySomethingAsync()\n{\n  // The exception will end up on the Task, not thrown directly.\n  Task task = PossibleExceptionAsync();\n\n  try\n  {\n    // The Task's exception will be raised here, at the await.\n    await task;\n  }\n  catch (NotSupportedException ex)\n  {\n    LogException(ex);\n    throw;\n  }\n}\n```", "```cs\nasync Task WaitAsync()\n{\n  // This await will capture the current context ...\n  await Task.Delay(TimeSpan.FromSeconds(1));\n  // ... and will attempt to resume the method here in that context.\n}\n\nvoid Deadlock()\n{\n  // Start the delay.\n  Task task = WaitAsync();\n\n  // Synchronously block, waiting for the async method to complete.\n  task.Wait();\n}\n```", "```cs\nvoid RotateMatrices(IEnumerable<Matrix> matrices, float degrees)\n{\n  Parallel.ForEach(matrices, matrix => matrix.Rotate(degrees));\n}\n```", "```cs\nIEnumerable<bool> PrimalityTest(IEnumerable<int> values)\n{\n  return values.AsParallel().Select(value => IsPrime(value));\n}\n```", "```cs\nvoid ProcessArray(double[] array)\n{\n  Parallel.Invoke(\n      () => ProcessPartialArray(array, 0, array.Length / 2),\n      () => ProcessPartialArray(array, array.Length / 2, array.Length)\n  );\n}\n\nvoid ProcessPartialArray(double[] array, int begin, int end)\n{\n  // CPU-intensive processing...\n}\n```", "```cs\ntry\n{\n  Parallel.Invoke(() => { throw new Exception(); },\n      () => { throw new Exception(); });\n}\ncatch (AggregateException ex)\n{\n  ex.Handle(exception =>\n  {\n    Trace.WriteLine(exception);\n    return true; // \"handled\"\n  });\n}\n```", "```cs\ninterface IObserver<in T>\n{\n  void OnNext(T item);\n  void OnCompleted();\n  void OnError(Exception error);\n}\n\ninterface IObservable<out T>\n{\n  IDisposable Subscribe(IObserver<TResult> observer);\n}\n```", "```cs\nObservable.Interval(TimeSpan.FromSeconds(1))\n    .Timestamp()\n    .Where(x => x.Value % 2 == 0)\n    .Select(x => x.Timestamp)\n    .Subscribe(x => Trace.WriteLine(x));\n```", "```cs\nIObservable<DateTimeOffset> timestamps =\n    Observable.Interval(TimeSpan.FromSeconds(1))\n        .Timestamp()\n        .Where(x => x.Value % 2 == 0)\n        .Select(x => x.Timestamp);\ntimestamps.Subscribe(x => Trace.WriteLine(x));\n```", "```cs\nObservable.Interval(TimeSpan.FromSeconds(1))\n    .Timestamp()\n    .Where(x => x.Value % 2 == 0)\n    .Select(x => x.Timestamp)\n    .Subscribe(x => Trace.WriteLine(x),\n        ex => Trace.WriteLine(ex));\n```", "```cs\ntry\n{\n  var multiplyBlock = new TransformBlock<int, int>(item =>\n  {\n    if (item == 1)\n      throw new InvalidOperationException(\"Blech.\");\n    return item * 2;\n  });\n  var subtractBlock = new TransformBlock<int, int>(item => item - 2);\n  multiplyBlock.LinkTo(subtractBlock,\n      new DataflowLinkOptions { PropagateCompletion = true });\n\n  multiplyBlock.Post(1);\n  subtractBlock.Completion.Wait();\n}\ncatch (AggregateException exception)\n{\n  AggregateException ex = exception.Flatten();\n  Trace.WriteLine(ex.InnerException);\n}\n```"]