- en: Chapter 3\. Migrating a Legacy .NET Framework Application to AWS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章。将传统.NET Framework应用程序迁移到AWS
- en: In the previous chapters, we have seen some of the exciting tools and services
    that AWS gives us as developers. We are next going to take a look at what we can
    do with some of our legacy .NET applications and explore what is made possible
    by moving them to the cloud.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们看到了AWS为开发人员提供的一些令人兴奋的工具和服务。接下来，我们将探讨如何处理我们的一些传统.NET应用程序，以及通过将它们移到云端所能实现的可能性。
- en: Software development is not, as we’re sure you are uncomfortably aware, a pursuit
    solely of greenfield projects, clean repos, tidy backlogs, and the latest toolsets.
    Organizations of all sizes can have legacy code, some of which may still be running
    on premises, internal tools, APIs, workflows, and applications that are actively
    used but not actively maintained. Migrating these to the cloud can provide your
    organization with cost savings, increased performance, and a drastically improved
    ability to scale.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发并不仅仅是关于全新项目、干净的代码库、整洁的待办事项和最新的工具集。各种规模的组织可能都有遗留代码，其中一些可能仍在本地运行，包括内部工具、API、工作流和应用程序，虽然仍在使用，但没有得到积极的维护。将这些内容迁移到云端可以为您的组织带来成本节约、性能提升，以及极大的扩展能力改进。
- en: In this chapter, you will learn how to choose, plan, and execute the migration
    of a web application running on IIS and built on either .NET Framework or .NET
    Core/6+.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何选择、计划和执行迁移，这是一款在IIS上运行的Web应用程序，构建于.NET Framework或.NET Core/6+之上。
- en: Note
  id: totrans-4
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: With the release of .NET 5 in November 2020, Microsoft has renamed .NET Core
    to simply “.NET”. In these next chapters, we will refer to .NET Core and all future
    versions as .NET and the previous, legacy version of the framework as .NET Framework.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 随着2020年11月发布的.NET 5，微软将.NET Core简称为“.NET”。在接下来的章节中，我们将把.NET Core和所有未来版本称为.NET，而将旧版框架称为.NET
    Framework。
- en: Choosing a Migration Path
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择迁移路径
- en: Every .NET application will have a different path to the cloud and, while we
    cannot create a one-size-fits-all framework for migrating a legacy .NET application,
    we *can* learn from the migrations of those that came before us. In 2011, the
    technology research company Gartner identified [five migration strategies for
    migrating on-premises software to the cloud](https://oreil.ly/KFvfw). These were
    known as “The 5 Rs” and over the years have been refined, adapted, and expanded
    as new experiences emerged, growing to encompass all the challenges you might
    face migrating and modernizing a legacy web application.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 每个.NET应用程序在迁移到云端的道路上都会有所不同，虽然我们无法为迁移传统.NET应用程序创建一种适合所有情况的框架，但我们*可以*从先前迁移的经验中汲取教训。2011年，技术研究公司Gartner确定了[五种迁移策略，用于将本地软件迁移到云端](https://oreil.ly/KFvfw)。这些策略被称为“五个R”，多年来经过不断改进、调整和扩展，已经涵盖了迁移和现代化传统Web应用程序可能面临的所有挑战。
- en: 'For migrating some of your code to AWS we now have 6 Rs, any of which could
    be applied to a legacy .NET web application running on IIS and built in either
    .NET Framework or the more recent incarnation .NET:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有了6个R，可应用于在IIS上运行的传统.NET Web应用程序，无论是建立在.NET Framework还是更新版本的.NET上：
- en: Rehosting
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新托管
- en: Replatforming
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新平台化
- en: Repurchasing
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新购买
- en: Rearchitecting
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新架构
- en: Rebuilding
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重建
- en: Retaining
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保留
- en: The first five of these strategies have increasing levels of effort and complexity;
    this, however, is rewarded with increasing value and ability to iterate going
    forward. We will delve deeper into some of these approaches later in this chapter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这五种策略的复杂度和投入逐步增加；然而，通过增加的价值和未来迭代的能力来获得回报。我们将在本章的后面更深入地探讨其中的一些方法。
- en: Rehosting
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新托管
- en: Rehosting is the process of moving an application from one host to another.
    It could be moving an application from running in a server room on a company’s
    premises to a virtual machine in the cloud, or it could be moving from one cloud
    provider to another. As a strategy for migration, rehosting does not change (or
    even require access to) the source code. It is a process of moving assets in their
    final built or compiled state. In the .NET world, this means *.dll* files, *.config*
    files, *.cshtml* views, static assets, and anything else required to serve your
    application. It is for this reason that rehosting is sometimes called the “lift
    and shift” approach to migration. Your entire application is lifted out as-is
    and shifted to a new host.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 重新托管是将应用程序从一个主机迁移到另一个主机的过程。这可能是将应用程序从公司机房中的服务器迁移到云中的虚拟机，或者是从一个云提供商迁移到另一个云提供商。作为迁移策略，重新托管不会改变（甚至需要访问）源代码。这是将资产以其最终构建或编译状态移动的过程。在
    .NET 的世界中，这意味着 *.dll* 文件、*.config* 文件、*.cshtml* 视图、静态资产以及为提供应用程序所需的任何其他内容。因此，重新托管有时被称为迁移的“举起和移动”方法。整个应用程序被一次性“举起”并“移动”到新主机上。
- en: The advantages of rehosting your application include being able to take advantage
    of the cost savings and performance improvements possible on a cloud-hosted virtual
    machine. It can also make it easier to manage your infrastructure if you can rehost
    your lesser maintained or legacy applications alongside your more actively developed
    code on AWS.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 将应用程序重新托管的优势包括能够利用云托管虚拟机上可能实现的成本节约和性能提升。如果您能够在 AWS 上重新托管您的较少维护或遗留应用程序，这也可以使得管理基础设施变得更加容易，同时与更活跃地开发的代码并行。
- en: For an overview of some of the tools and resources available, should you choose
    to follow this migration path, see [“Rehosting on AWS”](#3-rehosting).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择遵循这条迁移路径，可以查看一些可用的工具和资源概述，参见 [“在 AWS 上重新托管”](#3-rehosting)。
- en: Replatforming
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新平台化
- en: The replatforming approach goes one step further than simply rehosting and changes
    not just *where* but also *how* your application is hosted. Unlike rehosting,
    replatforming *could* involve changes to your code, although these changes should
    be kept to a minimum to keep the strategy viable.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 重新平台化方法比简单的重新托管更进一步，不仅改变了应用程序托管的位置，还改变了其托管方式。与重新托管不同，重新平台化 *可能* 包括对代码的更改，尽管应将这些更改保持在最小限度以保持策略的可行性。
- en: 'There are many definitions of what constitutes a “platform,” but one platform
    we as .NET developers are all aware of is Internet Information Services (IIS)
    running on Windows Server. Replatforming would be the process of migrating your
    application *away* from IIS and onto a more cloud native hosting environment such
    as Kubernetes. Later in this chapter, we will explore one type of replatforming
    in more detail: [“Replatforming via Containerization”](#3-containerization).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于“平台”的定义有很多种，但我们作为 .NET 开发人员都知道的一个平台是运行在 Windows Server 上的 Internet Information
    Services (IIS)。重新平台化将是将应用程序从 IIS *迁移* 到更云原生的托管环境，例如 Kubernetes。在本章后面，我们将更详细地探讨一种重新平台化类型：[“通过容器化进行重新平台化”](#3-containerization)。
- en: Repurchasing
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新购买
- en: This strategy is relevant when your application depends on a licensed third-party
    service or application that cannot run on a cloud infrastructure. Perhaps you
    use a self-hosted product for customer relationship management (CRM) or content
    management system (CMS) functionality in your application that cannot be migrated
    to the cloud. Repurchasing is a migration strategy for applications that rely
    on these products and involves ending your existing, self-hosted license, and
    purchasing a new license for a cloud-based replacement. This can either be a cloud-based
    version of a similar product (for example, Umbraco CMS to Umbraco Cloud), or a
    replacement product on the AWS Marketplace.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的应用程序依赖于无法在云基础设施上运行的许可的第三方服务或应用程序时，这种策略就显得非常相关。也许你在应用程序中使用了自托管的产品来进行客户关系管理（CRM）或内容管理系统（CMS）功能，这些功能无法迁移到云上。重新购买是依赖这些产品的应用程序的一种迁移策略，涉及终止现有的自托管许可证，并购买云替代品的新许可证。这可以是类似产品的云版本（例如，Umbraco
    CMS 到 Umbraco Cloud），或者在 AWS Marketplace 上的替代产品。
- en: Rearchitecting
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重构
- en: As the name implies, rearchitecting deals with the overall architecture of your
    application and asks you to think about how you can make changes to facilitate
    its move to the cloud.^([1](ch03.xhtml#idm45599657227728)) For a legacy .NET Framework
    application, this will almost certainly mean moving to .NET. Microsoft in 2019
    announced that version 4.8 will be the last major release of .NET Framework and,
    while it will continue to be supported and distributed with future releases of
    Windows, it will not be actively developed by Microsoft.^([2](ch03.xhtml#idm45599657227072))
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名称所示，重新架构涉及到您应用程序的整体架构，并要求您考虑如何进行改变以便于其迁移到云端。^([1](ch03.xhtml#idm45599657227728))
    对于传统的.NET Framework 应用程序来说，这几乎肯定意味着迁移到.NET。微软在2019年宣布，4.8版本将是.NET Framework 的最后一个重大发布版本，虽然将继续在未来的Windows发布版本中得到支持和分发，但微软将不再积极开发它。^([2](ch03.xhtml#idm45599657227072))
- en: History has sculpted out a fairly linear journey for rearchitecting a monolithic
    web application, as shown in [Figure 3-1](#Figure-3-1).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 历史为重新架构单体Web应用程序描绘出了一个相当线性的旅程，如[图 3-1](#Figure-3-1) 所示。
- en: '![doac 0301](assets/doac_0301.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0301](assets/doac_0301.png)'
- en: Figure 3-1\. Evolution of monolith web applications
  id: totrans-29
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-1\. 单体Web应用程序的演变
- en: 'We will take a deeper dive into porting .NET Framework to .NET in the section
    [“Rearchitecting: Moving to .NET (Core)”](#3-move-to-core).'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将深入探讨将.NET Framework 迁移到.NET 的章节[“重新架构：迁移到.NET（Core）”](#3-move-to-core)。
- en: Rebuilding
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重建
- en: Sometimes your legacy codebase fails to pass the effort versus value benchmark
    for migration and you have no choice but to rebuild from scratch. You are not,
    of course, starting entirely from scratch. You will be able to migrate some of
    your business logic; all those solved problems your legacy codebase has taken
    years to navigate through can be re-created on a new codebase. However, the code
    itself—the architecture, the libraries, databases, API schemas, and documentation^([3](ch03.xhtml#idm45599657216256))—will
    not be coming with you.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您的旧代码库未能通过迁移的成本与价值基准，您别无选择，只能从头开始重建。当然，并非完全从零开始。您将能够迁移一些业务逻辑；您的旧代码库花费多年解决的所有问题可以在新的代码库上重新创建。然而，代码本身——架构、库、数据库、API模式和文档^([3](ch03.xhtml#idm45599657216256))——将无法与您一同迁移。
- en: Retaining
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保留
- en: The final migration strategy on this list is really just *none of the above*.
    Perhaps your legacy application has some special requirements, cannot be connected
    to the internet, will have to go through a prohibitively lengthy recertification
    process. There are many unique and often unforeseen reasons why some legacy codebases
    cannot be migrated to the cloud, or cannot be migrated at the present moment in
    time. You should only migrate applications for which a viable business case can
    be made, and if that is not possible, then selecting *none of the above* is sometimes
    your best option.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 此列表中的最终迁移策略实际上只是*上述策略之外*。也许您的旧应用程序具有一些特殊要求，无法连接到互联网，必须经过冗长的再认证过程。许多独特且通常是意想不到的原因，导致一些旧代码库无法迁移到云端，或者在目前时刻无法迁移。您应仅迁移能够做出可行业务案例的应用程序；如果不可能，那么有时选择*上述策略之外*
    是您最佳的选择。
- en: Choosing a Strategy
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择策略
- en: The migration strategy you choose will depend upon the current architecture
    of your application, where you want to get to, and how much you are willing to
    change in order to get there. The chart in [Figure 3-2](#Figure-3-2) summarizes
    the decisions you can make in order to choose the migration path most appropriate
    for your individual use case.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您选择的迁移策略将取决于您应用程序当前的架构，您希望达到的目标以及为了达到这些目标您愿意进行多少改变。[图 3-2](#Figure-3-2) 中的图表总结了您可以做出的决策，以选择最适合您个人用例的迁移路径。
- en: '![doac 0302](assets/doac_0302.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0302](assets/doac_0302.png)'
- en: Figure 3-2\. Choosing a strategy
  id: totrans-38
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-2\. 选择策略
- en: AWS Migration Hub Strategy Recommendations
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS迁移中心策略建议
- en: For further assistance in choosing a migration strategy, AWS offers a tool called
    [AWS Migration Hub Strategy Recommendations](https://oreil.ly/56iyO). This service
    gathers data from your existing servers, augments it with analysis of your source
    code and SQL schemas, then recommends a migration strategy from those we have
    covered previously.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多关于选择迁移策略的信息，AWS 提供了一个名为[AWS迁移中心策略建议](https://oreil.ly/56iyO) 的工具。该服务从您现有的服务器收集数据，结合对源代码和SQL模式的分析，然后根据我们之前覆盖的内容推荐迁移策略。
- en: Tip
  id: totrans-41
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: 'Strategy Recommendations is part of the AWS Migration Hub: a set of tools for
    analyzing an infrastructure planning for and then tracking a migration to AWS.
    The Migration Hub is available at no additional charge; you only pay the cost
    of any tools you use and any AWS resources consumed in the process'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 策略建议是 AWS 迁移中心的一部分：一套用于分析基础架构规划并随后跟踪迁移到 AWS 的工具。迁移中心不另外收费；您只需支付您使用的任何工具的成本和在此过程中消耗的任何
    AWS 资源的费用。
- en: To get started with Strategy Recommendations, we first need to give it as much
    data about our existing infrastructure as possible. We can do this with the [AWS
    Application Discovery Service](https://aws.amazon.com/application-discovery),
    another service accessible from the AWS Migration Hub. To start application discovery,
    navigate to [discovery tools in the AWS Management Console](https://oreil.ly/Vkp65)
    for your home region^([4](ch03.xhtml#idm45599657199024)) and choose from one of
    three methods to collect the data shown in [Figure 3-3](#Figure-3-3).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用策略建议，我们首先需要尽可能提供关于现有基础设施的数据。我们可以通过[AWS 应用发现服务](https://aws.amazon.com/application-discovery)，AWS
    迁移中心提供的另一个服务来实现这一点。要开始应用程序发现，请导航至[AWS 管理控制台中的发现工具](https://oreil.ly/Vkp65)选择您的主区域^([4](ch03.xhtml#idm45599657199024))，然后从图
    3-3 中显示的三种收集数据的方法中选择一种。
- en: '![doac 0303](assets/doac_0303.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0303](assets/doac_0303.png)'
- en: Figure 3-3\. Application Discovery Service collection methods
  id: totrans-45
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-3\. 应用发现服务收集方法
- en: Let’s walk through a quick setup using the discovery agent. Before we start,
    ensure you have the AWS CLI installed and you have an IAM user access key (and
    secret). You can use the following commands to save these values in your AWS configuration
    files. These settings will then be used by all the tools in this chapter.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过使用发现代理进行快速设置。在开始之前，请确保已安装 AWS CLI 并且您拥有 IAM 用户访问密钥（和密钥）。您可以使用以下命令将这些值保存在
    AWS 配置文件中。这些设置将被本章中的所有工具使用。
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, open up a PowerShell terminal on one of the Windows servers you want
    to begin collecting data for, then download the agent installer:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在您要开始收集数据的 Windows 服务器上打开 PowerShell 终端，然后下载代理安装程序：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Next set your home region for the AWS Migration Hub, your access key ID, and
    secret.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来设置您的 AWS 迁移中心主区域、访问密钥 ID 和密钥。
- en: 'And run the discovery agent installer on this server:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在此服务器上运行发现代理安装程序：
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will install the agent into the new folder you created, *C:\ADSAgent*.
    Back in the Migration Hub section of the AWS Management Console, you can navigate
    to Discover → Data Collectors → Agents and, if all has gone well, the agent you
    installed should appear in the list. Select the agent and click Start Data Collection
    to allow ADS to begin collecting data about your server.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在您创建的新文件夹 *C:\ADSAgent* 中安装代理。在 AWS 管理控制台的迁移中心部分，您可以导航至发现 → 数据收集器 → 代理，如果一切顺利，您安装的代理应该出现在列表中。选择代理，然后单击“启动数据收集”以允许
    ADS 开始收集有关您服务器的数据。
- en: Warning
  id: totrans-54
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: If your agent does not show up, ensure your server is allowing the agent process
    to send data over TCP port 443 to *https://arsenal-discovery.<your-home-region>.amazonaws.com:443*.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的代理未显示，请确保您的服务器允许代理进程通过 TCP 端口 443 发送数据至 *https://arsenal-discovery.<your-home-region>.amazonaws.com:443*。
- en: The discovery agent will poll its host server approximately every 15 minutes
    and report data including CPU usage, free RAM, operating system properties, and
    process IDs of running processes that were discovered. You will be able to see
    your servers in the Migration Hub by navigating to Discover → Servers on the dashboard.
    Once you have all your servers added to ADS, you are ready to begin collating
    the data necessary for strategy recommendations.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 发现代理将每隔约 15 分钟轮询其主机服务器，并报告包括 CPU 使用率、空闲 RAM、操作系统属性和已发现的正在运行进程的进程 ID 在内的数据。您可以通过导航至仪表板上的发现
    → 服务器来查看在迁移中心中看到的服务器。一旦您将所有服务器添加到 ADS 中，您就可以开始整理为策略建议所需的数据。
- en: The Strategy Recommendations service has an automated, agentless data collector
    you can use to analyze your .NET applications running on the servers you now have
    in ADS. To get started navigate to Strategy → Get Started in the Migration Hub
    console and follow the wizard to download the data collector as an Open Virtual
    Appliance (OVA). This can then be deployed to your VMware vCenter Server. Full
    instructions for setting up the data collector can be found in the [AWS documentation](https://oreil.ly/LRIeN).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 战略推荐服务具有一个无代理、自动化的数据收集器，您可以使用该收集器分析当前在ADS中运行的 .NET 应用程序的服务器。要开始，请导航到迁移中心控制台中的策略
    → 开始，并按照向导的步骤下载数据收集器作为一个Open Virtual Appliance（OVA）。然后可以部署到您的VMware vCenter Server。有关设置数据收集器的完整说明，请参阅[AWS文档](https://oreil.ly/LRIeN)。
- en: Once your data collector is set up, you can move to the next page of the wizard
    and select your priorities for migration. [Figure 3-4](#Figure-3-4) shows the
    priorities selection screen in Strategy Recommendations. This will allow AWS to
    recommend a migration strategy that best fits your business needs and plans for
    the future. Select the options that most align with your reasons for migrating.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 设置好您的数据收集器后，您可以转到向导的下一页，并选择迁移的优先级。 [图 3-4](#Figure-3-4) 显示了战略推荐中的优先级选择屏幕。这将使AWS能够推荐最符合您业务需求和未来计划的迁移策略。选择与您迁移原因最符合的选项。
- en: '![doac 0304](assets/doac_0304.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0304](assets/doac_0304.png)'
- en: Figure 3-4\. Strategy Recommendations service goals
  id: totrans-60
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-4\. 战略推荐服务目标
- en: After running data analysis on your servers, the service will give you recommendations
    for each application, including a link to any relevant AWS tools to assist you
    with that type of migration. In [Figure 3-5](#Figure-3-5), you can see the tool
    is recommending we use rehosting as a migration strategy onto EC2 using the Application
    Migration Service, which we will look at next.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在分析了您的服务器数据后，该服务将为每个应用程序提供推荐，包括链接到任何相关的AWS工具，以帮助您进行该类型的迁移。在 [图 3-5](#Figure-3-5)
    中，您可以看到该工具建议我们使用重新托管作为迁移到EC2的迁移策略，使用应用迁移服务，接下来我们将详细介绍这一点。
- en: '![doac 0305](assets/doac_0305.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0305](assets/doac_0305.png)'
- en: Figure 3-5\. AWS recommending the rehost strategy
  id: totrans-63
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-5\. AWS建议重新托管策略
- en: Rehosting on AWS
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AWS上重新托管
- en: The approach for rehosting your legacy .NET application onto AWS will vary depending
    on how your application is currently hosted. For web apps deployed to a single
    server running IIS, you can easily replicate this environment on an Amazon EC2
    instance on AWS. If your .NET application is currently deployed to a managed environment
    (an “app service” as other cloud providers might call it), then the equivalent
    on AWS is Elastic Beanstalk, and you should find the experience of working with
    Elastic Beanstalk familiar. We will cover migrating managed hosting to Elastic
    Beanstalk later on in the section [“Elastic Beanstalk”](#3-elastic-beanstalk),
    but first, let’s take a look at the case of rehosting a virtual machine running
    IIS over to EC2.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的传统 .NET 应用程序重新托管到AWS的方法将根据当前应用程序的托管方式而异。对于部署在运行IIS的单个服务器上的Web应用程序，您可以轻松地在AWS的Amazon
    EC2实例上复制此环境。如果您的 .NET 应用程序当前部署在托管环境中（其他云提供商可能称之为“应用服务”），那么AWS上的等价物是Elastic Beanstalk，并且您应该会发现与Elastic
    Beanstalk一起工作的经验非常熟悉。我们将在后面的“Elastic Beanstalk”部分介绍如何将托管托管服务迁移到Elastic Beanstalk，但首先让我们看看将运行IIS的虚拟机重新托管到EC2的情况。
- en: Application Migration Service (MGN)
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用迁移服务（MGN）
- en: The latest AWS offering for performing a lift-and-shift migration to EC2 is
    called the *Application Migration Service*, or MGN.^([5](ch03.xhtml#idm45599657010544))
    This service evolved from a product called CloudEndure that AWS acquired in 2018\.
    CloudEndure is a disaster recovery solution that works by creating and maintaining
    replicas of your production servers on AWS EC2 and Elastic Block Store (EBS).
    This replication concept can be repurposed for the sake of performing a lift-and-shift
    rehosting. You simply set up replication to AWS then, when you are ready, switch
    over to running your application exclusively from your AWS replicas, allowing
    you to decommission the original server. An overview of how the Application Migration
    Service replicates your servers is shown in [Figure 3-6](#Figure-3-6).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: AWS用于执行EC2提升和迁移的最新产品称为*应用迁移服务*或MGN。^([5](ch03.xhtml#idm45599657010544)) 这项服务起源于AWS在2018年收购的CloudEndure产品。CloudEndure是一种灾难恢复解决方案，通过在AWS
    EC2和弹性块存储（EBS）上创建和维护您的生产服务器的副本来工作。这种复制概念可以重新用于执行提升和迁移的重放。您只需设置到AWS的复制，然后在准备好时，切换到仅从AWS副本运行您的应用程序，从而可以停用原始服务器。应用迁移服务如何复制您的服务器的概述如[图 3-6](#Figure-3-6)所示。
- en: '![doac 0306](assets/doac_0306.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0306](assets/doac_0306.png)'
- en: Figure 3-6\. Overview of the Application Migration Service
  id: totrans-69
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-6\. 应用迁移服务概述
- en: The Application Migration Service is accessed via the AWS Management Console;
    type “MGN” into the search or find it in the menu of the Migration Hub as in [Figure 3-7](#Figure-3-7).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 可通过AWS管理控制台访问应用迁移服务；在迁移中心的搜索中键入“MGN”或在菜单中找到，如[图 3-7](#Figure-3-7)所示。
- en: '![doac 0307](assets/doac_0307.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0307](assets/doac_0307.png)'
- en: Figure 3-7\. Access MGN through the AWS Management Console
  id: totrans-72
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-7\. 通过AWS管理控制台访问MGN
- en: 'Set up of the Application Migration Service begins by installing the replication
    agent onto your servers, similar to how we installed the discovery agent for the
    Application Discovery Service. First log onto your Windows server and open up
    a PowerShell window as Administrator to download the agent installer for Windows.
    Replace `<region>` with the AWS region you would like to migrate your servers
    into:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 应用迁移服务的设置从在服务器上安装复制代理开始，类似于我们为应用程序发现服务安装发现代理的方式。首先登录到您的Windows服务器，并以管理员身份打开PowerShell窗口以下载Windows的代理安装程序。将`<region>`替换为您希望将服务器迁移到的AWS区域：
- en: '[PRE3]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next put your region, access key ID, and secret into variables if you haven’t
    already and execute the installer:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果尚未将区域、访问密钥ID和秘密放入变量中，请执行安装程序：
- en: '[PRE4]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The agent installer will ask you which disks on this server you want to replicate
    and then will get to work syncing your disks to AWS. You can see the status of
    the agent installer operations in the console window as shown in [Figure 3-8](#Figure-3-8).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 安装程序将询问您希望在此服务器上复制哪些磁盘，然后开始将您的磁盘与AWS进行同步。您可以在控制台窗口中查看代理安装程序操作的状态，如[图 3-8](#Figure-3-8)所示。
- en: '![doac 0308](assets/doac_0308.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0308](assets/doac_0308.png)'
- en: Figure 3-8\. MGN replication agent console window
  id: totrans-79
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-8\. MGN复制代理控制台窗口
- en: If you head back over to the MGN Management Console, you will be able to see
    your server under Source Servers in the menu. Click on your server name and you
    can see the status of the replication for this server as shown in [Figure 3-9](#Figure-3-9).
    It can take a while to get through all the stages, but once complete, the status
    in the console will change to “Ready For Testing.” One nice feature of the Application
    Migration Service is the ability to spin up an instance of a server from a replica
    and test that everything is as you expect it to be, without interrupting or otherwise
    interfering with the replication itself.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您返回MGN管理控制台，您将能够在菜单中的源服务器下看到您的服务器。单击服务器名称，您可以查看此服务器复制的状态，如[图 3-9](#Figure-3-9)所示。完成所有阶段可能需要一些时间，但完成后，控制台中的状态将变为“准备测试”。应用迁移服务的一个良好功能是能够从副本中启动服务器实例并测试一切是否符合预期，而不会中断或干扰复制本身。
- en: '![doac 0309](assets/doac_0309.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0309](assets/doac_0309.png)'
- en: Figure 3-9\. MGN replication status in the Management Console
  id: totrans-82
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-9\. 管理控制台中的MGN复制状态
- en: 'To test a server, select “Launch test instances” from the “Test and Cutover”
    action menu of your source server. This will launch a new EC2 instance that should
    mirror the original Windows server you replicated, with transfer of licenses handled
    automatically by the Application Migration Service. You can connect to the EC2
    instance with Remote Desktop (RDP) by selecting it in the list of EC2 instances
    from the Management Console once it becomes ready. When you are happy that the
    test instance is working the way you expect it to, you can execute the final stage
    of the migration: cutover.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试服务器，请从源服务器的“测试和切换”操作菜单中选择“启动测试实例”。这将启动一个新的 EC2 实例，应该与您复制的原始 Windows 服务器相似，许可证的转移将由应用程序迁移服务自动处理。一旦
    EC2 实例准备就绪，您可以通过管理控制台中的 EC2 实例列表选择它，使用远程桌面（RDP）连接到该 EC2 实例。当您对测试实例的工作方式感到满意时，您可以执行迁移的最后阶段：切换。
- en: 'If you refer back to the stages of application migration via replication in
    [Figure 3-6](#Figure-3-6), you can see the final stage being Execute Cutover.
    This is where we create the resources for all our source servers (that is: spin
    up a new EC2 instance for each server), stop replication of our old servers, and
    allow us to decommission the original servers we installed the replication agents
    onto.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您参考图示 [Figure 3-6](#Figure-3-6) 中通过复制应用程序迁移的阶段，您可以看到最终阶段是执行切换。这是我们为所有源服务器创建资源的地方（即：为每台服务器启动一个新的
    EC2 实例），停止我们旧服务器的复制，并允许我们卸载安装了复制代理的原始服务器。
- en: 'So now we have all our servers running like-for-like on EC2 and we have performed
    the lift-and-shift rehosting, what’s next? Staying inside the realm of *rehosting*,
    we can go one step further and take advantage of AWS’s managed environment for
    running a web application: Elastic Beanstalk.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的所有服务器都像在 EC2 上一样运行，并且我们已经执行了抬升和迁移的重托，接下来怎么办？在*重新托管*的领域内，我们可以进一步采用 AWS 的托管环境来运行
    Web 应用程序：Elastic Beanstalk。
- en: Elastic Beanstalk
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Elastic Beanstalk
- en: Elastic Beanstalk is a *managed* hosting environment for your web application.
    It supports a variety of backend stacks such as Java, Ruby, or PHP, but it is
    the .NET Framework support that we are most interested in here. The difference
    between hosting our app on a Windows server on EC2, as we did in the previous
    section, and using Elastic Beanstalk can be distilled down to one key discrepancy.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Elastic Beanstalk 是一个*托管*的 Web 应用程序托管环境。它支持多种后端堆栈，如 Java、Ruby 或 PHP，但我们在这里最感兴趣的是
    .NET Framework 的支持。在这里，我们将我们的应用程序托管在 EC2 上的 Windows 服务器与使用 Elastic Beanstalk 的区别可以归结为一个关键差异。
- en: With an unmanaged server, you upload your compiled and packaged website files
    to a server and then tweak the settings on that server in order to handle web
    traffic. With a managed service, you upload your package to the cloud, and the
    service will take care of the rest for you, setting up load balancers and dynamically
    scaling virtual machines horizontally. Managed services are the real draw for
    deploying your applications to the cloud and the more you lean into having AWS
    manage your infrastructure for you, the more you can concentrate on just writing
    code and solving problems for your business. Later in this book, we will cover
    serverless programming and how you can architect your .NET applications to be
    more serverless, a concept rooted in managed services as much as possible. You
    can think of Elastic Beanstalk as an equivalent to “App Service,” which you may
    be familiar with from a slightly *bluer* cloud provider.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用非托管服务器，您将已编译和打包的网站文件上传到服务器，然后调整该服务器的设置以处理网络流量。使用托管服务，您将包上传到云中，服务会为您处理剩余的事务，设置负载均衡器并动态扩展虚拟机的水平。托管服务是将应用程序部署到云的真正吸引力，您越多依赖
    AWS 管理基础设施，您就能更多地专注于编写代码和解决业务问题。本书后面我们将介绍无服务器编程，以及如何使您的 .NET 应用程序尽可能地设计成无服务器，这个概念深植于托管服务之中。您可以将
    Elastic Beanstalk 等同于“应用服务”，这可能会让您想起稍微*更蓝色*的云提供商。
- en: So let’s get started with our first managed service on Elastic Beanstalk. The
    simplest way to deploy code is by using the AWS Toolkit for Visual Studio. With
    the AWS Toolkit installed, deploying to Elastic Beanstalk really is as simple
    as right-clicking your solution and selecting “Publish to Elastic Beanstalk.”
    [Figure 3-10](#Figure-3-10) shows the toolkit in use in the Solution Explorer
    of Visual Studio.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始使用 Elastic Beanstalk 上的第一个托管服务。通过在 Visual Studio 中安装 AWS Toolkit，部署到 Elastic
    Beanstalk 真的就像右键单击解决方案，然后选择“发布到 Elastic Beanstalk”一样简单。[图 3-10](#Figure-3-10)
    在 Visual Studio 的解决方案资源管理器中展示了工具包的使用情况。
- en: '![doac 0310](assets/doac_0310.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0310](assets/doac_0310.png)'
- en: Figure 3-10\. Publishing to Elastic Beanstalk directly from Visual Studio
  id: totrans-91
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-10\. 直接从 Visual Studio 发布到 Elastic Beanstalk
- en: There is of course also a CLI tool you can use in your CI pipeline. To get started
    with the Elastic Beanstalk CLI, see the [EB CLI Installer](https://oreil.ly/8aKRX)
    on GitHub. The CLI tool allows you to publish your code directly to Elastic Beanstalk
    from AWS CodeBuild or GitHub.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您也可以在 CI 流水线中使用 CLI 工具。要开始使用 Elastic Beanstalk CLI，请参阅 GitHub 上的 [EB CLI
    Installer](https://oreil.ly/8aKRX)。该 CLI 工具允许您直接从 AWS CodeBuild 或 GitHub 将代码发布到
    Elastic Beanstalk。
- en: Lastly, there is one final tool worth mentioning if you are thinking of trying
    out Elastic Beanstalk, and that is the [Windows Web App Migration Assistant (WWMA)](https://oreil.ly/8e4Q2).
    This is a PowerShell script that you can run on any Windows Server with an IIS
    hosted web application to automatically migrate the application onto Elastic Beanstalk.
    This is useful if you have a legacy .NET application that is no longer maintained
    and you want to take advantage of the benefits of Elastic Beanstalk but you no
    longer perform releases for this app. It is a true *rehosting* tool that simply
    moves the compiled website assets from your *C:\inetpub* folder on the server
    into EC2 instance(s) managed and scaled by Elastic Beanstalk.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果您考虑尝试 Elastic Beanstalk，还有一个值得一提的工具，那就是 [Windows Web App Migration Assistant
    (WWMA)](https://oreil.ly/8e4Q2)。这是一个 PowerShell 脚本，您可以在任何运行 IIS 托管 Web 应用程序的 Windows
    Server 上运行，自动将应用程序迁移到 Elastic Beanstalk。如果您有一个不再维护的传统 .NET 应用程序，并且希望利用 Elastic
    Beanstalk 的优势，而不再为该应用发布新版本，这将非常有用。它是一个真正的 *迁移* 工具，简单地将编译的网站资产从服务器上的 *C:\inetpub*
    文件夹移动到由 Elastic Beanstalk 管理和扩展的 EC2 实例中。
- en: Replatforming via Containerization
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过容器化进行重新平台化
- en: As a migration strategy, replatforming is concerned with looking at the *platform*
    on which our .NET application is running and exploring moving somewhere else.
    In the case of a .NET Framework web application, that *platform* will be some
    version of Windows Server running IIS. While previously we looked at Elastic Beanstalk
    as a way of getting more out of this infrastructure, Elastic Beanstalk still hosts
    your application on IIS on Windows Server, albeit in a much more scalable and
    efficient way. If we want to really push the envelope for scalability and performance,
    while still keeping away from the original source code (these are “legacy” applications,
    after all), then we need to move away from IIS and onto something else. This is
    where containerization comes in.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 作为迁移策略，重新平台化关注的是我们的 .NET 应用程序运行的 *平台*，并探索将其迁移到其他地方。对于 .NET Framework Web 应用程序来说，该
    *平台* 将是运行 IIS 的某个版本的 Windows Server。虽然之前我们将 Elastic Beanstalk 视为提升基础设施效能的一种方式，但
    Elastic Beanstalk 仍然在 Windows Server 上的 IIS 上托管您的应用程序，尽管方式更加可扩展和高效。如果我们希望真正推动可扩展性和性能的极限，同时又不接触原始源代码（毕竟这些是“传统”应用程序），那么我们就需要摆脱
    IIS，转向其他解决方案。这就是容器化的用武之地。
- en: We’re going to skip over exactly what containerization is and why it matters
    as we have [Chapter 5](ch05.xhtml#Chapter5) later in this book dedicated to containerization
    of .NET. Suffice to say moving your legacy .NET application from Windows Server
    web hosting to containers unlocks both performance and cost benefits to your organization,
    all without having to touch any of that legacy code.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将跳过容器化的确切定义和其重要性，因为本书稍后的 [第5章](ch05.xhtml#Chapter5) 将专门讨论 .NET 的容器化。简而言之，将您的传统
    .NET 应用程序从 Windows Server Web 托管迁移到容器中，为您的组织带来性能和成本效益，而无需修改任何传统代码。
- en: App2Container is a command-line tool from AWS that runs against your .NET application
    running on IIS on a Windows Server. It analyzes your application and dependencies,
    then creates Docker container images that can be deployed to an orchestration
    service in the cloud such as Elastic Container Service (ECS) or Amazon Elastic
    Kubernetes Services (EKS). Because App2Container runs on an application that is
    already deployed to a server, it doesn’t need access to your source code and sits
    right at the end of a deployment pipeline. For this reason, App2Container is perfect
    for quickly replatforming an old application that is not being actively developed
    and you don’t want to be rebuilding; simply skip right to the last two steps of
    the pipeline shown in [Figure 3-11](#Figure-3-11) and containerize the production
    files.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: App2Container 是 AWS 提供的一个命令行工具，用于分析运行在 Windows Server 上的 IIS 上的 .NET 应用程序及其依赖关系，然后创建可以部署到云中编排服务（如
    Elastic Container Service (ECS) 或 Amazon Elastic Kubernetes Service (EKS)）的 Docker
    容器镜像。由于 App2Container 在已部署到服务器上的应用程序上运行，不需要访问源代码，并且位于部署流水线的最后阶段。因此，App2Container
    非常适合快速重建一个旧的不再活跃开发的应用程序；只需跳过在 [Figure 3-11](#Figure-3-11) 中显示的流水线的最后两个步骤，并对生产文件进行容器化。
- en: '![doac 0311](assets/doac_0311.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0311](assets/doac_0311.png)'
- en: Figure 3-11\. Deployment pipeline of .NET Framework application using App2Container
  id: totrans-99
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 3-11\. 使用 App2Container 部署 .NET Framework 应用程序的部署流水线
- en: 'To containerize a .NET application, you first need to download and install
    App2Container onto the server running your application. You can find the installation
    package on [AWS’s website](https://oreil.ly/UIZzD). Download, unzip, and run *.\install.ps1*
    from an administrator PowerShell terminal on the application server. This will
    install the `app2container` command-line utility. If you haven’t already, make
    sure your application server has the AWS Tools for Windows PowerShell installed
    and you have a default profile configured that allows you access to manage AWS
    resources from your application server. If your server is running on an EC2 instance
    (for example, if you rehosted it using the Application Migration Service, see
    [“Rehosting on AWS”](#3-rehosting)), then these tools will already be installed
    as they are included on the Windows-based machine images used in EC2\. Once you
    have confirmed you have an AWS profile with IAM permissions to manage AWS resources,
    you can initialize App2Container by running:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 .NET 应用程序容器化，首先需要在运行应用程序的服务器上下载并安装 App2Container。你可以在 [AWS 的网站](https://oreil.ly/UIZzD)
    找到安装包。下载、解压并在管理员 PowerShell 终端上运行 *.\install.ps1*。这将安装 `app2container` 命令行实用程序。如果尚未安装，请确保你的应用程序服务器已安装
    AWS Tools for Windows PowerShell，并且已配置了允许你从应用程序服务器访问和管理 AWS 资源的默认配置文件。如果你的服务器正在运行
    EC2 实例（例如，如果你使用应用程序迁移服务将其重新托管，请参阅 [“在 AWS 上重新托管”](#3-rehosting)），那么这些工具已经安装了，因为它们包含在
    EC2 使用的基于 Windows 的机器映像中。确认你已经拥有一个具有 IAM 权限来管理 AWS 资源的 AWS 配置文件后，可以通过运行以下命令初始化
    App2Container：
- en: '[PRE5]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The tool will ask about collecting usage metrics and ask you for an S3 bucket
    to upload artifacts, but this is entirely optional and you can skip through these
    options. Once initialized, you are ready to begin analyzing your application server
    for running .NET applications that can be containerized. Run the `app2container
    inventory` command to get a list of running applications in JSON format, and then
    pass in the JSON key as the `--applcation-id` of the app you want to containerize,
    as shown in [Figure 3-12](#Figure-3-12):'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具将询问是否收集使用情况指标，并要求提供一个 S3 存储桶来上传构件，但这完全是可选的，你可以跳过这些选项。初始化完成后，你可以开始分析运行 .NET
    应用程序的应用服务器，这些应用程序可以进行容器化。运行 `app2container inventory` 命令以获取以 JSON 格式列出的运行中应用程序的列表，然后将
    JSON 键传递给你想要进行容器化的应用的 `--application-id`，如 [Figure 3-12](#Figure-3-12) 所示：
- en: '[PRE6]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![doac 0312](assets/doac_0312.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0312](assets/doac_0312.png)'
- en: Figure 3-12\. Listing the IIS sites capable of being containerized
  id: totrans-105
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 3-12\. 列出可容器化的 IIS 站点
- en: We are encouraged to take a look at the *analysis.json* file that is generated
    for us, and we echo that sentiment. A full list of the fields that appear in *analysis.json*
    can be found in the [App2Container User Guide](https://oreil.ly/HCIa6), but it
    is worth spending the time exploring the analysis output as these settings will
    be used to configure our container. You can edit the `containerParameters` section
    of *analysis.json* before containerizing if required. It is also worth opening
    up *report.txt* in the same folder as this is where any connection strings will
    be added by the analyze command. When you are ready, run the `containerize` and
    `generate` commands to build a docker image then generate all the artifacts you
    need to deploy it to either ECS or EKS:^([6](ch03.xhtml#idm45599656749792))
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们鼓励大家查看为我们生成的 *analysis.json* 文件，我们对此表示赞同。可以在[App2Container 用户指南](https://oreil.ly/HCIa6)中找到
    *analysis.json* 中出现的所有字段的完整列表，但花时间探索分析输出是值得的，因为这些设置将用于配置我们的容器。在容器化之前，如果需要，您可以编辑
    *analysis.json* 中的 `containerParameters` 部分。同样值得注意的是，打开与此处相同文件夹中的 *report.txt*，这是分析命令添加任何连接字符串的地方。准备好之后，运行
    `containerize` 和 `generate` 命令来构建一个 Docker 镜像，然后生成部署所需的所有工件到 ECS 或者 EKS：^([6](ch03.xhtml#idm45599656749792))
- en: '[PRE7]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The second command here (`generate app-deployment`) will upload your containers
    to Elastic Container Registry (ECR) and create a CloudFormation template you can
    use to deploy your app to (in this case) ECS. The tool will show you the output
    destination of this CloudFormation template (see [Figure 3-13](#Figure-3-13))
    and give you the command you need to deploy it to AWS.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的第二个命令 (`generate app-deployment`) 将上传您的容器到 Elastic Container Registry (ECR)，并创建一个
    CloudFormation 模板，您可以用来部署您的应用程序到（在本例中）ECS。工具将向您显示此 CloudFormation 模板的输出目的地（参见[图 3-13](#Figure-3-13)），并为您提供部署到
    AWS 所需的命令。
- en: '![doac 0313](assets/doac_0313.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0313](assets/doac_0313.png)'
- en: Figure 3-13\. Results of App2Container deployment generation
  id: totrans-110
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-13\. App2Container 部署生成结果
- en: This has been a brief overview of App2Container from AWS, but much more is possible
    with this tool than we have covered here. Instead of performing the containerization
    on the application server itself, App2Container also lets you deploy a worker
    machine either to EC2 or your local virtualization environment. This would be
    useful if you wanted to protect the application server, which could be serving
    a web application in production, from having to spend resources executing a containerization
    process. Since App2Container is a CLI tool, it would also be simple to integrate
    into a full deployment pipeline for code you are still actively working on and
    releasing changes to. If you refer back to [Figure 3-11](#Figure-3-11), you can
    see how App2Container can be used to *extend* an existing .NET deployment pipeline
    into containerization without touching anything further upstream, including your
    code.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这是来自 AWS 的 App2Container 的简要概述，但是这个工具可以实现的远不止我们在这里介绍的内容。与在应用程序服务器本身上执行容器化不同，App2Container
    还允许您将工作机器部署到 EC2 或您的本地虚拟化环境中。如果您希望保护正在生产中提供 Web 应用程序的应用程序服务器免于执行容器化过程所消耗的资源，这将非常有用。由于
    App2Container 是一个 CLI 工具，将其整合到您仍在积极开发和发布更改的代码的完整部署流水线中将非常简单。如果您回顾 [图 3-11](#Figure-3-11)，您可以看到如何使用
    App2Container 将现有的 .NET 部署流水线扩展到容器化，而不必触及任何更上游的内容，包括您的代码。
- en: One final note on App2Container is framework version support, which has been
    expanding with new releases of the tool. You can use App2Container on both .NET
    Framework and .NET 6+ applications running on both Windows and, more recently,
    Linux. For .NET Framework, the minimum supported version is .NET 3.5 running in
    IIS 7.5\. Java applications can also be containerized with App2Container, in a
    similar way to that we have explored here, so it’s not just us C# developers who
    can benefit.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: App2Container 的另一个注意事项是框架版本支持，随着工具的新版本发布而不断扩展。您可以在运行 .NET Framework 和 .NET 6+
    应用程序的 Windows 和最近的 Linux 上使用 App2Container。对于 .NET Framework，最低支持版本是在 IIS 7.5
    上运行的 .NET 3.5。Java 应用程序也可以通过 App2Container 进行容器化，类似于我们在这里探讨的方式，因此不仅我们 C# 开发人员可以从中受益。
- en: 'Rearchitecting: Moving to .NET (Core)'
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重构：迁移到 .NET（Core）
- en: So far we have looked at migration approaches for our .NET applications that
    do not involve making changes to the code, but what can we do if changing the
    code is acceptable? In the next chapter we will be looking at modernizing .NET
    applications; however, if your application is still built on .NET Framework, the
    first step down every modernization path will almost certainly be a migration
    to .NET 6+. The road ahead for .NET Framework applications is not a long one and,
    aside from the rehosting and replatforming approaches we have covered in this
    book, you will eventually be approaching the topic of migrating framework versions.
    .NET is, after all, a complete rewrite of Microsoft’s framework, and feature parity
    was not an aim. APIs have changed, namespaces like `System.Web.Services` are no
    longer present, and some third-party libraries that you rely on may not have been
    migrated, forcing you to replace them with an alternative. For these reasons,
    it is vital to do as much investigation as possible in order to assess the lift
    required in migrating your legacy .NET Framework application to modern .NET.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经研究了不需要对代码进行更改的.NET应用程序迁移方法，但是如果允许更改代码，我们可以做些什么呢？在下一章中，我们将研究现代化.NET应用程序；然而，如果您的应用程序仍然建立在.NET
    Framework上，那么几乎每条现代化路径的第一步都将是迁移到.NET 6+。对于.NET Framework应用程序而言，前方的道路并不漫长，在本书中我们已经涵盖了重新托管和重新平台化的方法，最终您将不可避免地接触到迁移框架版本的话题。毕竟，.NET是微软框架的完全重写，功能平等并不是目标。API已经发生了变化，像`System.Web.Services`这样的命名空间不再存在，而一些您依赖的第三方库可能还未迁移，迫使您替换为替代方案。因此，非常有必要尽可能多地进行调查，以评估将您的传统.NET
    Framework应用程序迁移到现代.NET所需的工作量。
- en: 'While there is no such thing as a tool that will automatically refactor your
    entire solution and convert your .NET Framework monolith to .NET 6+, what does
    exist are a handful of extremely useful tools to analyze your project, perform
    small refactoring tasks, and give you an insight into where you will find compatibility
    problems. I’m going to give you a brief insight into two of these tools: the .NET
    Upgrade Assistant from Microsoft, and the Porting Assistant from AWS.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然没有自动重构整个解决方案并将.NET Framework单体应用程序转换为.NET 6+的工具，但确实存在一些极其有用的工具，可以分析您的项目，执行小的重构任务，并让您了解在哪里可能会遇到兼容性问题。我将简要介绍其中两个工具：来自微软的.NET升级助手和来自AWS的移植助手。
- en: Before you start, however, it is worth becoming familiar with which .NET Framework
    technologies are [unavailable on .NET 6+](https://oreil.ly/1JaqV). These include
    almost everything that used the Component Object Model (COM, COM+, DCOM) such
    as .NET Remoting and Windows Workflow Foundation. For applications that rely heavily
    on these Windows-only frameworks, one of the migration strategies we discussed
    earlier in this chapter may be more appropriate. Applications that use Windows
    Communication Foundation (WCF) can take advantage of the [CoreWCF project](https://github.com/CoreWCF/CoreWCF)
    in order to continue using WCF features on modern .NET.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 但在开始之前，值得了解哪些.NET Framework技术在[.NET 6+上不可用](https://oreil.ly/1JaqV)。这些技术几乎涵盖了所有使用组件对象模型（COM、COM+、DCOM）的内容，例如.NET
    Remoting和Windows Workflow Foundation。对于严重依赖这些仅限于Windows的框架的应用程序，本章早期讨论的迁移策略可能更为适合。使用Windows
    Communication Foundation（WCF）的应用程序可以利用[CoreWCF项目](https://github.com/CoreWCF/CoreWCF)继续在现代.NET上使用WCF功能。
- en: Microsoft .NET Upgrade Assistant
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Microsoft .NET升级助手
- en: With the releases of .NET 5 and 6, Microsoft cemented its vision for a unified
    single framework going forward, with .NET 6 being the long-term support (LTS)
    release of the platform. In order to assist migration of .NET Framework applications
    to this new, unified version of the framework, Microsoft has been developing a
    command-line tool called the *.NET Upgrade Assistant*. The Upgrade Assistant is
    intended to be a single entry point to guide you through the migration journey
    and wraps within it the more longstanding .NET Framework conversion tool try-convert.
    It is a good idea to use try-convert from within the context of the Upgrade Assistant
    as you will get more analysis and guidance toward the strategies most applicable
    to your project.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 随着.NET 5和6的发布，微软巩固了其未来统一单一框架的愿景，其中.NET 6是该平台的长期支持（LTS）版本。为了帮助将.NET Framework应用程序迁移到这个新的统一框架版本，微软一直在开发一个名为*.NET
    Upgrade Assistant*的命令行工具。升级助手旨在成为指导您完成迁移旅程的单一入口点，并在其中包含了更为久远的.NET Framework转换工具try-convert。建议您在升级助手的上下文中使用try-convert，因为这样您将获得更多分析和指导，以便采用最适合您项目的策略。
- en: 'The types of .NET Framework applications that this tool can be used with at
    time of writing are:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，此工具可用于以下类型的.NET Framework应用程序：
- en: .NET class libraries
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET类库
- en: Console Apps
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制台应用程序
- en: Windows forms
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows窗体
- en: Windows Presentation Foundation (WPF)
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows Presentation Foundation (WPF)
- en: ASP.NET MVC web applications
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ASP.NET MVC Web应用程序
- en: The .NET Upgrade Assistant has an extensible architecture that encourages the
    community to contribute extensions and analyzers/code fixers. You can even write
    your own analyzers to perform automatic code refactoring based on rules you define.
    The Upgrade Assistant comes with a set of default analyzers that look for common
    incompatibilities with your code and offer a solution. For example, the `HttpContextCurrentAnalyzer`
    looks for calls to the static `System.Web.HttpContext.Current`, a pattern often
    employed in controller actions of .NET Framework applications that will need to
    be refactored since `HttpContext.Current` was removed in .NET Core. In [Figure 3-14](#Figure-3-14),
    you can see an example of the message this analyzer emits when `HttpContext.Current`
    is found in your code.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Upgrade Assistant具有可扩展的架构，鼓励社区贡献扩展和分析器/代码修复程序。您甚至可以编写自己的分析器，根据您定义的规则执行自动代码重构。升级助手附带一组默认分析器，用于查找代码中的常见不兼容性并提供解决方案。例如，`HttpContextCurrentAnalyzer`查找对静态`System.Web.HttpContext.Current`的调用，这是.NET
    Framework应用程序控制器动作中经常使用的模式，需要进行重构，因为.NET Core中已删除`HttpContext.Current`。在[图3-14](#Figure-3-14)中，您可以看到当在您的代码中发现`HttpContext.Current`时，此分析器发出的消息示例。
- en: So let’s get going with an upgrade. For this example, we have created a very
    simple ASP.NET MVC web application in Visual Studio 2019 using .NET Framework
    version 4.7.2\. There is a controller action that takes the query string from
    the web request, adds it to the `ViewBag`, then displays it on the *Index.cshtml*
    Razor view. The output of this website can be seen in [Figure 3-14](#Figure-3-14).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 那么让我们开始升级吧。在本示例中，我们使用.NET Framework版本4.7.2在Visual Studio 2019中创建了一个非常简单的ASP.NET
    MVC Web应用程序。有一个控制器动作从Web请求中获取查询字符串，将其添加到`ViewBag`中，然后在*Index.cshtml* Razor视图中显示它。这个网站的输出可以在[图3-14](#Figure-3-14)中看到。
- en: '![doac 0314](assets/doac_0314.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0314](assets/doac_0314.png)'
- en: Figure 3-14\. Example ASP.NET MVC website running in a browser
  id: totrans-128
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3-14\. 在浏览器中运行的示例ASP.NET MVC网站
- en: We have purposefully added a couple of things to this example that we *know*
    are not compatible with .NET Core and later versions of the framework. First,
    as introduced earlier, we have a call to `HttpContext.Current` on line 9 of *HomeController.cs*
    ([Example 3-1](#ex_3-1)). This will need to be replaced with a call to an equivalent
    HTTP context property in .NET 6\. We also have a Razor helper in *Index.cshtml*,
    the `@helper` syntax for which is not present in later versions of .NET ([Example 3-2](#ex_3-2)).
    We have this code checked into a Git repository with a clean working tree; this
    will help view the changes to the code that the .NET Upgrade Assistant will make
    by using a Git diff tool.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们故意向这个示例中添加了一些我们*知道*与.NET Core和框架的后续版本不兼容的内容。首先，正如前面介绍的，我们在*HomeController.cs*的第9行中调用了`HttpContext.Current`，这将需要替换为.NET
    6中等效的HTTP上下文属性。我们还在*Index.cshtml*中有一个Razor助手，后续版本的.NET中不再支持`@helper`语法。我们将此代码检入了一个具有干净工作树的Git存储库；这将有助于通过使用Git
    diff工具查看.NET Upgrade Assistant将进行的代码更改。
- en: Example 3-1\. HomeController.cs
  id: totrans-130
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-1\. HomeController.cs
- en: '[PRE8]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Example 3-2\. Index.cshtml
  id: totrans-132
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-2\. Index.cshtml
- en: '[PRE9]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To get started with the .NET Upgrade Assistant, first install it as a .NET
    CLI tool:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用.NET Upgrade助手，请首先将其安装为.NET CLI工具：
- en: '[PRE10]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, in the directory that contains your solution file, run the upgrade assistant
    and follow the instructions to select the project to use as your entry point:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在包含解决方案文件的目录中，运行升级助手并按照指示选择要用作入口点的项目：
- en: '[PRE11]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Depending on the type of .NET Framework project you have (WebForms, WPF etc.),
    the upgrade assistant will give you a different set of steps. We have an ASP.NET
    MVC Web Application, so we are offered a ten-step process for the upgrade, as
    follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的.NET Framework项目类型（如WebForms、WPF等），升级助手会提供不同的步骤集。我们有一个ASP.NET MVC Web应用程序，因此我们提供了一个包含十个步骤的升级过程，如下所示：
- en: '[PRE12]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Most of the steps are self explanatory; step 2 in my example is “Convert project
    to SDK style”. This means reformatting the *.csproj* file to the newer .NET format
    that starts with `<Project Sdk="Microsoft.NET.Sdk">`. As you go through these
    steps, use a source control diff tool (e.g., KDiff, VS Code, or the Git Changes
    window in Visual Studio) to see the changes being made to your code and project
    files.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数步骤都很容易理解；例如，我的第2步是“将项目转换为SDK样式”。这意味着重新格式化*.csproj*文件以符合以`<Project Sdk="Microsoft.NET.Sdk">`开头的较新.NET格式。在进行这些步骤时，使用源代码控制的差异工具（例如KDiff、VS
    Code或Visual Studio中的Git Changes窗口）查看对代码和项目文件的更改。
- en: The logs from the upgrade assistant are stored in Compact Log Event Format (CLEF)
    inside the directory in which you ran the tool. It will also create a backup of
    your project; however, this is not particularly useful if you have everything
    checked into source control (you *do* have everything checked into source control,
    right?).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 升级助手的日志以紧凑日志事件格式（CLEF）存储在你运行工具的目录内。它还将备份你的项目；但是，如果你将所有内容都提交到源代码控制（你确实将所有内容都提交到源代码控制了吧？），这并不特别有用。
- en: 'You can see from the preceding list that step 9c was `Do not use HttpContext.Current`.
    This is coming from the `HttpContextCurrentAnalyzer` we introduced earlier, and
    the fix from this analyzer will change all usage of `HttpContext.Current` in your
    code to `HttpContextHelper.Current`. We do still get a warning about `HttpContextHelper.Current`
    being obsolete and to use dependency injection instead; however, this doesn’t
    prevent my upgraded code from compiling. The upgrade assistant also refactored
    my `@helper` syntax in the Razor view (step 8b) and replaced it with a .NET 6
    compatible helper method. The code after running the upgrade assistant looks like
    this (Examples [3-3](#ex_3-3) and [3-4](#ex_3-4)):'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从上述列表中看到，第9步c是“不要使用HttpContext.Current”。这来自我们之前介绍的HttpContextCurrentAnalyzer，这个分析器的修复将会将你代码中所有的HttpContext.Current用HttpContextHelper.Current替换。然而，我们仍然会收到关于HttpContextHelper.Current已过时且建议使用依赖注入的警告；然而，这并不会阻止我升级后的代码编译。升级助手还重新设计了我的Razor视图中的@helper语法（第8步b），并用.NET
    6兼容的帮助方法替换了它。运行升级助手后的代码如下（示例[3-3](#ex_3-3)和[3-4](#ex_3-4)）：
- en: Example 3-3\. HomeController.cs
  id: totrans-143
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-3\. HomeController.cs
- en: '[PRE13]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Example 3-4\. Index.cshtml
  id: totrans-145
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-4\. Index.cshtml
- en: '[PRE14]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: AWS Porting Assistant
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS迁移助手
- en: Another tool you can use to aid your migration from .NET Framework is the porting
    assistant provided by AWS themselves. This is a Windows application that you download
    to the machine on which you have your .NET Framework solution. Although the porting
    assistant runs locally on your code, it will need to connect to AWS in order to
    retrieve NuGet package upgrade information from an S3 bucket; it is for this reason
    that you need to set it up with a local AWS profile as shown in [Figure 3-15](#Figure-3-16).
    No resources will be created on your AWS profile. The porting assistant can be
    downloaded from the [AWS Porting Assistant page](https://oreil.ly/31UMk).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个帮助你从.NET Framework迁移的工具是由AWS自己提供的迁移助手。这是一个Windows应用程序，你需要将其下载到你的.NET Framework解决方案所在的计算机上。虽然迁移助手在本地运行你的代码，但它需要连接AWS以从S3存储桶中检索NuGet包升级信息；因此，你需要像[图3-15](#Figure-3-16)中所示设置本地AWS配置文件。不会在你的AWS配置文件上创建任何资源。你可以从[AWS迁移助手页面](https://oreil.ly/31UMk)下载迁移助手。
- en: '![doac 0315](assets/doac_0315.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0315](assets/doac_0315.png)'
- en: Figure 3-15\. Running the .NET Porting Assistant from AWS
  id: totrans-150
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3-15\. 从AWS运行.NET迁移助手
- en: If we step through the wizard and use the same ASP.NET MVC web application we
    used for the Microsoft Upgrade Assistant, we can see that it has correctly identified
    the solution is targeting .NET Framework 4.7.5, and we have 7 incompatible NuGet
    packages and 15 incompatible APIs. This is the *15 of 17* values highlighted in
    [Figure 3-16](#Figure-3-17). You can see more information about these in the relevant
    tabs of the porting assistant including links to the code that has been identified
    as incompatible.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们逐步操作向导，并使用与微软升级助手相同的 ASP.NET MVC Web 应用程序，我们可以看到它已正确识别解决方案正在目标为.NET Framework
    4.7.5，并且我们有 7 个不兼容的 NuGet 包和 15 个不兼容的 API。这是[图 3-16](#Figure-3-17)中突出显示的 17 个值中的*15*。您可以在迁移助手的相关选项卡中查看有关这些内容的更多信息，包括已识别为不兼容的代码的链接。
- en: '![doac 0316](assets/doac_0316.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0316](assets/doac_0316.png)'
- en: Figure 3-16\. AWS Porting Assistant analysis results
  id: totrans-153
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-16\. AWS 迁移助手分析结果
- en: When you are ready, click Port Solution to begin making the changes to your
    project files. The application will ask you where you would like to save the ported
    solution to; having your code in source control means you can choose “Modify source
    in place”. Unlike Microsoft’s tool, the AWS Porting does actually let you fine-tune
    which versions you would like to upgrade your NuGet packages to in the UI. For
    this example, we have simply left the defaults in place for all packages and stepped
    through the assistant. You can see now from [Figure 3-17](#Figure-3-18) that the
    project files have been upgraded and the project is now showing in the porting
    assistant as .NET 6.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 当你准备好后，点击“迁移解决方案”开始对项目文件进行更改。应用程序会询问您希望将迁移的解决方案保存到哪里；如果您的代码在源代码控制中，您可以选择“直接修改源代码”。与微软的工具不同，AWS
    迁移工具确实允许您在界面中对要升级的 NuGet 包的版本进行微调。在本例中，我们只是保留了所有包的默认设置，并通过助手逐步操作。现在您可以从[图 3-17](#Figure-3-18)看到，项目文件已经升级，项目现在在迁移助手中显示为.NET
    6。
- en: '![doac 0317](assets/doac_0317.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0317](assets/doac_0317.png)'
- en: Figure 3-17\. AWS Porting Assistant complete
  id: totrans-156
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-17\. AWS 迁移助手完成
- en: If you click the link to open in Visual Studio, you will see the solution loads
    and your NuGet packages will have been upgraded to versions compatible with .NET
    Core/6+. Where the porting assistant’s help ends, however, is by refactoring all
    the unsupported code. When we try to build this, we will still get errors that
    `System.Web.HttpContext` does not exist and “the helper directive is not supported,”
    so it may be worth trying out all tools available and comparing your results.
    Overall, the .NET Porting Assistant from AWS does provide a very quick and accessible
    UI for visualizing and assessing the effort involved in refactoring your .NET
    Framework code to work with modern .NET.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您点击链接以在Visual Studio中打开，您将看到解决方案加载，并且您的 NuGet 包已升级为与.NET Core/6+兼容的版本。然而，当迁移助手的帮助到此为止时，仍会通过重构所有不受支持的代码而获得错误。当我们尝试构建时，我们仍会收到“System.Web.HttpContext”不存在和“不支持辅助指令”等错误，因此值得尝试所有可用工具并比较结果。总体而言，AWS
    的.NET 迁移助手提供了一个非常快速和易于访问的界面，用于可视化和评估重构您的.NET Framework代码以与现代.NET兼容所需的工作量。
- en: Conclusion
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'The strategies and tools we have covered in this chapter will help you move
    an existing application running on IIS to AWS. From the basic [“Rehosting on AWS”](#3-rehosting)
    of an application without touching the original source, to [“Rearchitecting: Moving
    to .NET (Core)”](#3-move-to-core) and making inroads into modernization of your
    codebase. Whichever strategy you choose, you will benefit from at least some of
    the advantages of running .NET in the AWS cloud; however, it is worth considering
    the next steps for your application. Some of the approaches we have covered here
    will leave your code in the exact same state as it was before you migrated. If
    you were not actively developing your codebase before the migration, then you
    will not be in a much better position to do so after choosing one of these paths.
    For a codebase you intend to continue to develop, to iterate on, and to add functionality
    to, you should to modernize your legacy application. Modernization will involve
    not just moving to .NET 6+ (although that will be a prerequisite); it will also
    involve replacing third-party dependencies, replacing external services, and refactoring
    the architecture of your application to use patterns that better exploit the cloud
    environment you are now running in. All these will be covered in the next chapter,
    in which we will cover the term *serverless* and how it can apply to you as a
    .NET developer.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的策略和工具将帮助您将运行在IIS上的现有应用程序迁移到AWS。从在不触及原始源代码的基础上进行的[“在AWS上进行再托管”](#3-rehosting)，到[“重新架构：转移到.NET（Core）”](#3-move-to-core)并开始现代化您的代码库。无论您选择哪种策略，您都将从在AWS云中运行.NET中至少一些优势中受益；然而，考虑到您的应用程序的下一步是值得的。我们在这里介绍的一些方法将使您的代码与迁移前基本相同。如果在迁移之前未积极开发代码库，则选择这些路径之一后，您的处境将不会好转。对于您打算继续开发、迭代并添加功能的代码库，您应当现代化您的遗留应用程序。现代化不仅涉及移至.NET
    6+（尽管这将是先决条件），还涉及替换第三方依赖项、替换外部服务和重构应用程序的架构，以使用更好地利用您当前运行的云环境的模式。所有这些内容将在下一章中进行介绍，我们将讨论术语*无服务器*以及它如何适用于您作为.NET开发人员。
- en: Critical Thinking Discussion Questions
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 批判性思维讨论问题
- en: Which is the easiest for a small start-up of the six Rs in a migration strategy?
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于小型初创企业来说，六个“Rs”中哪一个是最简单的？
- en: Which is the easiest for a large enterprise of the six Rs in a migration strategy?
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在迁移策略中，对于大型企业来说，六个“Rs”中哪一个是最简单的？
- en: What are strategies to programmatically convert thousands of Windows services
    to containers using App2Container?
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以编程方式将成千上万的Windows服务转换为容器的App2Container的策略是什么？
- en: What is a robust enterprise use case for the Porting Assistant for .NET?
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于.NET的Porting Assistant来说，什么是强大的企业用例？
- en: What are the advantages of Elastic Beanstalk applications in migration from
    on-premise to the AWS Cloud in an enterprise setting?
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弹性Beanstalk应用程序在从本地到AWS云的企业设置中的迁移中有什么优势？
- en: Exercises
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: Build a hello world Blazor app on a Windows Server, then use App2Container to
    convert it to a Docker container image.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows Server上构建一个hello world Blazor应用程序，然后使用App2Container将其转换为Docker容器映像。
- en: Deploy the Strategy Recommendations collector on an Amazon EC2 instance.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Amazon EC2实例上部署策略建议收集器。
- en: Run the [AWS Migration Hub Orchestrator](https://oreil.ly/bRnkz).
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行[AWS迁移中心编排器](https://oreil.ly/bRnkz)。
- en: Build a hello world Blazor app on a Windows Server, then use App2Container to
    convert it to a Docker container image and deploy it to AWS App Runner.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows Server上构建一个hello world Blazor应用程序，然后使用App2Container将其转换为Docker容器映像，并将其部署到AWS
    App Runner。
- en: Build a hello world Blazor app on a Windows Server, then use App2Container to
    convert it to a Docker container image and deploy it to Fargate using [AWS Copilot](https://oreil.ly/6Zzes).
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows Server上构建一个hello world Blazor应用程序，然后使用App2Container将其转换为Docker容器映像，并使用[AWS
    Copilot](https://oreil.ly/6Zzes)将其部署到Fargate。
- en: ^([1](ch03.xhtml#idm45599657227728-marker)) This migration strategy is sometimes
    called “refactoring”; however, this can be a chameleon of a term, so I’ll be sticking
    to “rearchitecting” for this book.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch03.xhtml#idm45599657227728-marker)) 这种迁移策略有时被称为“重构”；然而，这个术语可能是个变色龙，所以我会在本书中坚持使用“重新架构”。
- en: ^([2](ch03.xhtml#idm45599657227072-marker)) You can find the .NET Framework
    support policy [here](https://oreil.ly/FJImk).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch03.xhtml#idm45599657227072-marker)) 您可以在[这里](https://oreil.ly/FJImk)找到.NET
    Framework支持政策。
- en: ^([3](ch03.xhtml#idm45599657216256-marker)) I will admit to looking up from
    my screen and taking a long sip of coffee before adding “documentation” to this
    list. My cat gave me the same knowing stare that you are.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch03.xhtml#idm45599657216256-marker)) 在将“文档”添加到这个列表之前，我承认从屏幕上抬起头来，喝了一大口咖啡。我的猫给了我一样知道的目光。
- en: ^([4](ch03.xhtml#idm45599657199024-marker)) Your home region in the AWS Migration
    Hub is the region in which migration data is stored for discovery, planning, and
    migration tracking. You can set a home region from the Migration Hub Settings
    page.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](ch03.xhtml#idm45599657199024-marker)) AWS 迁移中心中的“主区域”是存储用于发现、规划和迁移跟踪的迁移数据的区域。您可以从迁移中心设置页面设置主区域。
- en: ^([5](ch03.xhtml#idm45599657010544-marker)) Interestingly, the three letter
    abbreviation *MGN* for Application Migration Service is a contraction and not
    an initialism. Perhaps *AMS* was too similar to *AWS*.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: ^([5](ch03.xhtml#idm45599657010544-marker)) 有趣的是，应用迁移服务的三字缩写 *MGN* 是一个缩略语而不是首字母缩写。也许
    *AMS* 与 *AWS* 太相似了。
- en: ^([6](ch03.xhtml#idm45599656749792-marker)) We will revisit these two container
    orchestration services later in this book, but in a nutshell ECS is a simpler
    and more “managed” service for running containers without the added complexity
    of dealing with Kubernetes.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: ^([6](ch03.xhtml#idm45599656749792-marker)) 我们将在本书后面重新讨论这两种容器编排服务，但简而言之，ECS
    是一个更简单和更“托管”的服务，用于运行容器，而无需处理 Kubernetes 的附加复杂性。
