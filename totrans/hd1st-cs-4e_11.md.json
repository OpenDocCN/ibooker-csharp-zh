["```cs\npublic void HiveUnderAttack() {\n    foreach (Bee worker in workers) {\n        if (EnemyHive.AttackingBees > 0) {\n            if (worker.Job == \"Hive Defender\") {\n                HiveDefender defender = (HiveDefender) worker;\n                defender.DefendHive();\n            } else if (worker.Job == \"Nectar Defender\") {\n                NectarDefender defender = (NectarDefender) defender;\n                defender.DefendHive();\n            }\n        }\n    }\n}\n```", "```cs\n    Bee worker = new NectarCollector();\n    Console.WriteLine(worker.Job);\n    worker.WorkTheNextShift();\n```", "```cs\n    IDefend defender = new NectarCollector();\n    defender.Defend();\n```", "```cs\nIDefender[] defenders = new IDefender[2];\ndefenders[0] = new HiveDefender();\ndefenders[1] = new NectarDefender();\n```", "```cs\nprivate void DefendTheHive() {\n  foreach (IDefender defender in defenders)\n  {\n     defender.Defend();\n  }\n}\n```", "```cs\n    class TallGuy {\n        public string Name;\n        public int Height;\n\n        public void TalkAboutYourself() {\n            Console.WriteLine($\"My name is {Name} and I’m {Height} inches tall.\");\n        }\n    }\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            TallGuy tallGuy = new TallGuy() { Height = 76, Name = \"Jimmy\" };\n            tallGuy.TalkAboutYourself();\n        }\n    }\n    ```", "```cs\n    interface IClown\n    {\n        void Honk();\n    }\n    ```", "```cs\n    interface IClown\n    {\n        string FunnyThingIHave { get; }\n        void Honk();\n    }\n    ```", "```cs\n    class TallGuy: IClown\n    ```", "```cs\n    static void Main(string[] args) {\n        TallGuy tallGuy = new TallGuy() { Height = 76, Name = \"Jimmy\" };\n        tallGuy.TalkAboutYourself();\n        Console.WriteLine($\"The tall guy has {tallGuy.FunnyThingIHave}\");\n        tallGuy.Honk();\n    }\n    ```", "```cs\n    HiveDefender bertha = new HiveDefender();\n    NectarDefender gertie = new NectarDefender();\n    ```", "```cs\n    IDefender def2 = gertie;\n    IDefender captain = bertha;\n    ```", "```cs\n    IDefender[] defenders = new IDefender[3];\n    defenders[0] = new HiveDefender();\n    defenders[1] = bertha;\n    defenders[2] = captain;\n    ```", "```cs\nclass Robot\n{\n   public void ConsumeGas() {\n     // Not environmentally friendly\n   }\n}\nclass RoboBee4000 : Robot, IWorker\n{\n   public string Job {\n     get { return \"Egg Care\"; }\n   }\n   public void WorkTheNextShift()\n   {\n     // Do the work of three bees!\n   }\n}\n```", "```cs\nclass EggCare : Bee {\n   public EggCare(Queen queen) : base(\"Egg C**ra**e\")\n\n   // Oops! Now we’ve got a bug in the EggCare class,\n   // even though the rest of the class is the same.\n}\n```", "```cs\nforeach (IWorker worker in workers) {\nif (worker.Job == \"Egg Care\") {\n    WorkNightShift((EggCare)worker);\n}\n\nvoid WorkNightShift(EggCare worker) {\n   // Code to work the night shift\n}\n```", "```cs\n  objectReference is ObjectType newVariable\n```", "```cs\n  foreach (IWorker worker in workers) {\n      if (worker is EggCare eggCareWorker) {\n          WorkNightShift(eggCareWorker);\n      }\n  }\n```", "```cs\n    worker is EggCare eggCareWorker\n```", "```cs\n    Animal animal = new Hippo();\n    animal.Swim(); // <-- this line will not compile!\n```", "```cs\n    Hippo hippo = (Hippo)animal;\n    hippo.Swim(); // It’s the same object, but now you can call the Hippo.Swim method.\n```", "```cs\nforeach (Animal animal in animals) {\n    animal.MakeNoise();\n}\n```", "```cs\n    class Hippo : Animal, ISwimmer {\n /* The code stays exactly the same - it MUST include the Swim method */\n    }\n\n    class Wolf : Canine, IPackHunter {\n /* The code stays exactly the same - it MUST include the HuntInPack method */\n    }\n```", "```cs\n  HoneyManufacturer lily = new HoneyManufacturer();\n  Bee hiveMember = lily;\n```", "```cs\n  HoneyManufacturer daisy = new HoneyManufacturer();\n  IWorker worker = daisy;\n```", "```cs\n  IWorker pearl = new HoneyManufacturer();\n  NectarCollector irene = (NectarCollector)pearl;\n```", "```cs\n  if (pearl is NectarCollector irene) {\n     /* Code that uses a NectarCollector object */\n  }\n```", "```cs\n NectarCollector irene = pearl as NectarCollector;\n```", "```cs\n if (irene != null) {\n    /* Code that uses a NectarCollector object */\n }\n```", "```cs\n   NectarCollector ida = new NectarCollector();\n```", "```cs\n  // Upcast the NectarCollector to a Bee\n  Bee beeReference = ida;\n\n  // This upcast is safe because all Bees are IWorkers\n  IWorker worker = (IWorker)beeReference;\n```", "```cs\n // Downcast the IWorker to NectarCollector\n  if (worker is NectarCollector rose) { /* code that uses the rose reference */ }\n```", "```cs\n      CoffeeMaker misterCoffee = new CoffeeMaker();\n      Oven oldToasty = new Oven();\n    ```", "```cs\n      Appliance[] kitchenWare = new Appliance[2];\n      kitchenWare[0] = misterCoffee;\n      kitchenWare[1] = oldToasty;\n    ```", "```cs\n      Appliance powerConsumer = new CoffeeMaker();\n      powerConsumer.ConsumePower();\n    ```", "```cs\n      Appliance someAppliance = appliances[5];\n      someAppliance.StartBrewing()\n    ```", "```cs\n      if (someAppliance is CoffeeMaker javaJoe) {\n         javaJoe.StartBrewing();\n      }\n    ```", "```cs\nOven misterToasty = new Oven();\nmisterToasty.\n```", "```cs\nif (misterToasty is ICooksFood cooker) {\n    cooker.\n```", "```cs\nif (misterToasty is Appliance powerConsumer)\n    powerConsumer.\n```", "```cs\nstatic void Main(string[] args)\n{\n\n   IClown.CarCapacity = 18;\n   Console.WriteLine(IClown.ClownCarDescription());\n\n   // the rest of the Main method stays the same\n}\n```", "```cs\n    IWorker worker = new NectarCollector();\n    worker.Buzz();\n```", "```cs\n    NectarCollector pearl = new NectarCollector();\n    pearl.Buzz();\n```", "```cs\n if (fingersTheClown is IScaryClown iScaryClownReference)\n {\n        iScaryClownReference.ScareAdults();\n }\n```", "```cs\n    using System.ComponentModel;\n    ```", "```cs\n    public event PropertyChangedEventHandler PropertyChanged;\n    ```", "```cs\n        protected void OnPropertyChanged(string name)\n        {\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));\n        }\n    ```", "```cs\n     private void UpdateStatusReport()\n     {\n     StatusReport = $\"Vault report:\\n{HoneyVault.StatusReport}\\n\" +\n     $\"\\nEgg count: {eggs:0.0}\\nUnassigned workers: {unassignedWorkers:0.0}\\n\" +\n     $\"{WorkerStatus(\"Nectar Collector\")}\\n{WorkerStatus(\"Honey Manufacturer\")}\" +\n     $\"\\n{WorkerStatus(\"Egg Care\")}\\nTOTAL WORKERS: {workers.Length}\";\n            OnPropertyChanged(\"StatusReport\");\n     }\n    ```", "```cs\n    <Grid DataContext=\"{StaticResource queen}\">\n    ```", "```cs\n    <TextBox Text=\"{Binding StatusReport, Mode=OneWay}\"\n    ```", "```cs\n    // statusReport.Text = queen.StatusReport;\n    ```", "```cs\n    private readonly Queen queen;\n    ```"]