["```cs\npublic enum CustomerType\n{\n    Bronze,\n    Silver,\n    Gold\n}\n\npublic class Order\n{\n    public decimal CalculateDiscount(\n        CustomerType custType, decimal amount)\n    {\n        decimal discount;\n\n        switch (custType)\n        {\n            case CustomerType.Silver:\n                discount = amount * 1.05m;\n                break;\n            case CustomerType.Gold:\n                discount = amount * 1.10m;\n                break;\n            case CustomerType.Bronze:\n            default:\n                discount = amount;\n                break;\n        }\n\n        return discount;\n    }\n}\n```", "```cs\npublic class OrderTests\n{\n [Fact]\n    public void\n    CalculateDiscount_WithBronzeCustomer_GivesNoDiscount()\n    {\n        const decimal ExpectedDiscount = 5.00m;\n\n        decimal actualDiscount =\n            new Order().CalculateDiscount(CustomerType.Bronze, 5.00m);\n\n        Assert.Equal(ExpectedDiscount, actualDiscount);\n    }\n\n [Fact]\n    public void\n    CalculateDiscount_WithSilverCustomer_GivesFivePercentDiscount()\n    {\n        const decimal ExpectedDiscount = 5.25m;\n\n        decimal actualDiscount =\n            new Order().CalculateDiscount(CustomerType.Silver, 5.00m);\n\n        Assert.Equal(ExpectedDiscount, actualDiscount);\n    }\n\n [Fact]\n    public void\n    CalculateDiscount_WithGoldCustomer_GivesTenPercentDiscount()\n    {\n        const decimal ExpectedDiscount = 5.50m;\n\n        decimal actualDiscount =\n            new Order().CalculateDiscount(CustomerType.Gold, 5.00m);\n\n        Assert.Equal(ExpectedDiscount, actualDiscount);\n    }\n}\n```", "```cs\n    <MethodToTest>_<Condition>_<ExpectedOutcome>\n```", "```cs\npublic interface IOrder\n{\n    string PrintOrder();\n}\n```", "```cs\npublic interface IOrder\n{\n    string PrintOrder();\n\n    decimal GetRewards() => 0.00m;\n}\n```", "```cs\npublic class CompanyOrder : IOrder\n{\n    public string PrintOrder()\n    {\n        return \"Company Order Details\";\n    }\n}\n```", "```cs\npublic class CompanyOrder : IOrder\n{\n    decimal total = 25.00m;\n\n    public string PrintOrder()\n    {\n        return \"Company Order Details\";\n    }\n\n    public decimal GetRewards()\n    {\n        return total * 0.01m;\n    }\n}\n```", "```cs\nclass CustomerOrder : IOrder\n{\n    public string PrintOrder()\n    {\n        return \"Customer Order Details\";\n    }\n}\n```", "```cs\nclass Program\n{\n    static void Main()\n    {\n        var orders = new List<IOrder>\n        {\n            new CustomerOrder(),\n            new CompanyOrder()\n        };\n\n        foreach (var order in orders)\n        {\n            Console.WriteLine(order.PrintOrder());\n            Console.WriteLine($\"Rewards: {order.GetRewards()}\");\n        }\n    }\n}\n```", "```cs\nstatic void ProcessOrderOld(string customer, List<string> lineItems)\n{\n    if (customer == null)\n    {\n        throw new ArgumentNullException(\n            nameof(customer), $\"{nameof(customer)} is required.\");\n    }\n\n    if (lineItems == null)\n    {\n        throw new ArgumentNullException(\n            nameof(lineItems), $\"{nameof(lineItems)} is required.\");\n    }\n\n    Console.WriteLine($\"Processed {customer}\");\n}\n```", "```cs\nstatic void ProcessOrderNew(string customer, List<string> lineItems)\n{\n    _ = customer ?? throw new ArgumentNullException(\n        nameof(customer), $\"{nameof(customer)} is required.\");\n    _ = lineItems ?? throw new ArgumentNullException(\n        nameof(lineItems), $\"{nameof(lineItems)} is required.\");\n\n    Console.WriteLine($\"Processed {customer}\");\n}\n```", "```cs\npublic class OrderLibraryNonNull\n{\n    // nullable property\n    public string DealOfTheDay { get; set; }\n\n    // method with null parameter\n    public void AddItem(string item)\n    {\n        Console.Write(item.ToString());\n    }\n\n    // method with null return value\n    public List<string> GetItems()\n    {\n        return null;\n    }\n\n    // method with null type parameter\n    public void AddItems(List<string> items)\n    {\n        foreach (var item in items)\n            Console.WriteLine(item.ToString());\n    }\n}\n```", "```cs\n<Project Sdk=\"Microsoft.NET.Sdk\">\n    <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>netcoreapp3.1</TargetFramework>\n        <RootNamespace>Section_03_04</RootNamespace>\n        <Nullable>enable</Nullable>\n    </PropertyGroup>\n</Project>\n```", "```cs\npublic class OrderLibraryWithNull\n{\n    // nullable property\n    public string? DealOfTheDay { get; set; }\n\n    // method with null parameter\n    public void AddItem(string? item)\n    {\n        _ = item ?? throw new ArgumentNullException(\n            nameof(item), $\"{nameof(item)} must not be null\");\n\n        Console.Write(item.ToString());\n    }\n\n    // method with null return value\n    public List<string>? GetItems()\n    {\n        return null;\n    }\n\n    // method with null type parameter\n    public void AddItems(List<string?> items)\n    {\n        foreach (var item in items)\n            Console.WriteLine(item?.ToString() ?? \"None\");\n    }\n}\n```", "```cs\nstatic void HandleWithNullNoHandling()\n{\n    var orders = new OrderLibraryWithNull();\n\n    string deal = orders.DealOfTheDay;\n    Console.WriteLine(deal.ToUpper());\n\n    orders.AddItem(null);\n    orders.AddItems(new List<string> { \"one\", null });\n\n    foreach (var item in orders.GetItems().ToArray())\n        Console.WriteLine(item.Trim());\n}\n```", "```cs\nstatic void HandleWithNullAndHandling()\n{\n    var orders = new OrderLibraryWithNull();\n\n    string? deal = orders.DealOfTheDay;\n    Console.WriteLine(deal?.ToUpper() ?? \"Deals\");\n\n    orders.AddItem(null);\n    orders.AddItems(new List<string?> { \"one\", null });\n\n    List<string>? items = orders.GetItems();\n\n    if (items != null)\n        foreach (var item in items.ToArray())\n            Console.WriteLine(item.Trim());\n}\n```", "```cs\npublic class Order\n{\n    public string DeliveryInstructions { get; set; }\n\n    public List<string> Items { get; set; }\n}\n```", "```cs\npublic class Delivery\n{\n    public const string NextDay = \"Next Day\";\n    public const string Standard = \"Standard\";\n    public const string LowFare = \"Low Fare\";\n\n    public const int StandardDays = 7;\n}\n```", "```cs\nstatic void Main(string[] args)\n{\n    var orders = new List<Order>\n    {\n        new Order { DeliveryInstructions = Delivery.LowFare },\n        new Order { DeliveryInstructions = Delivery.NextDay },\n        new Order { DeliveryInstructions = Delivery.Standard },\n    };\n\n    foreach (var order in orders)\n    {\n        int days;\n\n        switch (order.DeliveryInstructions)\n        {\n            case Delivery.LowFare:\n                days = 15;\n                break;\n            case Delivery.NextDay:\n                days = 1;\n                break;\n            case Delivery.Standard:\n            default:\n                days = Delivery.StandardDays;\n                break;\n        }\n\n        Console.WriteLine(order.DeliveryInstructions);\n        Console.WriteLine($\"Expected Delivery Day(s): {days}\");\n    }\n}\n```", "```cs\npublic class Order\n{\n    public int ID { get; set; }\n\n    public string CustomerName { get; set; }\n\n    public DateTime Created { get; set; }\n\n    public decimal Amount { get; set; }\n\n    public override string ToString()\n    {\n        var stringBuilder = new StringBuilder();\n\n        stringBuilder.Append(nameof(Order));\n        stringBuilder.Append(\" {\\n\");\n\n        if (PrintMembers(stringBuilder))\n            stringBuilder.Append(\" \");\n\n        stringBuilder.Append(\"\\n}\");\n\n        return stringBuilder.ToString();\n    }\n\n    protected virtual bool PrintMembers(StringBuilder builder)\n    {\n        builder.Append(\"  \" + nameof(ID));\n        builder.Append(\" = \");\n        builder.Append(ID);\n        builder.Append(\", \\n\");\n        builder.Append(\"  \" + nameof(CustomerName));\n        builder.Append(\" = \");\n        builder.Append(CustomerName);\n        builder.Append(\", \\n\");\n        builder.Append(\"  \" + nameof(Created));\n        builder.Append(\" = \");\n        builder.Append(Created.ToString(\"d\"));\n        builder.Append(\", \\n\");\n        builder.Append(\"  \" + nameof(Amount));\n        builder.Append(\" = \");\n        builder.Append(Amount);\n\n        return true;\n    }\n}\n```", "```cs\nclass Program\n{\n    static void Main(string[] args)\n    {\n        var order = new Order\n        {\n            ID = 7,\n            CustomerName = \"Acme\",\n            Created = DateTime.Now,\n            Amount = 2_718_281.83m\n        };\n\n        Console.WriteLine(order);\n    }\n}\n```", "```cs\nOrder {\n  ID = 7,\n  CustomerName = Acme,\n  Created = 1/23/2021,\n  Amount = 2718281.83\n}\n```", "```cs\npublic class Orders\n{\n    public void Process()\n    {\n        throw new IndexOutOfRangeException(\n            \"Expected 10 orders, but found only 9.\");\n    }\n}\n```", "```cs\npublic class OrderOrchestrator\n{\n    public static void HandleOrdersWrong()\n    {\n        try\n        {\n            new Orders().Process();\n        }\n        catch (IndexOutOfRangeException ex)\n        {\n            throw new InvalidOperationException(ex.Message);\n        }\n    }\n\n    public static void HandleOrdersBetter1()\n    {\n        try\n        {\n            new Orders().Process();\n        }\n        catch (IndexOutOfRangeException ex)\n        {\n            throw new InvalidOperationException(\"Error Processing Orders\", ex);\n        }\n    }\n\n    public static void HandleOrdersBetter2()\n    {\n        try\n        {\n            new Orders().Process();\n        }\n        catch (IndexOutOfRangeException)\n        {\n            throw;\n        }\n    }\n\n    public static void DontHandleOrders()\n    {\n        new Orders().Process();\n    }\n}\n```", "```cs\nclass Program\n{\n    static void Main(string[] args)\n    {\n        AppDomain.CurrentDomain.UnhandledException +=\n            (object sender, UnhandledExceptionEventArgs e) =>\n            System.Console.WriteLine(\"\\n\\nUnhandled Exception:\\n\" + e);\n\n        try\n        {\n            OrderOrchestrator.HandleOrdersWrong();\n        }\n        catch (InvalidOperationException ex)\n        {\n            Console.WriteLine(\"Handle Orders Wrong:\\n\" + ex);\n        }\n\n        try\n        {\n            OrderOrchestrator.HandleOrdersBetter1();\n        }\n        catch (InvalidOperationException ex)\n        {\n            Console.WriteLine(\"\\n\\nHandle Orders Better #1:\\n\" + ex);\n        }\n\n        try\n        {\n            OrderOrchestrator.HandleOrdersBetter2();\n        }\n        catch (IndexOutOfRangeException ex)\n        {\n            Console.WriteLine(\"\\n\\nHandle Orders Better #2:\\n\" + ex);\n        }\n\n        OrderOrchestrator.DontHandleOrders();\n    }\n}\n```", "```cs\nHandle Orders Wrong:\nSystem.InvalidOperationException: Expected 10 orders, but found only 9.\n   at Section_03_07.OrderOrchestrator.HandleOrdersWrong() in\n   /CSharp9Cookbook/Chapter03/Section-03-07/OrderOrchestrator.cs:line 15\n   at Section_03_07.Program.Main(String[] args) in\n   /CSharp9Cookbook/Chapter03/Section-03-07/Program.cs:line 11\n\nHandle Orders Better #1:\nSystem.InvalidOperationException: Error Processing Orders\n ---> System.IndexOutOfRangeException: Expected 10 orders, but found only 9.\n   at Section_03_07.Orders.Process() in\n   /CSharp9Cookbook/Chapter03/Section-03-07/Orders.cs:line 9\n   at Section_03_07.OrderOrchestrator.HandleOrdersBetter1() in\n   /CSharp9Cookbook/Chapter03/Section-03-07/OrderOrchestrator.cs:line 23\n   --- End of inner exception stack trace ---\n   at Section_03_07.OrderOrchestrator.HandleOrdersBetter1() in\n   /CSharp9Cookbook/Chapter03/Section-03-07/OrderOrchestrator.cs:line 27\n   at Section_03_07.Program.Main(String[] args) in\n   /CSharp9Cookbook/Chapter03/Section-03-07/Program.cs:line 20\n\nHandle Orders Better #2:\nSystem.IndexOutOfRangeException: Expected 10 orders, but found only 9.\n   at Section_03_07.Orders.Process() in\n   /CSharp9Cookbook/Chapter03/Section-03-07/Orders.cs:line 9\n   at Section_03_07.OrderOrchestrator.HandleOrdersBetter2() in\n   /CSharp9Cookbook/Chapter03/Section-03-07/OrderOrchestrator.cs:line 35\n   at Section_03_07.Program.Main(String[] args) in\n   /CSharp9Cookbook/Chapter03/Section-03-07/Program.cs:line 29\n\nUnhandled Exception:\nSystem.UnhandledExceptionEventArgs\nUnhandled exception. System.IndexOutOfRangeException:\n   Expected 10 orders, but found only 9.\n   at Section_03_07.Orders.Process() in\n   /CSharp9Cookbook/Chapter03/Section-03-07/Orders.cs:line 9\n   at Section_03_07.OrderOrchestrator.DontHandleOrders() in\n   /CSharp9Cookbook/Chapter03/Section-03-07/OrderOrchestrator.cs:line 45\n   at Section_03_07.Program.Main(String[] args) in\n   /CSharp9Cookbook/Chapter03/Section-03-07/Program.cs:line 40\n```", "```cs\ntry\n{\n    OrderOrchestrator.HandleOrdersWrong();\n}\ncatch (InvalidOperationException ex)\n{\n    throw ex;\n}\n```", "```cs\nstatic void ProcessOrders()\n{\n    throw new ArgumentException();\n}\n```", "```cs\nstatic void Main()\n{\n    Console.WriteLine(\"Processing Orders Started\");\n\n    ProcessOrders();\n\n    Console.WriteLine(\"Processing Orders Complete\");\n}\n```", "```cs\nstatic void Main()\n{\n    try\n    {\n        Console.WriteLine(\"Processing Orders Started\");\n\n        ProcessOrders();\n    }\n    catch (ArgumentException ae)\n    {\n        Console.WriteLine('\\n' + ae.ToString() + '\\n');\n    }\n    finally\n    {\n        Console.WriteLine(\"Processing Orders Complete\");\n    }\n}\n```", "```cs\nstatic async Task GetOrdersAsync()\n{\n    throw await Task.FromResult(\n        new HttpRequestException(\n            \"Timeout\", null, HttpStatusCode.RequestTimeout));\n}\n```", "```cs\npublic static async Task Main()\n{\n    const int DelayMilliseconds = 500;\n    const int RetryCount = 3;\n\n    bool success = false;\n    int tryCount = 0;\n\n    try\n    {\n        do\n        {\n            try\n            {\n                Console.WriteLine(\"Getting Orders\");\n                await GetOrdersAsync();\n\n                success = true;\n            }\n            catch (HttpRequestException hre)\n                when (hre.StatusCode == HttpStatusCode.RequestTimeout)\n            {\n                tryCount++;\n\n                int millisecondsToDelay = DelayMilliseconds * tryCount;\n                Console.WriteLine(\n                    $\"Exception during processing—\" +\n                    $\"delaying for {millisecondsToDelay} milliseconds\");\n\n                await Task.Delay(millisecondsToDelay);\n            }\n\n        } while (tryCount < RetryCount);\n    }\n    finally\n    {\n        if (success)\n            Console.WriteLine(\"Operation Succeeded\");\n        else\n            Console.WriteLine(\"Operation Failed\");\n    }\n}\n```", "```cs\n    Getting Orders\n    Exception during processing - delaying for 500 milliseconds\n    Getting Orders\n    Exception during processing - delaying for 1000 milliseconds\n    Getting Orders\n    Exception during processing - delaying for 1500 milliseconds\n    Operation Failed\n```", "```cs\npublic class OrderItem\n{\n    public decimal Cost { get; set; }\n    public string Description { get; set; }\n}\n```", "```cs\nstatic List<OrderItem> GetOrderItems()\n{\n    const int ItemCount = 10000;\n\n    var items = new List<OrderItem>();\n    var rand = new Random();\n\n    for (int i = 0; i < ItemCount; i++)\n        items.Add(\n            new OrderItem\n            {\n                Cost = rand.Next(i),\n                Description = \"Order Item #\" + (i + 1)\n            });\n\n    return items;\n}\n```", "```cs\nstatic string DoStringConcatenation(List<OrderItem> lineItems)\n{\n    var stopwatch = new Stopwatch();\n\n    try\n    {\n        stopwatch.Start();\n\n        string report = \"\";\n\n        foreach (var item in lineItems)\n            report += $\"{item.Cost:C} - {item.Description}\\n\";\n\n        Console.WriteLine(\n            $\"Time for String Concatenation: \" +\n            $\"{stopwatch.ElapsedMilliseconds}\");\n\n        return report;\n    }\n    finally\n    {\n        stopwatch.Stop();\n    }\n}\n```", "```cs\nstatic string DoStringBuilderConcatenation(List<OrderItem> lineItems)\n{\n    var stopwatch = new Stopwatch();\n    try\n    {\n        stopwatch.Start();\n\n        var reportBuilder = new StringBuilder();\n\n        foreach (var item in lineItems)\n            reportBuilder.Append($\"{item.Cost:C} - {item.Description}\\n\");\n\n        Console.WriteLine(\n            $\"Time for String Builder Concatenation: \" +\n            $\"{stopwatch.ElapsedMilliseconds}\");\n\n        return reportBuilder.ToString();\n    }\n    finally\n    {\n        stopwatch.Stop();\n    }\n}\n```", "```cs\nstatic void Main()\n{\n    List<OrderItem> lineItems = GetOrderItems();\n\n    DoStringConcatenation(lineItems);\n\n    DoStringBuilderConcatenation(lineItems);\n}\n```", "```cs\n    Time for String Concatenation: 1137\n    Time for String Builder Concatenation: 2\n```"]