["```cs\n var filmIds = new[]\n {\n     4665,\n     6718,\n     7101\n };\n\n// Turns each int element of the filmIds array\n// into a tuple containing the film and cast list\n// as separate properties\n\n var filmsWithCast = filmIds.Select(x => (\n     film: GetFilm(x),\n     castList: GetCastList(x)\n ));\n\n// 'x' here is a tuple, and it's now being converted to a string\n\nvar renderedFilmDetails = filmsWithCast.Select(x =>\n \"Title: \" + x.film.Title +\n \"Director: \" + x.film.Director +\n \"Cast: \" + string.Join(\", \", x.castList));\n```", "```cs\n public class StandardBankAccount\n {\n     public decimal Balance { get; set; }\n     public decimal InterestRate { get; set; }\n }\n\n public class PremiumBankAccount : StandardBankAccount\n {\n     public decimal BonusInterestRate { get; set; }\n }\n\n public class MillionairesBankAccount : StandardBankAccount\n {\n     public decimal OverflowBalance { get; set; }\n }\n\n public class MonopolyPlayersBankAccount : StandardBankAccount\n {\n     public decimal PassingGoBonus { get; set; }\n }\n```", "```cs\n public decimal CalculateNewBalance(StandardBankAccount sba)\n {\n   // If real type of object is PremiumBankAccount\n   if (sba.GetType() == typeof(PremiumBankAccount))\n   {\n     // cast to correct type so we can access the Bonus interest\n     var pba = (PremiumBankAccount)sba;\n     if (pba.Balance > 10000)\n     {\n         return pba.Balance * (pba.InterestRate + pba.BonusInterestRate);\n     }\n   }\n\n  // if real type of object is a Millionaire's bank account\n  if(sba.GetType() == typeof(MillionairesBankAccount))\n  {\n    // cast to the correct type so we can get access to the overflow\n    var mba = (MillionairesBankAccount)sba;\n    return (mba.Balance * mba.InterestRate) +\n             (mba.OverflowBalance * mba.InterestRate)\n  }\n\n    // if real type of object is a Monopoly Player's bank account\n  if(sba.GetType() == typeof(MonopolyPlayersBankAccount))\n  {\n    // cast to the correct type so we can get access to the bonus\n    var mba = (MonopolyPlayersBankAccount)sba;\n    return (mba.Balance * mba.InterestRate) +\n             mba.PassingGoBonus\n  }\n\n   // no special rules apply\n   return sba.Balance * sba.InterestRate;\n }\n```", "```cs\n public decimal CalculateNewBalance(StandardBankAccount sba)\n {\n     // If real type of object is PremiumBankAccount\n     if (sba is PremiumBankAccount pba)\n     {\n         if (pba.Balance > 10000)\n         {\n             return pba.Balance * (pba.InterestRate + pba.BonusInterestRate);\n         }\n     }\n\n     // if real type of object is a Millionaire's bank account\n     if(sba is MillionairesBankAccount mba)\n     {\n        return (mba.Balance * mba.InterestRate) +\n                (mba.OverflowBalance * mba.InterestRate);\n     }\n\n     // if real type of object is a Monopoly Player's bank account\n     if(sba is MonopolyPlayersBankAccount mba)\n     {\n       return (mba.Balance * mba.InterestRate) +\n                mba.PassingGoBonus;\n     }\n     // no special rules apply\n     return sba.Balance * sba.InterestRate;\n }\n```", "```cs\n public decimal CalculateNewBalance(StandardBankAccount sba)\n {\n   switch (sba)\n   {\n      case PremiumBankAccount pba when pba.Balance > 10000:\n        return pba.Balance * (pba.InterestRate + pba.BonusInterestRate);\n      case MillionairesBankAccount mba:\n        return (mba.Balance * mba.InterestRate) +\n                 (mba.OverflowBalance & mba.InterestRate);\n      case MonopolyPlayersBankAccount mba:\n        return (mba.Balance * mba.InterestRate) + PassingGoBonus;\n      default:\n        return sba.Balance * sba.InterestRate;\n   }\n }\n```", "```cs\n public decimal CalculateNewBalance(StandardBankAccount sba) =>\n   sba switch\n   {\n     PremiumBankAccount { Balance: > 10000 } pba => pba.Balance *\n                     (pba.InterestRate + pba.BonusInterestRate),\n     MillionairesBankAccount mba => (mba.Balance * mba.InterestRate) +\n                 (mba.OverflowBalance & mba.InterestRate);\n     MonopolyPlayersBankAccount mba =>\n                (mba.Balance * mba.InterestRate) + PassingGoBonus;\n     _ => sba.Balance * sba.InterestRate\n   };\n }\n```", "```cs\npublic enum SPS\n{\n\tScissor,\n\tPaper,\n\tStone\n}\n\npublic enum GameResult\n{\n\tWin,\n\tLose,\n\tDraw\n}\n\nvar calculateMatchResult = (SPS myMove, SPS theirMove) =>\n\t(myMove, theirMove) switch\n\t{\n\t\t_ when myMove == theirMove => GameResult.Draw,\n\t\t( SPS.Scissor, SPS.Paper) => GameResult.Win,\n\t\t( SPS.Paper, SPS.Stone ) => GameResult.Win,\n\t\t(SPS.Stone, SPS.Scissor) => GameResult.Win,\n\t\t_ => GameResult.Lose\n\t};\n```", "```cs\npublic string formatGames(IEnumerable<(SPS,SPS)> game, Func<SPS,SPS,Result) calc) =>\nstring.Join(\"\\r\\n\", game.Select((x, i) => \"Game \" + i + \": \" + calc(x.Item1,x.Item2).ToString());\n```", "```cs\n public decimal CalculateNewBalance(StandardBankAccount sba) =>\n   sba switch\n   {\n     PremiumBankAccount { Balance: > 10000 and <= 20000 } pba => pba.Balance *\n                         (pba.InterestRate + pba.BonusInterestRate),\n     PremiumBankAccount { Balance: > 20000 } pba => pba.Balance *\n                  (pba.InterestRate + pba.BonusInterestRate * 1.25M),\n     MillionairesBankAccount mba => (mba.Balance * mba.InterestRate) +\n                 (mba.OverflowBalance + mba.InterestRate),\n     MonopolyPlayersBankAccount {CurrSquare: not \"InJail\" } mba =>\n                (mba.Balance * mba.InterestRate) + mba.PassingGoBonus;\n     ClosedBankAccount => 0,\n     _ => sba.Balance * sba.InterestRate\n   };\n }\n```", "```cs\n public decimal CalculateNewBalance(StandardBankAccount sba) =>\n   sba switch\n   {\n     PremiumBankAccount { Balance: > 10000 and <= 20000 } pba =>\n\t\tpba.Balance * (pba.InterestRate + pba.BonusInterestRate),\n     MillionairesBankAccount mba =>\n\t\t(mba.Balance * mba.InterestRate) + (mba.OverflowBalance + mba.InterestRate),\n     MonopolyPlayersBankAccount {CurrSquare: not \"InJail\" } mba =>\n\t\t(mba.Balance * mba.InterestRate) + PassingGoBonus,\n     MonopolyPlayersBankAccount {Player.FirstName: \"Simon\" } mba =>\n\t\t(mba.Balance * mba.InterestRate) + (mba.PassingGoBonus / 2),\n     ClosedBankAccount => 0,\n     _ => sba.Balance * sba.InterestRate\n   };\n```", "```cs\nvar verb = input.Split(\" \") switch\n{\n [\"GO\", \"TO\",.. var rest] => this.actions.GoTo(rest),\n [\"GO\", .. var rest] => this.actions.GoTo(rest),\n [\"EAT\", .. var rest] => this.actions.Eat(rest),\n [\"KILL\", .. var rest] => this.actions.Kill(rest)\n};\n```", "```cs\npublic class Person\n{\n\tpublic string FirstName { get; set; }\n\tpublic IEnumerable<string> MiddleNames { get; set; }\n\tpublic string LastName { get; set; }\n}\n\n// The real name of Doctor Who actor, Sylvester McCoy\nvar input = \"Percy James Patrick Kent-Smith\".Split(\" \");\n\nvar sylv = new Person\n{\n\tFirstName = input.First(),\n\tMiddleNames = input is [_, .. var mns, _] ? mns : Enumerable.Empty<string>(),\n\tLastName = input.Last()\n};\n```", "```cs\nlet (|IsDateTime|_|) (input:string) =\n    let success, value = DateTime.TryParse input\n    if success then Some value else None\n\nlet tryParseDateTime input =\n    match input with\n    | IsDateTime dt -> Some dt\n    | _ -> None\n```", "```cs\npublic readonly struct Movie\n{\n    public string Title { get; private set; };\n    public string Directory { get; private set; };\n    public IEnumerable<string> Cast { get; private set; };\n\n    public Movie(string title, string directory, IEnumerable<string> cast)\n    {\n        this.Title = title;\n        this.Directory = directory;\n        this.Cast = cast;\n    }\n}\n\nvar bladeRunner = new Movie(\n        \"Blade Runner\",\n        \"Ridley Scott\",\n        new []\n        {\n            \"Harrison Ford\",\n            \"Sean Young\"\n        }\n);\n```", "```cs\npublic readonly struct Movie\n{\n    public readonly string Title;\n    public readonly string Directory;\n    public readonly IList<string> Cast;\n\n    public Movie(string title, string directory, IList<string> cast)\n    {\n        this.Title = title;\n        this.Directory = directory;\n        this.Cast = cast;\n    }\n}\n\nvar bladeRunner = new Movie(\n        \"Blade Runner\",\n        \"Ridley Scott\",\n        new []\n        {\n            \"Harrison Ford\",\n            \"Sean Young\"\n        }\n);\n\nbladeRunner.Cast.Add((\"Edward James Olmos\"));\n```", "```cs\n public readonly struct Movie\n {\n     public string Title { get; init; }\n     public string Director { get; init;  }\n     public IEnumerable<string> Cast { get; init; }\n }\n\n var bladeRunner = new Movie\n    {\n        Title = \"Blade Runner\",\n        Director = \"Ridley Scott\",\n        Cast = new []\n        {\n            \"Harrison Ford\",\n            \"Sean Young\"\n        }\n    };\n```", "```cs\npublic record Movie\n{\n    public string Title { get; init; }\n    public string Director { get; init;  }\n    public IEnumerable<string> Cast { get; init; }\n}\n\nvar bladeRunner = new Movie\n   {\n       Title = \"Blade Runner\",\n       Director = \"Ridley Scott\",\n       Cast = new []\n       {\n           \"Harrison Ford\",\n           \"Sean Young\"\n       }\n   };\n```", "```cs\n public readonly struct Movie\n {\n     public string Title { get; init; }\n     public string Director { get; init;  }\n     public IEnumerable<string> Cast { get; init; }\n }\n\nvar bladeRunner = new Movie\n    {\n        Title = \"Blade Runner\",\n        Director = \"Ridley Scott\",\n        Cast = new []\n        {\n            \"Harrison Ford\",\n            \"Sean Young\"\n        }\n    };\n\nvar bladeRunnerDirectors = new Movie\n{\n    Title = $\"{bladeRunner.Title} - The Director's Cut\",\n    Director = bladeRunner.Director,\n    Cast = bladeRunner.Cast\n};\n```", "```cs\n public record Movie\n {\n     public string Title { get; init; }\n     public string Director { get; init;  }\n     public IEnumerable<string> Cast { get; init; }\n }\n\nvar bladeRunner = new Movie\n    {\n        Title = \"Blade Runner\",\n        Director = \"Ridley Scott\",\n        Cast = new []\n        {\n            \"Harrison Ford\",\n            \"Sean Young\"\n        }\n    };\n\nvar bladeRunnerDirectors = bladeRunner with\n{\n    Title = $\"{bladeRunner.Title} - The Director's Cut\"\n};\n```", "```cs\npublic record Movie(string Title, string Director, IEnumerable<string> Cast);\n```", "```cs\nvar bladeRunner = new Movie(\n\"Blade Runner\",\n\"Ridley Scott\",\nnew[]\n{\n\t\"Harrison Ford\",\n\t\"Sean Young\"\n});\n```", "```cs\nvar bladeRunner = new Movie(\n\tCast: new[]\n\t {\n\t\t\"Harrison Ford\",\n\t\t\"Sean Young\"\n\t},\n\tDirector: \"Ridley Scott\",\n\tTitle: \"Blade Runner\");\n```", "```cs\n <PropertyGroup>\n   <TargetFramework>net6.0</TargetFramework>\n   <Nullable>enable</Nullable>\n   <IsPackable>false</IsPackable>\n </PropertyGroup>\n```", "```cs\n public record Movie\n {\n     public string? Title { get; init; }\n     public string? Director { get; init;  }\n     public IEnumerable<string>? Cast { get; init; }\n }\n```"]