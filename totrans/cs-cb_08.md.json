["```cs\npublic interface IRoomSchedule\n{\n    void ScheduleRoom();\n}\n\npublic class GoldSchedule : IRoomSchedule\n{\n    public void ScheduleRoom() =>\n        Console.WriteLine(\"Scheduling Gold Room\");\n}\n\npublic class SilverSchedule : IRoomSchedule\n{\n    public void ScheduleRoom() =>\n        Console.WriteLine(\"Scheduling Silver Room\");\n}\n\npublic class BronzeSchedule : IRoomSchedule\n{\n    public void ScheduleRoom() =>\n        Console.WriteLine(\"Scheduling Bronze Room\");\n}\n```", "```cs\nstatic ArrayList GetWeakTypedSchedules()\n{\n    var list = new ArrayList();\n\n    list.Add(new BronzeSchedule());\n    list.Add(new SilverSchedule());\n    list.Add(new GoldSchedule());\n\n    return list;\n}\n```", "```cs\nstatic void ProcessLegacyCode()\n{\n    ArrayList schedules = GetWeakTypedSchedules();\n\n    foreach (var schedule in schedules)\n    {\n        if (schedule is IRoomSchedule)\n        {\n            IRoomSchedule roomSchedule = (IRoomSchedule)schedule;\n            roomSchedule.ScheduleRoom();\n        }\n\n        //\n        // alternatively\n        //\n\n        IRoomSchedule asRoomSchedule = schedule as IRoomSchedule;\n\n        if (asRoomSchedule != null)\n            asRoomSchedule.ScheduleRoom();\n\n        //\n        // even better\n        //\n\n        if (schedule is IRoomSchedule isRoomSchedule)\n            isRoomSchedule.ScheduleRoom();\n    }\n}\n```", "```cs\nstatic List<IRoomSchedule> GetStrongTypedSchedules()\n{\n    return new List<IRoomSchedule>\n    {\n        new BronzeSchedule(),\n        new SilverSchedule(),\n        new GoldSchedule()\n    };\n}\n```", "```cs\nstatic void ProcessModernCode()\n{\n    List<IRoomSchedule> schedules = GetStrongTypedSchedules();\n\n    foreach (var schedule in schedules)\n    {\n        schedule.ScheduleRoom();\n\n        if (schedule is GoldSchedule gold)\n            Console.WriteLine(\n                $\"Extra processing for {gold.GetType()}\");\n    }\n}\n```", "```cs\nstatic void Main()\n{\n    ProcessLegacyCode();\n    ProcessModernCode();\n}\n```", "```cs\npublic class Scheduler\n{\n    public void ScheduleRoom(string arg1, string arg2)\n    {\n        _ = arg1 ?? throw new ArgumentNullException(nameof(arg1));\n        _ = arg2 ?? throw new ArgumentNullException(nameof(arg2));\n    }\n}\n```", "```cs\nstatic void Main()\n{\n    try\n    {\n        Console.Write(\"Choose (1) arg1 or (2) arg2? \");\n        string arg = Console.ReadLine();\n\n        var scheduler = new Scheduler();\n\n        if (arg == \"1\")\n            scheduler.ScheduleRoom(null, \"arg2\");\n        else\n            scheduler.ScheduleRoom(\"arg1\", null);\n    }\n    catch (ArgumentNullException ex1)\n        when (ex1.ParamName == \"arg1\")\n    {\n        Console.WriteLine(\"Invalid arg1\");\n    }\n    catch (ArgumentNullException ex2)\n        when (ex2.ParamName == \"arg2\")\n    {\n        Console.WriteLine(\"Invalid arg2\");\n    }\n}\n```", "```cs\npublic interface IRoomSchedule\n{\n    void ScheduleRoom();\n}\n\npublic class GoldSchedule : IRoomSchedule\n{\n    public void ScheduleRoom() =>\n        Console.WriteLine(\"Scheduling Gold Room\");\n}\n\npublic class SilverSchedule : IRoomSchedule\n{\n    public void ScheduleRoom() =>\n        Console.WriteLine(\"Scheduling Silver Room\");\n}\n\npublic class BronzeSchedule : IRoomSchedule\n{\n    public void ScheduleRoom() =>\n        Console.WriteLine(\"Scheduling Bronze Room\");\n}\n```", "```cs\npublic enum ScheduleType\n{\n    None,\n    Bronze,\n    Silver,\n    Gold\n}\n```", "```cs\npublic class Scheduler\n{\n    public IRoomSchedule CreateStatement(\n        ScheduleType scheduleType)\n    {\n        switch (scheduleType)\n        {\n            case ScheduleType.Gold:\n                return new GoldSchedule();\n            case ScheduleType.Silver:\n                return new SilverSchedule();\n            case ScheduleType.Bronze:\n            default:\n                return new BronzeSchedule();\n        }\n    }\n\n    public IRoomSchedule CreateExpression(\n        ScheduleType scheduleType) =>\n            scheduleType switch\n            {\n                ScheduleType.Gold => new GoldSchedule(),\n                ScheduleType.Silver => new SilverSchedule(),\n                ScheduleType.Bronze => new BronzeSchedule(),\n                _ => new BronzeSchedule()\n            };\n}\n```", "```cs\nstatic void Main()\n{\n    Console.Write(\n        \"Choose (1) Bronze, (2) Silver, or (3) Gold: \");\n    string choice = Console.ReadLine();\n\n    Enum.TryParse(choice, out ScheduleType scheduleType);\n\n    var scheduler = new Scheduler();\n\n    IRoomSchedule scheduleStatement =\n        scheduler.CreateStatement(scheduleType);\n    scheduleStatement.ScheduleRoom();\n\n    IRoomSchedule scheduleExpression =\n        scheduler.CreateExpression(scheduleType);\n    scheduleExpression.ScheduleRoom();\n}\n```", "```cs\npublic class Room\n{\n    public int Number { get; set; }\n    public string RoomType { get; set; }\n    public string BedSize { get; set; }\n}\n```", "```cs\npublic enum ScheduleType\n{\n    None,\n    Bronze,\n    Silver,\n    Gold\n}\n```", "```cs\nstatic List<Room> GetRooms()\n{\n    return new List<Room>\n    {\n        new Room\n        {\n            Number = 333,\n            BedSize = \"King\",\n            RoomType = \"Suite\"\n        },\n        new Room\n        {\n            Number = 222,\n            BedSize = \"King\",\n            RoomType = \"Regular\"\n        },\n        new Room\n        {\n            Number = 111,\n            BedSize = \"Queen\",\n            RoomType = \"Regular\"\n        },\n    };\n}\n```", "```cs\nconst int RoomNotAvailable = -1;\n\nstatic int AssignRoom(ScheduleType scheduleType)\n{\n    foreach (var room in GetRooms())\n    {\n        ScheduleType roomType = room switch\n        {\n            { BedSize: \"King\", RoomType: \"Suite\" }\n                => ScheduleType.Gold,\n            { BedSize: \"King\", RoomType: \"Regular\" }\n                => ScheduleType.Silver,\n            { BedSize: \"Queen\", RoomType: \"Regular\" }\n                => ScheduleType.Bronze,\n            _ => ScheduleType.Bronze\n        };\n\n        if (roomType == scheduleType)\n            return room.Number;\n    }\n\n    return RoomNotAvailable;\n}\n```", "```cs\nstatic void Main()\n{\n    Console.Write(\n        \"Choose (1) Bronze, (2) Silver, or (3) Gold: \");\n    string choice = Console.ReadLine();\n\n    Enum.TryParse(choice, out ScheduleType scheduleType);\n\n    int roomNumber = AssignRoom(scheduleType);\n\n    if (roomNumber == RoomNotAvailable)\n        Console.WriteLine(\"Room not available.\");\n    else\n        Console.WriteLine($\"The room number is {roomNumber}.\");\n}\n```", "```cs\npublic class Room\n{\n    public int Number { get; set; }\n    public string RoomType { get; set; }\n    public string BedSize { get; set; }\n\n    public void Deconstruct(out string size, out string type)\n    {\n        size = BedSize;\n        type = RoomType;\n    }\n}\n```", "```cs\npublic enum ScheduleType\n{\n    None,\n    Bronze,\n    Silver,\n    Gold\n}\n```", "```cs\nstatic List<Room> GetRooms()\n{\n    return new List<Room>\n    {\n        new Room\n        {\n            Number = 333,\n            BedSize = \"King\",\n            RoomType = \"Suite\"\n        },\n        new Room\n        {\n            Number = 222,\n            BedSize = \"King\",\n            RoomType = \"Regular\"\n        },\n        new Room\n        {\n            Number = 111,\n            BedSize = \"Queen\",\n            RoomType = \"Regular\"\n        },\n    };\n }\n```", "```cs\nstatic int AssignRoom(ScheduleType scheduleType)\n{\n    foreach (var room in GetRooms())\n    {\n        ScheduleType roomType = room switch\n        {\n            (\"King\", \"Suite\") => ScheduleType.Gold,\n            (\"King\", \"Regular\") => ScheduleType.Silver,\n            (\"Queen\", \"Regular\") => ScheduleType.Bronze,\n            _ => ScheduleType.Bronze\n        };\n\n        if (roomType == scheduleType)\n            return room.Number;\n    }\n\n    return RoomNotAvailable;\n}\n```", "```cs\nstatic void Main()\n{\n    Console.Write(\n        \"Choose (1) Bronze, (2) Silver, or (3) Gold: \");\n    string choice = Console.ReadLine();\n\n    Enum.TryParse(choice, out ScheduleType scheduleType);\n\n    int roomNumber = AssignRoom(scheduleType);\n\n    if (roomNumber == RoomNotAvailable)\n        Console.WriteLine(\"Room not available.\");\n    else\n        Console.WriteLine($\"The room number is {roomNumber}.\");\n}\n```", "```cs\npublic enum ScheduleType\n{\n    None,\n    Bronze,\n    Silver,\n    Gold\n}\n```", "```cs\npublic class Room\n{\n    public int Number { get; set; }\n    public string RoomType { get; set; }\n    public string BedSize { get; set; }\n}\n```", "```cs\nstatic List<Room> GetHotel1Rooms()\n{\n    return new List<Room>\n    {\n        new Room\n        {\n            Number = 333,\n            BedSize = \"King\",\n            RoomType = \"Suite\"\n        },\n        new Room\n        {\n            Number = 111,\n            BedSize = \"Queen\",\n            RoomType = \"Regular\"\n        },\n    };\n}\n\nstatic List<Room> GetHotel2Rooms()\n{\n    return new List<Room>\n    {\n        new Room\n        {\n            Number = 222,\n            BedSize = \"King\",\n            RoomType = \"Regular\"\n        },\n    };\n}\n```", "```cs\nstatic\n    List<(int no, string size, string type)>\n    GetRooms()\n{\n    var rooms = GetHotel1Rooms().Union(GetHotel2Rooms());\n    return\n        (from room in rooms\n         select (\n            room.Number,\n            room.BedSize,\n            room.RoomType\n         ))\n        .ToList();\n}\n```", "```cs\nstatic int AssignRoom(ScheduleType scheduleType)\n{\n    foreach (var room in GetRooms())\n    {\n        ScheduleType roomType = room switch\n        {\n            (_, \"King\", \"Suite\") => ScheduleType.Gold,\n            (_, \"King\", \"Regular\") => ScheduleType.Silver,\n            (_, \"Queen\", \"Regular\") => ScheduleType.Bronze,\n            _ => ScheduleType.Bronze\n        };\n\n        if (roomType == scheduleType)\n            return room.no;\n    }\n\n    return RoomNotAvailable;\n}\n```", "```cs\nstatic void Main()\n{\n    Console.Write(\n        \"Choose (1) Bronze, (2) Silver, or (3) Gold: \");\n    string choice = Console.ReadLine();\n\n    Enum.TryParse(choice, out ScheduleType scheduleType);\n\n    int roomNumber = AssignRoom(scheduleType);\n\n    if (roomNumber == RoomNotAvailable)\n        Console.WriteLine(\"Room not available.\");\n    else\n        Console.WriteLine($\"The room number is {roomNumber}.\");\n}\n```", "```cs\npublic interface IRoomSchedule\n{\n    void ScheduleRoom();\n}\n\npublic class GoldSchedule : IRoomSchedule\n{\n    public void ScheduleRoom() =>\n        Console.WriteLine(\"Scheduling Gold Room\");\n}\n\npublic class SilverSchedule : IRoomSchedule\n{\n    public void ScheduleRoom() =>\n        Console.WriteLine(\"Scheduling Silver Room\");\n}\n\npublic class BronzeSchedule : IRoomSchedule\n{\n    public void ScheduleRoom() =>\n        Console.WriteLine(\"Scheduling Bronze Room\");\n}\n```", "```cs\nconst int SilverPoints = 5000;\nconst int GoldPoints = 20000;\n\nstatic IRoomSchedule GetSchedule(int points) =>\n    points switch\n    {\n        >= GoldPoints => new GoldSchedule(),\n        >= SilverPoints => new SilverSchedule(),\n        < SilverPoints => new BronzeSchedule()\n    };\n```", "```cs\nstatic void Main()\n{\n    Console.Write(\"How many points? \");\n    string response = Console.ReadLine();\n\n    if (!int.TryParse(response, out int points))\n    {\n        Console.WriteLine($\"'{response}' is invalid!\");\n        return;\n    }\n\n    IRoomSchedule schedule = GetSchedule(points);\n\n    schedule.ScheduleRoom();\n}\n```", "```cs\npublic interface IRoomSchedule\n{\n    void ScheduleRoom();\n}\n\npublic class GoldSchedule : IRoomSchedule\n{\n    public void ScheduleRoom() =>\n        Console.WriteLine(\"Scheduling Gold Room\");\n}\n\npublic class SilverSchedule : IRoomSchedule\n{\n    public void ScheduleRoom() =>\n        Console.WriteLine(\"Scheduling Silver Room\");\n}\n\npublic class BronzeSchedule : IRoomSchedule\n{\n    public void ScheduleRoom() =>\n        Console.WriteLine(\"Scheduling Bronze Room\");\n}\n```", "```cs\npublic class Customer\n{\n    public int Points { get; set; }\n\n    public bool HasFreeUpgrade { get; set; }\n}\n```", "```cs\nstatic List<Customer> GetCustomers() =>\n    new List<Customer>\n    {\n        new Customer\n        {\n            Points = 25000,\n            HasFreeUpgrade = false\n        },\n        new Customer\n        {\n            Points = 10000,\n            HasFreeUpgrade = true\n        },\n        new Customer\n        {\n            Points = 1000,\n            HasFreeUpgrade = true\n        },\n    };\n```", "```cs\nstatic IRoomSchedule GetSchedule(Customer customer) =>\n    customer switch\n    {\n        Customer c\n            when\n                c.Points >= GoldPoints\n                    ||\n                (c.Points >= SilverPoints && c.HasFreeUpgrade)\n            => new GoldSchedule(),\n\n        Customer c\n            when\n                c.Points >= SilverPoints\n                    ||\n                (c.Points < SilverPoints && c.HasFreeUpgrade)\n            => new SilverSchedule(),\n\n        Customer c\n            when\n                c.Points < SilverPoints\n            => new BronzeSchedule(),\n\n        _ => new BronzeSchedule()\n    };\n```", "```cs\nstatic void Main()\n{\n    foreach (var customer in GetCustomers())\n    {\n        IRoomSchedule schedule = GetSchedule(customer);\n        schedule.ScheduleRoom();\n    }\n}\n```", "```cs\npublic class Customer\n{\n    public int Points { get; set; }\n\n    public int Month { get; set; }\n}\n```", "```cs\nstatic List<Customer> GetCustomers() =>\n    new List<Customer>\n    {\n        new Customer\n        {\n            Points = 25000,\n            Month = 1\n        },\n        new Customer\n        {\n            Points = 10000,\n            Month = 12\n        },\n        new Customer\n        {\n            Points = 10000,\n            Month = 11\n        },\n        new Customer\n        {\n            Points = 1000,\n            Month = 2\n        },\n    };\n```", "```cs\nconst int SilverPoints = 5000;\nconst int GoldPoints = 20000;\n\nconst int May = 5;\nconst int Sep = 9;\nconst int Dec = 12;\n\nstatic decimal GetDiscount(Customer customer) =>\n    (customer.Points, customer.Month) switch\n    {\n        (>= GoldPoints, not Dec and > Sep or < May) => 0.15m,\n        (>= GoldPoints, Dec) => 0.10m,\n        (>= SilverPoints, not (Dec or <= Sep and >= May)) => 0.05m,\n        _ => 0.0m\n    };\n```", "```cs\nstatic void Main()\n{\n    foreach (var customer in GetCustomers())\n    {\n        decimal discount = GetDiscount(customer);\n        Console.WriteLine(discount);\n    }\n}\n```", "```cs\npublic interface IRoomSchedule\n{\n    void ScheduleRoom();\n}\n\npublic class GoldSchedule : IRoomSchedule\n{\n    public void ScheduleRoom() =>\n        Console.WriteLine(\"Scheduling Gold Room\");\n}\n\npublic class SilverSchedule : IRoomSchedule\n{\n    public void ScheduleRoom() =>\n        Console.WriteLine(\"Scheduling Silver Room\");\n}\n\npublic class BronzeSchedule : IRoomSchedule\n{\n    public void ScheduleRoom() =>\n        Console.WriteLine(\"Scheduling Bronze Room\");\n}\n```", "```cs\npublic class Customer {}\n\npublic class GoldCustomer : Customer {}\n\npublic class SilverCustomer : Customer {}\n\npublic class BronzeCustomer : Customer {}\n```", "```cs\nstatic List<Customer> GetCustomers() =>\n    new List<Customer>\n    {\n        new GoldCustomer(),\n        new SilverCustomer(),\n        new BronzeCustomer()\n    };\n```", "```cs\nstatic IRoomSchedule GetSchedule(Customer customer) =>\n    customer switch\n    {\n        GoldCustomer => new GoldSchedule(),\n        SilverCustomer => new SilverSchedule(),\n        BronzeCustomer => new BronzeSchedule(),\n        _ => new BronzeSchedule()\n    };\n```", "```cs\nstatic void Main()\n{\n    foreach (var customer in GetCustomers())\n    {\n        IRoomSchedule schedule = GetSchedule(customer);\n        schedule.ScheduleRoom();\n    }\n}\n```"]