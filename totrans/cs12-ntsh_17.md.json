["```cs\nSystem.Reflection\nSystem.Resources\nSystem.Globalization\n```", "```cs\nusing System.Runtime.CompilerServices;\n\n[assembly:InternalsVisibleTo(\"MyUnitTestProject\")]\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<assembly manifestVersion=\"1.0\" >\n  <!-- contents of manifest -->\n</assembly>\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<assembly manifestVersion=\"1.0\" >\n  <trustInfo >\n    <security>\n      <requestedPrivileges>\n        <requestedExecutionLevel level=\"requireAdministrator\" />\n      </requestedPrivileges>\n    </security>\n  </trustInfo>\n</assembly>\n```", "```cs\nAssembly a = typeof (Program).Assembly;\n```", "```cs\nsn.exe -k MyKeyPair.snk\n```", "```cs\n*major*.*minor*.*build*.*revision*\n```", "```cs\n[assembly: AssemblyVersion (\"2.5.6.7\")]\n```", "```cs\n*simple-name*, Version=*version*, Culture=*culture*, PublicKeyToken=*public-key*\n```", "```cs\nstring      FullName    { get; }            // Fully qualified name\nstring      Name        { get; set; }       // Simple name\nVersion     Version     { get; set; }       // Assembly version\nCultureInfo CultureInfo { get; set; }       // For satellite assemblies\nstring      CodeBase    { get; set; }       // Location\n\nbyte[]      GetPublicKey();                 // 160 bytes\nvoid        SetPublicKey (byte[] key);\nbyte[]      GetPublicKeyToken();            // 8-byte version\nvoid        SetPublicKeyToken (byte[] publicKeyToken);\n```", "```cs\nConsole.WriteLine (typeof (string).Assembly.GetName().Name);\n// System.Private.CoreLib\n```", "```cs\nstring v = myAssembly.GetName().Version.ToString();\n```", "```cs\nsigntool sign /n \"Joseph Albahari\" /fd sha256 LINQPad.exe\n```", "```cs\n ... /d LINQPad /du *http://www.linqpad.net*\n```", "```cs\n ... /tr *http://timestamp.comodoca.com/authenticode* /td SHA256\n```", "```cs\n.mresource public banner.jpg\n{\n  // Offset: 0x00000F58 Length: 0x000004F6\n}\n.mresource public data.xml\n{\n  // Offset: 0x00001458 Length: 0x0000027E\n}\n```", "```cs\nAssembly a = Assembly.GetEntryAssembly();\n\nusing (Stream s = a.GetManifestResourceStream (\"TestProject.data.xml\"))\nusing (XmlReader r = XmlReader.Create (s))\n  ...\n\nSystem.Drawing.Image image;\nusing (Stream s = a.GetManifestResourceStream (\"TestProject.banner.jpg\"))\n  image = System.Drawing.Image.FromStream (s);\n```", "```cs\nbyte[] data;\nusing (Stream s = a.GetManifestResourceStream (\"TestProject.banner.jpg\"))\n  data = new BinaryReader (s).ReadBytes ((int) s.Length);\n```", "```cs\nusing (Stream s = a.GetManifestResourceStream (typeof (X), \"data.xml\"))\n```", "```cs\n<root>\n  <data name=\"Greeting\">\n    <value>hello</value>\n  </data>\n  <data name=\"DefaultFontSize\" type=\"System.Int32, mscorlib\">\n    <value>10</value>\n  </data>\n</root>\n```", "```cs\nResourceManager r = new ResourceManager (\"welcome\",\n                                         Assembly.GetExecutingAssembly());\n```", "```cs\nstring greeting = r.GetString (\"Greeting\");\nint fontSize = (int) r.GetObject (\"DefaultFontSize\");\nImage image = (Image) r.GetObject (\"flag.png\");      \n```", "```cs\nResourceManager r = new ResourceManager (...);\nResourceSet set = r.GetResourceSet (CultureInfo.CurrentUICulture,\n                                    true, true);\nforeach (System.Collections.DictionaryEntry entry in set)\n  Console.WriteLine (entry.Key);\n```", "```cs\n<Button>\n  <Image Height=\"50\" Source=\"flag.png\"/>\n</Button>\n```", "```cs\n<Button>\n  <Image Height=\"50\" Source=\"UtilsAssembly;Component/flag.png\"/>\n</Button>\n```", "```cs\nUri u = new Uri (\"flag.png\", UriKind.Relative);\nusing (Stream s = Application.GetResourceStream (u).Stream)\n```", "```cs\nUri u = new Uri (\"pack://application:,,,/flag.png\");\n```", "```cs\nAssembly a = Assembly.GetExecutingAssembly();\nResourceManager r = new ResourceManager (a.GetName().Name + \".g\", a);\nusing (Stream s = r.GetStream (\"flag.png\"))\n  ...\n```", "```cs\nprogramBaseFolder\\MyProgram.exe\n                 \\MyLibrary.exe\n                 \\*XX*\\MyProgram.resources.dll\n                 \\*XX*\\MyLibrary.resources.dll\n```", "```cs\n<root>\n  ...\n  <data name=\"Greeting\"\n    <value>hello</value>\n  </data>\n</root>\n```", "```cs\nResourceManager r = new ResourceManager (\"welcome\",\n                                         Assembly.GetExecutingAssembly());\nConsole.Write (r.GetString (\"Greeting\"));\n```", "```cs\n<root>\n  <data name=\"Greeting\">\n    <value>hallo<value>\n  </data>\n</root>\n```", "```cs\nSystem.Threading.Thread.CurrentThread.CurrentUICulture\n  = new System.Globalization.CultureInfo (\"de\");\n```", "```cs\nEn\nde\n```", "```cs\nen-AU\nde-AT\n```", "```cs\nConsole.WriteLine (System.Threading.Thread.CurrentThread.CurrentCulture);\nConsole.WriteLine (System.Threading.Thread.CurrentThread.CurrentUICulture);\n```", "```cs\nen-AU\nen-US\n```", "```cs\nAdventureGame.dll    // Main assembly\nTerrain.dll          // Referenced assembly\nUIEngine.dll         // Referenced assembly\n```", "```cs\nAssembly assem = Assembly.GetExecutingAssembly();\nAssemblyLoadContext context = AssemblyLoadContext.GetLoadContext (assem);\nConsole.WriteLine (context.Name);\n```", "```cs\nforeach (Assembly a in context.Assemblies)\n  Console.WriteLine (a.FullName);\n```", "```cs\npublic Assembly LoadFromAssemblyPath (string assemblyPath);\npublic Assembly LoadFromStream (Stream assembly, Stream assemblySymbols);\n```", "```cs\nvar alc = new AssemblyLoadContext (\"Test\");\nAssembly assem = alc.LoadFromAssemblyPath (@\"c:\\temp\\foo.dll\");\n```", "```cs\nvar alc2 = new AssemblyLoadContext (\"Test 2\");\nAssembly assem2 = alc2.LoadFromAssemblyPath (@\"c:\\temp\\foo.dll\");\n```", "```cs\nbytes[] bytes = File.ReadAllBytes (@\"c:\\temp\\foo.dll\");\nvar ms = new MemoryStream (bytes);\nvar assem = alc.LoadFromStream (ms);\n```", "```cs\npublic Assembly LoadFromAssemblyName (AssemblyName assemblyName);\n```", "```cs\nusing System.IO;\nusing System.Runtime.Loader;\n\nclass FolderBasedALC : AssemblyLoadContext\n{\n  readonly string _folder;\n  public FolderBasedALC (string folder) => _folder = folder;\n\n  protected override Assembly Load (AssemblyName assemblyName)\n  {\n    // Attempt to find the assembly:\n    string targetPath = Path.Combine (_folder, assemblyName.Name + \".dll\");\n\n    if (File.Exists (targetPath))\n      return LoadFromAssemblyPath (targetPath);   // Load the assembly\n\n    return null;    // We can’t find it: it could be a .NET runtime assembly\n  }\n}\n```", "```cs\nvar alc = new FolderBasedALC (@\"c:\\temp\");\nAssembly foo = alc.LoadFromAssemblyPath (@\"c:\\temp\\foo.dll\");\n...\n```", "```cs\nvar alc = new FolderBasedALC (@\"c:\\temp\");\nAssembly foo = alc.LoadFromAssemblyName (new AssemblyName (\"foo\"));\n...\n```", "```cs\nvar alc = new AssemblyLoadContext (\"test\");\nalc.Resolving += (loadContext, assemblyName) =>\n{\n  string targetPath = Path.Combine (@\"c:\\temp\", assemblyName.Name + \".dll\");\n  return alc.LoadFromAssemblyPath (targetPath);   // Load the assembly\n};\nAssembly foo = alc.LoadFromAssemblyName (new AssemblyName (\"foo\"));\n```", "```cs\nAssemblyLoadContext.Default.Resolving += (loadContext, assemblyName) =>\n{\n  // Try to locate assemblyName, returning an Assembly object or null.\n  // Typically you’d call LoadFromAssemblyPath after finding the file.\n  // ...\n};\n```", "```cs\nAssemblyLoadContext.Default.LoadFromAssemblyName (\"System.Xml\");\n```", "```cs\nvar executingAssem = Assembly.GetExecutingAssembly();\nvar alc = AssemblyLoadContext.GetLoadContext (executingAssem);\n\nAssembly assem = alc.LoadFromAssemblyName (...);  // to resolve by name\n        // OR: = alc.LoadFromAssemblyPath (...);  // to load by path\n```", "```cs\nvar myAssem = typeof (SomeTypeInMyAssembly).Assembly;\nvar alc = AssemblyLoadContext.GetLoadContext (myAssem);\n...\n```", "```cs\npublic object Deserialize (Stream stream, AssemblyLoadContext alc)\n{\n  ...\n}\n```", "```cs\nvar assem = typeof (SomeTypeThatIWillBeDeserializing).Assembly;\nvar alc = AssemblyLoadContext.GetLoadContext (assem);\nvar object = Deserialize (someStream, alc);\n```", "```cs\nvar executingAssem = Assembly.GetExecutingAssembly();\nvar alc = AssemblyLoadContext.GetLoadContext (executingAssem);\nAssembly assem = alc.LoadFromAssemblyName (...);\n```", "```cs\npublic static Assembly Load (string assemblyString);\n```", "```cs\npublic static Assembly Load (AssemblyName assemblyRef);\n```", "```cs\nAssembly a = Assembly.Load (\"System.Private.Xml\");\n```", "```cs\n\"System.Private.Xml, PublicKeyToken=cc7b13ffcd2ddd51\"\n\"System.Private.Xml, Version=4.0.1.0\"\n\"System.Private.Xml, Version=4.0.1.0, PublicKeyToken=cc7b13ffcd2ddd51\"\n```", "```cs\nAssembly a = typeof (System.Xml.Formatting).Assembly;\n```", "```cs\nAssembly a = System.Xml.Formatting.Indented.GetType().Assembly;\n```", "```cs\n[MethodImpl(MethodImplOptions.NoInlining)]\nAssembly Load (string name)\n{\n  Assembly callingAssembly = Assembly.GetCallingAssembly();\n  var callingAlc = AssemblyLoadContext.GetLoadContext (callingAssembly);\n  return callingAlc.LoadFromAssemblyName (new AssemblyName (name));\n}\n```", "```cs\nMethod1();\n\nvar myALC = new AssemblyLoadContext (\"test\");\nusing (myALC.EnterContextualReflection())\n{\n   Console.WriteLine (\n     AssemblyLoadContext.CurrentContextualReflectionContext.Name);  // test\n\n   Method2();\n}\n\n// Once disposed, EnterContextualReflection() no longer has an effect.\nMethod3();\n\nvoid Method1() => Assembly.Load (\"...\");    // Will use calling ALC\nvoid Method2() => Assembly.Load (\"...\");    // Will use myALC\nvoid Method3() => Assembly.Load (\"...\");    // Will use calling ALC\n```", "```cs\n[MethodImpl(MethodImplOptions.NoInlining)]\nAssembly Load (string name)\n{\n  var alc = AssemblyLoadContext.CurrentContextualReflectionContext\n     ?? AssemblyLoadContext.GetLoadContext (Assembly.GetCallingAssembly());\n\n  return alc.LoadFromAssemblyName (new AssemblyName (name));\n}\n```", "```cs\n[DllImport (\"SomeNativeLibrary.dll\")]\nstatic extern int SomeNativeMethod (string text);\n```", "```cs\nprotected override IntPtr LoadUnmanagedDll (string unmanagedDllName)\n{\n  // Locate the full path of unmanagedDllName...\n  string fullPath = ...\n  return LoadUnmanagedDllFromPath (fullPath);    // Load the DLL\n}\n```", "```cs\nsomeALC.ResolvingUnmanagedDll += (requestingAssembly, unmanagedDllName) =>\n{\n  return NativeLibrary.Load (\"(full path to unmanaged DLL)\");\n};\n```", "```cs\nvar resolver = new AssemblyDependencyResolver (@\"c:\\temp\\foo.dll\");\n```", "```cs\nstring path = resolver.ResolveAssemblyToPath (new AssemblyName (\"bar\"));\n```", "```cs\nusing Microsoft.Data.SqlClient;\n\nnamespace ClientApp\n{\n  public class Program\n  {\n    public static SqlConnection GetConnection() => new SqlConnection();\n    static void Main() => GetConnection();   // Test that it resolves\n  }\n}\n```", "```cs\nstring path = @\"C:\\source\\ClientApp\\bin\\Debug\\netcoreapp3.0\\ClientApp.dll\";\nvar resolver = new AssemblyDependencyResolver (path);\nvar sqlClient = new AssemblyName (\"Microsoft.Data.SqlClient\");\nConsole.WriteLine (resolver.ResolveAssemblyToPath (sqlClient));\n```", "```cs\nC:\\source\\ClientApp\\bin\\Debug\\netcoreapp3.0\\runtimes\\win\\lib\\netcoreapp2.1\n\\Microsoft.Data.SqlClient.dll\n```", "```cs\nvar alc = new AssemblyLoadContext (\"test\", isCollectible:true);\n```", "```cs\npublic static Assembly LoadFrom (string assemblyFile);\npublic static Assembly LoadFile (string path);\npublic static Assembly Load (byte[] rawAssembly);\n```", "```cs\nAppDomain.CurrentDomain.AssemblyResolve += (sender, args) =>\n{\n  string fullAssemblyName = args.Name;\n  // return an Assembly object or null\n  ...\n};\n```", "```cs\nAssemblyLoadContext.All.SelectMany (a => a.Assemblies)\n```", "```cs\nc:\\source\\PluginDemo\\Plugin.Common\nc:\\source\\PluginDemo\\Capitalizer\nc:\\source\\PluginDemo\\Plugin.Host\n```", "```cs\nnamespace Plugin.Common\n{\n  public interface ITextPlugin\n  {\n    string TransformText (string input);\n  }\n}\n```", "```cs\npublic class CapitalizerPlugin : Plugin.Common.ITextPlugin\n{\n  public string TransformText (string input) => input.ToUpper();\n}\n```", "```cs\nCapitalizer.dll      // Our plug-in assembly\nPlugin.Common.dll    // Referenced assembly\n```", "```cs\nclass PluginLoadContext : AssemblyLoadContext\n{\n  AssemblyDependencyResolver _resolver;\n\n  public PluginLoadContext (string pluginPath, bool collectible)\n    // Give it a friendly name to help with debugging:\n    : base (name: Path.GetFileName (pluginPath), collectible)\n  {\n    // Create a resolver to help us find dependencies.\n    _resolver = new AssemblyDependencyResolver (pluginPath);\n  }\n\n  protected override Assembly Load (AssemblyName assemblyName)\n  {\n    // See below\n    if (assemblyName.Name == typeof (ITextPlugin).Assembly.GetName().Name)\n      return null;\n\n    string target = _resolver.ResolveAssemblyToPath (assemblyName);\n\n    if (target != null)\n      return LoadFromAssemblyPath (target);\n\n    // Could be a BCL assembly. Allow the default context to resolve.\n    return null;   \n  }\n\n  protected override IntPtr LoadUnmanagedDll (string unmanagedDllName)\n  {\n    string path = _resolver.ResolveUnmanagedDllToPath (unmanagedDllName);\n\n    return path == null\n      ? IntPtr.Zero\n      : LoadUnmanagedDllFromPath (path);\n  }\n}\n```", "```cs\n    if (assemblyName.Name == typeof (ITextPlugin).Assembly.GetName().Name)\n      return null;\n```", "```cs\nclass Program\n{\n  const bool UseCollectibleContexts = true;\n\n  static void Main()\n  {\n    const string capitalizer = @\"C:\\source\\PluginDemo\\\"\n      + @\"Capitalizer\\bin\\Debug\\netcoreapp3.0\\Capitalizer.dll\";\n\n    Console.WriteLine (TransformText (\"big apple\", capitalizer));\n  }\n\n  static string TransformText (string text, string pluginPath)\n  {\n    var alc = new PluginLoadContext (pluginPath, UseCollectibleContexts);\n    try\n    {\n      Assembly assem = alc.LoadFromAssemblyPath (pluginPath);\n\n      // Locate the type in the assembly that implements ITextPlugin:\n      Type pluginType = assem.ExportedTypes.Single (t => \n                        typeof (ITextPlugin).IsAssignableFrom (t));\n\n      // Instantiate the ITextPlugin implementation:\n      var plugin = (ITextPlugin)Activator.CreateInstance (pluginType);\n\n      // Call the TransformText method\n      return plugin.TransformText (text);\n    }\n    finally\n    {\n      if (UseCollectibleContexts) alc.Unload();    // unload the ALC\n    }  \n  }\n}\n```", "```cs\nBIG APPLE\n```", "```cs\n  <ItemGroup>\n    <PackageReference Include=\"Humanizer.Core\" Version=\"2.6.2\" />\n  </ItemGroup>\n```", "```cs\nusing Humanizer;\nnamespace Capitalizer\n{\n  public class CapitalizerPlugin : Plugin.Common.ITextPlugin\n  {\n    public string TransformText (string input) => input.Pascalize();\n  }\n}\n```", "```cs\nBigApple\n```", "```cs\n  <ItemGroup>\n    <PackageReference Include=\"Humanizer.Core\" Version=\"2.7.9\" />\n  </ItemGroup>\n```", "```cs\nusing Humanizer;\nnamespace Pluralizer\n{\n  public class PluralizerPlugin : Plugin.Common.ITextPlugin\n  {\n    public string TransformText (string input) => input.Pluralize();\n  }\n}\n```", "```cs\n  static void Main()\n  {\n    const string capitalizer = @\"C:\\source\\PluginDemo\\\"\n      + @\"Capitalizer\\bin\\Debug\\netcoreapp3.0\\Capitalizer.dll\";\n\n    Console.WriteLine (TransformText (\"big apple\", capitalizer));\n\n const string pluralizer = @\"C:\\source\\PluginDemo\\\"\n + @\"Pluralizer\\bin\\Debug\\netcoreapp3.0\\Pluralizer.dll\";\n\n Console.WriteLine (TransformText (\"big apple\", pluralizer));\n  }\n```", "```cs\nBigApple\nbig apples\n```", "```cs\nforeach (var context in AssemblyLoadContext.All)\n{\n  Console.WriteLine ($\"Context: {context.GetType().Name} {context.Name}\");\n\n  foreach (var assembly in context.Assemblies)\n      Console.WriteLine ($\"  Assembly: {assembly.FullName}\");\n}\n```", "```cs\nContext: PluginLoadContext Capitalizer.dll\n  Assembly: Capitalizer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=...\n  Assembly: Humanizer, Version=2.6.0.0, Culture=neutral, PublicKeyToken=...\nContext: PluginLoadContext Pluralizer.dll\n  Assembly: Pluralizer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=...\n  Assembly: Humanizer, Version=2.7.0.0, Culture=neutral, PublicKeyToken=...\nContext: DefaultAssemblyLoadContext Default\n  Assembly: System.Private.CoreLib, Version=4.0.0.0, Culture=neutral,...\n  Assembly: Host, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\n  ...\n```"]