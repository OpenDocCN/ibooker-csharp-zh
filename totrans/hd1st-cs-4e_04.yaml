- en: 'Unity Lab #1: Explore C# with Unity'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to your first **Head First C# Unity Lab**. Writing code is a skill,
    and like any other skill, getting better at it takes **practice and experimentation**.
    Unity will be a really valuable tool for that.
  prefs: []
  type: TYPE_NORMAL
- en: Unity is a cross-platform game development tool that you can use to make professional-quality
    games, simulations, and more. It’s also a fun and satisfying way to get **practice
    with the C# tools and ideas** you’ll learn throughout this book. We designed these
    short, targeted labs to **reinforce** the concepts and techniques you just learned
    to help you hone your C# skills.
  prefs: []
  type: TYPE_NORMAL
- en: These labs are optional, but valuable practice—**even if you aren’t planning
    on using C# to build games**.
  prefs: []
  type: TYPE_NORMAL
- en: In this first lab, you’ll get up and running with Unity. You’ll get oriented
    with the Unity editor, and you’ll start creating and manipulating 3D shapes.
  prefs: []
  type: TYPE_NORMAL
- en: Unity is a powerful tool for game design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to the world of Unity, a complete system for designing professional-quality
    games—both two-dimensional (2D) and three-dimensional (3D)—as well as simulations,
    tools, and projects. Unity includes many powerful things, including...
  prefs: []
  type: TYPE_NORMAL
- en: '**A cross-platform game engine**'
  prefs: []
  type: TYPE_NORMAL
- en: A **game engine** displays the graphics, keeps track of the 2D or 3D characters,
    detects when they hit each other, makes them act like real-world physical objects,
    and much, much more. Unity will do all of these things for the 3D games you build
    throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/088fig01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**A powerful 2D and 3D scene editor**'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll be spending a lot of time in the Unity editor. It lets you edit levels
    full of 2D or 3D objects, with tools that you can use to design complete worlds
    for your games. Unity games use C# to define their behavior, and the Unity editor
    integrates with Visual Studio to give you a seamless game development environment.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'While these Unity Labs will concentrate on C# development in Unity, if you’re
    a visual artist or designer, the Unity editor has many artist-friendly tools designed
    just for you. Check them out here: [https://unity3d.com/unity/features/editor/art-and-design](https://unity3d.com/unity/features/editor/art-and-design).'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/088fig02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**An ecosystem for game creation**'
  prefs: []
  type: TYPE_NORMAL
- en: Beyond being an enormously powerful tool for creating games, Unity also features
    an ecosystem to help you build and learn. The Learn Unity page ([https://unity.com/learn](https://unity.com/learn))
    has valuable self-guided learning resources, and the Unity forums ([https://forum.unity.com](https://forum.unity.com))
    help you connect with other game designers and ask questions. The Unity Asset
    Store ([https://assetstore.unity.com](https://assetstore.unity.com)) provides
    free and paid assets like characters, shapes, and effects that you can use in
    your Unity projects.
  prefs: []
  type: TYPE_NORMAL
- en: '**Our Unity Labs will focus on using Unity as a tool to explore C#, and practicing
    with the C# tools and ideas that you’ve learned throughout the book.**'
  prefs: []
  type: TYPE_NORMAL
- en: The *`Head First C#`* Unity Labs are laser-focused on a **developer-centric
    learning path**. The goal of these labs is to help you ramp up on Unity quickly,
    with the same focus on brain-friendly just-in-time learning you’ll see throughout
    *`Head First C#`* to ***give you lots of targeted, effective practice with C#
    ideas and techniques***.
  prefs: []
  type: TYPE_NORMAL
- en: Download Unity Hub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Unity Hub** is an application that helps you manage your Unity projects and
    your Unity installations, and it’s the starting point for creating your new Unity
    project. Start by downloading Unity Hub from [https://store.unity.com/download](https://store.unity.com/download)—then
    install it and run it.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/089fig01.png)'
  prefs: []
  type: TYPE_IMG
- en: Unity Hub lets you install multiple versions of Unity on the same computer,
    so you should install the same version that we used to build these labs. **Click
    Official Releases** and install the latest version that starts with ***Unity 2020.1***—that’s
    the same version we used to take the screenshots in these labs. Once it’s installed,
    make sure that it’s set as the preferred version.
  prefs: []
  type: TYPE_NORMAL
- en: The Unity installer may prompt you to install a different version of Visual
    Studio. You can have multiple installations of Visual Studio on the same computer
    too, but if you already have one version of Visual Studio installed there’s no
    need to make the Unity installer add another one.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about installing Unity Hub on Windows, macOS, and Linux
    here: [https://docs.unity3d.com/2020.1/Documentation/Manual/GettingStartedInstallingHub.html](https://docs.unity3d.com/2020.1/Documentation/Manual/GettingStartedInstallingHub.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Unity Hub lets you have many Unity installs on the same computer. So even if
    there’s a newer version of Unity available, you can use Unity Hub to install the
    version we used in the Unity Labs.
  prefs: []
  type: TYPE_NORMAL
- en: Use Unity Hub to create a new project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Click the ![Images](assets/090fig01a.png) button on the Project page in Unity
    Hub to create a new Unity project. Name it ***Unity Lab 1***, make sure the 3D
    template is selected, and check that you’re creating it in a sensible location
    (usually the Unity Projects folder underneath your home directory).
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/090fig01.png)'
  prefs: []
  type: TYPE_IMG
- en: Click Create Project to create the new folder with the Unity project. When you
    create a new project, Unity generates a lot of files (just like Visual Studio
    does when it creates new projects for you). It could take Unity a minute or two
    to create all of the files for your new project.
  prefs: []
  type: TYPE_NORMAL
- en: Make Visual Studio your Unity script editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Unity editor works hand-in-hand with the Visual Studio IDE to make it really
    easy to edit and debug the code for your games. So the first thing we’ll do is
    make sure that Unity is hooked up to Visual Studio. **Choose Preferences from
    the Edit menu** (or from the Unity menu on a Mac) to open the Unity Preferences
    window. Click on External Tools on the left, and **choose Visual Studio** from
    the External Script Editor window.
  prefs: []
  type: TYPE_NORMAL
- en: '*In some older versions of Unity, you may see an **Editor Attaching** checkbox—if
    so, make sure that it’s checked (that will let you debug your Unity code in the
    IDE).*'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/090fig02.png)'
  prefs: []
  type: TYPE_IMG
- en: OK! You’re all ready to get started building your first Unity project.
  prefs: []
  type: TYPE_NORMAL
- en: You can use Visual Studio to debug the code in your Unity games. Just choose
    Visual Studio as the external script editor in Unity’s preferences.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Take control of the Unity layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Unity editor is like an IDE for all of the parts of your Unity project that
    aren’t C#. You’ll use it to work with scenes, edit 3D shapes, create materials,
    and so much more. Like in Visual Studio, the windows and panels in the Unity editor
    can be rearranged in many different layouts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Find the Scene tab near the top of the window. Click on the tab and drag it
    to detach the window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/091fig01.png)'
  prefs: []
  type: TYPE_IMG
- en: Try docking it inside or next to other panels, then drag it to the middle of
    the editor to make it a floating window.
  prefs: []
  type: TYPE_NORMAL
- en: Choose the Wide layout to match our screenshots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ve chosen the Wide layout because it works well for the screenshots in these
    labs. Find the Layout dropdown and choose Wide so your Unity editor looks like
    ours.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/091fig02.png)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**The Scene view is your main interactive view of the world that you’re creating.
    You use it to position 3D shapes, cameras, lights, and all of the other objects
    in your game.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what your Unity editor should look like in the Wide layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/091fig03.png)'
  prefs: []
  type: TYPE_IMG
- en: Your scene is a 3D environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As soon as you start the editor, you’re editing a **scene**. You can think of
    scenes as levels in your Unity games. Every game in Unity is made up of one or
    more scenes. Each scene contains a separate 3D environment, with its own set of
    lights, shapes, and other 3D objects. When you created your project, Unity added
    a scene called SampleScene, and stored it in a file called *`**SampleScene.unity**`*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a sphere to your scene by choosing **GameObject >> 3D Object >> Sphere**
    from the menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/092fig01.png)'
  prefs: []
  type: TYPE_IMG
- en: A sphere will appear in your Scene window. Everything you see in the Scene window
    is shown from the perspective of the **Scene view camera**, which “looks” at the
    scene and captures what it sees.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/092fig02.png)'
  prefs: []
  type: TYPE_IMG
- en: Unity games are made with GameObjects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you added a sphere to your scene, you created a new **GameObject**. The
    GameObject is a fundamental concept in Unity. Every item, shape, character, light,
    camera, and special effect in your Unity game is a GameObject. Any scenery, characters,
    and props that you use in a game are represented by GameObjects.
  prefs: []
  type: TYPE_NORMAL
- en: 'In these Unity Labs, you’ll build games out different kinds of GameObjects,
    including:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/093fig01.png)'
  prefs: []
  type: TYPE_IMG
- en: GameObjects are the fundamental objects in Unity, and components are the basic
    building blocks of their behavior. The Inspector window shows you details about
    each GameObject in your scene and its components.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Each GameObject contains a number of **components** that provide its shape,
    set its position, and give it all of its behavior. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Transform components* determine the position and rotation of the GameObject.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Material components* change the way the GameObject is **rendered**—or how
    it’s drawn by Unity—by changing the color, reflection, smoothness, and more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Script components* use C# scripts to determine the GameObject’s behavior.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: ren-der, verb.
  prefs: []
  type: TYPE_NORMAL
- en: to represent or depict artistically.
  prefs: []
  type: TYPE_NORMAL
- en: '*Michelangelo **rendered** his favorite model with more detail than he used
    in any of his other drawings.*'
  prefs: []
  type: TYPE_NORMAL
- en: Use the Move Gizmo to move your GameObjects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The toolbar at the top of the Unity editor lets you choose Transform tools.
    If the Move tool isn’t selected, press its button to select it.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/094fig01.png)'
  prefs: []
  type: TYPE_IMG
- en: The Move tool lets you use the **Move Gizmo** to move GameObjects around the
    3D space. You should see red, green, and blue arrows and a cube appear in the
    middle of the window. This is the Move Gizmo, which you can use to move the selected
    object around the scene.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/094fig02.png)'
  prefs: []
  type: TYPE_IMG
- en: Move your mouse cursor over the cube at the center of the Move Gizmo—notice
    how each of the faces of the cube lights up as you move your mouse cursor over
    it? Click on the upper-left face and drag the sphere around. You’re moving the
    sphere in the X-Y plane.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: When you click on the upper-left face of the cube in the middle of the Move
    Gizmo, its X and Y arrows light up and you can drag your sphere around the X-Y
    plane in your scene.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/094fig03.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Move your sphere around the scene** to get a feel for how the Move Gizmo
    works. Click and drag each of the three arrows to drag it along each plane individually.
    Try clicking on each of the faces of the cube in the Scene Gizmo to drag it around
    all three planes. Notice how the sphere gets smaller as it moves farther away
    from you—or really, the scene camera—and larger as it gets closer.'
  prefs: []
  type: TYPE_NORMAL
- en: The Move Gizmo lets you move GameObjects along any axis or plane of the 3D space
    in your scene.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The Inspector shows your GameObject’s components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you move your sphere around the 3D space, watch the **Inspector window**,
    which is on the right side of the Unity editor if you’re using the Wide layout.
    Look through the Inspector window—you’ll see that your sphere has four components
    labeled Transform, Sphere (Mesh Filter), Mesh Renderer, and Sphere Collider.
  prefs: []
  type: TYPE_NORMAL
- en: Every GameObject has a set of components that provide the basic building blocks
    of its behavior, and every GameObject has a **Transform component** that drives
    its location, rotation, and scale.
  prefs: []
  type: TYPE_NORMAL
- en: You can see the Transform component in action as you use the Move Gizmo to drag
    the sphere around the X-Y plane. Watch the X and Y numbers in the Position row
    of the Transform component change as the sphere moves.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**If you accidentally deselect a GameObject, just click on it again. If it’s
    not visible in the scene, you can select it in the Hierarchy window, which shows
    all of the GameObjects in the scene. When you reset the layout to Wide, the Hierarchy
    window is in the lower-left corner of the Unity editor.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/095fig01.png)'
  prefs: []
  type: TYPE_IMG
- en: Try clicking on each of the other two faces of the Move Gizmo cube and dragging
    to move the sphere in the X-Z and Y-Z planes. Then click on the red, green, and
    blue arrows and drag the sphere along just the X, Y, or Z axis. You’ll see the
    X, Y, and Z values in the Transform component change as you move the sphere.
  prefs: []
  type: TYPE_NORMAL
- en: Now **hold down Shift** to turn the cube in the middle of the Gizmo into a square.
    Click and drag on that square to move the sphere in the plane that’s parallel
    to the Scene view camera.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’re done experimenting with the Move Gizmo, use the sphere’s Transform
    component context menu to reset the component to its default values. Click the
    **context menu button** (![Images](assets/095fig02.png)) at the top of the Transform
    panel and choose Reset from the menu.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/095fig03.png)'
  prefs: []
  type: TYPE_IMG
- en: The position will reset back to [0, 0, 0].
  prefs: []
  type: TYPE_NORMAL
- en: '**You can learn more about the tools and how to use them to position GameObjects
    in the Unity Manual. Click Help >> Unity Manual and search for the “Positioning
    GameObjects” page.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Save your scene often! Use File >> Save or Ctrl+S / ![Images](assets/095fig04.png)S
    to save the scene right now.**'
  prefs: []
  type: TYPE_NORMAL
- en: Add a material to your Sphere GameObject
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unity uses **materials** to provide color, patterns, textures, and other visual
    effects. Your sphere looks pretty boring right now because it just has the default
    material, which causes the 3D object to be rendered in a plain, off-white color.
    Let’s make it look like a billiard ball.
  prefs: []
  type: TYPE_NORMAL
- en: '**Select the sphere.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When the sphere is selected, you can see its material as a component in the
    Inspector window:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Images](assets/096fig01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: We’ll make your sphere more interesting by adding a **texture**—that’s just
    a simple image file that’s wrapped around a 3D shape, almost like you printed
    the picture on a rubber sheet and stretched it around your object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Go to our Billiard Ball Textures page on GitHub.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to [https://github.com/head-first-csharp/fourth-edition](https://github.com/head-first-csharp/fourth-edition)
    and click on the *Billiard Ball Textures* link to browse a folder of texture files
    for a complete set of billiard balls.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Download the texture for the 8 ball.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the file *8 Ball Texture.png* to view the texture for an 8 ball. It’s
    an ordinary 1200 × 600 PNG image file that you can open in your favorite image
    viewer.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Images](assets/096fig02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Download the file into a folder on your computer.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*(You might need to right-click on the Download button to save the file, or
    click Download to open it and then save it, depending on your browser.)*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Import the 8 Ball Texture image into your Unity project.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the Assets folder in the Project window, choose **Import New
    Asset...** and import the texture file. You should now see it when you click on
    the Assets folder in the Project window.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Images](assets/097fig01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Add the texture to your sphere.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now you just need to take that texture and “wrap” it around your sphere. Click
    on 8 Ball Texture in the Project window to select it. Once it’s selected, **drag
    it onto your sphere**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Images](assets/097fig02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Your sphere now looks like an 8 ball.** Check the Inspector, which is showing
    the 8 ball GameObject. Now it has a new material component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/097fig03.png)![Images](assets/098fig01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Unity is a great way to really “get” C#.**'
  prefs: []
  type: TYPE_NORMAL
- en: Programming is a skill, and the more practice you get writing C# code, the better
    your coding skills will get. That’s why we designed the Unity Labs throughout
    this book to specifically **help you practice your C# skills** and reinforce the
    C# tools and concepts that you learn in each chapter. As you write more C# code,
    you’ll get better at it, and that’s a really effective way to become a great C#
    developer. Neuroscience tells us that we learn more effectively when we experiment,
    so we designed these Unity Labs with lots of options for experimentation, and
    suggestions for how you can get creative and keep going with each lab.
  prefs: []
  type: TYPE_NORMAL
- en: But Unity gives us an even more important opportunity to help get important
    C# concepts and techniques into your brain. When you’re learning a new programming
    language, it’s really helpful to see how that language works with lots of different
    platforms and technologies. That’s why we included both console apps and WPF apps
    in the main chapter material, and in some cases even have you build the same project
    using both technologies. Adding Unity to the mix gives you a third perspective,
    which can really accelerate your understanding of C#.
  prefs: []
  type: TYPE_NORMAL
- en: Rotate your sphere
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Click the **Rotate tool** in the toolbar. You can use the Q, W, E, R, T, and
    Y keys to quickly switch between the Transform tools—press E and W to toggle between
    the Rotate tool and Move tool.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/099fig01.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Click on the sphere.** Unity will display a wireframe sphere Rotate Gizmo
    with red, blue, and green circles. Click the red circle and drag it to rotate
    the sphere around the X axis.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Images](assets/099fig02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Click and drag the green and blue circles to rotate around the Y and Z axes.**
    The outer white circle rotates the sphere along the axis coming out of the Scene
    view camera. Watch the Rotation numbers change in the Inspector window.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Images](assets/099fig03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Open the context menu of the Transform panel in the Inspector window.** Click
    Reset, just like you did before. It will reset everything in the Transform component
    back to default values—in this case, it will change your sphere’s rotation back
    to [0, 0, 0].'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Images](assets/099fig04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Use File >> Save or Ctrl+S / ![Images](assets/plus1.png)S to save the scene
    right now. Save early, save often!**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Move the Scene view camera with the Hand tool and Scene Gizmo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Use the mouse scroll wheel or scroll feature on your trackpad to zoom in and
    out, and toggle between the Move and Rotate Gizmos. Notice that the sphere changes
    size, but the Gizmos don’t. The Scene window in the editor shows you the view
    from a virtual **camera**, and the scroll feature zooms that camera in and out.
  prefs: []
  type: TYPE_NORMAL
- en: Press Q to select the **Hand tool**, or choose it from the toolbar. Your cursor
    will change to a hand.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/100fig01.png)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Hold down Alt (or Option on a Mac) while dragging and the Hand tool turns into
    an eye and rotates the view around the center of the window
  prefs: []
  type: TYPE_NORMAL
- en: The Hand tool pans around the scene by changing the position and rotation of
    the scene camera. When the Hand tool is selected, you can click anywhere in the
    scene to pan.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/100fig02.png)'
  prefs: []
  type: TYPE_IMG
- en: When the Hand tool is selected, you can ***pan*** the scene camera by **clicking
    and dragging**, and you can ***rotate*** it by holding **down Alt (or Option)
    and dragging**. Use the **mouse scroll wheel** to zoom. Holding down the **right
    mouse button** lets you ***fly through the scene*** using the W-A-S-D keys.
  prefs: []
  type: TYPE_NORMAL
- en: When you rotate the scene camera, keep an eye on the **Scene Gizmo** in the
    upper-right corner of the Scene window. The Scene Gizmo always displays the camera’s
    orientation—check it out as you use the Hand tool to move the Scene view camera.
    Click on the X, Y, and Z cones to snap the camera to an axis.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/100fig03.png)'
  prefs: []
  type: TYPE_IMG
- en: '*The Unity Manual has great tips on navigating scenes:* [https://docs.unity3d.com/Manual/SceneViewNavigation.html](https://docs.unity3d.com/Manual/SceneViewNavigation.html).'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/101fig01.png)'
  prefs: []
  type: TYPE_IMG
- en: Get creative!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We built these Unity Labs to give you a **platform to experiment on your own
    with C#** because that’s the single most effective way for you to become a great
    C# developer. At the end of every Unity Lab, we’ll include a few suggestions for
    things that you can try on your own. Take some time to experiment with everything
    you just learned before moving on to the next chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a few more spheres to your scene. Try using some of the other billiard ball
    maps. You can download them all from the same location where you downloaded *8
    Ball Texture.png* from.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try adding other shapes by choosing Cube, Cylinder, or Capsule from the GameObject
    >> 3D Object menu.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Experiment with using different images as textures. See what happens to photos
    of people or scenery when you use them to create textures and add them to different
    shapes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can you create an interesting 3D scene out of shapes, textures, and lights?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Images](assets/102fig01.png)'
  prefs: []
  type: TYPE_IMG
- en: The more C# code you write, the better you’ll get at it. That’s the most effective
    way for you to become a great C# developer. We designed these Unity Labs to give
    you a platform for practice and experimentation.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
