["```cs\npublic IEnumerable<Film> GetFilmsByGenre(string genre)\n{\n var allFilms = GetAllFilms();\n var chosenFilms = new List<Film>();\n\n foreach (var f in allFilms)\n {\n  if (f.Genre == genre)\n  {\n      chosenFilms.Add((f));\n  }\n }\n\n return chosenFilms;\n\n}\n\nvar actionFilms = GetFilmsByGenre(\"Action\");\n```", "```cs\npublic IEnumerable<Film> GetFilmsByGenre(string genre)\n{\n var allFilms = GetAllFilms();\n\n foreach (var f in allFilms)\n {\n  if (f.Genre == genre)\n  {\n      yield return f;\n  }\n }\n}\n\nvar actionFilms = GetFilmsByGenre(\"Action\");\n```", "```cs\npublic IEnumerable<Film> GetFilmsByGenre(IEnumerable<Film> source, string genre) =>\n source.Where(x => x.Genre == genre);\n\n var allFilms = GetAllFilms();\n var actionFilms = GetFilmsByGenre(allFilms, \"Action\");\n```", "```cs\nvar sourceData = GetSourceData();\nvar obj = new ComplexCustomObject();\n\nobj.PropertyA = sourceData.Something + sourceData.SomethingElse;\nobj.PropertyB = sourceData.Ping * sourceData.Pong;\n\nif(sourceData.AlternateTuesday)\n{\n  obj.PropertyC = sourceData.CaptainKirk;\n  obj.PropertyD = sourceData.MrSpock;\n}\nelse\n{\n   obj.PropertyC = sourceData.CaptainPicard;\n   obj.PropertyD = sourceData.NumberOne;\n}\n\nreturn obj;\n```", "```cs\nfunction ComplexCustomObject MakeObject(SourceData source) =>\n    new ComplexCustomObject\n    {\n       PropertyA = source.Something + source.SomethingElse,\n       PropertyB = source.Ping * source.Pong,\n       PropertyC = source.AlternateTuesday\n                     ? source.CaptainKirk\n                     : source.CaptainPicard,\n       PropertyD = source.AlternateTuesday\n                     ? source.MrSpock,\n                     : source.NumberOne\n    };\n```", "```cs\nIList<string> c = new List<string>();\n\npublic int DoSomethingOne(int x)\n{\n\tc.Add(DateTime.Now + \" - DoSomethingOne (\" + x + \")\");\n\treturn x;\n}\n\npublic int DoSomethingTwo(int x)\n{\n\tc.Add(DateTime.Now + \" - DoSomethingTwo (\" + x + \")\");\n\treturn x;\n}\n\npublic int DoSomethingThree(int x)\n{\n\tc.Add(DateTime.Now + \" - DoSomethingThree (\" + x + \")\");\n\treturn x;\n}\n```", "```cs\nvar input = new[]\n{\n\t75,\n\t22,\n\t36\n};\n\nvar output = input.Select(x => DoSomethingOne(x))\n\t .Select(x => DoSomethingTwo(x))\n\t .Select(x => DoSomethingThree(x))\n\t .ToArray();\n```", "```cs\n 18/08/1982 11:24:00 - DoSomethingOne(75)\n 18/08/1982 11:24:01 - DoSomethingTwo(75)\n 18/08/1982 11:24:02 - DoSomethingThree(75)\n 18/08/1982 11:24:03 - DoSomethingOne(22)\n 18/08/1982 11:24:04 - DoSomethingTwo(22)\n 18/08/1982 11:24:05 - DoSomethingThree(22)\n 18/08/1982 11:24:06 - DoSomethingOne(36)\n 18/08/1982 11:24:07 - DoSomethingTwo(36)\n 18/08/1982 11:24:08 - DoSomethingThree(36)\n```", "```cs\n var input = new[]\n {\n     1,\n     2,\n     3\n };\n\n var temp1 = input.Select(x => DoSomethingOne(x));\n var temp2 = input.Select(x => DoSomethingTwo(x));\n var finalAnswer = input.Select(x => DoSomethingThree(x));\n```", "```cs\n var input = new[]\n {\n     1,\n     2,\n     3\n };\n\n var temp1 = input.Select(x => DoSomethingOne(x)).ToArray();\n var temp2 = input.Select(x => DoSomethingTwo(x)).ToArray();\n var finalAnswer = input.Select(x => DoSomethingThree(x)).ToArray();\n```", "```cs\n 18/08/1982 11:24:00 - DoSomethingOne(75)\n 18/08/1982 11:24:01 - DoSomethingOne(22)\n 18/08/1982 11:24:02 - DoSomethingOne(36)\n 18/08/1982 11:24:03 - DoSomethingTwo(75)\n 18/08/1982 11:24:04 - DoSomethingTwo(22)\n 18/08/1982 11:24:05 - DoSomethingTwo(36)\n 18/08/1982 11:24:06 - DoSomethingThree(75)\n 18/08/1982 11:24:07 - DoSomethingThree(22)\n 18/08/1982 11:24:08 - DoSomethingThree(36)\n```", "```cs\n var filmIds = new[]\n {\n     4665,\n     6718,\n     7101\n };\n\n var filmsWithCast = filmIds.Select(x => (\n     film: GetFilm(x),\n     castList: GetCastList(x)\n ));\n\nvar renderedFilmDetails = filmsWithCast.Select(x =>\n                @$\"\nTitle: {x.film.Title}\nDirector: {x.film.Director}\nCast: {string.Join(\", \", x.castList)}\n\".Trim());\n```", "```cs\n var films = GetAllFilmsForDirector(\"Jean-Pierre Jeunet\")\n                                .OrderByDescending(x => x.BoxOfficeRevenue);\n\n var i = 1;\n\n Console.WriteLine(\"The films of visionary French director\");\n Console.WriteLine(\"Jean-Pierre Jeunet in descending order\"\n Console.WriteLine(\" of financial success are as follows:\");\n\n foreach (var f in films)\n {\n     Console.WriteLine($\"{i} - {f.Title}\");\n     i++;\n }\n\n Console.WriteLine(\"But his best by far is Amelie\");\n```", "```cs\n var films = GetAllFilmsForDirector(\"Jean-Pierre Jeunet\")\n                           .OrderByDescending(x => x.BoxOfficeRevenue);\n\n Console.WriteLine(\"The films of visionary French director\");\n Console.WriteLine(\"Jean-Pierre Jeunet in descending order\"\n Console.WriteLine(\" of financial success are as follows:\");\n\n var formattedFilms = films.Select((x, i) => $\"{i} - {x.Title}\");\n Console.WriteLine(string.Join(Environment.NewLine, formattedFilms));\n\n Console.WriteLine(\"But his best by far is Amelie\");\n```", "```cs\nvar a = Enumerable.Range(8, 5);\nvar s = string.Join(\", \", a);\n// s = \"8, 9, 10, 11, 12\"\n// That's 5 elements, each one higher than the last,\n// starting with 8.\n```", "```cs\nvar nineTimesTable = Enumerable.Range(1,10)\n .Select(x => x + \" times 9 is \" + (x * 9));\n\nvar message = string.Join(\"\\r\\n\", nineTimesTable);\n```", "```cs\nvar coords = Enumerable.Range(1, 5)\n\t.SelectMany(x => Enumerable.Range(1, 5)\n\t\t.Select(y => (X: x, Y: y))\n);\n\nvar values = coords.Select(x => this.gridRepo.GetVal(x.Item1,x.Item2);\n```", "```cs\nvar gridCoords = Enumerable.Repeat(5, 5).Select((x, i) => x - i)\n\t.SelectMany(x => Enumerable.Repeat(5, 5)\n\t\t.Select((y, i) => (x, y - i))\n);\n\nvar values = coords.Select(x => this.gridRepo.GetVal(x.Item1,x.Item2);\n```", "```cs\n var total = 0;\n foreach(var x in listOfIntegers)\n {\n   total += x;\n }\n```", "```cs\n var total = listOfIntegers.Sum();\n```", "```cs\n var films = GetAllFilmsForDirector(\"Alfred Hitchcock\");\n var totalRevenue = films.Sum(x => x.BoxOfficeRevenue);\n```", "```cs\nvar numbers = new [] {\n    83,\n    27,\n    11,\n    98\n };\n\n bool IsEvenNumber(int number) => number % 2 == 0;\n\n var sortedList = numbers.OrderBy(x => x).ToArray();\n var sortedListCount = sortedList.Count();\n\n var median = IsEvenNumber(sortedList.Count())\n \t\t\t\t? sortedList.Skip((sortedListCount/2)-1).Take(2).Average()\n\t\t\t\t: sortedList.Skip((sortedListCount) / 2).First();\n\n// median = 55.\n```", "```cs\n var films = GetAllFilmsForDirector(\"Christopher Nolan\");\n\n var totalBudget = 0.0M;\n var totalRevenue = 0.0M;\n\n foreach (var f in films)\n {\n     totalBudget += f.Budget;\n     totalRevenue += f.BoxOfficeRevenue;\n }\n```", "```cs\n var films = GetAllFilmsForDirector(\"Christopher Nolan\");\n\n var (totalBudget, totalRevenue) = films.Aggregate(\n\t(Budget: 0.0M, Revenue: 0.0M),\n\t(runningTotals, x) => (\n\t\t\trunningTotals.Budget + x.Budget,\n\t\t\trunningTotals.Revenue + x.BoxOfficeRevenue\n\t\t)\n);\n```", "```cs\nvar deltas = GetDeltas().ToArray();\nvar startingValue = 10;\nvar currentValue = startingValue;\nvar i = -1;\n\nforeach(var d in deltas)\n{\n   if(currentValue == 0)\n   {\n     break;\n   }\n   i++;\n   currentValue = startingValue + d;\n\n}\n\nreturn i;\n```", "```cs\n var deltas = GetDeltas().ToArray();\n\n int GetFirstPositionWithValueZero(int currentValue, int i = -1) =>\n     currentValue == 0\n         ? i\n         : GetFirstPositionWithValueZero(currentValue + deltas[i], i + 1);\n\n return GetFirstPositionWithValueZero(10);\n```", "```cs\nGetFirstPositionWithValueZero(10, -1)\n   GetFirstPositionWithValueZero(12, 0)\n      GetFirstPositionWithValueZero(0, 1)\n      return 1;\n   return 1;\nreturn 1;\n```", "```cs\npublic class ClassA\n{\n  public string PropA { get; set; }\n  public int PropB { get; set; }\n  public DateTime PropC { get; set; }\n  public IEnumerable<double> PropD { get; set; }\n  public IList<string> PropE { get; set; }\n}\n```", "```cs\npublic class ClassA\n{\n  public string PropA { get; private set; }\n  public int PropB { get; private set; }\n  public DateTime PropC { get; private set; }\n  public IEnumerable<double> PropD { get; private set; }\n  public IList<string> PropE { get; private set; }\n\n  public ClassA(string propA, int propB, DateTime propC, IEnumerable<double> propD, IList<string> propE)\n  {\n    this.PropA = propA;\n    this.PropB = propB;\n    this.PropC = propC;\n    this.PropD = propD;\n    this.PropE = propE;\n  }\n\n}\n```", "```cs\npublic class ClassA\n{\n  public string PropA { get; private set; }\n  public int PropB { get; private set; }\n  public DateTime PropC { get; private set; }\n  public IEnumerable<double> PropD { get; private set; }\n  public IList<string> PropE { get; private set; }\n  public SubClassB PropF { get; private set; }\n\n  public ClassA(string propA, int propB, DateTime propC, IEnumerable<double> propD, IList<string> propE, SubClassB propF)\n  {\n    this.PropA = propA;\n    this.PropB = propB;\n    this.PropC = propC;\n    this.PropD = propD;\n    this.PropE = propE;\n    this.PropF = propF\n  }\n\n}\n```", "```cs\nvar text = File.ReadAllText(filePath);\n\n// Split the string containing the whole contents of the\n// file into an array where each line of the original file\n// (i.e. each record) is an array element\nvar splitLines = text.Split(Environment.NewLine);\n\n// Split each line into an array of fields, splitting the\n// source array by the ',' character.  Convert to Array\n// for each access.\nvar splitLinesAndFields = splitLines.Select(x => x.Split(\",\").ToArray());\n\n// Convert each string array of fields into a data class.\n// parse any non-string fields into the correct type.\n// Not strictly necessary, based on the final aggregation\n// that follows, but I believe in leaving behind easily\n// extendible code\nvar parsedData = splitLinesAndFields.Select(x => new Story\n{\n   SeasonNumber = int.Parse(x[0]),\n   StoryName = x[1],\n   Writer = x[2],\n   Director = x[3],\n   NumberOfEpisodes = int.Parse(x[4]),\n   NumberOfMissingEpisodes = int.Parse(x[5])\n});\n\n// group by SeasonNumber, this gives us an array of Story\n// objects for each season of the TV series\nvar groupedBySeason = parsedData.GroupBy(x => SeasonNumber);\n\n// Use a 3 field Tuple as the aggregate state:\n// S (int) = the season number.  Not required for\n//                the aggregation, but we need a way\n//                to pin each set of aggregated totals\n//                to a season\n// NumEps (int) = the total number of episodes in all\n//                serials in the season\n// NumMisEps (int) = The total number of missing episodes\n//                from the season\nvar aggregatedReportLines = groupedBySeason.Select(x =>\n    x.Aggregate((S: x.Key, NumEps: 0, NumMisEps: 0),\n      (acc, val) => (acc.S,\n                       acc.NumEps + val.NumberOfEpisodes,\n                        acc.NumMisEps + val.NumberOfMissingEpisodes)\n    )\n);\n\n// convert the Tuple-based results set to a proper\n// object and add in the calculated field PercentageMissing\n// not strictly necessary, but makes for more readable\n// and extendible code\nvar report = aggregatedReportLines.Select(x => new ReportLine\n{\n   SeasonNumber = x.S,\n   NumberOfEpisodes = x.NumEps,\n   NumberOfMIssingEpisodes = x.NumMisEps,\n   PercentageMissing = (x.NumMisEps/x.NumEps)*100\n});\n\n// format the report lines to a list of strings\nvar reportTextLines = report.Select(x => $\"{x.SeasonNumber}\\t {x.NumberOfEpisodes}\\t\" +\n$\"{x.NumberofMissingEpisodes}\\t{x.PercentageMissing}\");\n\n// join the lines into a large single string with New Line\n// characters between each line\nvar reportBody = string.Join(Environment.NewLine, reportTextLines);\nvar reportHeader = \"Season\\tNo Episodes\\tNo MissingEps\\tPercentage Missing\";\n\n// the final report consists of the header, a new line, then the reportbody\nvar finalReport = $\"{reportHeader}{Environment.NewLine}{reportTextLines}\";\n```", "```cs\nSeason   No Episodes   No Missing Eps   Percentage Missing,\n1         42               9                  21.4\n2         39               2                  5.1\n3         45               28                 62.2\n4         43               33                 76.7\n5         40               18                 45\n6         44               8                  18.2\n7         25               0                  0\n8         25               0                  0\n9         26               0                  0\n\n...\n```", "```cs\nvar reportTextLines = File.ReadAllText(filePath)\n                      .Split(Environment.NewLine)\n                      .Select(x => x.Split(\",\").ToArray())\n                      .GroupBy(x => x[0])\n                      .Select(x =>\n    x.Aggregate((S: x.Key, NumEps: 0, NumMisEps: 0),\n      (acc, val) => (acc.S,\n                       acc.NumEps + int.Parse(va[4]),\n                        acc.NumMisEps + int.Parse(val[5]))\n    )\n)\n.Select(x => $\"{x.S}, {x.NumEps},{x.NumMisEps},{(x.NumMisEps/x.NumEps)*100}\");\n\nvar reportBody = string.Join(Environment.NewLine, reportTextLines);\nvar reportHeader = \"Season,No Episodes,No MissingEps,Percentage Missing\";\n\nvar finalReport = $\"{reportHeader}{Environment.NewLine}{reportHeader}\";\n```"]