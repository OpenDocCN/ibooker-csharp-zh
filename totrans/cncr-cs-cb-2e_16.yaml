- en: Appendix B. Recognizing and Interpreting Asynchronous Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 B. 识别和解释异步模式
- en: The benefits of asynchronous code have been well understood for decades before
    .NET was invented. In the early days of .NET, several different styles of asynchronous
    code were developed, used here and there, and eventually discarded. These were
    not all bad ideas; many of them paved the way for the modern `async`/`await` approach.
    However, there’s a lot of legacy code out there that uses older asynchronous patterns.
    This appendix will discuss the more common patterns, explaining how they work
    and how to integrate them with modern code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 异步代码的好处在 .NET 发明之前就已广为人知。在 .NET 早期，出现了几种不同的异步代码风格，被这里或那里使用，最终被废弃。这些并非全都是坏主意；其中许多为现代
    `async`/`await` 方法铺平了道路。然而，现在有很多遗留代码使用了旧的异步模式。本附录将讨论更常见的模式，解释它们的工作原理以及如何与现代代码集成。
- en: 'Sometimes, the same type is updated over the years, acquiring more and more
    members as it supports multiple asynchronous patterns. Perhaps the best example
    of this is the `Socket` class. Here are some of the members of the `Socket` class
    for the core `Send` operation:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，同一类型多年来更新，支持多个异步模式。也许最好的例子是 `Socket` 类。以下是 `Socket` 类的核心 `Send` 操作的一些成员：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Sadly, with most documentation being alphabetical and with tons of overloads
    in an attempt to simplify usage, types like `Socket` become difficult to understand.
    Hopefully the guidelines in this section will help.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 遗憾的是，由于大多数文档都是按字母顺序排列，并且有大量重载以试图简化使用，类型如 `Socket` 变得难以理解。希望本节的指南能有所帮助。
- en: Task-Based Asynchronous Pattern (TAP)
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 任务异步模式（TAP）
- en: The Task-Based Asynchronous Pattern (TAP) is the modern asynchronous API pattern
    that is ready for use with `await`. Each asynchronous operation is represented
    by a single method that returns an awaitable. An “awaitable” is any type that
    can be consumed by `await`; this is usually `Task` or `Task<T>` but may also be
    `ValueTask`, `ValueTask<T>`, a type defined by a framework (e.g., `IAsyncAction`
    or `IAsyncOperation<T>`, used by Universal Windows applications), or even a custom
    type defined by a library.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 任务异步模式（TAP）是现代异步 API 模式，适用于 `await` 使用。每个异步操作由返回可等待对象的单个方法表示。"可等待对象" 是任何可以由
    `await` 消耗的类型；通常是 `Task` 或 `Task<T>`，但也可能是 `ValueTask`、`ValueTask<T>`，一个框架定义的类型（例如，由通用
    Windows 应用程序使用的 `IAsyncAction` 或 `IAsyncOperation<T>`），甚至是库定义的自定义类型。
- en: It is common for TAP methods to have an `Async` suffix. However, this is just
    a convention; not all TAP methods have an `Async` suffix. It can be skipped if
    the API developer believes the asynchronous context is sufficiently implied; e.g.,
    `Task.WhenAll` and `Task.WhenAny` do not have an `Async` suffix. Furthermore,
    keep in mind that the `Async` suffix may be present on *non*-TAP methods (e.g.,
    `WebClient.DownloadStringAsync` is not a TAP method). The usual pattern in this
    case is for the TAP method to have a `TaskAsync` suffix (e.g., `WebClient.DownloadStringTaskAsync`
    is a TAP method).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: TAP 方法通常以 `Async` 后缀命名。但这只是一种约定；并非所有 TAP 方法都带有 `Async` 后缀。如果 API 开发者认为异步上下文已充分暗示，可以省略此后缀；例如，`Task.WhenAll`
    和 `Task.WhenAny` 就没有 `Async` 后缀。此外，请注意，*非* TAP 方法可能会带有 `Async` 后缀（例如，`WebClient.DownloadStringAsync`
    不是 TAP 方法）。在这种情况下，通常 TAP 方法会带有 `TaskAsync` 后缀（例如，`WebClient.DownloadStringTaskAsync`
    是 TAP 方法）。
- en: Methods that return asynchronous streams also follow a TAP-like pattern, with
    `Async` used as a suffix. Even though they don’t return awaitables, they do return
    awaitable streams—types that can be consumed using `await foreach`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 返回异步流的方法也遵循类似于 TAP 的模式，使用 `Async` 作为后缀。即使它们不返回可等待对象，它们也会返回可等待流——可以使用 `await
    foreach` 消耗的类型。
- en: 'The Task-Based Asynchronous Pattern can be recognized by these characteristics:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过以下特征识别任务异步模式（TAP）：
- en: The operation is represented by a single method.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 操作由单个方法表示。
- en: The method returns an awaitable or an awaitable stream.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 方法返回可等待对象或可等待流。
- en: The method usually ends with `Async`.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 方法通常以 `Async` 结尾。
- en: 'Here’s an example of a type with a TAP API:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个具有 TAP API 的类型示例：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Consuming the Task-Based Asynchronous Pattern is done using `await` and is covered
    by large portions of this book. If you somehow got to this appendix without knowing
    how to use `await`, then I’m not sure I can help you at this point, but you can
    try reading Chapters [1](ch01.html#intro) and [2](ch02.html#async-basics) anyway
    to see if they jog your memory.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `await` 可以实现任务型异步模式，并且本书的大部分内容都涵盖了这一点。如果你在没有理解如何使用 `await` 的情况下来到这个附录，那我不确定我能在这一点上帮助你，但你可以试着阅读第
    [1](ch01.html#intro) 和 [2](ch02.html#async-basics) 章节，看看是否能唤起你的记忆。
- en: Asynchronous Programming Model (APM)
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步编程模型（APM）
- en: After TAP, the Asynchronous Programming Model (APM) pattern is probably the
    next most-common pattern you’ll encounter. It was the first pattern where asynchronous
    operations had first-class object representations. The telltale sign of this pattern
    is the `IAsyncResult` objects in conjunction with a pair of methods that manage
    the operation, one starting with `Begin` and the other starting with `End`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在 TAP 之后，异步编程模型（APM）模式可能是您会遇到的下一个最常见模式。这是第一个异步操作具有一级对象表示的模式。该模式的显著特征是与一对管理操作的方法一起使用的
    `IAsyncResult` 对象，其中一个以 `Begin` 开头，另一个以 `End` 开头。
- en: '`IAsyncResult` was strongly influenced by [native overlapped I/O](http://bit.ly/sync-ipop).
    The APM pattern allows consuming code to behave either synchronously or asynchronously.
    The consuming code can choose from these options:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`IAsyncResult` 受 [本地重叠 I/O](http://bit.ly/sync-ipop) 强烈影响。APM 模式允许消费代码以同步或异步方式运行。消费代码可以从以下选项中选择：'
- en: Block for the operation to complete. This is done by calling the `End` method.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阻塞操作完成。这通过调用 `End` 方法来完成。
- en: Poll for the operation to complete while doing something else.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在做其他事情的同时轮询操作是否完成。
- en: Supply a callback delegate to invoke when the operation completes.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供一个回调委托，在操作完成时调用。
- en: In all cases, the consuming code must eventually call the `End` method to retrieve
    the results of the asynchronous operation. If the operation is not completed when
    `End` is called, it’ll block the calling thread until the operation completes.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有情况下，消费代码必须最终调用 `End` 方法以检索异步操作的结果。如果在调用 `End` 时操作尚未完成，则会阻塞调用线程直到操作完成。
- en: The `Begin` method takes an `AsyncCallback` parameter and an `object` parameter
    (usually called `state`) as its last two parameters. These are used by consuming
    code to provide a callback delegate to invoke when the operation completes. The
    `object` parameter can be whatever you want; this is a holdover from the very
    early days of .NET, before lambda methods or even anonymous methods existed. It
    is just used to provide context to the `AsyncCallback` parameter.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`Begin` 方法接受 `AsyncCallback` 参数和 `object` 参数（通常称为 `state`）作为其最后两个参数。这些参数由消费代码使用，以在操作完成时调用回调委托。`object`
    参数可以是任何你想要的；这是在 .NET 的早期阶段之前使用的，甚至在 lambda 方法或匿名方法存在之前。它仅用于为 `AsyncCallback` 参数提供上下文。'
- en: 'The APM is fairly widespread among Microsoft libraries, but is not as common
    in the wider .NET ecosystem. This is because there were never any `IAsyncResult`
    implementations made available for reuse, and implementing that interface correctly
    is fairly complex. In addition, it is difficult to compose APM-based systems.
    I’ve seen only a few custom `IAsyncResult` implementations in the wild; all of
    these were some version of Jeffrey Richter’s general-purpose `IAsyncResult` implementation,
    as published in his article, “Concurrent Affairs: Implementing the CLR Asynchronous
    Programming Model,” from [the March 2007 edition of *MSDN Magazine*](http://bit.ly/conc-aff).'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 'APM 在微软库中相当普遍，但在更广泛的 .NET 生态系统中并不常见。这是因为从未有任何可重用的 `IAsyncResult` 实现，并且正确实现该接口相当复杂。此外，组合基于
    APM 的系统也很困难。我只见过少数几个自定义的 `IAsyncResult` 实现；所有这些都是 Jeffrey Richter 发表在他的文章 “Concurrent
    Affairs: Implementing the CLR Asynchronous Programming Model” 中的通用 `IAsyncResult`
    实现的某个版本，该文章发表在 [2007 年 3 月的 *MSDN Magazine*](http://bit.ly/conc-aff) 上。'
- en: 'The Asynchronous Programming Model pattern can be recognized by these characteristics:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过以下特征识别异步编程模型模式：
- en: The operation is represented by a pair of methods, one starting with `Begin`
    and the other starting with `End`.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 操作由一对方法表示，一个以 `Begin` 开头，另一个以 `End` 开头。
- en: The `Begin` method returns an `IAsyncResult`, and takes all normal input parameters,
    along with an extra `AsyncCallback` parameter and an extra `object` parameter.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Begin` 方法返回一个 `IAsyncResult`，除了所有正常的输入参数外，还有额外的 `AsyncCallback` 参数和额外的 `object`
    参数。'
- en: The `End` method only takes an `IAsyncResult`, and returns the result value,
    if any.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`End`方法只接受一个`IAsyncResult`，并返回结果值（如果有）。'
- en: 'Here’s an example of a type with an APM API:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个具有APM API的示例类型：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Consume the APM by converting it to TAP using `Task.Factory.FromAsync`; see
    [Recipe 8.2](ch08.html#recipe-async-interop-apm) and [the Microsoft docs](http://bit.ly/interop-async).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将其转换为TAP来使用APM，可以使用`Task.Factory.FromAsync`；参见[Recipe 8.2](ch08.html#recipe-async-interop-apm)和[Microsoft文档](http://bit.ly/interop-async)。
- en: There are some cases in which code *almost* follows the APM pattern, but not
    quite; e.g.,, the old `Microsoft.TeamFoundation` client libraries did not include
    the `object` parameter in their `Begin` methods. In these cases, `Task.Factory.FromAsync`
    will not work, and you then have the choice of two options. The less efficient
    option is to call the `Begin` method and pass the `IAsyncResult` to `FromAsync`.
    The less elegant option is to use the more flexible `TaskCompletionSource<T>`;
    see [Recipe 8.3](ch08.html#recipe-async-interop-any).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有些情况下，代码几乎遵循了APM模式，但并非完全如此；例如，旧的`Microsoft.TeamFoundation`客户端库在其`Begin`方法中不包括`object`参数。在这些情况下，`Task.Factory.FromAsync`将不起作用，然后您可以选择两个选项。效率较低的选项是调用`Begin`方法并将`IAsyncResult`传递给`FromAsync`。不太优雅的选项是使用更灵活的`TaskCompletionSource<T>`；参见[Recipe
    8.3](ch08.html#recipe-async-interop-any)。
- en: Event-Based Asynchronous Programming (EAP)
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于事件的异步编程（EAP）
- en: The Event-Based Asynchronous Programming (EAP) defines a matching method/event
    pair. The method usually ends in `Async`, and it eventually causes an event to
    be raised that ends in `Completed`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 基于事件的异步编程（EAP）定义了一组匹配的方法/事件对。方法通常以`Async`结尾，并最终引发以`Completed`结尾的事件。
- en: There are a few caveats when working with EAP that make it a bit more difficult
    than it first appears. First, you have to remember to add your handler to the
    event *before* calling the method; otherwise, you’d have a race condition where
    the event could happen before you subscribed, and then you’d never see it complete.
    Second, components written in the EAP pattern usually capture the current `SynchronizationContext`
    at some point and then raise their event in that context. Some components capture
    the `SynchronizationContext` in the constructor, and others capture it at the
    time the method is called and the asynchronous operation begins.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理EAP时有一些注意事项，使得其比最初看起来更加复杂。首先，必须记住在调用方法之前将处理程序添加到事件*之前*；否则，可能会出现竞争条件，事件可能在您订阅之前发生，然后您将永远看不到其完成。其次，按照EAP模式编写的组件通常在某个时刻捕获当前的`SynchronizationContext`，然后在该上下文中引发其事件。一些组件在构造函数中捕获`SynchronizationContext`，而其他组件则在调用方法并开始异步操作时捕获它。
- en: 'The Event-Based Asynchronous Programming pattern can be recognized by these
    characteristics:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 基于事件的异步编程模式可以通过以下特征来识别：
- en: The operation is represented by an event and a method.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 操作由事件和方法表示。
- en: The event ends in `Completed`.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 事件以`Completed`结尾。
- en: The event args type for the `Completed` event might be descended from `AsyncCompletedEventArgs`.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Completed`事件的事件参数类型可能是从`AsyncCompletedEventArgs`派生的。'
- en: The method usually ends in `Async`.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 方法通常以`Async`结尾。
- en: The method returns `void`.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 方法返回`void`。
- en: EAP methods ending in `Async` are distinguishable from TAP methods ending in
    `Async` because the EAP methods return `void`, while the TAP methods return an
    awaitable type.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以`Async`结尾的EAP方法与以`Async`结尾的TAP方法有所区别，因为EAP方法返回`void`，而TAP方法返回可等待类型。
- en: 'Here’s an example of a type with an EAP API:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个具有EAP API的示例类型：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Consume the EAP by converting it to TAP using `TaskCompletionSource<T>`; see
    [Recipe 8.3](ch08.html#recipe-async-interop-any) and [the Microsoft docs](http://bit.ly/EAP-MS).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将其转换为TAP来消耗EAP，可以使用`TaskCompletionSource<T>`；参见[Recipe 8.3](ch08.html#recipe-async-interop-any)和[Microsoft文档](http://bit.ly/EAP-MS)。
- en: Continuation Passing Style (CPS)
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连续传递样式（CPS）
- en: This is a pattern that is much more common in other languages, particularly
    JavaScript and TypeScript as used by Node.js developers. In this pattern, each
    asynchronous operation takes a callback delegate that is invoked when the operation
    completes, either successfully or with error. A variant of this pattern uses *two*
    callback delegates, one for success and one for error. This kind of callback is
    called a “continuation,” and the continuation is passed as a parameter, hence
    the name “continuation passing style.” This pattern was never common in the .NET
    world, but there are a few older open source libraries that used it.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这是其他语言中更常见的一种模式，特别是 JavaScript 和 TypeScript，由 Node.js 开发人员使用。在这种模式中，每个异步操作都会接受一个回调委托，当操作完成时会调用该委托，无论是成功还是出错。此模式的变体使用
    *两个* 回调委托，一个用于成功，另一个用于错误。这种类型的回调称为“continuation”，并且 continuation 作为参数传递，因此得名“continuation
    passing style”。这种模式在 .NET 世界中从未普及，但有几个较老的开源库使用了它。
- en: 'The Continuation Passing Style pattern can be recognized by these characteristics:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下特征可以识别 Continuation Passing Style 模式：
- en: The operation is represented by a single method.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 操作由单个方法表示。
- en: The method takes an extra parameter which is a callback delegate; the callback
    delegate takes two arguments, one for errors and the other for results.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该方法接受一个额外的参数，这是一个回调委托；回调委托接受两个参数，一个用于错误，另一个用于结果。
- en: Alternatively, the operation method takes two extra parameters, both callback
    delegates; one callback delegate is only for errors, and the other callback delegate
    is only for results.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 或者，操作方法接受两个额外参数，都是回调委托；一个回调委托仅用于错误，另一个回调委托仅用于结果。
- en: The callback delegates are commonly named `done` or `next`.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回调委托通常命名为 `done` 或 `next`。
- en: 'Here’s an example of a type with a continuation-passing style API:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个具有 continuation-passing style API 的示例类型：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Consume CPS by converting it to TAP using `TaskCompletionSource<T>`, passing
    callback delegates that just complete the `TaskCompletionSource<T>`; see [Recipe
    8.3](ch08.html#recipe-async-interop-any).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 `TaskCompletionSource<T>` 将 CPS 转换为 TAP 来消耗，传递仅完成 `TaskCompletionSource<T>`
    的回调委托；参见 [Recipe 8.3](ch08.html#recipe-async-interop-any)。
- en: Custom Async Patterns
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义异步模式
- en: Very specialized types will sometimes define their own custom asynchronous patterns.
    The most famous example of this is the `Socket` type, which defined a pattern
    that passed around `SocketAsyncEventArgs` instances representing the operation.
    The reason this pattern was introduced was that `SocketAsyncEventArgs` could be
    reused, thus reducing memory churn for applications that do heavy network activity.
    Modern applications can use [`ValueTask<T>` with `ManualResetValueTaskSourceCore<T>`](http://bit.ly/man-reset-type-doc)
    to get similar performance gains.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 非常专业化的类型有时会定义自己的自定义异步模式。其中最著名的例子是 `Socket` 类型，它定义了一个通过传递代表操作的 `SocketAsyncEventArgs`
    实例的模式。引入此模式的原因是 `SocketAsyncEventArgs` 可以被重用，从而减少了对执行大量网络活动的应用程序的内存使用量。现代应用程序可以使用
    [`ValueTask<T>` 和 `ManualResetValueTaskSourceCore<T>`](http://bit.ly/man-reset-type-doc)
    来获得类似的性能增益。
- en: Custom patterns do not have any common characteristics and are therefore the
    hardest to recognize. Thankfully, custom asynchronous patterns are rare.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义模式没有任何共同特征，因此最难识别。幸运的是，自定义异步模式并不常见。
- en: 'Here’s an example of a type with a custom asynchronous API:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个具有自定义异步 API 的示例类型：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`TaskCompletionSource<T>` is the only way to consume custom asynchronous patterns;
    see [Recipe 8.3](ch08.html#recipe-async-interop-any).'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`TaskCompletionSource<T>` 是消耗自定义异步模式的唯一方式；参见 [Recipe 8.3](ch08.html#recipe-async-interop-any)。'
- en: ISynchronizeInvoke
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ISynchronizeInvoke
- en: 'All the previous patterns are for asynchronous operations that are started,
    and once they start, they complete once. Some components follow a subscription
    model: they represent a push-based stream of events rather than a single operation
    that starts once and completes once. A good example of a subscription model is
    the `FileSystemWatcher` type. To observe file system changes, the consuming code
    first subscribes to multiple events and then sets the `EnableRaisingEvents` property
    to `true`. Once `EnableRaisingEvents` is `true`, multiple file system change events
    may be raised.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 所有之前的模式都是针对已启动的异步操作，并且一旦启动，它们就会完成。一些组件遵循订阅模型：它们代表基于推送的事件流，而不是一次启动并完成的单个操作。一个好的订阅模型示例是
    `FileSystemWatcher` 类型。为了观察文件系统的变化，消费代码首先订阅多个事件，然后将 `EnableRaisingEvents` 属性设置为
    `true`。一旦 `EnableRaisingEvents` 为 `true`，可能会引发多个文件系统变化事件。
- en: Some components use an `ISynchronizeInvoke` pattern for their events. They expose
    a single `ISynchronizeInvoke` property, and consumers set that property to an
    implementation that allows the component to schedule work. This is most commonly
    used to schedule work to a UI thread so that the component’s events are raised
    on the UI thread. By convention, if `ISynchronizeInvoke` is `null`, then no synchronizing
    of the events is done, and they may be raised on background threads.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一些组件为其事件使用`ISynchronizeInvoke`模式。它们公开一个`ISynchronizeInvoke`属性，消费者将该属性设置为允许组件调度工作的实现。这通常用于将工作安排到UI线程，以便在UI线程上引发组件的事件。按照惯例，如果`ISynchronizeInvoke`为`null`，则不进行事件同步，并且可能在后台线程上引发。
- en: 'The `ISynchronizeInvoke` pattern can be recognized by these characteristics:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过以下特征识别`ISynchronizeInvoke`模式：
- en: There is a property of type `ISynchronizeInvoke`.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有一个`ISynchronizeInvoke`类型的属性。
- en: The property is usually called `SynchronizingObject`.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该属性通常称为`SynchronizingObject`。
- en: 'Here’s an example of a type that uses the `ISynchronizeInvoke` pattern:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用`ISynchronizeInvoke`模式的一个示例类型：
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Since `ISynchronizeInvoke` implies multiple events in a subscription model,
    the proper way to consume these components is to translate those events to an
    observable stream, either using `FromEvent` (see [Recipe 6.1](ch06.html#recipe-rx-events))
    or `Observable.Create`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`ISynchronizeInvoke`暗示订阅模型中的多个事件，正确的消费这些组件的方法是将这些事件转换为可观察流，可以使用`FromEvent`（参见[Recipe
    6.1](ch06.html#recipe-rx-events)）或`Observable.Create`。
