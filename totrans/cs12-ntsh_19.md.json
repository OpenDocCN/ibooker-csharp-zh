["```cs\nclass Person\n{\n  public string FirstName { get; set; }\n  public string LastName  { get; set; }\n\n  // The Friends collection may contain Customers & Employees:\n  public readonly IList<Person> Friends = new Collection<Person> ();\n}\n\nclass Customer : Person { public decimal CreditLimit { get; set; } }\nclass Employee : Person { public decimal Salary      { get; set; } }\n```", "```cs\nclass ToXElementPersonVisitor\n{\n  public XElement DynamicVisit (Person p) => Visit ((dynamic)p);\n\n  XElement Visit (Person p)\n  {\n    return new XElement (\"Person\",\n      new XAttribute (\"Type\", p.GetType().Name),\n      new XElement (\"FirstName\", p.FirstName),\n      new XElement (\"LastName\", p.LastName),\n      p.Friends.Select (f => DynamicVisit (f))\n    );\n  }\n\n  XElement Visit (Customer c)   // Specialized logic for customers\n  {\n    XElement xe = Visit ((Person)c);   // Call \"base\" method\n    xe.Add (new XElement (\"CreditLimit\", c.CreditLimit));\n    return xe;\n  }\n\n  XElement Visit (Employee e)   // Specialized logic for employees\n  {\n    XElement xe = Visit ((Person)e);   // Call \"base\" method\n    xe.Add (new XElement (\"Salary\", e.Salary));\n    return xe;\n  }\n}\n```", "```cs\nvar cust = new Customer\n{\n  FirstName = \"Joe\", LastName = \"Bloggs\", CreditLimit = 123\n};\ncust.Friends.Add (\n  new Employee { FirstName = \"Sue\", LastName = \"Brown\", Salary = 50000 }\n);\n\nConsole.WriteLine (new ToXElementPersonVisitor().DynamicVisit (cust));\n```", "```cs\n<Person Type=\"Customer\">\n  <FirstName>Joe</FirstName>\n  <LastName>Bloggs</LastName>\n  <Person Type=\"Employee\">\n    <FirstName>Sue</FirstName>\n    <LastName>Brown</LastName>\n    <Salary>50000</Salary>\n  </Person>\n  <CreditLimit>123</CreditLimit>\n</Person>\n```", "```cs\nabstract class PersonVisitor<T>\n{\n  public T DynamicVisit (Person p) { return Visit ((dynamic)p); }\n\n  protected abstract T Visit (Person p);\n  protected virtual T Visit (Customer c) { return Visit ((Person) c); }\n  protected virtual T Visit (Employee e) { return Visit ((Person) e); }\n}\n```", "```cs\nclass ToXElementPersonVisitor : PersonVisitor<XElement>\n{\n  protected override XElement Visit (Person p)\n  {\n    return new XElement (\"Person\",\n      new XAttribute (\"Type\", p.GetType().Name),\n      new XElement (\"FirstName\", p.FirstName),\n      new XElement (\"LastName\", p.LastName),\n      p.Friends.Select (f => DynamicVisit (f))\n    );\n  }\n\n  protected override XElement Visit (Customer c)\n  {\n    XElement xe = base.Visit (c);\n    xe.Add (new XElement (\"CreditLimit\", c.CreditLimit));\n    return xe;\n  }\n\n  protected override XElement Visit (Employee e)\n  {\n    XElement xe = base.Visit (e);\n    xe.Add (new XElement (\"Salary\", e.Salary));\n    return xe;\n  }\n}\n```", "```cs\npublic class Foo<T> { public T Value; }\n```", "```cs\nstatic void Write (object obj)\n{\n  if (obj is Foo<>)                           // Illegal\n    Console.WriteLine ((Foo<>) obj).Value);   // Illegal\n}\n```", "```cs\nstatic void Write (dynamic obj)\n{\n  try { Console.WriteLine (obj.Value); }\n  catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException) {...}\n}\n```", "```cs\nstatic void Write (dynamic obj)\n{\n  object result = GetFooValue (obj);\n  if (result != null) Console.WriteLine (result);\n}\n\nstatic T GetFooValue<T> (Foo<T> foo) => foo.Value;\nstatic object GetFooValue (object foo) => null;\n```", "```cs\nstatic string GetGroupKey<TKey,TElement> (IGrouping<TKey,TElement> group)\n  => \"Group with key=\" + group.Key + \": \";\n\nstatic string GetGroupKey (object source) => null;\n\npublic static string ToStringEx (object value)\n{\n  if (value == null) return \"<null>\";\n  if (value is string s) return s;\n  if (value.GetType().IsPrimitive) return value.ToString();\n\n  StringBuilder sb = new StringBuilder();\n\n  string groupKey = GetGroupKey ((dynamic)value);   // Dynamic dispatch\n  if (groupKey != null) sb.Append (groupKey);\n\n  if (value is IEnumerable)\n    foreach (object element in ((IEnumerable)value))\n      sb.Append (ToStringEx (element) + \" \");\n\n  if (sb.Length == 0) sb.Append (value.ToString());\n\n  return \"\\r\\n\" + sb.ToString();\n}\n```", "```cs\nConsole.WriteLine (ToStringEx (\"xyyzzz\".GroupBy (c => c) ));\n\n*Group with key=x: x*\n*Group with key=y: y y*\n*Group with key=z: z z z*\n```", "```cs\ndynamic d = value;\ntry { groupKey = d.Value); }\ncatch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException) {...}\n```", "```cs\ninternal class Grouping : IGrouping<TKey,TElement>, ...\n{\n  public TKey Key;\n  ...\n}\n```", "```cs\ndynamic d = new Duck();\nd.Quack();                  // Quack method was called\nd.Waddle();                 // Waddle method was called\n\npublic class Duck : DynamicObject\n{\n  public override bool TryInvokeMember (\n    InvokeMemberBinder binder, object[] args, out object result)\n  {\n    Console.WriteLine (binder.Name + \" method was called\");\n    result = null;\n    return true;\n  }\n}\n```", "```cs\nstatic class XExtensions\n{\n  public static dynamic DynamicAttributes (this XElement e)\n    => new XWrapper (e);\n\n  class XWrapper : DynamicObject\n  {\n    XElement _element;\n    public XWrapper (XElement e) { _element = e; }\n\n    public override bool TryGetMember (GetMemberBinder binder,\n                                       out object result)\n    {\n      result = _element.Attribute (binder.Name).Value;\n      return true;\n    }\n\n    public override bool TrySetMember (SetMemberBinder binder,\n                                       object value)\n    {\n      _element.SetAttributeValue (binder.Name, value);\n      return true;\n    }\n  }\n}\n```", "```cs\nXElement x = XElement.Parse (@\"<Label Text=\"\"Hello\"\" Id=\"\"5\"\"/>\");\ndynamic da = x.DynamicAttributes();\nConsole.WriteLine (da.Id);           // 5\nda.Text = \"Foo\";\nConsole.WriteLine (x.ToString());    // <Label Text=\"Foo\" Id=\"5\" />\n```", "```cs\npublic class DynamicReader : DynamicObject\n{\n  readonly IDataRecord _dataRecord;\n  public DynamicReader (IDataRecord dr) { _dataRecord = dr; }\n\n  public override bool TryGetMember (GetMemberBinder binder,\n                                     out object result)\n  {\n    result = _dataRecord [binder.Name];\n    return true;\n  }\n}\n...\nusing (IDataReader reader = *someDbCommand*.ExecuteReader())\n{\n  dynamic dr = new DynamicReader (reader);\n  while (reader.Read())\n  {\n    int id = dr.ID;\n    string firstName = dr.FirstName;\n    DateTime dob = dr.DateOfBirth;\n    ...\n  }\n}\n```", "```cs\ndynamic d = new Duck();\nConsole.WriteLine (d + d);          // foo\nConsole.WriteLine (d (78, 'x'));    // 123\n\npublic class Duck : DynamicObject\n{\n  public override bool TryBinaryOperation (BinaryOperationBinder binder,\n                                           object arg, out object result)\n  {\n    Console.WriteLine (binder.Operation);   // Add\n    result = \"foo\";\n    return true;\n  }\n\n  public override bool TryInvoke (InvokeBinder binder,\n                                  object[] args, out object result)\n  {\n    Console.WriteLine (args[0]);    // 78\n    result = 123;\n    return true;\n  }\n}\n```", "```cs\ndynamic x = new ExpandoObject();\nx.FavoriteColor = ConsoleColor.Green;\nx.FavoriteNumber = 7;\nConsole.WriteLine (x.FavoriteColor);    // Green\nConsole.WriteLine (x.FavoriteNumber);   // 7\n```", "```cs\nvar dict = (IDictionary<string,object>) x;\nConsole.WriteLine (dict [\"FavoriteColor\"]);    // Green\nConsole.WriteLine (dict [\"FavoriteNumber\"]);   // 7\nConsole.WriteLine (dict.Count);                // 2\n```", "```cs\nstring expr = \"2 * 3\";\n// We canâ€™t \"execute\" expr\n```", "```cs\nusing System;\nusing IronPython.Hosting;\nusing Microsoft.Scripting;\nusing Microsoft.Scripting.Hosting;\n\nint result = (int) Calculate (\"2 * 3\");\nConsole.WriteLine (result);              // 6\n\nobject Calculate (string expression)\n{\n  ScriptEngine engine = Python.CreateEngine();\n  return engine.Execute (expression);\n}\n```", "```cs\nvar list = (IEnumerable) Calculate (\"[1, 2, 3] + [4, 5]\");\nforeach (int n in list) Console.Write (n);  // 12345\n```", "```cs\n// The following string could come from a file or database:\nstring auditRule = \"taxPaidLastYear / taxPaidThisYear > 2\";\n\nScriptEngine engine = Python.CreateEngine ();    \n\nScriptScope scope = engine.CreateScope ();       \nscope.SetVariable (\"taxPaidLastYear\", 20000m);\nscope.SetVariable (\"taxPaidThisYear\", 8000m);\n\nScriptSource source = engine.CreateScriptSourceFromString (\n                      auditRule, SourceCodeKind.Expression);\n\nbool auditRequired = (bool) source.Execute (scope);\nConsole.WriteLine (auditRequired);   // True\n```", "```cs\nstring code = \"result = input * 3\";\n\nScriptEngine engine = Python.CreateEngine();\n\nScriptScope scope = engine.CreateScope();\nscope.SetVariable (\"input\", 2);\n\nScriptSource source = engine.CreateScriptSourceFromString (code,\n                                  SourceCodeKind.SingleStatement);\nsource.Execute (scope);\nConsole.WriteLine (scope.GetVariable (\"result\"));   // 6\n```", "```cs\nstring code = @\"sb.Append (\"\"World\"\")\";\n\nScriptEngine engine = Python.CreateEngine ();\n\nScriptScope scope = engine.CreateScope ();\nvar sb = new StringBuilder (\"Hello\");\nscope.SetVariable (\"sb\", sb);\n\nScriptSource source = engine.CreateScriptSourceFromString (\n                      code, SourceCodeKind.SingleStatement);\nsource.Execute (scope);\nConsole.WriteLine (sb.ToString());   // HelloWorld\n```"]