["```cs\nTask task = Task.Run(() =>\n{\n  Thread.Sleep(TimeSpan.FromSeconds(2));\n});\n```", "```cs\nTask<int> task = Task.Run(async () =>\n{\n  await Task.Delay(TimeSpan.FromSeconds(2));\n  return 13;\n});\n```", "```cs\nTaskScheduler scheduler = TaskScheduler.FromCurrentSynchronizationContext();\n```", "```cs\nvar schedulerPair = new ConcurrentExclusiveSchedulerPair();\nTaskScheduler concurrent = schedulerPair.ConcurrentScheduler;\nTaskScheduler exclusive = schedulerPair.ExclusiveScheduler;\n```", "```cs\nvar schedulerPair = new ConcurrentExclusiveSchedulerPair(\n    TaskScheduler.Default, maxConcurrencyLevel: 8);\nTaskScheduler scheduler = schedulerPair.ConcurrentScheduler;\n```", "```cs\nvoid RotateMatrices(IEnumerable<IEnumerable<Matrix>> collections, float degrees)\n{\n  var schedulerPair = new ConcurrentExclusiveSchedulerPair(\n      TaskScheduler.Default, maxConcurrencyLevel: 8);\n  TaskScheduler scheduler = schedulerPair.ConcurrentScheduler;\n  ParallelOptions options = new ParallelOptions { TaskScheduler = scheduler };\n  Parallel.ForEach(collections, options,\n      matrices => Parallel.ForEach(matrices, options,\n          matrix => matrix.Rotate(degrees)));\n}\n```", "```cs\nvar options = new ExecutionDataflowBlockOptions\n{\n  TaskScheduler = TaskScheduler.FromCurrentSynchronizationContext(),\n};\nvar multiplyBlock = new TransformBlock<int, int>(item => item * 2);\nvar displayBlock = new ActionBlock<int>(\n    result => ListBox.Items.Add(result), options);\nmultiplyBlock.LinkTo(displayBlock);\n```"]