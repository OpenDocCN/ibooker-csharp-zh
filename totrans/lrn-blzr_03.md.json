["```cs\n<!DOCTYPE html>\n<html class=\"has-navbar-fixed-top\">\n\n<head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\"\n        content=\"\n width=device-width, initial-scale=1.0,\n maximum-scale=1.0, user-scalable=no\" />\n\n    <title>Learning Blazor</title>\n\n    <link href=\"https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css\"\n          rel=\"stylesheet\">\n\n    <!-- Bulma: micro extensions -->\n    <link href=\"https://cdn.jsdelivr.net/npm/\n bulma-slider@2.0.4/dist/css/bulma-slider.min.css\"\n          rel=\"preload\" as=\"style\" onload=\"this.rel='stylesheet'\">\n    <link href=\"https://cdn.jsdelivr.net/npm/\n bulma-quickview@2.0.0/dist/css/bulma-quickview.min.css\"\n          rel=\"preload\" as=\"style\" onload=\"this.rel='stylesheet'\">\n    <link href=\"https://cdn.jsdelivr.net/npm/\n @creativebulma/bulma-tooltip@1.2.0/dist/bulma-tooltip.min.css\"\n          rel=\"preload\" as=\"style\" onload=\"this.rel='stylesheet'\">\n    <link href=\"https://cdn.jsdelivr.net/npm/\n bulma-badge@3.0.1/dist/css/bulma-badge.min.css\"\n          rel=\"preload\" as=\"style\" onload=\"this.rel='stylesheet'\">\n    <link href=\"https://cdn.jsdelivr.net/npm/\n @creativebulma/bulma-badge@1.0.1/dist/bulma-badge.min.css\"\n          rel=\"preload\" as=\"style\" onload=\"this.rel='stylesheet'\">\n    <link type=\"text/css\" href=\"https://unpkg.com/bulma-prefers-dark\"\n          rel=\"preload\" as=\"style\" onload=\"this.rel='stylesheet'\">\n\n    <link href=\"/css/app.css\" rel=\"stylesheet\" />\n    <link href=\"Web.Client.styles.css\" rel=\"stylesheet\" />\n    <link href=\"/_content/Web.TwitterComponents/twitter-component.css\"\n          rel=\"stylesheet\" />\n\n    <link rel=\"manifest\" href=\"/manifest.json\" />\n    <link rel=\"apple-touch-icon\" sizes=\"512x512\" href=\"/icon-512.png\" />\n    <link rel=\"apple-touch-icon\" sizes=\"192x192\" href=\"/icon-192.png\" />\n    <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/icon-32.png\">\n    <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/icon-16.png\">\n\n    <base href=\"/\" />\n\n    <script src=\"https://kit.fontawesome.com/b5bcf1e25a.js\"\n            crossorigin=\"anonymous\"></script>\n    <script src=\"/js/app.js\"></script>\n</head>\n\n<body>\n    <div id=\"app\">\n        <section id=\"splash\" class=\"hero is-fullheight-with-navbar\">\n            <div class=\"hero-body\">\n                <div class=\"container has-text-centered\">\n                    <img src=\"media/blazor-logo.png\"\n                         class=\"blazor-logo mb-5\" />\n                    <div class=\"fa-3x is-family-code\">\n                        <span class=\"has-text-weight-bold\">\n                        Blazor WebAssembly:</span> Loading...\n                        <i class=\"fas fa-sync fa-spin\"></i>\n                    </div>\n                </div>\n            </div>\n        </section>\n    </div>\n\n    <div id=\"blazor-error-ui\">\n        <div class=\"modal is-active\">\n            <div class=\"modal-background\"></div>\n            <div class=\"modal-content\">\n                <article class=\"message is-warning is-medium\">\n                    <div class=\"message-header\">\n                        <p>\n                            <span class=\"icon\">\n                                <i class=\"fas fa-exclamation-circle\"></i>\n                            </span>\n                            <span>Error</span>\n                        </p>\n                    </div>\n                    <div class=\"message-body\">\n                        An unhandled error has occurred.\n                        <button class=\"button is-danger is-pulled-right\"\n                                onClick=\"\n window.location.assign(window.location.origin)\">\n                            <span class=\"icon\">\n                                <i class=\"fas fa-redo\"></i>\n                            </span>\n                            <span>Reload</span>\n                        </button>\n                    </div>\n                </article>\n            </div>\n            <button class=\"modal-close is-large\" aria-label=\"close\"></button>\n        </div>\n    </div>\n\n    <script src=\"/_content/Microsoft.Authentication.WebAssembly.Msal/\n AuthenticationService.js\"></script>\n    <script src=\"/_framework/blazor.webassembly.js\"></script>\n    <script>navigator.serviceWorker.register('service-worker.js');</script>\n</body>\n\n</html>\n```", "```cs\n<head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\"\n        content=\"\n width=device-width, initial-scale=1.0,\n maximum-scale=1.0, user-scalable=no\" />\n\n    <title>Learning Blazor</title>\n\n    <link href=\"https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css\"\n          rel=\"stylesheet\">\n\n    <!-- Bulma: micro extensions -->\n    <link href=\"https://cdn.jsdelivr.net/npm/\n bulma-slider@2.0.4/dist/css/bulma-slider.min.css\"\n          rel=\"preload\" as=\"style\" onload=\"this.rel='stylesheet'\">\n    <link href=\"https://cdn.jsdelivr.net/npm/\n bulma-quickview@2.0.0/dist/css/bulma-quickview.min.css\"\n          rel=\"preload\" as=\"style\" onload=\"this.rel='stylesheet'\">\n    <link href=\"https://cdn.jsdelivr.net/npm/\n @creativebulma/bulma-tooltip@1.2.0/dist/bulma-tooltip.min.css\"\n          rel=\"preload\" as=\"style\" onload=\"this.rel='stylesheet'\">\n    <link href=\"https://cdn.jsdelivr.net/npm/\n bulma-badge@3.0.1/dist/css/bulma-badge.min.css\"\n          rel=\"preload\" as=\"style\" onload=\"this.rel='stylesheet'\">\n    <link href=\"https://cdn.jsdelivr.net/npm/\n @creativebulma/bulma-badge@1.0.1/dist/bulma-badge.min.css\"\n          rel=\"preload\" as=\"style\" onload=\"this.rel='stylesheet'\">\n    <link type=\"text/css\" href=\"https://unpkg.com/bulma-prefers-dark\"\n          rel=\"preload\" as=\"style\" onload=\"this.rel='stylesheet'\">\n\n    <link href=\"/css/app.css\" rel=\"stylesheet\" />\n    <link href=\"Web.Client.styles.css\" rel=\"stylesheet\" />\n    <link href=\"/_content/Web.TwitterComponents/twitter-component.css\"\n          rel=\"stylesheet\" />\n\n    <link rel=\"manifest\" href=\"/manifest.json\" />\n    <link rel=\"apple-touch-icon\" sizes=\"512x512\" href=\"/icon-512.png\" />\n    <link rel=\"apple-touch-icon\" sizes=\"192x192\" href=\"/icon-192.png\" />\n    <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/icon-32.png\">\n    <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/icon-16.png\">\n\n    <base href=\"/\" />\n\n    <script src=\"https://kit.fontawesome.com/b5bcf1e25a.js\"\n            crossorigin=\"anonymous\"></script>\n    <script src=\"/js/app.js\"></script>\n</head>\n```", "```cs\n<body>\n    <div id=\"app\">\n        <section id=\"splash\" class=\"hero is-fullheight-with-navbar\">\n            <div class=\"hero-body\">\n                <div class=\"container has-text-centered\">\n                    <img src=\"media/blazor-logo.png\"\n                         class=\"blazor-logo mb-5\" />\n                    <div class=\"fa-3x is-family-code\">\n                        <span class=\"has-text-weight-bold\">\n                        Blazor WebAssembly:</span> Loading...\n                        <i class=\"fas fa-sync fa-spin\"></i>\n                    </div>\n                </div>\n            </div>\n        </section>\n    </div>\n\n    <div id=\"blazor-error-ui\">\n        <div class=\"modal is-active\">\n            <div class=\"modal-background\"></div>\n            <div class=\"modal-content\">\n                <article class=\"message is-warning is-medium\">\n                    <div class=\"message-header\">\n                        <p>\n                            <span class=\"icon\">\n                                <i class=\"fas fa-exclamation-circle\"></i>\n                            </span>\n                            <span>Error</span>\n                        </p>\n                    </div>\n                    <div class=\"message-body\">\n                        An unhandled error has occurred.\n                        <button class=\"button is-danger is-pulled-right\"\n                                onClick=\"\n window.location.assign(window.location.origin)\">\n                            <span class=\"icon\">\n                                <i class=\"fas fa-redo\"></i>\n                            </span>\n                            <span>Reload</span>\n                        </button>\n                    </div>\n                </article>\n            </div>\n            <button class=\"modal-close is-large\" aria-label=\"close\"></button>\n        </div>\n    </div>\n\n    <script src=\"/_content/Microsoft.Authentication.WebAssembly.Msal/\n AuthenticationService.js\"></script>\n    <script src=\"/_framework/blazor.webassembly.js\"></script>\n    <script>navigator.serviceWorker.register('service-worker.js');</script>\n</body>\n```", "```cs\n<script src=\"/_framework/blazor.webassembly.js\"></script>\n<script>navigator.serviceWorker.register('service-worker.js');</script>\n```", "```cs\nvar builder = WebAssemblyHostBuilder.CreateDefault(args);\nbuilder.RootComponents.Add<App>(\"#app\");\nbuilder.RootComponents.Add<HeadOutlet>(\"head::after\");\n\nif (builder.HostEnvironment.IsDevelopment())\n{\n    builder.Logging.SetMinimumLevel(LogLevel.Debug);\n}\n\nbuilder.ConfigureServices();\n\nawait using var host = builder.Build();\n\nhost.TrySetDefaultCulture();\nawait host.RunAsync();\n```", "```cs\nnamespace Learning.Blazor.Extensions;\n\ninternal static class WebAssemblyHostExtensions\n{\n    internal static void TrySetDefaultCulture(this WebAssemblyHost host)\n    {\n        try\n        {\n            var localStorage =\n                host.Services.GetRequiredService<ILocalStorageService>();\n            var clientCulture =\n                localStorage.GetItem<string>(StorageKeys.ClientCulture);\n            clientCulture ??= \"en-US\";\n\n            CultureInfo culture = new(clientCulture);\n            CultureInfo.DefaultThreadCurrentCulture = culture;\n            CultureInfo.DefaultThreadCurrentUICulture = culture;\n        }\n        catch (Exception ex) when (Debugger.IsAttached)\n        {\n            _ = ex;\n            Debugger.Break();\n        }\n    }\n}\n```", "```cs\n<CascadingAuthenticationState>\n    <Error>\n        <Router AppAssembly=\"@typeof(App).Assembly\" Context=\"routeData\">\n            <Found>\n                <AuthorizeRouteView RouteData=\"@routeData\"\n                                    DefaultLayout=\"@typeof(MainLayout)\">\n                    <NotAuthorized>\n                        @if (context.User?.Identity?.IsAuthenticated ?? false)\n                        {\n                            <p>\n                            You are not authorized to access this resource.\n                            </p>\n                        }\n                        else\n                        {\n                            <RedirectToLogin />\n                        }\n                    </NotAuthorized>\n                </AuthorizeRouteView>\n            </Found>\n            <NotFound>\n                <LayoutView Layout=\"@typeof(MainLayout)\">\n                    <NotFoundPage />\n                </LayoutView>\n            </NotFound>\n        </Router>\n    </Error>\n</CascadingAuthenticationState>\n```", "```cs\n@inject ILogger<Error> Logger ![1](assets/1.png)\n\n<CascadingValue Value=this> ![2](assets/2.png) @ChildContent </CascadingValue> @code { ![3](assets/3.png) [Parameter]\n    public RenderFragment? ChildContent { get; set; } = null!; ![4](assets/4.png) public void ProcessError(Exception ex) ![5](assets/5.png) {\n        Logger.LogError(\"Error:ProcessError - Type: {Type} Message: {Message}\",\n            ex.GetType(), ex.Message);\n    }\n}\n```", "```cs\n<NotFound>\n    <LayoutView Layout=\"@typeof(MainLayout)\">\n        <NotFoundPage />\n    </LayoutView>\n</NotFound>\n```", "```cs\n<Found>\n    <AuthorizeRouteView RouteData=\"@routeData\"\n        DefaultLayout=\"@typeof(MainLayout)\">\n        <NotAuthorized>\n            @if (context.User?.Identity?.IsAuthenticated ?? false)\n            {\n                <p>HTTP 401</p>\n            }\n            else\n            {\n                <RedirectToLogin />\n            }\n        </NotAuthorized>\n    </AuthorizeRouteView>\n</Found>\n```", "```cs\n@inject NavigationManager Navigation ![1](assets/1.png)\n\n@code {\n    protected override void OnInitialized() ![2](assets/2.png)\n    {\n        string returnUrl = Uri.EscapeDataString(Navigation.Uri);\n        Navigation.NavigateTo(\n            $\"authentication/login?returnUrl={returnUrl}\");\n    }\n}\n```", "```cs\n@inherits LayoutComponentBase ![1](assets/1.png) @inject IStringLocalizer<MainLayout> Localizer <section class=\"hero is-fullheight-with-navbar\"> ![2](assets/2.png)\n    <div class=\"hero-head\">\n        <header class=\"navbar is-size-5 is-fixed-top\">\n            <div class=\"container\">\n                <div class=\"navbar-brand\">\n                    <NavLink class=\"navbar-item\" href=\"\" ![3](assets/3.png)\n                             Match=\"NavLinkMatch.All\">\n                        <span class=\"pr-2\">\n                            <img src=\"media/blazor-logo.png\"\n                                 height=\"128\" alt=\"Logo\">\n                        </span>\n                        <span>@Localizer[\"Home\"]</span>\n                    </NavLink>\n\n                    <a role=\"button\" class=\"navbar-burger\" aria-label=\"menu\"\n                       aria-expanded=\"false\" data-target=\"navbar\">\n                        <span aria-hidden=\"true\"></span>\n                        <span aria-hidden=\"true\"></span>\n                        <span aria-hidden=\"true\"></span>\n                    </a>\n                </div>\n                <div id=\"navbar\" class=\"navbar-menu\"> ![4](assets/4.png)\n                    <div class=\"navbar-start\">\n                        <AuthorizeView>\n                            <Authorized>\n                                <NavBar />\n                            </Authorized>\n                        </AuthorizeView>\n                    </div>\n                    <div class=\"navbar-end\">\n                        <AuthorizeView>\n                            <Authorized>\n                                <ThemeIndicatorComponent />\n                                <AudioDescriptionComponent />\n                                <LanguageSelectionComponent />\n                                <NotificationComponent />\n                            </Authorized>\n                        </AuthorizeView>\n                        <LoginDisplay />\n                    </div>\n                </div>\n            </div>\n        </header>\n    </div>\n\n    <div class=\"hero-body\">\n        <div class=\"container has-text-centered is-fluid mx-5\"> @Body ![5](assets/5.png)\n        </div>\n    </div>\n\n    <footer class=\"footer\" style=\"padding-bottom: 4rem;\"> ![6](assets/6.png)\n        <PageFooter />\n    </footer>\n</section>\n```", "```cs\n@inherits LocalizableComponentBase<NavBar> ![1](assets/1.png)\n\n<NavLink class=\"navbar-item\" href=\"/chat\" Match=\"NavLinkMatch.Prefix\"> ![2](assets/2.png)\n    <span class=\"icon pr-2\">\n        <i class=\"chat fas fa-comments\"></i>\n    </span>\n    <span>@Localizer[\"Chat\"]</span>\n</NavLink>\n<NavLink class=\"navbar-item\" href=\"/tweets\" Match=\"NavLinkMatch.Prefix\"> ![3](assets/3.png)\n    <span class=\"icon pr-2\">\n        <i class=\"twitter fab fa-twitter\"></i>\n    </span>\n    <span>@Localizer[\"Tweets\"]</span>\n</NavLink>\n<NavLink class=\"navbar-item\" href=\"/pwned\" Match=\"NavLinkMatch.Prefix\"> ![4](assets/4.png)\n    <span class=\"icon pr-2\">\n        <i class=\"pwned fas fa-user-shield\"></i>\n    </span>\n    <span translate=\"no\">Pwned?</span>\n</NavLink>\n```", "```cs\n@inherits LocalizableComponentBase<PageFooter> ![1](assets/1.png)\n\n<div class=\"columns has-text-centered\">\n    <p class=\"column\"> ![2](assets/2.png)\n        <strong translate=\"no\"> Learning Blazor </strong> by <a href=\"@DavidPineUrl\" target=\"_blank\"> David Pine. </a>\n    </p>\n    <p class=\"column\"> ![3](assets/3.png) The <a href=\"@CodeUrl\" target=\"_blank\">\n            <i class=\"fab fa-github\"></i> source code </a> is licensed <a href=\"@LicenseUrl\"> MIT. </a>\n    </p>\n    <p class=\"column\"> ![4](assets/4.png)\n        <a href=\"/privacy\">@Localizer[\"Privacy\"]</a> &bull;\n        <a href=\"/termsandconditions\">@Localizer[\"Terms\"]</a>\n    </p>\n    <p class=\"column\"> ![5](assets/5.png) @_frameworkDescription </p>\n</div>\n```", "```cs\nnamespace Learning.Blazor.Shared\n{\n    public partial class PageFooter\n    {\n        const string CodeUrl = ![1](assets/1.png)\n            \"https://github.com/IEvangelist/learning-blazor\";\n        const string LicenseUrl =\n            \"https://github.com/IEvangelist/learning-blazor/blob/main/LICENSE\";\n        const string DavidPineUrl =\n            \"https://davidpine.net\";\n\n        private string? _frameworkDescription;\n\n        protected override void OnInitialized() => ![2](assets/2.png)\n            _frameworkDescription = AppState.FrameworkDescription;\n    }\n}\n```", "```cs\nusing System.Runtime.InteropServices;\nusing Learning.Blazor.Services;\nusing Microsoft.AspNetCore.Components;\n\nnamespace Learning.Blazor.Shared\n{\n    public sealed partial class MainLayout : IDisposable ![1](assets/1.png)\n    {\n [Inject]\n        public AppInMemoryState? AppState { get; set; } ![2](assets/2.png)\n\n        protected override void OnInitialized() ![3](assets/3.png)\n        {\n            if (AppState is not null)\n            {\n                AppState.StateChanged += StateHasChanged;\n                AppState.FrameworkDescription =\n                    RuntimeInformation.FrameworkDescription;\n            }\n\n            base.OnInitialized();\n        }\n\n        void IDisposable.Dispose() ![4](assets/4.png)\n        {\n            if (AppState is not null)\n            {\n                AppState.StateChanged -= StateHasChanged;\n            }\n        }\n    }\n}\n```", "```cs\nusing Learning.Blazor.BrowserModels;\n\nnamespace Learning.Blazor.Services;\n\npublic sealed class AppInMemoryState\n{\n    private readonly ILocalStorageService _localStorage; ![1](assets/1.png)\n    private string? _frameworkDescription;\n    private ClientVoicePreference? _clientVoicePreference;\n    private bool? _isDarkTheme;\n\n    public AppInMemoryState(ILocalStorageService localStorage) =>\n        _localStorage = localStorage;\n\n    public string? FrameworkDescription ![2](assets/2.png)\n    {\n        get => _frameworkDescription;\n        set\n        {\n            _frameworkDescription = value;\n            AppStateChanged(); ![3](assets/3.png)\n        }\n    }\n\n    public ClientVoicePreference ClientVoicePreference\n    {\n        get => _clientVoicePreference ??=\n            _localStorage.GetItem<ClientVoicePreference>(\n                StorageKeys.ClientVoice)\n            ?? new(\"Auto\", 1);\n        set\n        {\n            _localStorage.SetItem(\n                StorageKeys.ClientVoice,\n                _clientVoicePreference = value ?? new(\"Auto\", 1));\n\n            AppStateChanged();\n        }\n    }\n\n    public bool IsDarkTheme\n    {\n        get => _isDarkTheme ??=\n            _localStorage.GetItem<bool>(StorageKeys.PrefersDarkTheme);\n        set\n        {\n            _localStorage.SetItem(\n                StorageKeys.PrefersDarkTheme,\n                _isDarkTheme = value);\n\n            AppStateChanged();\n        }\n    }\n\n    public Action<IList<Alert>>? WeatherAlertReceived { get; set; }\n    public Action<ContactComponentModel>? ContactPageSubmitted { get; set; }\n\n    public event Action? StateChanged; ![4](assets/4.png)\n\n    private void AppStateChanged() => StateChanged?.Invoke(); ![5](assets/5.png)\n}\n```", "```cs\n@inherits LocalizableComponentBase<LoginDisplay> ![1](assets/1.png) @inject SignOutSessionStateManager SignOutManager <span class=\"navbar-item\">\n    <AuthorizeView> ![2](assets/2.png)\n        <Authorizing>\n            <button class=\"button is-rounded is-loading level-item\" disabled> @Localizer[\"LoggingIn\"] </button>\n        </Authorizing>\n        <Authorized> @{\n                var user = context.User!;\n                var userIdentity = user.Identity!;\n                var userToolTip =\n                    $\"{userIdentity.Name} ({user.GetFirstEmailAddress()})\";\n            } <button class=\"\n\t\tbutton is-rounded level-item has-tooltip-right has-tooltip-info\"\n                data-tooltip=@(userToolTip) @onclick=\"OnLogOut\">\n                <span class=\"icon\">\n                    <i class=\"fas fa-sign-out-alt\"></i>\n                </span>\n                <span>@Localizer[\"LogOut\"]</span>\n            </button>\n        </Authorized>\n        <NotAuthorized>\n            <button class=\"button is-rounded level-item\" @onclick=\"OnLogIn\">\n                <span class=\"icon\">\n                    <i class=\"fas fa-sign-in-alt\"></i>\n                </span>\n                <span>@Localizer[\"LogIn\"]</span>\n            </button>\n        </NotAuthorized>\n    </AuthorizeView>\n</span>\n```", "```cs\nusing Microsoft.AspNetCore.Components.Web;\n\nnamespace Learning.Blazor.Shared\n{\n    public partial class LoginDisplay\n    {\n [Inject]\n        public NavigationManager Navigation { get; set; } = null!;\n\n        void OnLogIn(MouseEventArgs args) =>\n            Navigation.NavigateTo(\"authentication/login\", true);\n\n        async Task OnLogOut(MouseEventArgs args)\n        {\n            await SignOutManager.SetSignOutState();\n            Navigation.NavigateTo(\"authentication/logout\");\n        }\n    }\n}\n```", "```cs\n@media (prefers-color-scheme: dark) {\n    /*\n Styles here are only applied when the browser\n has a specified color scheme of \"dark\".\n */\n}\n```", "```cs\n@inherits LocalizableComponentBase<ThemeIndicatorComponent> ![1](assets/1.png)\n\n<span class=\"navbar-item\"> ![2](assets/2.png)\n    <button class=\"button is-@(_buttonClass)\n\t\thas-tooltip-left has-tooltip-info is-rounded level-item\"\n        data-tooltip=@Localizer\n            [AppState.IsDarkTheme ? \"DarkTheme\" : \"LightTheme\"]>\n        <span class=\"icon\">\n            <i class=\"fas fa-@(_iconClass)\"></i>\n        </span>\n    </button>\n</span>\n\n<HeadContent> ![3](assets/3.png)\n    <meta name=\"twitter:widgets:theme\"\n          content='@(AppState.IsDarkTheme ? \"dark\" : \"light\")'>\n</HeadContent>\n```", "```cs\nusing Learning.Blazor.Extensions;\nusing Microsoft.JSInterop;\n\nnamespace Learning.Blazor.Components\n{\n    public partial class ThemeIndicatorComponent ![1](assets/1.png)\n    {\n        private string _buttonClass => ![2](assets/2.png)\n            AppState.IsDarkTheme ? \"light\" : \"dark\";\n        private string _iconClass =>\n            AppState.IsDarkTheme ? \"moon\" : \"sun\";\n\n        protected override async Task OnInitializedAsync() => ![3](assets/3.png)\n            AppState.IsDarkTheme =\n                await JavaScript.GetCurrentDarkThemePreferenceAsync(\n                    this, nameof(UpdateDarkThemePreference));\n [JSInvokable] ![4](assets/4.png)\n        public Task UpdateDarkThemePreference(bool isDarkTheme) =>\n            InvokeAsync(() =>\n            {\n                AppState.IsDarkTheme = isDarkTheme;\n\n                StateHasChanged();\n            });\n    }\n}\n```", "```cs\nusing Microsoft.JSInterop;\n\nnamespace Learning.Blazor.Extensions;\n\ninternal static class JSRuntimeExtensions\n{\n    internal static async ValueTask<bool> GetCurrentDarkThemePreferenceAsync<T>(\n        this IJSRuntime javaScript,\n        T dotnetObj, ![1](assets/1.png)\n        string callbackMethodName) where T : class =>\n        await javaScript.InvokeAsync<bool>( ![2](assets/2.png)\n            \"app.getClientPrefersColorScheme\", ![3](assets/3.png)\n            \"dark\", ![4](assets/4.png)\n            DotNetObjectReference.Create(dotnetObj), ![5](assets/5.png)\n            callbackMethodName); ![6](assets/6.png)\n}\n```", "```cs\nconst getClientPrefersColorScheme = ![1](assets/1.png)\n    (color, dotnetObj, callbackMethodName) => {\n    let media = window.matchMedia(`(prefers-color-scheme: ${color})`); ![2](assets/2.png)\n    if (media) {\n        media.onchange = args => { ![3](assets/3.png)\n            dotnetObj.invokeMethodAsync( ![4](assets/4.png)\n                callbackMethodName,\n                args.matches);\n        };\n    }\n\n    return media.matches; ![5](assets/5.png)\n}\n\n// omitted for brevity... \nwindow.app = Object.assign({}, window.app, {\n    getClientPrefersColorScheme, ![6](assets/6.png)\n    // omitted for brevity... });\n```"]