["```cs\nint Sum (int[] numbers)\n{\n  int total = 0;\n  foreach (int i in numbers) total += i;\n  return total;\n}\n```", "```cs\nint Sum (ReadOnlySpan<int> numbers)\n{\n  int total = 0;\n  foreach (int i in numbers) total += i;\n  return total;\n}\n```", "```cs\nvar numbers = new int [1000];\nfor (int i = 0; i < numbers.Length; i++) numbers [i] = i;\n\nint total = Sum (numbers);\n```", "```cs\nvar span = numbers.AsSpan();\n```", "```cs\n// Sum the middle 500 elements (starting from position 250):\nint total = Sum (numbers.AsSpan (250, 500));\n```", "```cs\nSpan<int> span = numbers;\nint total = Sum (span.Slice (250, 500));\n```", "```cs\nSpan<int> span = numbers;\nConsole.WriteLine (span [^1]);            // Last element\nConsole.WriteLine (Sum (span [..10]));    // First 10 elements\nConsole.WriteLine (Sum (span [100..]));   // 100th element to end\nConsole.WriteLine (Sum (span [^5..]));    // Last 5 elements\n```", "```cs\nSpan<int> x = [1, 2, 3, 4];   // Collection expression\nSpan<int> y = new int[4];\nx.CopyTo (y);\n```", "```cs\nSpan<int> x = [1,  2,  3,  4 ];\nSpan<int> y = [10, 20, 30, 40];\nx[..2].CopyTo (y[2..]);                 // y is now [10, 20, 1, 2]\n```", "```cs\nReadOnlySpan<char> span = \"The quick brown fox jumps over the lazy dog.\";\nvar vowels = SearchValues.Create (\"aeiou\");\nConsole.WriteLine (span.IndexOfAny (vowels));   // 2\n```", "```cs\nint CountWhitespace (ReadOnlySpan<char> s)\n{\n  int count = 0;\n  foreach (char c in s)\n    if (char.IsWhiteSpace (c))\n      count++;\n  return count;\n}\n```", "```cs\nint x = CountWhitespace (\"Word1 Word2\");   // OK\n```", "```cs\nint y = CountWhitespace (someString.AsSpan (20, 10));\n```", "```cs\nvar span = \"This \".AsSpan();                    // ReadOnlySpan<char>\nConsole.WriteLine (span.StartsWith (\"This\"));   // True\nConsole.WriteLine (span.Trim().Length);         // 4\n```", "```cs\nasync void Foo (Span<int> notAllowed)   // Compile-time error!\n```", "```cs\nMemory<int> mem1 = new int[] { 1, 2, 3 };\nvar mem2 = new int[] { 1, 2, 3 }.AsMemory();\n```", "```cs\nasync void Foo (Memory<int> memory)   \n{\n  Span<int> span = memory.Span;\n  ...\n}\n```", "```cs\n// Split a string into words:\nIEnumerable<ReadOnlyMemory<char>> Split (ReadOnlyMemory<char> input)\n{\n  int wordStart = 0;\n  for (int i = 0; i <= input.Length; i++)\n    if (i == input.Length || char.IsWhiteSpace (input.Span [i]))\n    {\n      yield return input [wordStart..i];   // Slice with C# range operator\n      wordStart = i + 1;\n    }\n}\n```", "```cs\nforeach (var slice in Split (\"The quick brown fox jumps over the lazy dog\"))\n{\n  // slice is a ReadOnlyMemory<char>\n}\n```", "```cs\nRange[] Split (ReadOnlySpan<char> input)\n{\n  int pos = 0;\n  var list = new List<Range>();\n  for (int i = 0; i <= input.Length; i++)\n    if (i == input.Length || char.IsWhiteSpace (input [i]))\n    {\n      list.Add (new Range (pos, i));\n      pos = i + 1;\n    }\n  return list.ToArray();\n}\n```", "```cs\nReadOnlySpan<char> source = \"The quick brown fox\";\nforeach (Range range in Split (source))\n{\n  ReadOnlySpan<char> wordSpan = source [range];\n  ...\n}\n```", "```cs\n// We must define this as a ref struct, because _input is a ref struct.\npublic readonly ref struct CharSpanSplitter\n{\n  readonly ReadOnlySpan<char> _input;\n  public CharSpanSplitter (ReadOnlySpan<char> input) => _input = input;\n  public Enumerator GetEnumerator() => new Enumerator (_input);\n\n  public ref struct Enumerator   // Forward-only enumerator\n  {\n    readonly ReadOnlySpan<char> _input;\n    int _wordPos;\n    public ReadOnlySpan<char> Current { get; private set; }\n\n    public Rator (ReadOnlySpan<char> input)\n    {\n      _input = input;\n      _wordPos = 0;\n      Current = default;\n    }\n\n    public bool MoveNext()\n    {\n      for (int i = _wordPos; i <= _input.Length; i++)\n        if (i == _input.Length || char.IsWhiteSpace (_input [i]))\n        {\n          Current = _input [_wordPos..i];\n          _wordPos = i + 1;\n          return true;\n        }\n      return false;\n    }\n  }\n}\n\npublic static class CharSpanExtensions\n{\n  public static CharSpanSplitter Split (this ReadOnlySpan<char> input)\n    => new CharSpanSplitter (input);\n\n  public static CharSpanSplitter Split (this Span<char> input)\n    => new CharSpanSplitter (input);\n}\n```", "```cs\nvar span = \"the quick brown fox\".AsSpan();\nforeach (var word in span.Split())\n{\n  // word is a ReadOnlySpan<char>\n}\n```", "```cs\nunsafe int Sum (int* numbers, int length)\n{\n  int total = 0;\n  for (int i = 0; i < length; i++) total += numbers [i];\n  return total;\n}\n```", "```cs\nint* numbers = stackalloc int [1000];   // Allocate array on the stack\nint total = Sum (numbers, 1000);\n```", "```cs\nint* numbers = stackalloc int [1000];\nvar span = new Span<int> (numbers, 1000);\n```", "```cs\nSpan<int> numbers = stackalloc int [1000];\n```", "```cs\nint Sum (ReadOnlySpan<int> numbers)\n{\n  int total = 0;\n  int len = numbers.Length;\n  for (int i = 0; i < len; i++) total += numbers [i];\n  return total;\n}\n```", "```cs\nvar source = \"The quick brown fox\".AsSpan();\nvar ptr = Marshal.AllocHGlobal (source.Length * sizeof (char));\ntry\n{\n  var unmanaged = new Span<char> ((char*)ptr, source.Length);\n  source.CopyTo (unmanaged);\n  foreach (var word in unmanaged.Split())\n    Console.WriteLine (word.ToString());\n}\nfinally { Marshal.FreeHGlobal (ptr); }\n```", "```cs\nvar span = new Span<char> ((char*)ptr, source.Length * 2);\n```"]