["```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<customer id=\"123\" status=\"archived\">\n  <firstname>Joe</firstname>\n  <lastname>Bloggs</lastname>\n</customer>\n```", "```cs\nstring xml = @\"<customer id='123' status='archived'>\n                 <firstname>Joe</firstname>\n                 <lastname>Bloggs<!--nice name--></lastname>\n               </customer>\";\n\nXElement customer = XElement.Parse (xml);\n```", "```cs\n<data>\n  Hello world\n  <subelement1/>\n  <!--comment-->\n  <subelement2/>\n</data>\n```", "```cs\nXDocument fromWeb = XDocument.Load (\"http://albahari.com/sample.xml\");\n\nXElement fromFile = XElement.Load (@\"e:\\media\\somefile.xml\");\n\nXElement config = XElement.Parse (\n@\"<configuration>\n    <client enabled='true'>\n      <timeout>30</timeout>\n    </client>\n  </configuration>\");\n```", "```cs\nforeach (XElement child in config.Elements())\n  Console.WriteLine (child.Name);                     // client\n\nXElement client = config.Element (\"client\");\n\nbool enabled = (bool) client.Attribute (\"enabled\");   // Read attribute\nConsole.WriteLine (enabled);                          // True\nclient.Attribute (\"enabled\").SetValue (!enabled);     // Update attribute\n\nint timeout = (int) client.Element (\"timeout\");       // Read element\nConsole.WriteLine (timeout);                          // 30\nclient.Element (\"timeout\").SetValue (timeout * 2);    // Update element\n\nclient.Add (new XElement (\"retries\", 3));             // Add new element\n\nConsole.WriteLine (config);         // Implicitly call config.ToString()\n```", "```cs\n<configuration>\n  <client enabled=\"false\">\n    <timeout>60</timeout>\n    <retries>3</retries>\n  </client>\n</configuration>\n```", "```cs\nXElement lastName = new XElement (\"lastname\", \"Bloggs\");\nlastName.Add (new XComment (\"nice name\"));\n\nXElement customer = new XElement (\"customer\");\ncustomer.Add (new XAttribute (\"id\", 123));\ncustomer.Add (new XElement (\"firstname\", \"Joe\"));\ncustomer.Add (lastName);\n\nConsole.WriteLine (customer.ToString());\n```", "```cs\n<customer id=\"123\">\n  <firstname>Joe</firstname>\n  <lastname>Bloggs<!--nice name--></lastname>\n</customer>\n```", "```cs\nXElement customer =\n  new XElement (\"customer\", new XAttribute (\"id\", 123),\n    new XElement (\"firstname\", \"joe\"),\n    new XElement (\"lastname\", \"bloggs\",\n      new XComment (\"nice name\")\n    )\n  );\n```", "```cs\nXElement query =\n  new XElement (\"customers\",\n    from c in dbContext.Customers.AsEnumerable()\n    select\n      new XElement (\"customer\", new XAttribute (\"id\", c.ID),\n        new XElement (\"firstname\", c.FirstName),\n        new XElement (\"lastname\", c.LastName,\n          new XComment (\"nice name\")\n        )\n      )\n  );\n```", "```cs\npublic XElement (XName name, params object[] content)\n```", "```cs\npublic void Add (params object[] content)\n```", "```cs\nfloat, double, decimal, bool,\nDateTime, DateTimeOffset, TimeSpan\n```", "```cs\nvar address = new XElement (\"address\",\n                  new XElement (\"street\", \"Lawley St\"),\n                  new XElement (\"town\", \"North Beach\")\n              );\nvar customer1 = new XElement (\"customer1\", address);\nvar customer2 = new XElement (\"customer2\", address);\n\ncustomer1.Element (\"address\").Element (\"street\").Value = \"Another St\";\nConsole.WriteLine (\n  customer2.Element (\"address\").Element (\"street\").Value);   // Lawley St\n```", "```cs\nvar bench = new XElement (\"bench\",\n              new XElement (\"toolbox\",\n                new XElement (\"handtool\", \"Hammer\"),\n                new XElement (\"handtool\", \"Rasp\")\n              ),\n              new XElement (\"toolbox\",\n                new XElement (\"handtool\", \"Saw\"),\n                new XElement (\"powertool\", \"Nailgun\")\n              ),\n              new XComment (\"Be careful with the nailgun\")\n            );\nforeach (XNode node in bench.Nodes())\n  Console.WriteLine (node.ToString (SaveOptions.DisableFormatting) + \".\");\n```", "```cs\n<toolbox><handtool>Hammer</handtool><handtool>Rasp</handtool></toolbox>.\n<toolbox><handtool>Saw</handtool><powertool>Nailgun</powertool></toolbox>.\n<!--Be careful with the nailgun-->.\n```", "```cs\nforeach (XElement e in bench.Elements())\n  Console.WriteLine (e.Name + \"=\" + e.Value);    // toolbox=HammerRasp\n                                                 // toolbox=SawNailgun\n```", "```cs\nIEnumerable<string> query =\n  from toolbox in bench.Elements()\n  where toolbox.Elements().Any (tool => tool.Value == \"Nailgun\")\n  select toolbox.Value;\n\nRESULT: { \"SawNailgun\" }\n```", "```cs\nIEnumerable<string> query =\n  from toolbox in bench.Elements()\n  from tool in toolbox.Elements()\n  where tool.Name == \"handtool\"\n  select tool.Value;\n\nRESULT: { \"Hammer\", \"Rasp\", \"Saw\" }\n```", "```cs\nfrom toolbox in bench.Nodes().OfType<XElement>()\nwhere ...\n```", "```cs\nint x = bench.Elements (\"toolbox\").Count();    // 2\n```", "```cs\nint x = bench.Elements().Where (e => e.Name == \"toolbox\").Count();  // 2\n```", "```cs\nIEnumerable<T> where T : XContainer\n```", "```cs\nfrom tool in bench.Elements (\"toolbox\").Elements (\"handtool\")\nselect tool.Value;\n```", "```cs\nXElement settings = XElement.Load (\"databaseSettings.xml\");\nstring cx = settings.Element (\"database\").Element (\"connectString\").Value;\n```", "```cs\nstring xyz = (string) settings.Element (\"xyz\");\n```", "```cs\nConsole.WriteLine (bench.Descendants (\"handtool\").Count());  // 3\n```", "```cs\nforeach (XNode node in bench.DescendantNodes())\n  Console.WriteLine (node.ToString (SaveOptions.DisableFormatting));\n```", "```cs\n<toolbox><handtool>Hammer</handtool><handtool>Rasp</handtool></toolbox>\n<handtool>Hammer</handtool>\nHammer\n<handtool>Rasp</handtool>\nRasp\n<toolbox><handtool>Saw</handtool><powertool>Nailgun</powertool></toolbox>\n<handtool>Saw</handtool>\nSaw\n<powertool>Nailgun</powertool>\nNailgun\n<!--Be careful with the nailgun-->\n```", "```cs\nIEnumerable<string> query =\n  from c in bench.DescendantNodes().OfType<XComment>()\n  where c.Value.Contains (\"careful\")\n  orderby c.Value\n  select c.Value;\n```", "```cs\nforeach (XNode child in x.Nodes())\n  Console.WriteLine (child.Parent == x);\n```", "```cs\nXElement settings = new XElement (\"settings\",\n                      new XElement (\"timeout\", 30)\n                    );\nsettings.SetValue (\"blah\");\nConsole.WriteLine (settings.ToString());  // <settings>blah</settings>\n```", "```cs\nXElement settings = new XElement (\"settings\");\nsettings.SetElementValue (\"timeout\", 30);     // Adds child node\nsettings.SetElementValue (\"timeout\", 60);     // Update it to 60\n```", "```cs\nXElement items = new XElement (\"items\",\n                   new XElement (\"one\"),\n                   new XElement (\"three\")\n                 );\nitems.FirstNode.AddAfterSelf (new XElement (\"two\"));\n```", "```cs\n<items><one /><two /><three /></items>\n```", "```cs\nXElement items = XElement.Parse (\"<items><one/><two/><three/></items>\");\nitems.FirstNode.ReplaceWith (new XComment (\"One was here\"));\n```", "```cs\n<items><!--one was here--><two /><three /></items>\n```", "```cs\nXElement contacts = XElement.Parse (\n@\"<contacts>\n    <customer name='Mary'/>\n    <customer name='Chris' archived='true'/>\n    <supplier name='Susan'>\n      <phone archived='true'>012345678<!--confidential--></phone>\n    </supplier>\n  </contacts>\");\n```", "```cs\ncontacts.Elements (\"customer\").Remove();\n```", "```cs\ncontacts.Elements().Where (e => (bool?) e.Attribute (\"archived\") == true)\n                   .Remove();\n```", "```cs\n<contacts>\n  <customer name=\"Mary\" />\n  <supplier name=\"Susan\" />\n</contacts>\n```", "```cs\ncontacts.Elements().Where (e => e.DescendantNodes()\n                                 .OfType<XComment>()\n                                 .Any (c => c.Value == \"confidential\")\n                          ).Remove();\n```", "```cs\n<contacts>\n  <customer name=\"Mary\" />\n  <customer name=\"Chris\" archived=\"true\" />\n</contacts>\n```", "```cs\ncontacts.DescendantNodes().OfType<XComment>().Remove();\n```", "```cs\nvar e = new XElement (\"date\", DateTime.Now);\ne.SetValue (DateTime.Now.AddDays(1));\nConsole.Write (e.Value);              // 2019-10-02T16:39:10.734375+09:00\n```", "```cs\nXElement e = new XElement (\"now\", DateTime.Now);\nDateTime dt = (DateTime) e;\n\nXAttribute a = new XAttribute (\"resolution\", 1.234);\ndouble res = (double) a;\n```", "```cs\nint timeout = (int) x.Element (\"timeout\");      // Error\nint? timeout = (int?) x.Element (\"timeout\");    // OK; timeout is null.\n```", "```cs\ndouble resolution = (double?) x.Attribute (\"resolution\") ?? 1.0;\n```", "```cs\nvar data = XElement.Parse (\n  @\"<data>\n      <customer id='1' name='Mary' credit='100' />\n      <customer id='2' name='John' credit='150' />\n      <customer id='3' name='Anne' />\n    </data>\");\n\nIEnumerable<string> query = from cust in data.Elements()\n                            where (int?) cust.Attribute (\"credit\") > 100\n                            select cust.Attribute (\"name\").Value;\n```", "```cs\nwhere cust.Attributes (\"credit\").Any() && (int) cust.Attribute...\n```", "```cs\n<summary>An XAttribute is <bold>not</bold> an XNode</summary>\n```", "```cs\nXElement summary = new XElement (\"summary\",\n                      new XText (\"An XAttribute is \"),\n                      new XElement (\"bold\", \"not\"),\n                      new XText (\" an XNode\")\n                    );\n```", "```cs\nAn XAttribute is not an XNode\n```", "```cs\nvar e1 = new XElement (\"test\", \"Hello\"); e1.Add (\"World\");\nvar e2 = new XElement (\"test\", \"Hello\", \"World\");\n```", "```cs\nvar e = new XElement (\"test\", new XText (\"Hello\"), new XText (\"World\"));\nConsole.WriteLine (e.Value);             // HelloWorld\nConsole.WriteLine (e.Nodes().Count());   // 2\n```", "```cs\nvar doc = new XDocument (\n            new XElement (\"test\", \"data\")\n          );\n```", "```cs\nvar styleInstruction = new XProcessingInstruction (\n  \"xml-stylesheet\", \"href='styles.css' type='text/css'\");\n\nvar docType = new XDocumentType (\"html\",\n  \"-//W3C//DTD XHTML 1.0 Strict//EN\",\n  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\", null);\n\nXNamespace ns = \"http://www.w3.org/1999/xhtml\";\nvar root =\n  new XElement (ns + \"html\",\n    new XElement (ns + \"head\",\n      new XElement (ns + \"title\", \"An XHTML page\")),\n    new XElement (ns + \"body\",\n      new XElement (ns + \"p\", \"This is the content\"))\n  );\n\nvar doc =\n  new XDocument (\n    new XDeclaration (\"1.0\", \"utf-8\", \"no\"),\n    new XComment (\"Reference a stylesheet\"),\n    styleInstruction,\n    docType,\n    root);\n\ndoc.Save (\"test.html\");\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\n<!--Reference a stylesheet-->\n<?xml-stylesheet href='styles.css' type='text/css'?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n                      \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<html >\n  <head>\n    <title>An XHTML page</title>\n  </head>\n  <body>\n    <p>This is the content</p>\n  </body>\n</html>\n```", "```cs\nConsole.WriteLine (doc.Root.Name.LocalName);          // html\nXElement bodyNode = doc.Root.Element (ns + \"body\");\nConsole.WriteLine (bodyNode.Document == doc);         // True\n```", "```cs\nConsole.WriteLine (doc.Root.Parent == null);          // True\nforeach (XNode node in doc.Nodes())\n  Console.Write (node.Parent == null);                // TrueTrueTrueTrue\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\n```", "```cs\nvar doc = new XDocument (\n            new XDeclaration (\"1.0\", \"utf-16\", \"yes\"),\n            new XElement (\"test\", \"data\")\n          );\ndoc.Save (\"test.xml\");\n```", "```cs\nvar doc = new XDocument (\n            new XDeclaration (\"1.0\", \"utf-8\", \"yes\"),\n            new XElement (\"test\", \"data\")\n          );\nvar output = new StringBuilder();\nvar settings = new XmlWriterSettings { Indent = true };\nusing (XmlWriter xw = XmlWriter.Create (output, settings))\n  doc.Save (xw);\nConsole.WriteLine (output.ToString());\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-16\" standalone=\"yes\"?>\n<test>data</test>\n```", "```cs\nFile.WriteAllText (\"data.xml\", doc.ToString());\n```", "```cs\n<customer />\n```", "```cs\n<customer >\n  <address>\n    <postcode>02138</postcode>\n  </address>\n</customer>\n```", "```cs\n<customer >\n  <address xmlns=\"\">\n    <postcode>02138</postcode>     <!-- postcode now inherits empty ns -->\n  </address>\n</customer>\n```", "```cs\n<nut:customer xmlns:nut=\"OReilly.Nutshell.CSharp\"/>\n```", "```cs\n<nut:customer >\n  <firstname>Joe</firstname>\n</customer>\n```", "```cs\n<nut:customer >\n  <nut:firstname>Joe</firstname>\n</customer>\n```", "```cs\n<customer \n          >\n  ...\n</customer>\n```", "```cs\n<customer />\n```", "```cs\n<nut:customer />\n```", "```cs\n<customer  nut:id=\"123\" />\n```", "```cs\n<customer >\n  <firstname>Joe</firstname>\n  <lastname xsi:nil=\"true\"/>\n</customer>\n```", "```cs\nvar e = new XElement (\"{http://domain.com/xmlspace}customer\", \"Bloggs\");\nConsole.WriteLine (e.ToString());\n```", "```cs\n<customer >Bloggs</customer>\n```", "```cs\npublic sealed class XNamespace\n{\n  public string NamespaceName { get; }\n}\n\npublic sealed class XName     // A local name with optional namespace\n{\n  public string LocalName { get; }\n  public XNamespace Namespace { get; }   // Optional\n}\n```", "```cs\nXNamespace ns   = \"http://domain.com/xmlspace\";\nXName localName = \"customer\";\nXName fullName  = \"{http://domain.com/xmlspace}customer\";\n```", "```cs\nXNamespace ns = \"http://domain.com/xmlspace\";\nXName fullName = ns + \"customer\";\nConsole.WriteLine (fullName);     // {http://domain.com/xmlspace}customer\n```", "```cs\nXNamespace ns = \"http://domain.com/xmlspace\";\nvar data = new XElement (ns + \"data\",\n              new XAttribute (ns + \"id\", 123)\n           );\n```", "```cs\nXNamespace ns = \"http://domain.com/xmlspace\";\nvar data = new XElement (ns + \"data\",\n             new XElement (ns + \"customer\", \"Bloggs\"),\n             new XElement (ns + \"purchase\", \"Bicycle\")\n           );\n```", "```cs\nConsole.WriteLine (data.ToString());\n\nOUTPUT:\n  <data >\n    <customer>Bloggs</customer>\n    <purchase>Bicycle</purchase>\n  </data>\n\nConsole.WriteLine (data.Element (ns + \"customer\").ToString());\n\nOUTPUT:\n  <customer >Bloggs</customer>\n```", "```cs\nXNamespace ns = \"http://domain.com/xmlspace\";\nvar data = new XElement (ns + \"data\",\n             new XElement (\"customer\", \"Bloggs\"),\n             new XElement (\"purchase\", \"Bicycle\")\n           );\nConsole.WriteLine (data.ToString());\n```", "```cs\n<data >\n  <customer xmlns=\"\">Bloggs</customer>\n  <purchase xmlns=\"\">Bicycle</purchase>\n</data>\n```", "```cs\nXNamespace ns = \"http://domain.com/xmlspace\";\nvar data = new XElement (ns + \"data\",\n             new XElement (ns + \"customer\", \"Bloggs\"),\n             new XElement (ns + \"purchase\", \"Bicycle\")\n           );\nXElement x = data.Element (ns + \"customer\");    // ok\nXElement y = data.Element (\"customer\");         // null\n```", "```cs\nforeach (XElement e in data.DescendantsAndSelf())\n  if (e.Name.Namespace == \"\")\n    e.Name = ns + e.Name.LocalName;\n```", "```cs\nXNamespace ns1 = \"http://domain.com/space1\";\nXNamespace ns2 = \"http://domain.com/space2\";\n\nvar mix = new XElement (ns1 + \"data\",\n            new XElement (ns2 + \"element\", \"value\"),\n            new XElement (ns2 + \"element\", \"value\"),\n            new XElement (ns2 + \"element\", \"value\")\n          );\n```", "```cs\n<data >\n  <element >value</element>\n  <element >value</element>\n  <element >value</element>\n</data>\n```", "```cs\nmix.SetAttributeValue (XNamespace.Xmlns + \"ns1\", ns1);\nmix.SetAttributeValue (XNamespace.Xmlns + \"ns2\", ns2);\n```", "```cs\n<ns1:data \n          >\n  <ns2:element>value</ns2:element>\n  <ns2:element>value</ns2:element>\n  <ns2:element>value</ns2:element>\n</ns1:data>\n```", "```cs\nXNamespace xsi = \"http://www.w3.org/2001/XMLSchema-instance\";\nvar nil = new XAttribute (xsi + \"nil\", true);\n\nvar cust = new XElement (\"customers\",\n             new XAttribute (XNamespace.Xmlns + \"xsi\", xsi),\n             new XElement (\"customer\",\n               new XElement (\"lastname\", \"Bloggs\"),\n               new XElement (\"dob\", nil),\n               new XElement (\"credit\", nil)\n             )\n           );\n```", "```cs\n<customers >\n  <customer>\n    <lastname>Bloggs</lastname>\n    <dob xsi:nil=\"true\" />\n    <credit xsi:nil=\"true\" />\n  </customer>\n</customers>\n```", "```cs\npublic void AddAnnotation (object annotation)\npublic void RemoveAnnotations<T>()     where T : class\n```", "```cs\npublic T Annotation<T>()               where T : class\npublic IEnumerable<T> Annotations<T>() where T : class\n```", "```cs\nXElement e = new XElement (\"test\");\ne.AddAnnotation (\"Hello\");\nConsole.WriteLine (e.Annotation<string>());   // Hello\n```", "```cs\nclass X\n{\n  class CustomData { internal string Message; }   // Private nested type\n\n  static void Test()\n  {\n    XElement e = new XElement (\"test\");\n    e.AddAnnotation (new CustomData { Message = \"Hello\" } );\n    Console.Write (e.Annotations<CustomData>().First().Message);  // Hello\n  }\n}\n```", "```cs\ne.RemoveAnnotations<CustomData>();\n```", "```cs\n<customers>\n  <customer id=\"1\">\n    <name>Sue</name>\n    <buys>3</buys>\n  </customer>\n  ...\n</customers>\n```", "```cs\nvar customers =\n  new XElement (\"customers\",\n    new XElement (\"customer\", new XAttribute (\"id\", 1),\n      new XElement (\"name\", \"Sue\"),\n      new XElement (\"buys\", 3)\n    )\n  );\n```", "```cs\nvar customers =\n  new XElement (\"customers\",\n    // We must call AsEnumerable() due to a bug in EF Core.\n    from c in dbContext.Customers.AsEnumerable()\n    select\n      new XElement (\"customer\", new XAttribute (\"id\", c.ID),\n        new XElement (\"name\", c.Name),\n        new XElement (\"buys\", c.Purchases.Count)\n      )\n    );\n```", "```cs\n<customers>\n  <customer id=\"1\">\n    <name>Tom</name>\n    <buys>3</buys>\n  </customer>\n  <customer id=\"2\">\n    <name>Harry</name>\n    <buys>2</buys>\n  </customer>\n    ...\n</customers>\n```", "```cs\nIEnumerable<XElement> sqlQuery =\n  from c in dbContext.Customers.AsEnumerable()\n  select\n    new XElement (\"customer\", new XAttribute (\"id\", c.ID),\n      new XElement (\"name\", c.Name),\n      new XElement (\"buys\", c.Purchases.Count)\n    );\n```", "```cs\nvar customers = new XElement (\"customers\", sqlQuery);\n```", "```cs\nvar customers =\n  new XElement (\"customers\",\n    // The AsEnumerable call can be removed when the EF Core bug is fixed.\n    from c in dbContext.Customers.AsEnumerable()\n    let lastBigBuy = (from p in c.Purchases\n                      where p.Price > 1000\n                      orderby p.Date descending\n                      select p).FirstOrDefault()\n    select\n      new XElement (\"customer\", new XAttribute (\"id\", c.ID),\n        new XElement (\"name\", c.Name),\n        new XElement (\"buys\", c.Purchases.Count),\n        new XElement (\"lastBigBuy\",\n          new XElement (\"description\", lastBigBuy?.Description),\n          new XElement (\"price\", lastBigBuy?.Price ?? 0m)\n        )\n      )\n  );\n```", "```cs\n    select\n      new XElement (\"customer\", new XAttribute (\"id\", c.ID),\n        new XElement (\"name\", c.Name),\n        new XElement (\"buys\", c.Purchases.Count),\n        lastBigBuy == null ? null :\n          new XElement (\"lastBigBuy\",\n new XElement (\"description\", lastBigBuy.Description),\n new XElement (\"price\", lastBigBuy.Price)\n```", "```cs\nvar customers =\n  new XStreamingElement (\"customers\",\n    from c in dbContext.Customers\n    select\n      new XStreamingElement (\"customer\", new XAttribute (\"id\", c.ID),\n        new XElement (\"name\", c.Name),\n        new XElement (\"buys\", c.Purchases.Count)\n      )\n    );\ncustomers.Save (\"data.xml\");\n```"]