["```cs\n// Pass an IConfiguration section that maps\n// to an object that has configured an ApiKey.\nservices.AddPwnedServices(\n    _configuration.GetSection(nameof(HibpOptions))\n);\n```", "```cs\n{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft\": \"Warning\",\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\n    }\n  },\n  \"AllowedHosts\": \"*\",\n  \"HibpOptions\": { ![1](assets/1.png)\n    \"ApiKey\": \"<YourApiKey>\",\n    \"UserAgent\": \"<YourUserAgent>\"\n  }\n}\n```", "```cs\n// Provide a lambda expression that assigns the ApiKey directly.\nservices.AddPwnedServices(options =>\n{\n    options.ApiKey =\n        Environment.GetEnvironmentVariable(\n            \"HAVE_I_BEEN_PWNED_API_KEY\");\n});\n```", "```cs\n\"HibpOptions\": {\n    \"ApiKey\": \"demo\"\n}\n```", "```cs\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\n  <PropertyGroup>\n    <RootNamespace>Learning.Blazor.PwnedApi</RootNamespace>\n    <TargetFramework>net6.0</TargetFramework> ![1](assets/1.png)\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>enable</ImplicitUsings>\n  </PropertyGroup>\n\n  <ItemGroup> ![2](assets/2.png)\n    <PackageReference Version=\"2.0.0\"\n        Include=\"HaveIBeenPwned.Client\" />\n    <PackageReference Version=\"2.0.0\"\n        Include=\"HaveIBeenPwned.Client.PollyExtensions\" />\n    <PackageReference Version=\"6.0.0\"\n        Include=\"Microsoft.AspNetCore.Authentication.JwtBearer\"/>\n    <PackageReference Version=\"6.0.0\"\n        Include=\"Microsoft.AspNetCore.Authentication.OpenIdConnect\" />\n    <PackageReference Version=\"1.21.0\"\n        Include=\"Microsoft.Identity.Web\" />\n  </ItemGroup>\n\n  <ItemGroup> ![3](assets/3.png)\n    <ProjectReference\n        Include=\"..\\Web.Extensions\\Web.Extensions.csproj\" />\n    <ProjectReference\n        Include=\"..\\Web.Http.Extensions\\Web.Http.Extensions.csproj\" />\n  </ItemGroup>\n\n</Project>\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args).AddPwnedEndpoints(); ![1](assets/1.png)\nawait using var app = builder.Build().MapPwnedEndpoints(); ![2](assets/2.png)\nawait app.RunAsync(); ![3](assets/3.png)\n```", "```cs\nnamespace Learning.Blazor.PwnedApi;\n\nstatic class WebApplicationBuilderExtensions\n{\n    internal static WebApplicationBuilder AddPwnedEndpoints(\n       this WebApplicationBuilder builder)\n    {\n        ArgumentNullException.ThrowIfNull(builder); ![1](assets/1.png)\n\n        var webClientOrigin = builder.Configuration[\"WebClientOrigin\"]; ![2](assets/2.png)\n        builder.Services.AddCors(\n            options =>\n                options.AddDefaultPolicy(\n                    policy =>\n                        policy.WithOrigins(\n                                webClientOrigin, \"https://localhost:5001\")\n                            .AllowAnyHeader()\n                            .AllowAnyMethod()\n                            .AllowCredentials()));\n\n        builder.Services.AddAuthentication( ![3](assets/3.png)\n            JwtBearerDefaults.AuthenticationScheme)\n            .AddMicrosoftIdentityWebApi(\n                builder.Configuration.GetSection(\"AzureAdB2C\"));\n\n        builder.Services.Configure<JwtBearerOptions>( ![4](assets/4.png)\n            JwtBearerDefaults.AuthenticationScheme,\n            options =>\n                options.TokenValidationParameters.NameClaimType = \"name\");\n\n        builder.Services.AddPwnedServices( ![5](assets/5.png)\n            builder.Configuration.GetSection(nameof(HibpOptions)),\n            HttpClientBuilderRetryPolicyExtensions.GetDefaultRetryPolicy);\n\n        builder.Services.AddSingleton<PwnedServices>();\n\n        return builder;\n    }\n}\n```", "```cs\nnamespace Learning.Blazor.PwnedApi;\n\nstatic class WebApplicationExtensions\n{\n    /// <summary>\n    /// Maps \"pwned breach data\" endpoints and \"pwned passwords\"\n    /// endpoints, with Minimal APIs.\n    /// </summary>\n    /// <param name=\"app\">The current <see cref=\"WebApplication\"/>\n    /// instance to map on.</param>\n    /// <returns>The given <paramref name=\"app\"/> as a fluent API.</returns>\n    /// <exception cref=\"ArgumentNullException\">When <paramref name=\"app\"/>\n    /// is <c>null</c>.</exception>\n    internal static WebApplication MapPwnedEndpoints(this WebApplication app)\n    {\n        ArgumentNullException.ThrowIfNull(app);\n\n        app.UseHttpsRedirection(); ![1](assets/1.png)\n        app.UseCors();\n        app.UseAuthentication();\n        app.UseAuthorization();\n\n        app.MapBreachEndpoints(); ![2](assets/2.png)\n        app.MapPwnedPasswordsEndpoints();\n\n        return app;\n    }\n\n    internal static WebApplication MapBreachEndpoints( ![3](assets/3.png)\n        this WebApplication app)\n    {\n        // Map \"have i been pwned\" breaches.\n        app.MapGet(\"api/pwned/breaches/{email}\",\n            GetBreachHeadersForAccountAsync);\n        app.MapGet(\"api/pwned/breach/{name}\",\n            GetBreachAsync);\n\n        return app;\n    }\n\n    internal static WebApplication MapPwnedPasswordsEndpoints( ![4](assets/4.png)\n        this WebApplication app)\n    {\n        // Map \"have i been pwned\" passwords.\n        app.MapGet(\"api/pwned/passwords/{password}\",\n            GetPwnedPasswordAsync);\n\n        return app;\n    }\n [Authorize, RequiredScope(\"User.ApiAccess\"), EnableCors] ![5](assets/5.png)\n    internal static async Task<IResult> GetBreachHeadersForAccountAsync(\n [FromRoute] string email,\n        PwnedServices pwnedServices)\n    {\n        var breaches = await pwnedServices.GetBreachHeadersAsync(email);\n        return Results.Json(breaches, DefaultJsonSerialization.Options);\n    }\n [Authorize, RequiredScope(\"User.ApiAccess\"), EnableCors]\n    internal static async Task<IResult> GetBreachAsync(\n [FromRoute] string name,\n        PwnedServices pwnedServices)\n    {\n        var breach = await pwnedServices.GetBreachDetailsAsync(name);\n        return Results.Json(breach, DefaultJsonSerialization.Options);\n    }\n [Authorize, RequiredScope(\"User.ApiAccess\"), EnableCors] ![6](assets/6.png)\n    internal static async Task<IResult> GetPwnedPasswordAsync(\n [FromRoute] string password,\n        IPwnedPasswordsClient pwnedPasswordsClient)\n    {\n        var pwnedPassword =\n            await pwnedPasswordsClient.GetPwnedPasswordAsync(password);\n        return Results.Json(pwnedPassword, DefaultJsonSerialization.Options);\n    }\n}\n```", "```cs\n@page \"/\" ![1](assets/1.png) @inherits LocalizableComponentBase<Index>\n\n<PageTitle> ![2](assets/2.png) @Localizer[\"Home\"] </PageTitle>\n\n<AuthorizeView> ![3](assets/3.png)\n    <NotAuthorized>\n        <RedirectToLogin /> ![4](assets/4.png)\n    </NotAuthorized>\n    <Authorized> ![5](assets/5.png)\n        <div id=\"index\" class=\"tile is-ancestor\">\n            <div class=\"tile is-vertical is-centered is-7\">\n                <div class=\"tile\">\n                    <div class=\"tile is-parent\">\n                        <IntroductionComponent />\n                    </div>\n                    <div class=\"tile is-parent\">\n                        <JokeComponent />\n                    </div>\n                </div>\n                <div class=\"tile is-parent\">\n                    <WeatherComponent />\n                </div>\n            </div>\n        </div>\n    </Authorized>\n</AuthorizeView>\n```", "```cs\nusing Microsoft.Extensions.Localization; ![1](assets/1.png)\n\nnamespace Learning.Blazor.Components\n{\n    public partial class IntroductionComponent\n    {\n        private LocalizedString _intro => Localizer[\"ThankYou\"]; ![2](assets/2.png)\n    }\n}\n```", "```cs\n@inherits LocalizableComponentBase<IntroductionComponent>\n\n<article class=\"blazor-tile-container\"> ![1](assets/1.png)\n    <div class=\"gradient-bg welcome-gradient\"></div>\n    <div class=\"icon-overlay heart-svg\"></div>\n    <div class=\"blaze-content\">\n        <p class=\"title is-family-monospace\">\n            <span class=\"wave\">&#x1F44B;&#x1F3FD;</span>\n            <span class=\"has-text-light\"> @Localizer[\"Hi\"] ![2](assets/2.png)\n            </span>\n        </p>\n        <AdditiveSpeechComponent Message=@_intro.Value /> ![3](assets/3.png)\n        <p class=\"has-text-black is-family-monospace welcome-text is-size-5\"> @_intro ![4](assets/4.png)\n        </p>\n    </div>\n</article>\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<root>\n  <data name=\"Hi\" xml:space=\"preserve\">\n    <value>Hi, I'm David</value>\n  </data>\n  <data name=\"ThankYou\" xml:space=\"preserve\">\n    <value>\n        I'm honored, humbled, and thrilled to invite you\n        on a tour of my \"Learning Blazor: Build Single-Page Apps\n        with WebAssembly and C#\" book.\n    </value>\n  </data>\n</root>\n```", "```cs\n@inject IJokeFactory JokeFactory ![1](assets/1.png) @inject ILogger<JokeComponent> Logger\n@inject IStringLocalizer<JokeComponent> Localizer <article class=\"blazor-tile-container\"> ![2](assets/2.png)\n    <div class=\"gradient-bg jokes-gradient\"></div>\n    <div class=\"icon-overlay circle-svg\"></div>\n    <div class=\"blaze-content\">\n        <p class=\"title\">\n            <span class=\"is-emoji\">&#x1F913;</span>\n            <span class=\"has-text-light\">@Localizer[\"Jokes\"]</span>\n        </p>\n        <AdditiveSpeechComponent Message=@_jokeText />\n        <div class=\"content\"> @if (_isLoadingJoke) ![3](assets/3.png) { <SpinnerComponent /> }\n            else if (_jokeText is not null)\n            { <blockquote class=\"has-text-black\">\n                    <span class=\"pb-4\">@_jokeText</span>\n                    <br> @if (_sourceDetails is { Site: not null })\n                    { <cite>\n                            &mdash; @{\n                                var (site, source) = _sourceDetails.Value;\n                            } <a href=\"@(site.ToString())\" target=\"_blank\"> @(source.ToString()) </a>\n                        </cite> } </blockquote> } </div>\n    </div>\n</article> @code { ![4](assets/4.png) private string? _jokeText = null;\n    private JokeSourceDetails? _sourceDetails;\n    private bool _isLoadingJoke = false;\n\n    protected override Task OnInitializedAsync() =>\n        RefreshJokeAsync();\n\n    private async Task RefreshJokeAsync() ![5](assets/5.png) {\n        _isLoadingJoke = true;\n\n        try\n        {\n            (_jokeText, _sourceDetails) =\n                await JokeFactory.GetRandomJokeAsync();\n        }\n        catch (Exception ex)\n        {\n            Logger.LogError(ex, ex.Message);\n        }\n        finally\n        {\n            _isLoadingJoke = false;\n        }\n    }\n}\n```", "```cs\nnamespace Learning.Blazor.JokeServices;\n\ninternal interface IJokeService\n{\n    JokeSourceDetails SourceDetails { get; }\n\n    Task<string?> GetJokeAsync();\n}\n```", "```cs\nnamespace Learning.Blazor.JokeServices;\n\ninternal class ProgrammingJokeService : IJokeService ![1](assets/1.png)\n{\n    private readonly HttpClient _httpClient;\n    private readonly ILogger<ProgrammingJokeService> _logger;\n\n    public ProgrammingJokeService( ![2](assets/2.png)\n        HttpClient httpClient,\n        ILogger<ProgrammingJokeService> logger) =>\n        (_httpClient, _logger) = (httpClient, logger);\n\n    JokeSourceDetails IJokeService.SourceDetails => ![3](assets/3.png)\n        new(JokeSource.RandomProgrammingJokeApi,\n            new Uri(\"https://karljoke.herokuapp.com/\"));\n\n    async Task<string?> IJokeService.GetJokeAsync() ![4](assets/4.png)\n    {\n        try\n        {\n            // An array with a single joke is returned\n            var jokes = await _httpClient.GetFromJsonAsync<ProgrammingJoke[]>(\n                \"https://karljoke.herokuapp.com/jokes/programming/random\",\n                DefaultJsonSerialization.Options);\n\n            return jokes?[0].Text;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(\"Error getting something fun to say: {Error}\", ex);\n        }\n\n        return null;\n    }\n}\n```", "```cs\nnamespace Learning.Blazor.JokeServices;\n\ninternal class DadJokeService : IJokeService\n{\n    private readonly HttpClient _httpClient;\n    private readonly ILogger<DadJokeService> _logger;\n\n    public DadJokeService(\n        IHttpClient httpClient,\n        ILogger<DadJokeService> logger) =>\n        (_httpClient, _logger) = (httpClient, logger);\n\n    JokeSourceDetails IJokeService.SourceDetails =>\n        new(JokeSource.ICanHazDadJoke,\n            new Uri(\"https://icanhazdadjoke.com/\"));\n\n    async Task<string?> IJokeService.GetJokeAsync()\n    {\n        try\n        {\n            return await _httpClient.GetStringAsync(\n                \"https://icanhazdadjoke.com/\");\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(\n                \"Error getting something fun to say: {Error}\", ex);\n        }\n\n        return null;\n    }\n}\n```", "```cs\nnamespace Learning.Blazor.JokeServices;\n\ninternal class ChuckNorrisJokeService : IJokeService\n{\n    private readonly ILogger<ChuckNorrisJokeService> _logger;\n    private static readonly AsyncLazy<ChuckNorrisJoke[]?> s_embeddedJokes =\n        new(async () =>\n        {\n            var @namespace = typeof(ChuckNorrisJokeService).Namespace;\n            var resource = $\"{@namespace}.Data.icndb-nerdy-jokes.json\";\n\n            var json = await ReadResourceFileAsync(resource);\n            var jokes = json.FromJson<ChuckNorrisJoke[]>();\n\n            return jokes;\n        });\n\n    public ChuckNorrisJokeService(\n        ILogger<ChuckNorrisJokeService> logger) => _logger = logger;\n\n    JokeSourceDetails IJokeService.SourceDetails =>\n        new(JokeSource.InternetChuckNorrisDatabase,\n            new Uri(\"https://www.icndb.com/\"));\n\n    async Task<string?> IJokeService.GetJokeAsync()\n    {\n        try\n        {\n            var jokes = await s_embeddedJokes;\n            if (jokes is { Length: > 0 })\n            {\n                var randomIndex = Random.Shared.Next(jokes.Length);\n                var random = jokes[randomIndex];\n\n                return random.Joke;\n            }\n\n            return null;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(\n                \"Error getting something fun to say: {Error}\", ex);\n        }\n\n        return null;\n    }\n\n    private static async Task<string> ReadResourceFileAsync(string fileName)\n    {\n        using var stream =\n            Assembly.GetExecutingAssembly()\n                .GetManifestResourceStream(fileName);\n        using var reader = new StreamReader(stream!);\n        return await reader.ReadToEndAsync();\n    }\n}\n```", "```cs\nnamespace Learning.Blazor.JokeServices;\n\npublic interface IJokeFactory\n{\n    Task<(string, JokeSourceDetails)> GetRandomJokeAsync();\n}\n```", "```cs\nusing System;\n\nnamespace Learning.Blazor.Models;\n\npublic record JokeSourceDetails(\n    JokeSource Source,\n    Uri Site);\n```", "```cs\nnamespace Learning.Blazor.JokeServices;\n\ninternal class AggregateJokeFactory : IJokeFactory\n{\n    const string NotFunny = @\"Did you hear the one about a joke service that \" +\n        @\"failed to get jokes?\" +\n        \"It's not very funny...\";\n\n    private readonly IList<IJokeService> _jokeServices;\n\n    public AggregateJokeFactory( ![1](assets/1.png)\n        IEnumerable<IJokeService> jokeServices) =>\n        _jokeServices = jokeServices;\n\n    async Task<(string, JokeSourceDetails)> IJokeFactory.GetRandomJokeAsync() ![2](assets/2.png)\n    {\n        string? joke = null;\n        JokeSourceDetails sourceDetails = default;\n\n        foreach (var service in _jokeServices.RandomOrder())\n        {\n            joke = await service.GetJokeAsync();\n            sourceDetails = service.SourceDetails;\n\n            if (joke is not null && sourceDetails != default)\n            {\n                break;\n            }\n        }\n\n        return (\n            joke ?? NotFunny,\n            sourceDetails);\n    }\n}\n```", "```cs\nnamespace Learning.Blazor.Extensions;\n\npublic static class EnumerableExtensions\n{\n    static readonly Random s_random = Random.Shared; ![1](assets/1.png)\n\n    public static IEnumerable<T> RandomOrder<T>(this IList<T> incoming) ![2](assets/2.png)\n    {\n        var used = new HashSet<int>();\n        var count = incoming.Count;\n\n        while (used.Count != count)\n        {\n            var index = s_random.Next(incoming.Count);\n            if (!used.Add(index))\n            {\n                continue;\n            }\n\n            yield return incoming[index];\n        }\n\n        yield break;\n    }\n}\n```", "```cs\nnamespace Learning.Blazor.Extensions; ![1](assets/1.png)\n\npublic static class ServiceCollectionExtensions\n{\n    public static IServiceCollection AddJokeServices(\n        this IServiceCollection services)\n    {\n        ArgumentNullException.ThrowIfNull(nameof(services));\n\n        services.AddScoped<IJokeService, ProgrammingJokeService>(); ![2](assets/2.png)\n        services.AddScoped<IJokeService, DadJokeService>();\n        services.AddScoped<IJokeService, ChuckNorrisJokeService>();\n\n        services.AddHttpClient<ProgrammingJokeService>() ![3](assets/3.png)\n            .AddDefaultTransientHttpErrorPolicy();\n        services.AddHttpClient<DadJokeService>()\n            .AddDefaultTransientHttpErrorPolicy();\n\n        services.AddScoped<IJokeFactory, AggregateJokeFactory>(); ![4](assets/4.png)\n\n        return services;\n    }\n}\n```", "```cs\n@inherits LocalizableComponentBase<WeatherComponent>\n\n<article class=\"blazor-tile-container\"> ![1](assets/1.png)\n    <div class=\"gradient-bg weather-gradient\"></div>\n    <div class=\"icon-overlay zap-svg\"></div>\n    <div class=\"blaze-content\">\n        <p class=\"title\" translate=\"no\">\n            <span class=\"is-emoji\">&#x1F525;</span>\n            <span class=\"has-text-light\"> Blazor @Localizer[\"Weather\"]</span>\n        </p>\n        <AdditiveSpeechComponent Message=@_model?.Message /> ![2](assets/2.png)\n        <div class=\"columns has-text-centered\"> @switch (_state) ![3](assets/3.png) {\n            case ComponentState.Loaded: ![4](assets/4.png) var weather = _model!; <div class=\"column is-one-third\">\n                <WeatherCurrentComponent Weather=weather\n                    Localizer=Localizer />\n            </div>\n            <div class=\"column\">\n                <div class=\"level\"> @foreach (DailyWeather daily in weather.DailyWeather)\n                { <WeatherDailyComponent Daily=\"daily\"\n                        GetDailyImagePath=weather.GetDailyImagePath\n                        GetDailyHigh=weather.GetDailyHigh\n                        GetDailyLow=weather.GetDailyLow /> } </div>\n            </div> break;\n            case ComponentState.Loading: <div class=\"column is-full\"> ![5](assets/5.png)\n                <SpinnerComponent />\n            </div> break;\n            default: <div class=\"column is-full\"> ![6](assets/6.png) @Localizer[\"WeatherUnavailable\"] </div> break;\n        } </div>\n    </div>\n</article>\n```", "```cs\n@using Learning.Blazor.Localization;\n\n<div class=\"box dotnet-box-border is-alpha-bg-50\">\n    <article class=\"media\">\n        <div class=\"media-left\">\n            <figure class=\"image is-128x128\">\n                <img src=@(Weather.ImagePath)\n                    class=\"has-img-shadow\"\n                    alt=\"@Localizer[\"CurrentWeatherVisual\"]\">\n            </figure>\n        </div>\n        <div class=\"media-content\">\n            <div class=\"content has-text-right has-text-light\">\n                <div>\n                    <span class=\"title has-text-light\">\n                        @Weather.Temperature\n                    </span>\n                    <span class=\"heading\">\n                        <i class=\"fas fa-arrow-up\"></i>\n                        @(Weather.HighTemp) |\n                        <i class=\"fas fa-arrow-down\"></i>\n                        @(Weather.LowTemp)\n                    </span>\n                    <span class=\"heading\">\n                        @Weather.Description\n                    </span>\n                    <span class=\"heading\">\n                        <i class=\"fas fa-wind\"></i>\n                        @Weather.WindSpeed\n                        <sup>\n                        @(Localizer[Weather.WindDegree.PositionalCardinal])\n                        </sup>\n                    </span>\n                </div>\n            </div>\n        </div>\n    </article>\n    <div class=\"has-text-centered has-text-light\">\n        @($\"{Weather.City}, {Weather.State} ({Weather.Country})\")\n    </div>\n</div>\n\n@code {\n    [Parameter]\n    public WeatherComponentModel Weather\n    {\n        get;\n        set;\n    } = null!;\n\n    [Parameter]\n    public CoalescingStringLocalizer<WeatherComponent> Localizer\n    {\n        get;\n        set;\n    } = null!;\n}\n```", "```cs\n<div class=\"level-item has-text-centered has-text-light\">\n    <div>\n        <p class=\"heading is-size-6 is-underlined\">\n            @Daily.DateTime.ToString(\"ddd\")\n        </p>\n        <p class=\"title\">\n            <figure class=\"image is-64x64\">\n                <img src=@GetDailyImagePath?.Invoke(Daily)\n                    class=\"has-img-shadow\"\n                    alt=\"@Daily.Weather[0].Description\">\n            </figure>\n        </p>\n        <p class=\"heading\">@Daily.Weather[0].Main</p>\n        <p class=\"heading has-text-weight-bold\">\n            <i class=\"fas fa-arrow-up\"></i>\n            @GetDailyHigh?.Invoke(Daily)\n        </p>\n        <p class=\"heading has-text-weight-bold\">\n            <i class=\"fas fa-arrow-down\"></i>\n            @GetDailyLow?.Invoke(Daily)\n        </p>\n    </div>\n</div>\n\n@code {\n    [Parameter]\n    public DailyWeather Daily { get; set; } = null!;\n\n    [Parameter]\n    public Func<DailyWeather, string>? GetDailyImagePath { get; set; }\n\n    [Parameter]\n    public Func<DailyWeather, string>? GetDailyHigh { get; set; }\n\n    [Parameter]\n    public Func<DailyWeather, string>? GetDailyLow { get; set; }\n}\n```", "```cs\nnamespace Learning.Blazor.Components\n{\n    public sealed partial class WeatherComponent : IDisposable\n    {\n        private Coordinates _coordinates = null!; ![1](assets/1.png)\n        private GeoCode? _geoCode = null!;\n        private WeatherComponentModel<WeatherComponent>? _model = null!;\n        private ComponentState _state = ComponentState.Loading;\n        private bool _isActive = false;\n\n        private readonly CancellationTokenSource _cancellation = new();\n        private readonly PeriodicTimer _timer = new(TimeSpan.FromMinutes(10));\n [Inject]\n        public IWeatherStringFormatterService<WeatherComponent> Formatter\n        {\n            get;\n            set;\n        } = null!;\n [Inject]\n        public HttpClient Http { get; set; } = null!;\n [Inject]\n        public GeoLocationService GeoLocationService { get; set; } = null!;\n\n        protected override Task OnInitializedAsync() =>\n            TryGetClientCoordinatesAsync();\n\n        private async Task TryGetClientCoordinatesAsync() => ![2](assets/2.png)\n            await JavaScript.GetCoordinatesAsync(\n                this,\n                nameof(OnCoordinatesPermittedAsync),\n                nameof(OnErrorRequestingCoordinatesAsync));\n [JSInvokable] ![3](assets/3.png)\n        public async Task OnCoordinatesPermittedAsync(\n            decimal longitude, decimal latitude)\n        {\n            _isGeoLocationPermissionGranted = true;\n            _coordinates = new(latitude, longitude);\n            if (_isActive) return;\n\n            do\n            {\n                _isActive = true;\n\n                try\n                {\n                    var lang = Culture.CurrentCulture.TwoLetterISOLanguageName;\n                    var unit = Culture.MeasurementSystem;\n\n                    var weatherLanguages =\n                        await Http.GetFromJsonAsync<WeatherLanguage[]>(\n                            \"api/weather/languages\",\n                            WeatherLanguagesJsonSerializerContext\n                                .DefaultTypeInfo);\n\n                    var requestLanguage =\n                        weatherLanguages\n                            ?.FirstOrDefault(\n                                language => language.AzureCultureId == lang)\n                            ?.WeatherLanguageId\n                        ?? \"en\";\n\n                    WeatherRequest weatherRequest = new()\n                    {\n                        Language = requestLanguage,\n                        Latitude = latitude,\n                        Longitude = longitude,\n                        Units = (int)unit\n                    };\n\n                    using var response =\n                        await Http.PostAsJsonAsync(\"api/weather/latest\",\n                            weatherRequest,\n                            DefaultJsonSerialization.Options);\n\n                    var weatherDetails =\n                        await response.Content.ReadFromJsonAsync<WeatherDetails>(\n                            DefaultJsonSerialization.Options);\n\n                    await GetGeoCodeAsync(\n                        longitude, latitude, requestLanguage);\n\n                    if (weatherDetails is not null && _geoCode is not null)\n                    {\n                        _model = new WeatherComponentModel(\n                            weatherDetails, _geoCode, Formatter);\n                        _state = ComponentState.Loaded;\n                    }\n                    else\n                    {\n                        _state = ComponentState.Error;\n                    }\n                }\n                catch (Exception ex)\n                {\n                    Logger.LogError(ex, ex.Message);\n                    _state = ComponentState.Error;\n                }\n                finally\n                {\n                    await InvokeAsync(StateHasChanged);\n                }\n            }\n            while (await _timer.WaitForNextTickAsync(_cancellation.Token));\n        }\n\n        private async Task GetGeoCodeAsync(\n            decimal longitude, decimal latitude, string requestLanguage)\n        {\n            if (_geoCode is null)\n            {\n                GeoCodeRequest geoCodeRequest = new()\n                {\n                    Language = requestLanguage,\n                    Latitude = latitude,\n                    Longitude = longitude,\n                };\n\n                _geoCode =\n                    await GeoLocationService.GetGeoCodeAsync(geoCodeRequest);\n            }\n        }\n [JSInvokable] ![4](assets/4.png)\n        public async Task OnErrorRequestingCoordinatesAsync(\n            int code, string message)\n        {\n            Logger.LogWarning(\n                \"The user did not grant permission to geolocation:\" +\n                \"({Code}) {Msg}\",\n                code, message);\n\n            // 1 is PERMISSION_DENIED, error codes greater than 1\n            // are unrelated errors.\n            if (code > 1)\n            {\n                _isGeoLocationPermissionGranted = false;\n            }\n            _state = ComponentState.Error;\n\n            await InvokeAsync(StateHasChanged);\n        }\n\n        void IDisposable.Dispose() ![5](assets/5.png)\n        {\n            _cancellation.Cancel();\n            _cancellation.Dispose();\n            _timer.Dispose();\n        }\n    }\n}\n```", "```cs\nusing Microsoft.JSInterop; ![1](assets/1.png)\n\nnamespace Learning.Blazor.Extensions;\n\ninternal static class JSRuntimeExtensions\n{\n    internal static ValueTask GetCoordinatesAsync<T>( ![2](assets/2.png)\n        this IJSRuntime jsRuntime,\n        T dotnetObj,\n        string successMethodName,\n        string errorMethodName) where T : class => ![3](assets/3.png)\n        jsRuntime.InvokeVoidAsync(\n            \"app.getClientCoordinates\",\n            DotNetObjectReference.Create(dotnetObj), ![4](assets/4.png)\n            successMethodName,\n            errorMethodName);\n\n    // Additional methods omitted for brevity. }\n```", "```cs\nconst getClientCoordinates = ![1](assets/1.png)\n    (dotnetObj, successMethodName, errorMethodName) => {\n        if (navigator && navigator.geolocation) { ![2](assets/2.png)\n            navigator.geolocation.getCurrentPosition(\n                (position) => { ![3](assets/3.png)\n                    const { longitude, latitude } = position.coords;\n                    dotnetObj.invokeMethodAsync(\n                        successMethodName, longitude, latitude);\n                },\n                (error) => { ![4](assets/4.png)\n                    const { code, message } = error;\n                    dotnetObj.invokeMethodAsync(\n                        errorMethodName, code, message);\n                });\n        }\n    };\n\nwindow.app = Object.assign({}, window.app, { ![5](assets/5.png)\n    getClientCoordinates,\n    // omitted for brevity... });\n```"]