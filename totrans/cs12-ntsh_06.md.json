["```cs\nchar c = 'A';\nchar newLine = '\\n';\n```", "```cs\nConsole.WriteLine (System.Char.ToUpper ('c'));    // C\nConsole.WriteLine (char.IsWhiteSpace ('\\t'));     // True\n```", "```cs\nchar.ToUpper ('i') == 'I'\n```", "```cs\nConsole.WriteLine (char.ToUpperInvariant ('i'));    // I\n```", "```cs\nConsole.WriteLine (char.ToUpper ('i', CultureInfo.InvariantCulture))\n```", "```cs\nstring s1 = \"Hello\";\nstring s2 = \"First Line\\r\\nSecond Line\";\nstring s3 = @\"\\\\server\\fileshare\\helloworld.cs\";\n```", "```cs\nConsole.Write (new string ('*', 10));      // **********\n```", "```cs\nchar[] ca = \"Hello\".ToCharArray();\nstring s = new string (ca);              // s = \"Hello\"\n```", "```cs\nstring empty = \"\";\nConsole.WriteLine (empty == \"\");              // True\nConsole.WriteLine (empty == string.Empty);    // True\nConsole.WriteLine (empty.Length == 0);        // True\n```", "```cs\nstring nullString = null;\nConsole.WriteLine (nullString == null);        // True\nConsole.WriteLine (nullString == \"\");          // False\nConsole.WriteLine (nullString.Length == 0);    // NullReferenceException\n```", "```cs\nstring str  = \"abcde\";\nchar letter = str[1];        // letter == 'b'\n```", "```cs\nforeach (char c in \"123\") Console.Write (c + \",\");    // 1,2,3,\n```", "```cs\nConsole.WriteLine (\"quick brown fox\".EndsWith (\"fox\"));      // True\nConsole.WriteLine (\"quick brown fox\".Contains (\"brown\"));    // True\n```", "```cs\n\"abcdef\".StartsWith (\"aBc\", StringComparison.InvariantCultureIgnoreCase)\n```", "```cs\nConsole.WriteLine (\"abcde\".IndexOf (\"cd\"));   // 2\n```", "```cs\nConsole.WriteLine (\"abcde abcde\".IndexOf (\"CD\", 6,\n                   StringComparison.CurrentCultureIgnoreCase));    // 8\n```", "```cs\nConsole.Write (\"ab,cd ef\".IndexOfAny (new char[] {' ', ','} ));       // 2\nConsole.Write (\"pas5w0rd\".IndexOfAny (\"0123456789\".ToCharArray() ));  // 3\n```", "```cs\nstring left3 = \"12345\".Substring (0, 3);     // left3 = \"123\";\nstring mid3  = \"12345\".Substring (1, 3);     // mid3 = \"234\";\n```", "```cs\nstring end3  = \"12345\".Substring (2);        // end3 = \"345\";\n```", "```cs\nstring s1 = \"helloworld\".Insert (5, \", \");    // s1 = \"hello, world\"\nstring s2 = s1.Remove (5, 2);                 // s2 = \"helloworld\";\n```", "```cs\nConsole.WriteLine (\"12345\".PadLeft (9, '*'));  // ****12345\nConsole.WriteLine (\"12345\".PadLeft (9));       //     12345\n```", "```cs\nConsole.WriteLine (\"  abc \\t\\r\\n \".Trim().Length);   // 3\n```", "```cs\nConsole.WriteLine (\"to be done\".Replace (\" \", \" | \") );  // to | be | done\nConsole.WriteLine (\"to be done\".Replace (\" \", \"\")    );  // tobedone\n```", "```cs\nstring[] words = \"The quick brown fox\".Split();\n\nforeach (string word in words)\n  Console.Write (word + \"|\");    // The|quick|brown|fox|\n```", "```cs\nstring[] words = \"The quick brown fox\".Split();\nstring together = string.Join (\" \", words);      // The quick brown fox\n```", "```cs\nstring sentence     = string.Concat (\"The\", \" quick\", \" brown\", \" fox\");\nstring sameSentence = \"The\" + \" quick\" + \" brown\" + \" fox\";\n```", "```cs\nstring composite = \"It's {0} degrees in {1} on this {2} morning\";\nstring s = string.Format (composite, 35, \"Perth\", DateTime.Now.DayOfWeek);\n\n// s == \"It's 35 degrees in Perth on this Friday morning\"\n```", "```cs\nstring s = $\"It's hot this {DateTime.Now.DayOfWeek} morning\";\n```", "```cs\nstring composite = \"Name={0,-20} Credit Limit={1,15:C}\";\n\nConsole.WriteLine (string.Format (composite, \"Mary\", 500));\nConsole.WriteLine (string.Format (composite, \"Elizabeth\", 20000));\n```", "```cs\nName=Mary                 Credit Limit=        $500.00\nName=Elizabeth            Credit Limit=     $20,000.00\n```", "```cs\nstring s = \"Name=\" + \"Mary\".PadRight (20) +\n           \" Credit Limit=\" + 500.ToString (\"C\").PadLeft (15);\n```", "```cs\n\"atom\", \"Atom\", \"Zamia\"\n```", "```cs\n\"Atom\", \"Zamia\", \"atom\"\n```", "```cs\npublic bool Equals (string value, StringComparison comparisonType);\n\npublic static bool Equals (string a, string b,\n                           StringComparison comparisonType);\n```", "```cs\npublic enum StringComparison\n{\n  CurrentCulture,               // Case-sensitive\n  CurrentCultureIgnoreCase,\n  InvariantCulture,             // Case-sensitive\n  InvariantCultureIgnoreCase,\n  Ordinal,                      // Case-sensitive\n  OrdinalIgnoreCase\n}\n```", "```cs\nConsole.WriteLine (string.Equals (\"foo\", \"FOO\",\n                   StringComparison.OrdinalIgnoreCase));   // True\n\nConsole.WriteLine (\"ṻ\" == \"ǖ\");                            // False\n\nConsole.WriteLine (string.Equals (\"ṻ\", \"ǖ\",\n                   StringComparison.CurrentCulture));      // *?*\n```", "```cs\npublic int CompareTo (string strB);\n```", "```cs\npublic static int Compare (string strA, string strB,\n                           StringComparison comparisonType);\n\npublic static int Compare (string strA, string strB, bool ignoreCase,\n                           CultureInfo culture);\n\npublic static int Compare (string strA, string strB, bool ignoreCase);\n\npublic static int CompareOrdinal (string strA, string strB);\n```", "```cs\nConsole.WriteLine (\"Boston\".CompareTo (\"Austin\"));    // 1\nConsole.WriteLine (\"Boston\".CompareTo (\"Boston\"));    // 0\nConsole.WriteLine (\"Boston\".CompareTo (\"Chicago\"));   // -1\nConsole.WriteLine (\"ṻ\".CompareTo (\"ǖ\"));              // 1\nConsole.WriteLine (\"foo\".CompareTo (\"FOO\"));          // -1\n```", "```cs\nConsole.WriteLine (string.Compare (\"foo\", \"FOO\", true));   // 0\n```", "```cs\n// CultureInfo is defined in the System.Globalization namespace\n\nCultureInfo german = CultureInfo.GetCultureInfo (\"de-DE\");\nint i = string.Compare (\"Müller\", \"Muller\", false, german);\n```", "```cs\nStringBuilder sb = new StringBuilder();\nfor (int i = 0; i < 50; i++) sb.Append(i).Append(\",\");\n```", "```cs\nConsole.WriteLine (sb.ToString());\n\n0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,\n27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,\n```", "```cs\n// In .NET 5+ and .NET Core, you must first call RegisterProvider:\nEncoding.RegisterProvider (CodePagesEncodingProvider.Instance);\n\nEncoding chinese = Encoding.GetEncoding (\"GB18030\");\n```", "```cs\nforeach (EncodingInfo info in Encoding.GetEncodings())\n  Console.WriteLine (info.Name);\n```", "```cs\nSystem.IO.File.WriteAllText (\"data.txt\", \"Testing...\", Encoding.Unicode);\n```", "```cs\nbyte[] utf8Bytes  = System.Text.Encoding.UTF8.GetBytes    (\"0123456789\");\nbyte[] utf16Bytes = System.Text.Encoding.Unicode.GetBytes (\"0123456789\");\nbyte[] utf32Bytes = System.Text.Encoding.UTF32.GetBytes   (\"0123456789\");\n\nConsole.WriteLine (utf8Bytes.Length);    // 10\nConsole.WriteLine (utf16Bytes.Length);   // 20\nConsole.WriteLine (utf32Bytes.Length);   // 40\n\nstring original1 = System.Text.Encoding.UTF8.GetString    (utf8Bytes);\nstring original2 = System.Text.Encoding.Unicode.GetString (utf16Bytes);\nstring original3 = System.Text.Encoding.UTF32.GetString   (utf32Bytes);\n\nConsole.WriteLine (original1);          // 0123456789\nConsole.WriteLine (original2);          // 0123456789\nConsole.WriteLine (original3);          // 0123456789\n```", "```cs\nstring ConvertFromUtf32 (int utf32)\nint    ConvertToUtf32   (char highSurrogate, char lowSurrogate)\n```", "```cs\nbool IsSurrogate     (char c)\nbool IsHighSurrogate (char c)\nbool IsLowSurrogate  (char c)\nbool IsSurrogatePair (char highSurrogate, char lowSurrogate)\n```", "```cs\npublic TimeSpan (int hours, int minutes, int seconds);\npublic TimeSpan (int days, int hours, int minutes, int seconds);\npublic TimeSpan (int days, int hours, int minutes, int seconds,\n                                                   int milliseconds);\npublic TimeSpan (int days, int hours, int minutes, int seconds,\n                                      int milliseconds, int microseconds);\npublic TimeSpan (long ticks);   // Each tick = 100ns\n```", "```cs\npublic static TimeSpan FromDays (double value);\npublic static TimeSpan FromHours (double value);\npublic static TimeSpan FromMinutes (double value);\npublic static TimeSpan FromSeconds (double value);\npublic static TimeSpan FromMilliseconds (double value);\npublic static TimeSpan FromMicroseconds (double value);\n```", "```cs\nConsole.WriteLine (new TimeSpan (2, 30, 0));     // 02:30:00\nConsole.WriteLine (TimeSpan.FromHours (2.5));    // 02:30:00\nConsole.WriteLine (TimeSpan.FromHours (-2.5));   // -02:30:00\n```", "```cs\nTimeSpan.FromHours(2) + TimeSpan.FromMinutes(30);\n```", "```cs\nTimeSpan.FromDays(10) - TimeSpan.FromSeconds(1);   // 9.23:59:59\n```", "```cs\nTimeSpan nearlyTenDays = TimeSpan.FromDays(10) - TimeSpan.FromSeconds(1);\n\nConsole.WriteLine (nearlyTenDays.Days);          // 9\nConsole.WriteLine (nearlyTenDays.Hours);         // 23\nConsole.WriteLine (nearlyTenDays.Minutes);       // 59\nConsole.WriteLine (nearlyTenDays.Seconds);       // 59\nConsole.WriteLine (nearlyTenDays.Milliseconds);  // 0\n```", "```cs\nConsole.WriteLine (nearlyTenDays.TotalDays);          // 9.99998842592593\nConsole.WriteLine (nearlyTenDays.TotalHours);         // 239.999722222222\nConsole.WriteLine (nearlyTenDays.TotalMinutes);       // 14399.9833333333\nConsole.WriteLine (nearlyTenDays.TotalSeconds);       // 863999\nConsole.WriteLine (nearlyTenDays.TotalMilliseconds);  // 863999000\n```", "```cs\nJuly 01 2019 03:00:00 -06:00\n```", "```cs\nJuly 01 2019 09:00:00 +00:00 (GMT)\nJuly 01 2019 03:00:00 -06:00 (local time, Central America)\n```", "```cs\npublic DateTime (int year, int month, int day);\n\npublic DateTime (int year, int month, int day,\n                 int hour, int minute, int second, int millisecond);\n```", "```cs\nUnspecified, Local, Utc\n```", "```cs\nDateTime d = new DateTime (5767, 1, 1,\n                          new System.Globalization.HebrewCalendar());\n\nConsole.WriteLine (d);    // 12/12/2006 12:00:00 AM\n```", "```cs\npublic DateTimeOffset (int year, int month, int day,\n                       int hour, int minute, int second,\n                       TimeSpan offset);\n\npublic DateTimeOffset (int year, int month, int day,\n                       int hour, int minute, int second, int millisecond,\n                       TimeSpan offset);\n```", "```cs\npublic DateTimeOffset (DateTime dateTime);\npublic DateTimeOffset (DateTime dateTime, TimeSpan offset);\n```", "```cs\nDateTimeOffset dt = new DateTime (2000, 2, 3);\n```", "```cs\nConsole.WriteLine (DateTime.Now);         // 11/11/2019 1:23:45 PM\nConsole.WriteLine (DateTimeOffset.Now);   // 11/11/2019 1:23:45 PM -06:00\n```", "```cs\nConsole.WriteLine (DateTime.Today);       // 11/11/2019 12:00:00 AM\n```", "```cs\nConsole.WriteLine (DateTime.UtcNow);        // 11/11/2019 7:23:45 AM\nConsole.WriteLine (DateTimeOffset.UtcNow);  // 11/11/2019 7:23:45 AM +00:00\n```", "```cs\nDateTime dt = new DateTime (2000, 2, 3,\n                            10, 20, 30);\n\nConsole.WriteLine (dt.Year);         // 2000\nConsole.WriteLine (dt.Month);        // 2\nConsole.WriteLine (dt.Day);          // 3\nConsole.WriteLine (dt.DayOfWeek);    // Thursday\nConsole.WriteLine (dt.DayOfYear);    // 34\n\nConsole.WriteLine (dt.Hour);         // 10\nConsole.WriteLine (dt.Minute);       // 20\nConsole.WriteLine (dt.Second);       // 30\nConsole.WriteLine (dt.Millisecond);  // 0\nConsole.WriteLine (dt.Ticks);        // 630851700300000000\nConsole.WriteLine (dt.TimeOfDay);    // 10:20:30  (returns a TimeSpan)\n```", "```cs\nAddYears  AddMonths   AddDays\nAddHours  AddMinutes  AddSeconds  AddMilliseconds  AddTicks\n```", "```cs\nTimeSpan ts = TimeSpan.FromMinutes (90);\nConsole.WriteLine (dt.Add (ts));\nConsole.WriteLine (dt + ts);             // same as above\n```", "```cs\nDateTime thisYear = new DateTime (2015, 1, 1);\nDateTime nextYear = thisYear.AddYears (1);\nTimeSpan oneYear = nextYear - thisYear;\n```", "```cs\n11/11/2019 11:50:30 AM\n```", "```cs\n11/11/2019 11:50:30 AM -06:00\n```", "```cs\nDateTime dt1 = DateTime.Now;\nstring cannotBeMisparsed = dt1.ToString (\"o\");\nDateTime dt2 = DateTime.Parse (cannotBeMisparsed);\n```", "```cs\nDateTime dt1 = new DateTime (2000, 1, 1, 10, 20, 30, DateTimeKind.Local);\nDateTime dt2 = new DateTime (2000, 1, 1, 10, 20, 30, DateTimeKind.Utc);\nConsole.WriteLine (dt1 == dt2);          // True\nDateTime local = DateTime.Now;\nDateTime utc = local.ToUniversalTime();\nConsole.WriteLine (local == utc);        // False\n```", "```cs\nDateTime d = new DateTime (2015, 12, 12);  // Unspecified\nDateTime utc = DateTime.SpecifyKind (d, DateTimeKind.Utc);\nConsole.WriteLine (utc);            // 12/12/2015 12:00:00 AM\n```", "```cs\nDateTimeOffset local = DateTimeOffset.Now;\nDateTimeOffset utc   = local.ToUniversalTime();\n\nConsole.WriteLine (local.Offset);   // -06:00:00 (in Central America)\nConsole.WriteLine (utc.Offset);     // 00:00:00\n\nConsole.WriteLine (local == utc);                 // True\n```", "```cs\nConsole.WriteLine (local.EqualsExact (utc));      // False\n```", "```cs\nTimeZone zone = TimeZone.CurrentTimeZone;\nConsole.WriteLine (zone.StandardName);      // Pacific Standard Time\nConsole.WriteLine (zone.DaylightName);      // Pacific Daylight Time\n```", "```cs\nDaylightTime day = zone.GetDaylightChanges (2019);\nConsole.WriteLine (day.Start.ToString (\"M\"));       // 10 March\nConsole.WriteLine (day.End.ToString (\"M\"));         // 03 November\nConsole.WriteLine (day.Delta);                      // 01:00:00\n```", "```cs\nTimeZoneInfo zone = TimeZoneInfo.Local;\nConsole.WriteLine (zone.StandardName);      // Pacific Standard Time\nConsole.WriteLine (zone.DaylightName);      // Pacific Daylight Time\n```", "```cs\nDateTime dt1 = new DateTime (2019, 1, 1);   // DateTimeOffset works, too\nDateTime dt2 = new DateTime (2019, 6, 1);\nConsole.WriteLine (zone.IsDaylightSavingTime (dt1));     // True\nConsole.WriteLine (zone.IsDaylightSavingTime (dt2));     // False\nConsole.WriteLine (zone.GetUtcOffset (dt1));             // -08:00:00\nConsole.WriteLine (zone.GetUtcOffset (dt2));             // -07:00:00\n```", "```cs\nTimeZoneInfo wa = TimeZoneInfo.FindSystemTimeZoneById\n                  (\"W. Australia Standard Time\");\n\nConsole.WriteLine (wa.Id);                   // W. Australia Standard Time\nConsole.WriteLine (wa.DisplayName);          // (GMT+08:00) Perth\nConsole.WriteLine (wa.BaseUtcOffset);        // 08:00:00\nConsole.WriteLine (wa.SupportsDaylightSavingTime);     // True\n```", "```cs\nforeach (TimeZoneInfo z in TimeZoneInfo.GetSystemTimeZones())\n  Console.WriteLine (z.Id);\n```", "```cs\nforeach (TimeZoneInfo.AdjustmentRule rule in wa.GetAdjustmentRules())\n  Console.WriteLine (\"Rule: applies from \" + rule.DateStart +\n                                    \" to \" + rule.DateEnd);\n```", "```cs\nRule: applies from 1/01/2006 12:00:00 AM to 31/12/2006 12:00:00 AM\nRule: applies from 1/01/2007 12:00:00 AM to 31/12/2009 12:00:00 AM\n```", "```cs\npublic bool IsFixedDateRule { get; }\npublic DayOfWeek DayOfWeek { get; }\npublic int Week { get; }\npublic int Day { get; }\npublic int Month { get; }\npublic DateTime TimeOfDay { get; }\n```", "```cs\nforeach (TimeZoneInfo.AdjustmentRule rule in wa.GetAdjustmentRules())\n{\n  Console.WriteLine (\"Rule: applies from \" + rule.DateStart +\n                                    \" to \" + rule.DateEnd);\n\n  Console.WriteLine (\"   Delta: \" + rule.DaylightDelta);\n\n  Console.WriteLine (\"   Start: \" + FormatTransitionTime\n                                   (rule.DaylightTransitionStart, false));\n\n  Console.WriteLine (\"   End:   \" + FormatTransitionTime\n                                   (rule.DaylightTransitionEnd, true));\n  Console.WriteLine();\n}\n```", "```cs\nstatic string FormatTransitionTime (TimeZoneInfo.TransitionTime tt,\n                                    bool endTime)\n{\n  if (endTime && tt.IsFixedDateRule\n              && tt.Day == 1 && tt.Month == 1\n              && tt.TimeOfDay == DateTime.MinValue)\n    return \"-\";\n\n  string s;\n  if (tt.IsFixedDateRule)\n    s = tt.Day.ToString();\n  else\n    s = \"The \" +\n        \"first second third fourth last\".Split() [tt.Week - 1] +\n        \" \" + tt.DayOfWeek + \" in\";\n\n  return s + \" \" + DateTimeFormatInfo.CurrentInfo.MonthNames [tt.Month-1]\n           + \" at \" + tt.TimeOfDay.TimeOfDay;\n}\n```", "```cs\nConsole.Write (DateTime.Now.IsDaylightSavingTime());     // True or False\nConsole.Write (DateTime.UtcNow.IsDaylightSavingTime());  // Always False\n```", "```cs\ndto.LocalDateTime.IsDaylightSavingTime\n```", "```cs\nstring s = true.ToString();     // s = \"True\"\nbool b = bool.Parse (s);        // b = true\n```", "```cs\nbool failure = int.TryParse (\"qwerty\", out int i1);\nbool success = int.TryParse (\"123\", out int i2);\n```", "```cs\nbool success = int.TryParse (\"123\", out int _);\n```", "```cs\nConsole.WriteLine (double.Parse (\"1.234\"));   // 1234  (In Germany)\n```", "```cs\ndouble x = double.Parse (\"1.234\", CultureInfo.InvariantCulture);\n```", "```cs\nstring x = 1.234.ToString (CultureInfo.InvariantCulture);\n```", "```cs\npublic interface IFormattable\n{\n  string ToString (string format, IFormatProvider formatProvider);\n}\n```", "```cs\nNumberFormatInfo f = new NumberFormatInfo();\nf.CurrencySymbol = \"$$\";\nConsole.WriteLine (3.ToString (\"C\", f));          // $$ 3.00\n```", "```cs\nConsole.WriteLine (10.3.ToString (\"C\", null));  // $10.30\n```", "```cs\nConsole.WriteLine (10.3.ToString (\"C\"));     // $10.30\nConsole.WriteLine (10.3.ToString (\"F4\"));    // 10.3000 (Fix to 4 D.P.)\n```", "```cs\nNumberFormatInfo\nDateTimeFormatInfo\nCultureInfo\n```", "```cs\nCultureInfo uk = CultureInfo.GetCultureInfo (\"en-GB\");\nConsole.WriteLine (3.ToString (\"C\", uk));      // £3.00\n```", "```cs\nDateTime dt = new DateTime (2000, 1, 2);\nCultureInfo iv = CultureInfo.InvariantCulture;\nConsole.WriteLine (dt.ToString (iv));            // 01/02/2000 00:00:00\nConsole.WriteLine (dt.ToString (\"d\", iv));       // 01/02/2000\n```", "```cs\nNumberFormatInfo f = new NumberFormatInfo ();\nf.NumberGroupSeparator = \" \";\nConsole.WriteLine (12345.6789.ToString (\"N3\", f));   // 12 345.679\n```", "```cs\nNumberFormatInfo f = (NumberFormatInfo)\n                      CultureInfo.CurrentCulture.NumberFormat.Clone();\n```", "```cs\nstring composite = \"Credit={0:C}\";\nConsole.WriteLine (string.Format (composite, 500));   // Credit=$500.00\n```", "```cs\nConsole.WriteLine (\"Credit={0:C}\", 500);   // Credit=$500.00\n```", "```cs\nstring s = string.Format (CultureInfo.InvariantCulture, \"{0}\", someObject);\n```", "```cs\nstring s;\nif (someObject is IFormattable)\n  s = ((IFormattable)someObject).ToString (null,\n                                           CultureInfo.InvariantCulture);\nelse if (someObject == null)\n  s = \"\";\nelse\n  s = someObject.ToString();\n```", "```cs\nint error = int.Parse (\"(2)\");   // Exception thrown\n\nint minusTwo = int.Parse (\"(2)\", NumberStyles.Integer |\n                                 NumberStyles.AllowParentheses);   // OK\n\ndecimal fivePointTwo = decimal.Parse (\"£5.20\", NumberStyles.Currency,\n                       CultureInfo.GetCultureInfo (\"en-GB\"));\n```", "```cs\npublic interface IFormatProvider { object GetFormat (Type formatType); }\n```", "```cs\nstring Format (string format, object arg, IFormatProvider formatProvider);\n```", "```cs\npublic class WordyFormatProvider : IFormatProvider, ICustomFormatter\n{\n  static readonly string[] _numberWords =\n   \"zero one two three four five six seven eight nine minus point\".Split();\n\n  IFormatProvider _parent;   // Allows consumers to chain format providers\n\n  public WordyFormatProvider () : this (CultureInfo.CurrentCulture) { }\n  public WordyFormatProvider (IFormatProvider parent) => _parent = parent;\n\n  public object GetFormat (Type formatType)\n  {\n    if (formatType == typeof (ICustomFormatter)) return this;\n    return null;\n  }\n\n  public string Format (string format, object arg, IFormatProvider prov)\n  {\n    // If it's not our format string, defer to the parent provider:\n    if (arg == null || format != \"W\")\n      return string.Format (_parent, \"{0:\" + format + \"}\", arg);\n\n    StringBuilder result = new StringBuilder();\n    string digitList = string.Format (CultureInfo.InvariantCulture,\n                                      \"{0}\", arg);\n    foreach (char digit in digitList)\n    {\n      int i = \"0123456789-.\".IndexOf (digit,\n                                      StringComparison.InvariantCulture);\n      if (i == -1) continue;\n      if (result.Length > 0) result.Append (' ');\n      result.Append (_numberWords[i]);\n    }\n    return result.ToString();\n  }\n}\n```", "```cs\nint i = \"0123456789-.\".IndexOf (digit, StringComparison.InvariantCulture);\n```", "```cs\ndouble n = -123.45;\nIFormatProvider fp = new WordyFormatProvider();\nConsole.WriteLine (string.Format (fp, \"{0:C} in words is {0:W}\", n));\n\n// -$123.45 in words is minus one two three point four five\n```", "```cs\nAllowLeadingWhite    AllowTrailingWhite\nAllowLeadingSign     AllowTrailingSign\nAllowParentheses     AllowDecimalPoint\nAllowThousands       AllowExponent\nAllowCurrencySymbol  AllowHexSpecifier\n```", "```cs\nNone  Integer  Float  Number  HexNumber  Currency  Any\n```", "```cs\nint thousand = int.Parse (\"3E8\", NumberStyles.HexNumber);\nint minusTwo = int.Parse (\"(2)\", NumberStyles.Integer |\n                                 NumberStyles.AllowParentheses);\ndouble aMillion = double.Parse (\"1,000,000\", NumberStyles.Any);\ndecimal threeMillion = decimal.Parse (\"3e6\", NumberStyles.Any);\ndecimal fivePointTwo = decimal.Parse (\"$5.20\", NumberStyles.Currency);\n```", "```cs\nNumberFormatInfo ni = new NumberFormatInfo();\nni.CurrencySymbol = \"€\";\nni.CurrencyGroupSeparator = \" \";\ndouble million = double.Parse (\"€1 000 000\", NumberStyles.Currency, ni);\n```", "```cs\nnew DateTime (2000, 1, 2,  17, 18, 19);\n```", "```cs\nyyyy-MM-dd HH:mm:ss\n```", "```cs\nstring s = DateTime.Now.ToString (\"o\");\n```", "```cs\nyyyy-MM-ddTHH:mm:ss K\n```", "```cs\nDateTime dt1 = DateTime.ParseExact (s, \"o\", null);\n```", "```cs\nDateTime dt2 = DateTime.Parse (s);\n```", "```cs\nNone,\nAllowLeadingWhite, AllowTrailingWhite, AllowInnerWhite,\nAssumeLocal, AssumeUniversal, AdjustToUniversal,\nNoCurrentDateDefault, RoundTripKind\n```", "```cs\nAllowWhiteSpaces = AllowLeadingWhite | AllowTrailingWhite | AllowInnerWhite\n```", "```cs\nConsole.WriteLine (System.ConsoleColor.Red.ToString (formatString));\n```", "```cs\ndouble d = 3.9;\nint i = Convert.ToInt32 (d);    // i == 4\n```", "```cs\nint thirty = Convert.ToInt32  (\"1E\", 16);    // Parse in hexadecimal\nuint five  = Convert.ToUInt32 (\"101\", 2);    // Parse in binary\n```", "```cs\npublic static object ChangeType (object value, Type conversionType);\n```", "```cs\nType targetType = typeof (int);\nobject source = \"42\";\n\nobject result = Convert.ChangeType (source, targetType);\n\nConsole.WriteLine (result);             // 42\nConsole.WriteLine (result.GetType());   // System.Int32\n```", "```cs\nstring s = XmlConvert.ToString (true);         // s = \"true\"\nbool isTrue = XmlConvert.ToBoolean (s);\n```", "```cs\nUnspecified, Local, Utc, RoundtripKind\n```", "```cs\n2010-02-22T14:08:30.9375           // Unspecified\n2010-02-22T14:07:30.9375+09:00     // Local\n2010-02-22T05:08:30.9375Z          // Utc\n```", "```cs\nTypeConverter cc = TypeDescriptor.GetConverter (typeof (Color));\n```", "```cs\nColor beige  = (Color) cc.ConvertFromString (\"Beige\");\nColor purple = (Color) cc.ConvertFromString (\"#800080\");\nColor window = (Color) cc.ConvertFromString (\"Window\");\n```", "```cs\nforeach (byte b in BitConverter.GetBytes (3.5))\n  Console.Write (b + \" \");                          // 0 0 0 0 0 0 12 64\n```", "```cs\nThread.CurrentThread.CurrentCulture = CultureInfo.GetCultureInfo (\"tr-TR\");\n```", "```cs\nBigInteger twentyFive = 25;      // implicit conversion from integer\n```", "```cs\nBigInteger googol = BigInteger.Pow (10, 100);\n```", "```cs\nBigInteger googol = BigInteger.Parse (\"1\".PadRight (101, '0'));\n```", "```cs\nConsole.WriteLine (googol.ToString()); // 10000000000000000000000000000\n00000000000000000000000000000000000000000000000000000000000000000000000\n```", "```cs\ndouble g2 = (double) googol;        // Explicit cast\nBigInteger g3 = (BigInteger) g2;    // Explicit cast\nConsole.WriteLine (g3);\n```", "```cs\n9999999999999999673361688041166912...\n```", "```cs\n// This uses the System.Security.Cryptography namespace:\nRandomNumberGenerator rand = RandomNumberGenerator.Create();\nbyte[] bytes = new byte [32];\nrand.GetBytes (bytes);\nvar bigRandomNumber = new BigInteger (bytes);   // Convert to BigInteger\n```", "```cs\nHalf h = (Half) 123.456;\nConsole.WriteLine (h);     // 123.44  (note loss of precision)\n```", "```cs\nConsole.WriteLine (Half.MinValue);   // -65500\nConsole.WriteLine (Half.MaxValue);   // 65500\n```", "```cs\nConsole.WriteLine ((Half)65500);     // 65500\nConsole.WriteLine ((Half)65490);     // 65500\nConsole.WriteLine ((Half)65480);     // 65470\n```", "```cs\nvar c1 = new Complex (2, 3.5);\nvar c2 = new Complex (3, 0);\n```", "```cs\nConsole.WriteLine (c1.Real);       // 2\nConsole.WriteLine (c1.Imaginary);  // 3.5\nConsole.WriteLine (c1.Phase);      // 1.05165021254837\nConsole.WriteLine (c1.Magnitude);  // 4.03112887414927\n```", "```cs\nComplex c3 = Complex.FromPolarCoordinates (1.3, 5);\n```", "```cs\nConsole.WriteLine (c1 + c2);    // (5, 3.5)\nConsole.WriteLine (c1 * c2);    // (6, 10.5)\n```", "```cs\nRandom r1 = new Random (1);\nRandom r2 = new Random (1);\nConsole.WriteLine (r1.Next (100) + \", \" + r1.Next (100));      // 24, 11\nConsole.WriteLine (r2.Next (100) + \", \" + r2.Next (100));      // 24, 11\n```", "```cs\nint[] numbers = { 10, 20, 30, 40, 50 };\nint[] randomTwo = new Random().GetItems (numbers, 2);\n```", "```cs\nvar rand = System.Security.Cryptography.RandomNumberGenerator.Create();\nbyte[] bytes = new byte [32];\nrand.GetBytes (bytes);       // Fill the byte array with random numbers.\n```", "```cs\nbyte[] bytes = new byte [4];\nrand.GetBytes (bytes);\nint i = BitConverter.ToInt32 (bytes, 0);\n```", "```cs\nDisplay (Nut.Macadamia);     // Nut.Macadamia\nDisplay (Size.Large);        // Size.Large\n\nvoid Display (Enum value)\n{\n  Console.WriteLine (value.GetType().Name + \".\" + value.ToString());\n}\n\nenum Nut  { Walnut, Hazelnut, Macadamia }\nenum Size { Small, Medium, Large }\n```", "```cs\n[Flags] \npublic enum BorderSides { Left=1, Right=2, Top=4, Bottom=8 }\n...\nint i = (int) BorderSides.Top;            // i == 4\nBorderSides side = (BorderSides) i;       // side == BorderSides.Top\n```", "```cs\nstatic int GetIntegralValue (Enum anyEnum)\n{\n  return (int) (object) anyEnum;\n}\n```", "```cs\nstatic decimal GetAnyIntegralValue (Enum anyEnum)\n{\n  return Convert.ToDecimal (anyEnum);\n}\n```", "```cs\nstatic object GetBoxedIntegralValue (Enum anyEnum)\n{\n  Type integralType = Enum.GetUnderlyingType (anyEnum.GetType());\n  return Convert.ChangeType (anyEnum, integralType);\n}\n```", "```cs\nobject result = GetBoxedIntegralValue (BorderSides.Top);\nConsole.WriteLine (result);                               // 4\nConsole.WriteLine (result.GetType());                     // System.Int32\n```", "```cs\nstatic string GetIntegralValueAsString (Enum anyEnum)\n{\n  return anyEnum.ToString (\"D\");      // returns something like \"4\"\n}\n```", "```cs\nobject bs = Enum.ToObject (typeof (BorderSides), 3);\nConsole.WriteLine (bs);                              // Left, Right\n```", "```cs\nBorderSides bs = (BorderSides) 3;\n```", "```cs\nBorderSides leftRight = (BorderSides) Enum.Parse (typeof (BorderSides),\n                                                  \"Left, Right\");\n```", "```cs\nforeach (Enum value in Enum.GetValues (typeof (BorderSides)))\n  Console.WriteLine (value);\n```", "```cs\n[Flags] public enum BorderSides { Left=1, Right=2, Top=4, Bottom=8 }\n...\nBorderSides b = BorderSides.Left;\nb += 1234;                          // No error!\n```", "```cs\n[Flags] public enum BorderSides { Left=1, Right=2, Top=4, Bottom=8 }\n...\nConsole.WriteLine (BorderSides.Right.ToString());        // Right\nConsole.WriteLine (BorderSides.Right.GetType().Name);    // BorderSides\n```", "```cs\nGuid g = Guid.NewGuid ();\nConsole.WriteLine (g.ToString());  // 0d57629c-7d6e-4847-97cb-9e2fc25083fe\n```", "```cs\npublic Guid (byte[] b);    // Accepts a 16-byte array\npublic Guid (string g);    // Accepts a formatted string\n```", "```cs\nGuid g1 = new Guid (\"{0d57629c-7d6e-4847-97cb-9e2fc25083fe}\");\nGuid g2 = new Guid (\"0d57629c7d6e484797cb9e2fc25083fe\");\nConsole.WriteLine (g1 == g2);  // True\n```", "```cs\nint x = 5, y = 5;\nConsole.WriteLine (x == y);   // True *(by virtue of value equality)*\n```", "```cs\nvar dt1 = new DateTimeOffset (2010, 1, 1, 1, 1, 1, TimeSpan.FromHours(8));\nvar dt2 = new DateTimeOffset (2010, 1, 1, 2, 1, 1, TimeSpan.FromHours(9));\nConsole.WriteLine (dt1 == dt2);   // True\n```", "```cs\nclass Foo { public int X; }\n...\nFoo f1 = new Foo { X = 5 };\nFoo f2 = new Foo { X = 5 };\nConsole.WriteLine (f1 == f2);   // False\n```", "```cs\nFoo f3 = f1;\nConsole.WriteLine (f1 == f3);   // True\n```", "```cs\nUri uri1 = new Uri (\"http://www.linqpad.net\");\nUri uri2 = new Uri (\"http://www.linqpad.net\");\nConsole.WriteLine (uri1 == uri2);              // True\n```", "```cs\nvar s1 = \"http://www.linqpad.net\";\nvar s2 = \"http://\" + \"www.linqpad.net\";\nConsole.WriteLine (s1 == s2);       // True\n```", "```cs\nint x = 5;\nint y = 5;\nConsole.WriteLine (x == y);      // True\n```", "```cs\nobject x = 5;\nobject y = 5;\nConsole.WriteLine (x == y);      // False\n```", "```cs\nobject x = 5;\nobject y = 5;\nConsole.WriteLine (x.Equals (y));      // True\n```", "```cs\npublic static bool AreEqual (object obj1, object obj2) \n  => obj1.Equals (obj2);\n```", "```cs\npublic static bool AreEqual (object obj1, object obj2)\n{\n  if (obj1 == null) return obj2 == null;\n  return obj1.Equals (obj2);\n}\n```", "```cs\npublic static bool AreEqual (object obj1, object obj2)\n  => obj1 == null ? obj2 == null : obj1.Equals (obj2);\n```", "```cs\npublic static bool Equals (object objA, object objB)\n```", "```cs\nobject x = 3, y = 3;\nConsole.WriteLine (object.Equals (x, y));   // True\nx = null;\nConsole.WriteLine (object.Equals (x, y));   // False\ny = null;\nConsole.WriteLine (object.Equals (x, y));   // True\n```", "```cs\nclass Test <T>\n{\n  T _value;\n  public void SetValue (T newValue)\n  {\n    if (!object.Equals (newValue, _value))\n    {\n      _value = newValue;\n      OnValueChanged();\n    }\n  }\n  protected virtual void OnValueChanged() { ... }\n}\n```", "```cs\nif (!EqualityComparer<T>.Default.Equals (newValue, _value))\n```", "```cs\nWidget w1 = new Widget();\nWidget w2 = new Widget();\nConsole.WriteLine (object.ReferenceEquals (w1, w2));     // False\n\nclass Widget { ... }\n```", "```cs\npublic interface IEquatable<T>\n{\n  bool Equals (T other);\n}\n```", "```cs\nclass Test<T> where T : IEquatable<T>\n{\n  public bool IsEqual (T a, T b)\n  {\n    return a.Equals (b);     // No boxing with generic T\n  }\n}\n```", "```cs\ndouble x = double.NaN;\nConsole.WriteLine (x == x);            // False\nConsole.WriteLine (x.Equals (x));      // True\n```", "```cs\nvar sb1 = new StringBuilder (\"foo\");\nvar sb2 = new StringBuilder (\"foo\");\nConsole.WriteLine (sb1 == sb2);          // False *(referential equality)*\nConsole.WriteLine (sb1.Equals (sb2));    // True  *(value equality)*\n```", "```cs\nrecord Test (int X, int Y)\n{\n  public virtual bool Equals (Test t) => t != null && t.X == X && t.Y == Y;\n}\n```", "```cs\nSystem.Collections.Hashtable\nSystem.Collections.Generic.Dictionary<TKey,TValue>\n```", "```cs\nvar sb1 = new StringBuilder (\"foo\");\nvar sb2 = new StringBuilder (\"foo\");\nConsole.WriteLine (sb1 == sb2);          // False *(referential equality)*\nConsole.WriteLine (sb1.Equals (sb2));    // True  *(value equality)*\n```", "```cs\npublic struct Area : IEquatable <Area>\n{\n  public readonly int Measure1;\n  public readonly int Measure2;\n\n  public Area (int m1, int m2)\n  {\n    Measure1 = Math.Min (m1, m2);\n    Measure2 = Math.Max (m1, m2);\n  }\n\n  public override bool Equals (object other)\n    => other is Area a && Equals (a);    // Calls method below\n\n  public bool Equals (Area other)        // Implements IEquatable<Area>\n    => Measure1 == other.Measure1 && Measure2 == other.Measure2;\n\n  public override int GetHashCode()\n    => HashCode.Combine (Measure1, Measure2);\n\n  // Note that we call the static Equals method in the object class: this\n  // does null checking before calling our own (instance) Equals method.\n  public static bool operator == (Area a1, Area a2) => Equals (a1, a2);\n\n  public static bool operator != (Area a1, Area a2) => !(a1 == a2);\n}\n```", "```cs\nArea a1 = new Area (5, 10);\nArea a2 = new Area (10, 5);\nConsole.WriteLine (a1.Equals (a2));    // True\nConsole.WriteLine (a1 == a2);          // True\n```", "```cs\nstring[] colors = { \"Green\", \"Red\", \"Blue\" };\nArray.Sort (colors);\nforeach (string c in colors) Console.Write (c + \" \");   // Blue Green Red\n```", "```cs\npublic interface IComparable       { int CompareTo (object other); }\npublic interface IComparable<in T> { int CompareTo (T other);      }\n```", "```cs\nConsole.WriteLine (\"Beck\".CompareTo (\"Anne\"));       // 1\nConsole.WriteLine (\"Beck\".CompareTo (\"Beck\"));       // 0\nConsole.WriteLine (\"Beck\".CompareTo (\"Chris\"));      // -1\n```", "```cs\nif (Equals (other)) return 0;\n```", "```cs\nbool after2010 = DateTime.Now > new DateTime (2010, 1, 1);\n```", "```cs\nbool error = \"Beck\" > \"Anne\";       // Compile-time error\n```", "```cs\npublic struct Note : IComparable<Note>, IEquatable<Note>, IComparable\n{\n  int _semitonesFromA;\n  public int SemitonesFromA { get { return _semitonesFromA; } }\n\n  public Note (int semitonesFromA)\n  {\n    _semitonesFromA = semitonesFromA;\n  }\n\n  public int CompareTo (Note other)            // Generic IComparable<T>\n  {\n    if (Equals (other)) return 0;    // Fail-safe check\n    return _semitonesFromA.CompareTo (other._semitonesFromA);\n  }\n\n  int IComparable.CompareTo (object other)     // Nongeneric IComparable\n  {\n    if (!(other is Note))\n      throw new InvalidOperationException (\"CompareTo: Not a note\");\n    return CompareTo ((Note) other);\n  }\n\n  public static bool operator < (Note n1, Note n2)\n     => n1.CompareTo (n2) < 0;\n\n  public static bool operator > (Note n1, Note n2)\n    => n1.CompareTo (n2) > 0;\n\n  public bool Equals (Note other)    // for IEquatable<Note>\n    => _semitonesFromA == other._semitonesFromA;\n\n  public override bool Equals (object other)\n  {\n    if (!(other is Note)) return false;\n    return Equals ((Note) other);\n  }\n\n  public override int GetHashCode() => _semitonesFromA.GetHashCode();\n\n  // Call the static Equals method to ensure nulls are properly handled:\n  public static bool operator == (Note n1, Note n2) => Equals (n1, n2);\n\n  public static bool operator != (Note n1, Note n2) => !(n1 == n2);\n}\n```", "```cs\nConsole.WindowWidth = Console.LargestWindowWidth;\nConsole.ForegroundColor = ConsoleColor.Green;\nConsole.Write (\"test... 50%\");\nConsole.CursorLeft -= 3;\nConsole.Write (\"90%\");     // test... 90%\n```", "```cs\n// First save existing output writer:\nSystem.IO.TextWriter oldOut = Console.Out;\n\n// Redirect the console's output to a file:\nusing (System.IO.TextWriter w = System.IO.File.CreateText\n                                (\"e:\\\\output.txt\"))\n{\n  Console.SetOut (w);\n  Console.WriteLine (\"Hello world\");\n}\n\n// Restore standard console output\nConsole.SetOut (oldOut);\n```", "```cs\nLauncher.LaunchUriAsync (new Uri (\"http://albahari.com\"));\n\nvar file = await KnownFolders.DocumentsLibrary\n                             .GetFileAsync (\"foo.txt\");\nLauncher.LaunchFileAsync (file);\n```", "```cs\nProcess.Start (\"notepad.exe\");\nProcess.Start (\"notepad.exe\", \"e:\\\\file.txt\");\n```", "```cs\nProcessStartInfo psi = new ProcessStartInfo\n{\n  FileName = \"cmd.exe\",\n  Arguments = \"/c ipconfig /all\",\n  RedirectStandardOutput = true,\n  UseShellExecute = false\n};\nProcess p = Process.Start (psi);\nstring result = p.StandardOutput.ReadToEnd();\nConsole.WriteLine (result);\n```", "```cs\n(string output, string errors) Run (string exePath, string args = \"\")\n{\n  using var p = Process.Start (new ProcessStartInfo (exePath, args)\n  {\n    RedirectStandardOutput = true,\n    RedirectStandardError = true,\n    UseShellExecute = false,    \n  });\n\n  var errors = new StringBuilder ();\n\n  // Read from the error stream asynchronously...\n  p.ErrorDataReceived += (sender, errorArgs) =>\n  {\n    if (errorArgs.Data != null) errors.AppendLine (errorArgs.Data);\n  };\n  p.BeginErrorReadLine ();\n\n  // ...while we read from the output stream synchronously:\n  string output = p.StandardOutput.ReadToEnd();\n\n  p.WaitForExit();\n  return (output, errors.ToString());\n}\n```", "```cs\nAppContext.SetSwitch (\"MyLibrary.SomeBreakingChange\", true);\n```", "```cs\nbool isDefined, switchValue;\nisDefined = AppContext.TryGetSwitch (\"MyLibrary.SomeBreakingChange\",\n                                      out switchValue);\n```", "```cs\nbool switchValue = AppContext.GetSwitch (\"...\") ?? false;\n```"]