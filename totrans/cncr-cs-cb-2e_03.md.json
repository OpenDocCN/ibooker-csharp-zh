["```cs\nasync IAsyncEnumerable<int> GetValuesAsync()\n{\n  await Task.Delay(1000); // some asynchronous work\n  yield return 10;\n  await Task.Delay(1000); // more asynchronous work\n  yield return 13;\n}\n```", "```cs\nasync IAsyncEnumerable<string> GetValuesAsync(HttpClient client)\n{\n  int offset = 0;\n  const int limit = 10;\n  while (true)\n  {\n    // Get the current page of results and parse them.\n    string result = await client.GetStringAsync(\n        $\"https://example.com/api/values?offset={offset}&limit={limit}\");\n    string[] valuesOnThisPage = result.Split('\\n');\n\n    // Produce the results for this page.\n    foreach (string value in valuesOnThisPage)\n      yield return value;\n\n    // If this is the last page, we're done.\n    if (valuesOnThisPage.Length != limit)\n      break;\n\n    // Otherwise, proceed to the next page.\n    offset += limit;\n  }\n}\n```", "```cs\nIAsyncEnumerable<string> GetValuesAsync(HttpClient client);\n\npublic async Task ProcessValueAsync(HttpClient client)\n{\n  await foreach (string value in GetValuesAsync(client))\n  {\n    Console.WriteLine(value);\n  }\n}\n```", "```cs\nIAsyncEnumerable<string> GetValuesAsync(HttpClient client);\n\npublic async Task ProcessValueAsync(HttpClient client)\n{\n  await foreach (string value in GetValuesAsync(client))\n  {\n    await Task.Delay(100); // asynchronous work\n    Console.WriteLine(value);\n  }\n}\n```", "```cs\nIAsyncEnumerable<string> GetValuesAsync(HttpClient client);\n\npublic async Task ProcessValueAsync(HttpClient client)\n{\n  await foreach (string value in GetValuesAsync(client).ConfigureAwait(false))\n  {\n    await Task.Delay(100).ConfigureAwait(false); // asynchronous work\n    Console.WriteLine(value);\n  }\n}\n```", "```cs\nIAsyncEnumerable<int> values = SlowRange().WhereAwait(\n    async value =>\n    {\n      // Do some asynchronous work to determine\n      //  if this element should be included.\n      await Task.Delay(10);\n      return value % 2 == 0;\n    });\n\nawait foreach (int result in values)\n{\n  Console.WriteLine(result);\n}\n\n// Produce sequence that slows down as it progresses.\nasync IAsyncEnumerable<int> SlowRange()\n{\n  for (int i = 0; i != 10; ++i)\n  {\n    await Task.Delay(i * 100);\n    yield return i;\n  }\n}\n```", "```cs\nIAsyncEnumerable<int> values = SlowRange().Where(\n    value => value % 2 == 0);\n\nawait foreach (int result in values)\n{\n  Console.WriteLine(result);\n}\n```", "```cs\nint count = await SlowRange().CountAsync(\n    value => value % 2 == 0);\n```", "```cs\nint count = await SlowRange().CountAwaitAsync(\n    async value =>\n    {\n      await Task.Delay(10);\n      return value % 2 == 0;\n    });\n```", "```cs\nawait foreach (int result in SlowRange())\n{\n  Console.WriteLine(result);\n  if (result >= 8)\n    break;\n}\n\n// Produce sequence that slows down as it progresses.\nasync IAsyncEnumerable<int> SlowRange()\n{\n  for (int i = 0; i != 10; ++i)\n  {\n    await Task.Delay(i * 100);\n    yield return i;\n  }\n}\n```", "```cs\nusing var cts = new CancellationTokenSource(500);\nCancellationToken token = cts.Token;\nawait foreach (int result in SlowRange(token))\n{\n  Console.WriteLine(result);\n}\n\n// Produce sequence that slows down as it progresses.\nasync IAsyncEnumerable<int> SlowRange(\n [EnumeratorCancellation] CancellationToken token = default)\n{\n  for (int i = 0; i != 10; ++i)\n  {\n    await Task.Delay(i * 100, token);\n    yield return i;\n  }\n}\n```", "```cs\nasync Task ConsumeSequence(IAsyncEnumerable<int> items)\n{\n  using var cts = new CancellationTokenSource(500);\n  CancellationToken token = cts.Token;\n  await foreach (int result in items.WithCancellation(token))\n  {\n    Console.WriteLine(result);\n  }\n}\n\n// Produce sequence that slows down as it progresses.\nasync IAsyncEnumerable<int> SlowRange(\n [EnumeratorCancellation] CancellationToken token = default)\n{\n  for (int i = 0; i != 10; ++i)\n  {\n    await Task.Delay(i * 100, token);\n    yield return i;\n  }\n}\n\nawait ConsumeSequence(SlowRange());\n```", "```cs\nasync Task ConsumeSequence(IAsyncEnumerable<int> items)\n{\n  using var cts = new CancellationTokenSource(500);\n  CancellationToken token = cts.Token;\n  await foreach (int result in items\n      .WithCancellation(token).ConfigureAwait(false))\n  {\n    Console.WriteLine(result);\n  }\n}\n```"]