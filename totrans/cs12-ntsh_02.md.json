["```cs\nint x = 12 * 30;                  // Statement 1\nSystem.Console.WriteLine (x);     // Statement 2\n```", "```cs\nusing System;             // Import the System namespace\n\nint x = 12 * 30;\nConsole.WriteLine (x);    // No need to specify System.\n```", "```cs\nusing System;\n\nConsole.WriteLine (FeetToInches (30));      // 360\nConsole.WriteLine (FeetToInches (100));     // 1200\n\nint FeetToInches (int feet)\n{\n  int inches = feet * 12;\n  return inches;\n}\n```", "```cs\nint FeetToInches (int feet)\n...\n```", "```cs\nusing System;\nSayHello();\n\nvoid SayHello()\n{\n  Console.WriteLine (\"Hello, world\");\n}\n```", "```cs\ndotnet new Console -n MyFirstProgram\n```", "```cs\ndotnet run MyFirstProgram\n```", "```cs\ndotnet build MyFirstProgram.csproj\n```", "```cs\nusing System;\n\nint x = 12 * 30;\nConsole.WriteLine (x);\n```", "```cs\nSystem   x   Console   WriteLine\n```", "```cs\nint using = 123;      // Illegal\nint @using = 123;     // Legal\n```", "```cs\nConsole.WriteLine\n  (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10);\n```", "```cs\n=  *  .  ()\n```", "```cs\nint x = 3;   // Comment about assigning 3 to x\n```", "```cs\nint x = 3;   /* This is a comment that\n                spans two lines */\n```", "```cs\nint x = 12 * 30;\nConsole.WriteLine (x);\n```", "```cs\nconst int y = 360;\n```", "```cs\nint x = 12 * 30;\n```", "```cs\nstring message = \"Hello world\";\nstring upperMessage = message.ToUpper();\nConsole.WriteLine (upperMessage);               // HELLO WORLD\n\nint x = 2022;\nmessage = message + x.ToString();\nConsole.WriteLine (message);                    // Hello world2022\n```", "```cs\nbool simpleVar = false;\nif (simpleVar)\n  Console.WriteLine (\"This will not print\");\n\nint x = 5000;\nbool lessThanAMile = x < 5280;\nif (lessThanAMile)\n  Console.WriteLine (\"This will print\");\n```", "```cs\nUnitConverter feetToInchesConverter = new UnitConverter (12);\nUnitConverter milesToFeetConverter  = new UnitConverter (5280);\n\nConsole.WriteLine (feetToInchesConverter.Convert(30));    // 360\nConsole.WriteLine (feetToInchesConverter.Convert(100));   // 1200\n\nConsole.WriteLine (feetToInchesConverter.Convert(\n                   milesToFeetConverter.Convert(1)));     // 63360\n\npublic class UnitConverter\n{\n  int ratio;                              // Field\n\n  public UnitConverter (int unitRatio)    // Constructor\n  {\n     ratio = unitRatio;\n  } \n\n  public int Convert (int unit)           // Method\n  {\n     return unit * ratio;\n  } \n}\n```", "```cs\nUnitConverter feetToInchesConverter = new UnitConverter (12);\n```", "```cs\npublic UnitConverter (int unitRatio) { ratio = unitRatio; }\n```", "```cs\nPanda p1 = new Panda (\"Pan Dee\");\nPanda p2 = new Panda (\"Pan Dah\");\n\nConsole.WriteLine (p1.Name);      // Pan Dee\nConsole.WriteLine (p2.Name);      // Pan Dah\n\nConsole.WriteLine (Panda.Population);   // 2\n\npublic class Panda\n{\n  public string Name;             // Instance field\n  public static int Population;   // Static field\n\n  public Panda (string n)         // Constructor\n  {\n    Name = n;                     // Assign the instance field\n    Population = Population + 1;  // Increment the static Population field\n  }\n}\n```", "```cs\nusing System;\nusing Animals;\n\nPanda p = new Panda (\"Pan Dee\");\nConsole.WriteLine (p.Name);\n\nnamespace Animals\n{\n  public class Panda\n  {\n     ...\n  }\n}\n```", "```cs\nAnimals.Panda p = new Animals.Panda (\"Pan Dee\");\n```", "```cs\nusing System;\n\nclass Program\n{\n  static void Main()   // Program entry point\n  {\n    int x = 12 * 30;\n    Console.WriteLine (x);\n  }\n}\n```", "```cs\nstatic int Main (string[] args) {...}\n```", "```cs\nint x = 12345;       // int is a 32-bit integer\nlong y = x;          // Implicit conversion to 64-bit integer\nshort z = (short)x;  // Explicit conversion to 16-bit integer\n```", "```cs\npublic struct Point { public int X; public int Y; }\n```", "```cs\npublic struct Point { public int X, Y; }\n```", "```cs\nPoint p1 = new Point();\np1.X = 7;\n\nPoint p2 = p1;             // Assignment causes copy\n\nConsole.WriteLine (p1.X);  // 7\nConsole.WriteLine (p2.X);  // 7\n\np1.X = 9;                  // Change p1.X\n\nConsole.WriteLine (p1.X);  // 9\nConsole.WriteLine (p2.X);  // 7\n```", "```cs\npublic class Point { public int X, Y; }\n```", "```cs\nPoint p1 = new Point();\np1.X = 7;\n\nPoint p2 = p1;             // Copies p1 reference\n\nConsole.WriteLine (p1.X);  // 7\nConsole.WriteLine (p2.X);  // 7\n\np1.X = 9;                  // Change p1.X\n\nConsole.WriteLine (p1.X);  // 9\nConsole.WriteLine (p2.X);  // 9\n```", "```cs\nPoint p = null;\nConsole.WriteLine (p == null);   // True\n\n// The following line generates a runtime error\n// (a NullReferenceException is thrown):\nConsole.WriteLine (p.X);\n\nclass Point {...}\n```", "```cs\nPoint p = null;  // Compile-time error\nint x = null;    // Compile-time error\n\nstruct Point {...}\n```", "```cs\nstruct Point\n{\n  int x;  // 4 bytes\n  int y;  // 4 bytes\n}\n```", "```cs\nstruct A { byte b; long l; }\n```", "```cs\nint i = 5;\nSystem.Int32 i = 5;\n```", "```cs\n                   // Underlying hexadecimal representation\nint i = 7;         // 0x7\nbool b = true;     // 0x1\nchar c = 'A';      // 0x41\nfloat f = 0.5f;    // uses IEEE floating-point encoding\n```", "```cs\nint x = 127;\nlong y = 0x7F;\n```", "```cs\nint million = 1_000_000;\n```", "```cs\nvar b = 0b1010_1011_1100_1101_1110_1111;\n```", "```cs\ndouble d = 1.5;\ndouble million = 1E06;\n```", "```cs\nConsole.WriteLine (        1.0.GetType());  // Double  *(double)*\nConsole.WriteLine (       1E06.GetType());  // Double  *(double)*\nConsole.WriteLine (          1.GetType());  // Int32   *(int)*\nConsole.WriteLine ( 0xF0000000.GetType());  // UInt32  *(uint)*\nConsole.WriteLine (0x100000000.GetType());  // Int64   *(long)*\n```", "```cs\nlong i = 5;     // Implicit lossless conversion from int literal to long\n```", "```cs\ndouble x = 4.0;\n```", "```cs\nfloat f = 4.5F;\n```", "```cs\ndecimal d = -1.23M;     // Will not compile without the M suffix.\n```", "```cs\nint x = 12345;       // int is a 32-bit integer\nlong y = x;          // Implicit conversion to 64-bit integral type\nshort z = (short)x;  // Explicit conversion to 16-bit integral type\n```", "```cs\nint i = 1;\nfloat f = i;\n```", "```cs\nint i2 = (int)f;\n```", "```cs\nint i1 = 100000001;\nfloat f = i1;          // Magnitude preserved, precision lost\nint i2 = (int)f;       // 100000000\n```", "```cs\n+    Addition\n-    Subtraction\n*    Multiplication\n/    Division\n%    Remainder after division\n```", "```cs\nint x = 0, y = 0;\nConsole.WriteLine (x++);   // Outputs 0; x is now 1\nConsole.WriteLine (++y);   // Outputs 1; y is now 1\n```", "```cs\nint a = 2 / 3;      // 0\n\nint b = 0;\nint c = 5 / b;      // throws DivideByZeroException\n```", "```cs\nint a = int.MinValue;\na--;\nConsole.WriteLine (a == int.MaxValue); // True\n```", "```cs\nint a = 1000000;\nint b = 1000000;\n\nint c = checked (a * b);      // Checks just the expression.\n\nchecked                       // Checks all expressions\n{                             // in statement block.\n   ...\n   c = a * b;\n   ...\n}\n```", "```cs\nint x = int.MaxValue;\nint y = unchecked (x + 1);\nunchecked { int z = x + 1; }\n```", "```cs\nint x = int.MaxValue + 1;               // Compile-time error\nint y = unchecked (int.MaxValue + 1);   // No errors\n```", "```cs\nshort x = 1, y = 1;\nshort z = x + y;          // Compile-time error\n```", "```cs\nshort z = (short) (x + y);   // OK\n```", "```cs\nConsole.WriteLine (double.NegativeInfinity);   // -Infinity\n```", "```cs\nConsole.WriteLine ( 1.0 /  0.0);                  //  Infinity\nConsole.WriteLine (−1.0 /  0.0);                  // -Infinity\nConsole.WriteLine ( 1.0 / −0.0);                  // -Infinity\nConsole.WriteLine (−1.0 / −0.0);                  //  Infinity\n```", "```cs\nConsole.WriteLine ( 0.0 /  0.0);                  //  NaN\nConsole.WriteLine ((1.0 /  0.0) − (1.0 / 0.0));   //  NaN\n```", "```cs\nConsole.WriteLine (0.0 / 0.0 == double.NaN);    // False\n```", "```cs\nConsole.WriteLine (double.IsNaN (0.0 / 0.0));   // True\n```", "```cs\nConsole.WriteLine (object.Equals (0.0 / 0.0, double.NaN));   // True\n```", "```cs\nfloat x = 0.1f;  // Not quite 0.1\nConsole.WriteLine (x + x + x + x + x + x + x + x + x + x);    // 1.0000001\n```", "```cs\ndecimal m = 1M / 6M;               // 0.1666666666666666666666666667M\ndouble  d = 1.0 / 6.0;             // 0.16666666666666666\n```", "```cs\ndecimal notQuiteWholeM = m+m+m+m+m+m;  // 1.0000000000000000000000000002M\ndouble  notQuiteWholeD = d+d+d+d+d+d;  // 0.99999999999999989\n```", "```cs\nConsole.WriteLine (notQuiteWholeM == 1M);   // False\nConsole.WriteLine (notQuiteWholeD < 1.0);   // True\n```", "```cs\nint x = 1;\nint y = 2;\nint z = 1;\nConsole.WriteLine (x == y);         // False\nConsole.WriteLine (x == z);         // True\n```", "```cs\nDude d1 = new Dude (\"John\");\nDude d2 = new Dude (\"John\");\nConsole.WriteLine (d1 == d2);       // False\nDude d3 = d1;\nConsole.WriteLine (d1 == d3);       // True\n\npublic class Dude\n{\n  public string Name;\n  public Dude (string n) { Name = n; }\n}\n```", "```cs\nstatic bool UseUmbrella (bool rainy, bool sunny, bool windy)\n{\n  return !windy && (rainy || sunny);\n}\n```", "```cs\nif (sb != null && sb.Length > 0) ...\n```", "```cs\nreturn !windy & (rainy | sunny);\n```", "```cs\nstatic int Max (int a, int b)\n{\n  return (a > b) ? a : b;\n}\n```", "```cs\nchar c = 'A';       // Simple character\n```", "```cs\nchar newLine = '\\n';\nchar backSlash = '\\\\';\n```", "```cs\nchar copyrightSymbol = '\\u00A9';\nchar omegaSymbol     = '\\u03A9';\nchar newLine         = '\\u000A';\n```", "```cs\nstring a = \"Heat\";\n```", "```cs\nstring a = \"test\";\nstring b = \"test\";\nConsole.Write (a == b);  // True\n```", "```cs\nstring a = \"Here's a tab:\\t\";\n```", "```cs\nstring a1 = \"\\\\\\\\server\\\\fileshare\\\\helloworld.cs\";\n```", "```cs\nstring a2 = @\"\\\\server\\fileshare\\helloworld.cs\";\n```", "```cs\nstring escaped  = \"First Line\\r\\nSecond Line\";\nstring verbatim = @\"First Line\nSecond Line\";\n\n// True if your text editor uses CR-LF line separators:\nConsole.WriteLine (escaped == verbatim);\n```", "```cs\nstring xml = @\"<customer id=\"\"123\"\"></customer>\";\n```", "```cs\nstring raw = \"\"\"<file path=\"c:\\temp\\test.txt\"></file>\"\"\";\n```", "```cs\nstring raw = \"\"\"\"The \"\"\" sequence denotes raw string literals.\"\"\"\";\n```", "```cs\nstring multiLineRaw = \"\"\"\n  Line 1\n  Line 2\n  \"\"\";\n```", "```cs\nif (true)\n  Console.WriteLine (\"\"\"\n    {\n      \"Name\" : \"Joe\"\n    }\n    \"\"\");\n```", "```cs\n{\n  \"Name\" : \"Joe\"\n}\n```", "```cs\nstring s = \"a\" + \"b\";\n```", "```cs\nstring s = \"a\" + 5;  // a5\n```", "```cs\nint x = 4;\nConsole.Write ($\"A square has {x} sides\");  // Prints: A square has 4 sides\n```", "```cs\nstring s = $\"255 in hex is {byte.MaxValue:X2}\";  // X2 = 2-digit hexadecimal\n// Evaluates to \"255 in hex is FF\"\n```", "```cs\nbool b = true;\nConsole.WriteLine ($\"The answer in binary is {(b ? 1 : 0)}\");\n```", "```cs\nconst string greeting = \"Hello\";\nconst string message = $\"{greeting}, world\";\n```", "```cs\nstring s = $\"this interpolation spans {1 +\n1} lines\";\n```", "```cs\nstring s = $\"\"\"The date and time is {DateTime.Now}\"\"\";\n```", "```cs\nConsole.WriteLine ($$\"\"\"{ \"TimeStamp\": \"{{DateTime.Now}}\" }\"\"\");\n// Output: { \"TimeStamp\": \"01/01/2024 12:13:25 PM\" }\n```", "```cs\nReadOnlySpan<byte> utf8 = \"ab→cd\"u8;  // Arrow symbol consumes 3 bytes\nConsole.WriteLine (utf8.Length);      // 7\n```", "```cs\nchar[] vowels = new char[5];    // Declare an array of 5 characters\n```", "```cs\nvowels[0] = 'a';\nvowels[1] = 'e';\nvowels[2] = 'i';\nvowels[3] = 'o';\nvowels[4] = 'u';\nConsole.WriteLine (vowels[1]);      // e\n```", "```cs\nfor (int i = 0; i < vowels.Length; i++)\n  Console.Write (vowels[i]);            // aeiou\n```", "```cs\nchar[] vowels = new char[] {'a','e','i','o','u'};\n```", "```cs\nchar[] vowels = {'a','e','i','o','u'};\n```", "```cs\nchar[] vowels = ['a','e','i','o','u'];\n```", "```cs\nFoo (['a','e','i','o','u']);\n\nvoid Foo (char[] letters) { ... }\n```", "```cs\nint[] a = new int[1000];\nConsole.Write (a[123]);            // 0\n```", "```cs\nPoint[] a = new Point[1000];\nint x = a[500].X;                  // 0\n\npublic struct Point { public int X, Y; }\n```", "```cs\nPoint[] a = new Point[1000];\nint x = a[500].X;                  // Runtime error, NullReferenceException\n\npublic class Point { public int X, Y; }\n```", "```cs\nPoint[] a = new Point[1000];\nfor (int i = 0; i < a.Length; i++) // Iterate i from 0 to 999\n   a[i] = new Point();             // Set array element i with new point\n```", "```cs\nint[] a = null;\n```", "```cs\nchar[] vowels = new char[] {'a','e','i','o','u'};\nchar lastElement  = vowels [^1];   // 'u'\nchar secondToLast = vowels [^2];   // 'o'\n```", "```cs\nIndex first = 0;\nIndex last = ^1;\nchar firstElement = vowels [first];   // 'a'\nchar lastElement = vowels [last];     // 'u'\n```", "```cs\nchar[] firstTwo =  vowels [..2];    // 'a', 'e'\nchar[] lastThree = vowels [2..];    // 'i', 'o', 'u'\nchar[] middleOne = vowels [2..3];   // 'i'\n```", "```cs\nchar[] lastTwo = vowels [^2..];     // 'o', 'u'\n```", "```cs\nRange firstTwoRange = 0..2;\nchar[] firstTwo = vowels [firstTwoRange];   // 'a', 'e'\n```", "```cs\nint[,] matrix = new int[3,3];\n```", "```cs\nfor (int i = 0; i < matrix.GetLength(0); i++)\n  for (int j = 0; j < matrix.GetLength(1); j++)\n    matrix[i,j] = i * 3 + j;\n```", "```cs\nint[,] matrix = new int[,]\n{\n  {0,1,2},\n  {3,4,5},\n  {6,7,8}\n};\n```", "```cs\nint[][] matrix = new int[3][];\n```", "```cs\nfor (int i = 0; i < matrix.Length; i++)\n{\n  matrix[i] = new int[3];                    // Create inner array\n  for (int j = 0; j < matrix[i].Length; j++)\n    matrix[i][j] = i * 3 + j;\n}\n```", "```cs\nint[][] matrix = new int[][]\n{\n  new int[] {0,1,2},\n  new int[] {3,4,5},\n  new int[] {6,7,8,9}\n};\n```", "```cs\nchar[] vowels = {'a','e','i','o','u'};\n\nint[,] rectangularMatrix =\n{\n  {0,1,2},\n  {3,4,5},\n  {6,7,8}\n};\n\nint[][] jaggedMatrix =\n{\n  new int[] {0,1,2},\n  new int[] {3,4,5},\n  new int[] {6,7,8,9}\n};\n```", "```cs\nvar i = 3;           // i is implicitly of type int\nvar s = \"sausage\";   // s is implicitly of type string\n```", "```cs\nvar vowels = new[] {'a','e','i','o','u'};   // Compiler infers char[]\n```", "```cs\nvar rectMatrix = new[,]        // rectMatrix is implicitly of type int[,]\n{\n  {0,1,2},\n  {3,4,5},\n  {6,7,8}\n};\nvar jaggedMat = new int[][]    // jaggedMat is implicitly of type int[][]\n{\n  new[] {0,1,2},\n  new[] {3,4,5},\n  new[] {6,7,8,9}\n};\n```", "```cs\nvar x = new[] {1,10000000000};   // all convertible to long\n```", "```cs\nint[] arr = new int[3];\narr[3] = 1;               // IndexOutOfRangeException thrown\n```", "```cs\nstatic int Factorial (int x)\n{\n  if (x == 0) return 1;\n  return x * Factorial (x-1);\n}\n```", "```cs\nusing System;\nusing System.Text;\n\nStringBuilder ref1 = new StringBuilder (\"object1\");\nConsole.WriteLine (ref1);\n// The StringBuilder referenced by ref1 is now eligible for GC.\n\nStringBuilder ref2 = new StringBuilder (\"object2\");\nStringBuilder ref3 = ref2;\n// The StringBuilder referenced by ref2 is NOT yet eligible for GC.\n\nConsole.WriteLine (ref3);      // object2\n```", "```cs\nint x;\nConsole.WriteLine (x);        // Compile-time error\n```", "```cs\nint[] ints = new int[2];\nConsole.WriteLine (ints[0]);    // 0\n```", "```cs\nConsole.WriteLine (Test.X);   // 0\n\nclass Test { public static int X; }   // field\n```", "```cs\nConsole.WriteLine (default (decimal));   // 0\n```", "```cs\ndecimal d = default;\n```", "```cs\nFoo (8);                        // 8 is an argument\nstatic void Foo (int p) {...}   // p is a parameter\n```", "```cs\nint x = 8;\nFoo (x);                    // Make a copy of x\nConsole.WriteLine (x);      // x will still be 8\n\nstatic void Foo (int p)\n{\n  p = p + 1;                // Increment p by 1\n  Console.WriteLine (p);    // Write p to screen\n}\n```", "```cs\nStringBuilder sb = new StringBuilder();\nFoo (sb);\nConsole.WriteLine (sb.ToString());    // test\n\nstatic void Foo (StringBuilder fooSB)\n{\n  fooSB.Append (\"test\");\n  fooSB = null;\n}\n```", "```cs\nint x = 8;\nFoo (ref  x);              // Ask Foo to deal directly with x\nConsole.WriteLine (x);     // x is now 9\n\nstatic void Foo (ref int p)\n{\n  p = p + 1;               // Increment p by 1\n  Console.WriteLine (p);   // Write p to screen\n}\n```", "```cs\nstring x = \"Penn\";\nstring y = \"Teller\";\nSwap (ref x, ref y);\nConsole.WriteLine (x);   // Teller\nConsole.WriteLine (y);   // Penn\n\nstatic void Swap (ref string a, ref string b)\n{\n  string temp = a;\n  a = b;\n  b = temp;\n}\n```", "```cs\nstring a, b;\nSplit (\"Stevie Ray Vaughn\", out a, out b);\nConsole.WriteLine (a);                      // Stevie Ray\nConsole.WriteLine (b);                      // Vaughn\n\nvoid Split (string name, out string firstNames, out string lastName)\n{\n  int i = name.LastIndexOf (' ');\n  firstNames = name.Substring (0, i);\n  lastName = name.Substring (i + 1);\n}\n```", "```cs\nSplit (\"Stevie Ray Vaughan\", out string a, out string b);\n```", "```cs\nSplit (\"Stevie Ray Vaughan\", out string a, out _);   // Discard 2nd param\nConsole.WriteLine (a);\n```", "```cs\nSomeBigMethod (out _, out _, out _, out int x, out _, out _, out _);\n```", "```cs\nstring _;\nSplit (\"Stevie Ray Vaughan\", out string a, out _);\nConsole.WriteLine (_);     // Vaughan\n```", "```cs\nclass Test\n{\n  static int x;\n\n  static void Main() { Foo (out x); }\n\n  static void Foo (out int y)\n  {\n    Console.WriteLine (x);                // x is 0\n    y = 1;                                // Mutate y\n    Console.WriteLine (x);                // x is 1\n  }\n}\n```", "```cs\nvoid Foo (   SomeBigStruct a) { ... }\nvoid Foo (in SomeBigStruct a) { ... }\n```", "```cs\nSomeBigStruct x = ...;\nFoo (x);      // Calls the first overload\nFoo (in x);   // Calls the second overload\n```", "```cs\nvoid Bar (in SomeBigStruct a) { ... }\n```", "```cs\nBar (x);     // OK (calls the 'in' overload)\nBar (in x);  // OK (calls the 'in' overload)\n```", "```cs\nint total = Sum (1, 2, 3, 4);\nConsole.WriteLine (total);              // 10\n\n// The call to Sum above is equivalent to:\nint total2 = Sum (new int[] { 1, 2, 3, 4 });\n\nint Sum (params int[] ints)\n{\n  int sum = 0;\n  for (int i = 0; i < ints.Length; i++)\n    sum += ints [i];                       // Increase sum by ints[i]\n  return sum;\n}\n```", "```cs\nint total = Sum (new int[] { 1, 2, 3, 4 } );\n```", "```cs\nvoid Foo (int x = 23) { Console.WriteLine (x); }\n```", "```cs\nFoo();     // 23\n```", "```cs\nFoo (23);\n```", "```cs\nFoo (1);    // 1, 0\n\nvoid Foo (int x = 0, int y = 0) { Console.WriteLine (x + \", \" + y); }\n```", "```cs\nFoo (x:1, y:2);  // 1, 2\n\nvoid Foo (int x, int y) { Console.WriteLine (x + \", \" + y); }\n```", "```cs\nFoo (x:1, y:2);\nFoo (y:2, x:1);\n```", "```cs\nint a = 0;\nFoo (y: ++a, x: --a);  // ++a is evaluated first\n```", "```cs\nFoo (1, y:2);\n```", "```cs\nFoo (x:1, 2);         // OK. Arguments in the declared positions\n```", "```cs\nFoo (y:2, 1);         // Compile-time error. y isn't in the first position\n```", "```cs\nvoid Bar (int a = 0, int b = 0, int c = 0, int d = 0) { ... }\n```", "```cs\nBar (d:3);\n```", "```cs\nint[] numbers = { 0, 1, 2, 3, 4 };\nref int numRef = ref numbers [2];\n```", "```cs\nnumRef *= 10;\nConsole.WriteLine (numRef);        // 20\nConsole.WriteLine (numbers [2]);   // 20\n```", "```cs\nclass Program\n{\n  static string x = \"Old Value\";\n\n  static ref string GetX() => ref x;    // This method returns a ref\n\n  static void Main()\n  {\n    ref string xRef = ref GetX();       // Assign result to a ref local\n    xRef = \"New Value\";\n    Console.WriteLine (x);              // New Value\n  }\n}\n```", "```cs\nstring localX = GetX();  // Legal: localX is an ordinary non-ref variable.\n```", "```cs\nstatic ref string Prop => ref x;\n```", "```cs\nProp = \"New Value\";\n```", "```cs\nstatic ref readonly string Prop => ref x;\n```", "```cs\nvar x = \"hello\";\nvar y = new System.Text.StringBuilder();\nvar z = (float)Math.PI;\n```", "```cs\nstring x = \"hello\";\nSystem.Text.StringBuilder y = new System.Text.StringBuilder();\nfloat z = (float)Math.PI;\n```", "```cs\nvar x = 5;\nx = \"hello\";    // Compile-time error; x is of type int\n```", "```cs\nRandom r = new Random();\nvar x = r.Next();\n```", "```cs\nSystem.Text.StringBuilder sb1 = new();\nSystem.Text.StringBuilder sb2 = new (\"Test\");\n```", "```cs\nSystem.Text.StringBuilder sb1 = new System.Text.StringBuilder();\nSystem.Text.StringBuilder sb2 = new System.Text.StringBuilder (\"Test\");\n```", "```cs\nclass Foo\n{\n  System.Text.StringBuilder sb;\n\n  public Foo (string initialValue)\n  {\n    sb = new (initialValue);\n  }\n}\n```", "```cs\nMyMethod (new (\"test\"));\n\nvoid MyMethod (System.Text.StringBuilder sb) { ... }\n```", "```cs\n12\n```", "```cs\n12 * 30\n```", "```cs\n1 + (12 * 30)\n```", "```cs\nMath.Log (1)\n```", "```cs\nConsole.WriteLine (1)\n```", "```cs\n1 + Console.WriteLine (1)      // Compile-time error\n```", "```cs\nx = x * 5\n```", "```cs\ny = 5 * (x = 2)\n```", "```cs\na = b = c = d = 0\n```", "```cs\nx *= 2    // equivalent to x = x * 2\nx <<= 1   // equivalent to x = x << 1\n```", "```cs\n1 + 2 * 3\n```", "```cs\n1 + (2 * 3)\n```", "```cs\n8 / 4 / 2\n```", "```cs\n( 8 / 4 ) / 2    // 1\n```", "```cs\n8 / ( 4 / 2 )    // 4\n```", "```cs\nx = y = 3;\n```", "```cs\nstring s1 = null;\nstring s2 = s1 ?? \"nothing\";   // s2 evaluates to \"nothing\"\n```", "```cs\nmyVariable ??= someDefault;\n```", "```cs\nif (myVariable == null) myVariable = someDefault;\n```", "```cs\nSystem.Text.StringBuilder sb = null;\nstring s = sb?.ToString();  // No error; s instead evaluates to null\n```", "```cs\nstring s = (sb == null ? null : sb.ToString());\n```", "```cs\nstring[] words = null;\nstring word = words?[1];   // word is null\n```", "```cs\nSystem.Text.StringBuilder sb = null;\nstring s = sb?.ToString().ToUpper();   // s evaluates to null without error\n```", "```cs\nx?.y?.z\n```", "```cs\nx == null ? null \n          : (x.y == null ? null : x.y.z)\n```", "```cs\nSystem.Text.StringBuilder sb = null;\nint length = sb?.ToString().Length;   // Illegal : int cannot be null\n```", "```cs\nint? length = sb?.ToString().Length;   // OK: int? can be null\n```", "```cs\nsomeObject?.SomeVoidMethod();\n```", "```cs\nSystem.Text.StringBuilder sb = null;\nstring s = sb?.ToString() ?? \"nothing\";   // s evaluates to \"nothing\"\n```", "```cs\nstring someWord = \"rosebud\";\nint someNumber = 42;\nbool rich = true, famous = false;\n```", "```cs\nconst double c = 2.99792458E08;\nc += 10;                        // Compile-time Error\n```", "```cs\nint x;\n{\n  int y;\n  int x;            // Error - x already defined\n}\n{\n  int y;            // OK - y not in scope\n}\nConsole.Write (y);  // Error - y is out of scope\n```", "```cs\n// Declare variables with declaration statements:\nstring s;\nint x, y;\nSystem.Text.StringBuilder sb;\n\n// Expression statements\nx = 1 + 2;                 // Assignment expression\nx++;                       // Increment expression\ny = Math.Max (x, 5);       // Assignment expression\nConsole.WriteLine (y);     // Method call expression\nsb = new StringBuilder();  // Assignment expression\nnew StringBuilder();       // Object instantiation expression\n```", "```cs\nnew StringBuilder();     // Legal, but useless\nnew string ('c', 3);     // Legal, but useless\nx.Equals (y);            // Legal, but useless\n```", "```cs\nif (5 < 2 * 3)\n  Console.WriteLine (\"true\");       // true\n```", "```cs\nif (5 < 2 * 3)\n{\n  Console.WriteLine (\"true\");\n  Console.WriteLine (\"Let’s move on!\");\n}\n```", "```cs\nif (2 + 2 == 5)\n  Console.WriteLine (\"Does not compute\");\nelse\n  Console.WriteLine (\"False\");        // False\n```", "```cs\nif (2 + 2 == 5)\n  Console.WriteLine (\"Does not compute\");\nelse\n  if (2 + 2 == 4)\n    Console.WriteLine (\"Computes\");    // Computes\n```", "```cs\nif (true)\n  if (false)\n    Console.WriteLine();\n  else\n    Console.WriteLine (\"executes\");\n```", "```cs\nif (true)\n{\n  if (false)\n    Console.WriteLine();\n  else\n    Console.WriteLine (\"executes\");\n}\n```", "```cs\nif (true)\n{\n  if (false)\n    Console.WriteLine();\n}\nelse\n  Console.WriteLine (\"does not execute\");\n```", "```cs\nvoid TellMeWhatICanDo (int age)\n{\n  if (age >= 35)\n    Console.WriteLine (\"You can be president!\");\n  else if (age >= 21)\n    Console.WriteLine (\"You can drink!\");\n  else if (age >= 18)\n    Console.WriteLine (\"You can vote!\");\n  else\n    Console.WriteLine (\"You can wait!\");\n}\n```", "```cs\nvoid ShowCard (int cardNumber)\n{\n  switch (cardNumber)\n  {\n    case 13:\n      Console.WriteLine (\"King\");\n      break;\n    case 12:\n      Console.WriteLine (\"Queen\");\n      break;\n    case 11:\n      Console.WriteLine (\"Jack\");\n      break;\n    case -1:                         // Joker is -1\n      goto case 12;                  // In this game joker counts as queen\n    default:                         // Executes for any other cardNumber\n      Console.WriteLine (cardNumber);\n      break;\n  }\n}\n```", "```cs\nswitch (cardNumber)\n{\n  case 13:\n  case 12:\n  case 11:\n    Console.WriteLine (\"Face card\");\n    break;\n  default:\n    Console.WriteLine (\"Plain card\");\n    break;\n}\n```", "```cs\nTellMeTheType (12);\nTellMeTheType (\"hello\");\nTellMeTheType (true);\n\nvoid TellMeTheType (object x)   // object allows any type.\n{\n  switch (x)\n  {\n    case int i:\n      Console.WriteLine (\"It's an int!\");\n      Console.WriteLine ($\"The square of {i} is {i * i}\");\n      break;\n    case string s:\n      Console.WriteLine (\"It's a string\");\n      Console.WriteLine ($\"The length of {s} is {s.Length}\");\n      break;\n    case DateTime:\n      Console.WriteLine (\"It's a DateTime\");\n      break;\n    default:\n      Console.WriteLine (\"I don't know what x is\");\n      break;\n  }\n}\n```", "```cs\nswitch (x)\n{\n  case bool b when b == true:     // Fires only when b is true\n    Console.WriteLine (\"True!\");\n    break;\n  case bool b:\n    Console.WriteLine (\"False!\");\n    break;\n}\n```", "```cs\nswitch (x)\n{\n  case float f when f > 1000:\n  case double d when d > 1000:\n  case decimal m when m > 1000:\n    Console.WriteLine (\"We can refer to x here but not f or d or m\");\n    break;\n}\n```", "```cs\ncase null:\n  Console.WriteLine (\"Nothing here\");\n  break;\n```", "```cs\nstring cardName = cardNumber switch\n{\n  13 => \"King\",\n  12 => \"Queen\",\n  11 => \"Jack\",\n  _ => \"Pip card\"   // equivalent to 'default'\n};\n```", "```cs\nint cardNumber = 12;\nstring suite = \"spades\";\n\nstring cardName = (cardNumber, suite) switch\n{\n  (13, \"spades\") => \"King of spades\",\n  (13, \"clubs\") => \"King of clubs\",\n  ...\n};\n```", "```cs\nint i = 0;\nwhile (i < 3)\n{\n  Console.Write (i);\n  i++;\n}\n```", "```cs\nint i = 0;\ndo\n{\n  Console.WriteLine (i);\n  i++;\n}\nwhile (i < 3);\n```", "```cs\nfor (*initialization-clause*; *condition-clause*; *iteration-clause*)\n  *statement-or-statement-block*\n```", "```cs\nfor (int i = 0; i < 3; i++)\n  Console.WriteLine (i);\n```", "```cs\nfor (int i = 0, prevFib = 1, curFib = 1; i < 10; i++)\n{\n  Console.WriteLine (prevFib);\n  int newFib = prevFib + curFib;\n  prevFib = curFib; curFib = newFib;\n}\n```", "```cs\nfor (;;)\n  Console.WriteLine (\"interrupt me\");\n```", "```cs\nforeach (char c in \"beer\")   // c is the *iteration variable*\n  Console.WriteLine (c);\n```", "```cs\nb\ne\ne\nr\n```", "```cs\nint x = 0;\nwhile (true)\n{\n  if (x++ > 5)\n    break;      // break from the loop\n}\n// execution continues here after break\n...\n```", "```cs\nfor (int i = 0; i < 10; i++)\n{\n  if ((i % 2) == 0)       // If i is even,\n    continue;             // continue with next iteration\n\n  Console.Write (i + \" \");\n}\n\nOUTPUT: 1 3 5 7 9\n```", "```cs\ngoto *statement-label*;\n```", "```cs\ngoto case *case-constant*;    // (Only works with constants, not patterns)\n```", "```cs\nint i = 1;\nstartLoop:\nif (i <= 5)\n{\n  Console.Write (i + \" \");\n  i++;\n  goto startLoop;\n}\n\nOUTPUT: 1 2 3 4 5\n```", "```cs\ndecimal AsPercentage (decimal d)\n{\n  decimal p = d * 100m;\n  return p;             // Return to the calling method with value\n}\n```", "```cs\nif (w == null)\n  throw new ArgumentNullException (...);\n```", "```cs\nSystem.Security.Cryptography\n```", "```cs\nSystem.Security.Cryptography.RSA rsa =\n  System.Security.Cryptography.RSA.Create();\n```", "```cs\nnamespace Outer.Middle.Inner\n{\n  class Class1 {}\n  class Class2 {}\n}\n```", "```cs\nnamespace Outer\n{\n  namespace Middle\n  {\n    namespace Inner\n    {\n      class Class1 {}\n      class Class2 {}\n    }\n  }\n}\n```", "```cs\nnamespace MyNamespace\n{\n  class Class1 {}\n  class Class2 {}\n}\n```", "```cs\nnamespace MyNamespace;  // Applies to everything that follows in the file.\n\nclass Class1 {}         // inside MyNamespace\nclass Class2 {}         // inside MyNamespace\n```", "```cs\nusing Outer.Middle.Inner;\n\nClass1 c;    // Don’t need fully qualified name\n```", "```cs\nglobal using System;\nglobal using System.Collection.Generic;\n```", "```cs\nSystem\nSystem.Collections.Generic\nSystem.IO\nSystem.Linq\nSystem.Net.Http\nSystem.Threading\nSystem.Threading.Tasks\n```", "```cs\nusing static System.Console;\n\nWriteLine (\"Hello\");\n```", "```cs\nusing static System.Windows.Visibility;\n```", "```cs\nvar textBox = new TextBox { Visibility = Hidden };   // XAML-style\n```", "```cs\nnamespace Outer\n{\n  class Class1 {}\n\n  namespace Inner\n  {\n    class Class2 : Class1  {}\n  }\n}\n```", "```cs\nnamespace MyTradingCompany\n{\n  namespace Common\n  {\n    class ReportBase {}\n  }\n  namespace ManagementReporting\n  {\n    class SalesReport : Common.ReportBase  {}\n  }\n}\n```", "```cs\nnamespace Outer\n{\n  class Foo { }\n\n  namespace Inner\n  {\n    class Foo { }\n\n    class Test\n    {\n      Foo f1;         // = Outer.Inner.Foo\n      Outer.Foo f2;   // = Outer.Foo\n    }\n  }\n}\n```", "```cs\nnamespace Outer.Middle.Inner\n{\n  class Class1 {}\n}\n\nnamespace Outer.Middle.Inner\n{\n  class Class2 {}\n}\n```", "```cs\nnamespace Outer.Middle.Inner\n{\n  class Class1 {}\n}\n```", "```cs\nnamespace Outer.Middle.Inner\n{\n  class Class2 {}\n}\n```", "```cs\nnamespace N1\n{\n  class Class1 {}\n}\n\nnamespace N2\n{\n  using N1;\n\n  class Class2 : Class1 {}\n}\n\nnamespace N2\n{\n  class Class3 : Class1 {}   // Compile-time error\n}\n```", "```cs\nusing PropertyInfo2 = System.Reflection.PropertyInfo;\nclass Program { PropertyInfo2 p; }\n```", "```cs\nusing R = System.Reflection;\nclass Program { R.PropertyInfo p; }\n```", "```cs\nusing NumberList = double[];\nNumberList numbers = { 2.5, 3.5 };\n```", "```cs\nnamespace Widgets\n{\n  public class Widget {}\n}\n```", "```cs\nnamespace Widgets\n{\n  public class Widget {}\n}\n```", "```cs\nusing Widgets;\n\nWidget w = new Widget();\n```", "```cs\n<ItemGroup>\n  <Reference Include=\"Widgets1\">\n    <Aliases>W1</Aliases>\n  </Reference>\n  <Reference Include=\"Widgets2\">\n    <Aliases>W2</Aliases>\n  </Reference>\n</ItemGroup>\n```", "```cs\nextern alias W1;\nextern alias W2;\n\nW1.Widgets.Widget w1 = new W1.Widgets.Widget();\nW2.Widgets.Widget w2 = new W2.Widgets.Widget();\n```", "```cs\nnamespace N\n{\n  class A\n  {\n    static void Main() => new A.B();     // Instantiate class B\n    public class B {}                    // Nested type\n  }\n}\n\nnamespace A\n{\n  class B {}\n}\n```", "```cs\nnamespace N\n{\n  class A\n  {\n    static void Main()\n    {\n      System.Console.WriteLine (new A.B());\n      System.Console.WriteLine (new global::A.B());\n    }\n\n    public class B {}\n  }\n}\n\nnamespace A\n{\n  class B {}\n}\n```", "```cs\nextern alias W1;\nextern alias W2;\n\nW1::Widgets.Widget w1 = new W1::Widgets.Widget();\nW2::Widgets.Widget w2 = new W2::Widgets.Widget();\n```"]