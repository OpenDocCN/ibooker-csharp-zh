["```cs\npublic static string Reverse(string str)\n{\n    char[] charArray = str.ToCharArray();\n    Array.Reverse( charArray );\n    return new string( charArray );\n}\n```", "```cs\n[ApiController]\n[Route(\"[controller]\")] public class ApplicationController : ControllerBase\n{\n    private readonly IStorageService _storageService;\n    private readonly IEmailService _emailService;\n\n    public ApplicationController(IStorageService storageService,\n                                 IEmailService emailService)\n    {\n        _storageService = storageService;\n        _emailService = emailService;\n    }\n [HttpPost]\n    public async Task<IActionResult> SaveUploadedResume()\n    {\n        Request.EnableBuffering();\n        using var fileStream = new MemoryStream();\n        using var reader = new StreamReader(fileStream);\n        await Request.Body.CopyToAsync(fileStream); ![1](assets/1.png)\n\n        var storedFileUrl = await _storageService.Upload(fileStream); ![2](assets/2.png)\n\n        await _emailService.Send(\"recruitment@example.com\",\n            $\"Somebody has uploaded a resume! Read it here: {storedFileUrl}\"); ![3](assets/3.png)\n\n        return Ok();\n    }\n}\n```", "```cs\npublic class AwsS3StorageService : IStorageService\n{\n    const string BucketName = \"csharp-examples-bucket\";\n\n    public async Task<string> Upload(Stream stream)\n    {\n        var fileName = Guid.NewGuid().ToString() + \".pdf\"; ![1](assets/1.png)\n\n        using var s3Client = new AmazonS3Client(RegionEndpoint.EUWest2);\n\n        await s3Client.PutObjectAsync(new PutObjectRequest()\n        {\n            InputStream = stream,\n            BucketName = BucketName,\n            Key = fileName,\n        }); ![2](assets/2.png)\n\n        var url = s3Client.GetPreSignedURL(new GetPreSignedUrlRequest()\n        {\n            BucketName = BucketName,\n            Key = fileName,\n            Expires = DateTime.UtcNow.AddMinutes(10)\n        }); ![3](assets/3.png)\n\n        return url;\n    }\n}\n```", "```cs\npublic class AwsSesEmailService : IEmailService\n{\n    public async Task Send(string emailAddress, string body)\n    {\n        using var emailClient = new AmazonSimpleEmailServiceClient(\n                                                RegionEndpoint.EUWest1);\n\n        await emailClient.SendEmailAsync(new SendEmailRequest\n        {\n            Source = \"from@example.com\",\n            Destination = new Destination\n            {\n                ToAddresses = new List<string> { emailAddress }\n            },\n            Message = new Message\n            {\n                Subject = new Content(\"Email Subject\"),\n                Body = new Body { Text = new Content(body) }\n            }\n        });\n    }\n}\n```", "```cs\ndotnet new -i Amazon.Lambda.Templates\n\ndotnet new lambda.EmptyFunction --name SingleCSharpLambda\n```", "```cs\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.\n DefaultLambdaJsonSerializer))]\n\nnamespace SingleCSharpLambda\n{\n    public class Function\n    {\n        public string FunctionHandler(string input, ILambdaContext context)\n        {\n            LambdaLogger.Log(\"Hello from\" + context.FunctionName);\n\n            return input?.ToUpper();\n        }\n    }\n}\n```", "```cs\ndotnet tool install -g Amazon.Lambda.Tools\n```", "```cs\ndotnet lambda deploy-function SingleCSharpLambda\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddRazorPages();\n\n// Add AWS Lambda support. builder.Services.AddAWSLambdaHosting(LambdaEventSource.HttpApi); ![1](assets/1.png)\n\napp.MapRazorPages();\n\nvar app = builder.Build();\n```", "```cs\ndotnet lambda deploy-function UploadNewResume\n```", "```cs\ncurl https://xxxlrx74l3.execute-api.eu-west-2.amazonaws.com/Prod/Application\n --data-binary @MyResumeFile.pdf\n```", "```cs\n[HttpPost]\npublic async Task<IActionResult> SaveUploadedResume()\n{\n    Request.EnableBuffering();\n    using var fileStream = new MemoryStream();\n    using var reader = new StreamReader(fileStream);\n    await Request.Body.CopyToAsync(fileStream); ![1](assets/1.png)\n\n    var storedFileUrl = await _storageService.Upload(fileStream); ![2](assets/2.png)\n\n    await _emailService.Send(\"recruitment@example.com\",\n        $\"Somebody has uploaded a resume! Read it here: {storedFileUrl}\"); ![3](assets/3.png)\n\n    return Ok(); ![4](assets/4.png)\n}\n```", "```cs\n[assembly: LambdaSerializer(\n    typeof(Amazon.Lambda.Serialization.SystemTextJson.\n            DefaultLambdaJsonSerializer))]\n\nnamespace ServerlessResumeUploader\n{\n    public class LambdaFunctions\n    {\n        private readonly IStorageService _storageService\n                                            = new AwsS3StorageService();\n        private readonly IEmailService _emailService\n                                            = new AwsSesEmailService();\n\n        ![1](assets/1.png)\n        public async Task<StepFunctionsState> UploadNewResume(\n            StepFunctionsState state, ILambdaContext context)\n        {\n            byte[] bytes = Convert.FromBase64String(state.FileBase64);\n            using var memoryStream = new MemoryStream(bytes);\n\n            state.StoredFileUrl = await _storageService.Upload(memoryStream);\n\n            state.FileBase64 = null;\n\n            return state;\n        }\n\n        ![2](assets/2.png)\n        public async Task<StepFunctionsState> EmailRecruitment(\n            StepFunctionsState state, ILambdaContext context)\n        {\n            await _emailService.Send(\"recruitment@example.com\",\n            $\"Somebody uploaded a resume! Read here: {state.StoredFileUrl}\\n\\n\" +\n            $\"...and check out their GitHub profile: {state.GithubProfileUrl}\");\n\n            return state;\n        }\n    }\n}\n```", "```cs\npublic class StepFunctionsState\n{\n    public string FileBase64 { get; set; }\n\n    public string StoredFileUrl { get; set; }\n}\n```", "```cs\ndotnet lambda deploy-function UploadNewResume\n    --function-handler ServerlessResumeUploader::ServerlessResumeUploader.\n    LambdaFunctions::UploadNewResume\n\ndotnet lambda deploy-function EmailRecruitment\n    --function-handler ServerlessResumeUploader::ServerlessResumeUploader.\n    LambdaFunctions::EmailRecruitment\n```", "```cs\n{\n  \"Comment\": \"Resume Uploader State Machine\",\n  \"StartAt\": \"SaveUploadedResume\",\n  \"States\": {\n    \"SaveUploadedResume\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:lambda:eu-west-2:00000000:function:UploadNewResume\",\n      \"Next\": \"EmailRecruitment\"\n    },\n    \"EmailRecruitment\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:lambda:eu-west-2:00000000:function:EmailRecruitment\",\n      \"End\": true\n    }\n  }\n}\n```", "```cs\ncurl https://xxxlrx74l3.execute-api.eu-west-2.amazonaws.com/Prod/Application\n --data-binary @MyResumeFile.pdf\n```", "```cs\npublic async Task<StepFunctionsState> LookForGithubProfile(\n    StepFunctionsState state, ILambdaContext context)\n{\n    using var textractClient =\n            new AmazonTextractClient(RegionEndpoint.EUWest2);![1](assets/1.png)\n\n    var s3ObjectKey = Regex.Match(state.StoredFileUrl,\n                \"amazonaws\\\\.com\\\\/(.+?(?=\\\\.pdf))\").Groups[1].Value + \".pdf\";\n\n    var detectResponse = await textractClient.DetectDocumentTextAsync(\n        new DetectDocumentTextRequest\n    {\n        Document = new Document\n        {\n            S3Object = new S3Object\n            {\n                Bucket = AwsS3StorageService.BucketName,\n                Name = s3ObjectKey,\n            }\n        }\n    });\n\n    state.GithubProfileUrl = detectResponse.Blocks\n            .FirstOrDefault(x => x.BlockType == BlockType.WORD &&\n                                 x.Text.Contains(\"github.com\"))\n            ?.Text;\n\n    return state;\n}\n```", "```cs\npublic async Task<StepFunctionsState> EmailRecruitment(StepFunctionsState state,\n                                                       ILambdaContext context)\n{\n    await _emailService.Send(\"recruitment@example.com\",\n    $\"Somebody uploaded a resume! Read it here: {state.StoredFileUrl}\\n\\n\" +![1](assets/1.png)\n    $\"...check out their GitHub profile: {state.GithubProfileUrl}\");![2](assets/2.png)\n\n    return state;\n}\n```", "```cs\n{\n  \"Comment\": \"Resume Uploader State Machine\",\n  \"StartAt\": \"SaveUploadedResume\",\n  \"States\": {\n    \"SaveUploadedResume\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:lambda:eu-west-2:00000000:function:UploadNewResume\",\n      \"Next\": \"QueueEmail\"\n    },\n    \"QueueEmail\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:states:::sqs:sendMessage\",\n      \"Parameters\": {\n        \"QueueUrl\": \"https://sqs.eu-west-2.amazonaws.com/UploadedResumeFiles\",\n        \"MessageBody\": {\n          \"StoredFileUrl.$\": \"$.StoredFileUrl\"\n        }\n      },\n      \"End\": true\n    }\n  }\n}\n```", "```cs\npublic async Task<string> BatchEmailRecruitment(object input, ILambdaContext c)\n{\n    using var sqsClient = new AmazonSQSClient(RegionEndpoint.EUWest2);\n    var messageResponse = await sqsClient.ReceiveMessageAsync(\n        new ReceiveMessageRequest()![1](assets/1.png)\n        {\n            QueueUrl = queueUrl,\n            MaxNumberOfMessages = 10\n        });\n\n    var stateObjects =\n        messageResponse.Messages.Select(msg => Deserialize(msg.Body));\n\n    var listOfFiles =\n        string.Join(\"\\n\\n\", stateObjects.Select(x => x.StoredFileUrl));![2](assets/2.png)\n\n    await _emailService.Send(\"recruitment@example.com\", ![3](assets/3.png)\n        $\"You have {messageResponse.Messages.Count} new resumes to review!\\n\\n\"\n         + listOfFiles);\n\n    await sqsClient.DeleteMessageBatchAsync(new DeleteMessageBatchRequest() ![4](assets/4.png)\n    {\n        QueueUrl = queueUrl,\n        Entries = messageResponse.Messages.Select(x =>\n                    new DeleteMessageBatchRequestEntry()\n        {\n            Id = x.MessageId,\n            ReceiptHandle = x.ReceiptHandle\n        }).ToList()\n    });\n\n    return \"ok\";\n}\n```", "```cs\namplify add storage\n```", "```cs\nimport Amplify, { Auth, Storage } from 'aws-amplify';\n\nAmplify.configure({ Storage: { AWSS3: {\n            bucket: '<bucket-name>'\n        } } });\n\nasync function uploadFile(fileName, file) {\n    await Storage.put(fileName, file, { level: 'protected',\n            contentType: file.type });\n}\n```", "```cs\nAWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\nDescription: Resume Uploader Serverless C# Application.\nResources:\n  SaveUploadedResumeLambda:\n    Type: AWS::Lambda::Function\n    Properties:\n      Handler: ServerlessResumeUploader::ServerlessResumeUploader.\n      LambdaFunctions::SaveUploadedResume\n      Role: arn:aws:iam::0000000000:role/ResumeUploaderLambdaRole\n      Runtime: dotnetcore3.1\n      MemorySize: 256\n      Timeout: 30\n  LookForGithubProfileLambda:\n    Type: AWS::Lambda::Function\n    Properties:\n      Handler: ServerlessResumeUploader::ServerlessResumeUploader.\n      LambdaFunctions::LookForGithubProfile\n      Role: arn:aws:iam::0000000000:role/ResumeUploaderLambdaRole\n      Runtime: dotnetcore3.1\n      MemorySize: 256\n      Timeout: 30\n```"]