["```cs\n// NB: All samples in this chapter assume the following namespace imports:\nusing System;\nusing System.Threading;\n\nThread t = new Thread (WriteY);          // Kick off a new thread\nt.Start();                               // running WriteY()\n\n// Simultaneously, do something on the main thread.\nfor (int i = 0; i < 1000; i++) Console.Write (\"x\");\n\nvoid WriteY()\n{\n  for (int i = 0; i < 1000; i++) Console.Write (\"y\");\n}\n\n// Typical Output:\nxxxxxxxxxxxxxxxxyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxyyyyyyyyyyyyy\nyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyxxxxxxxxxxxxxxxxxxxxxx\nxxxxxxxxxxxxxxxxxxxxxxyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\nyyyyyyyyyyyyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n...\n```", "```cs\nConsole.WriteLine (Thread.CurrentThread.Name);\n```", "```cs\nThread t = new Thread (Go);\nt.Start();\nt.Join();\nConsole.WriteLine (\"Thread t has ended!\");\n\nvoid Go() { for (int i = 0; i < 1000; i++) Console.Write (\"y\"); }\n```", "```cs\nThread.Sleep (TimeSpan.FromHours (1));  // Sleep for 1 hour\nThread.Sleep (500);                     // Sleep for 500 milliseconds\n```", "```cs\nbool blocked = (someThread.ThreadState & ThreadState.WaitSleepJoin) != 0;\n```", "```cs\npublic static ThreadState Simplify (this ThreadState ts)\n{\n  return ts & (ThreadState.Unstarted |\n               ThreadState.WaitSleepJoin |\n               ThreadState.Stopped);\n}\n```", "```cs\nwhile (DateTime.Now < nextStartTime)\n  Thread.Sleep (100);\n```", "```cs\nwhile (DateTime.Now < nextStartTime);\n```", "```cs\nnew Thread (Go).Start();      // Call Go() on a new thread\nGo();                         // Call Go() on the main thread\n\nvoid Go()\n{\n  // Declare and use a local variable - 'cycles'\n  for (int cycles = 0; cycles < 5; cycles++) Console.Write ('?');\n}\n```", "```cs\nbool _done = false;\n\nnew Thread (Go).Start();\nGo();\n\nvoid Go()\n{\n   if (!_done) { _done = true; Console.WriteLine (\"Done\"); }\n}\n```", "```cs\nbool done = false;\nThreadStart action = () =>\n{\n  if (!done) { done = true; Console.WriteLine (\"Done\"); }\n};\nnew Thread (action).Start();\naction();\n```", "```cs\nvar tt = new ThreadTest();\nnew Thread (tt.Go).Start();\ntt.Go();\n\nclass ThreadTest \n{\n  bool _done;\n\n  public void Go()\n  {\n    if (!_done) { _done = true; Console.WriteLine (\"Done\"); }\n  }\n}\n```", "```cs\nclass ThreadTest \n{\n  static bool _done;    // Static fields are shared between all threads\n                        // in the same process.\n  static void Main()\n  {\n    new Thread (Go).Start();\n    Go();\n  }\n\n  static void Go()\n  {\n    if (!_done) { _done = true; Console.WriteLine (\"Done\"); }\n  }\n}\n```", "```cs\nstatic void Go()\n{\n  if (!_done) { Console.WriteLine (\"Done\"); _done = true; }\n}\n```", "```cs\nclass ThreadSafe \n{\n  static bool _done;\n  static readonly object _locker = new object();\n\n  static void Main()\n  {\n    new Thread (Go).Start();\n    Go();\n  }\n\n  static void Go()\n  {\n    lock (_locker)\n    {\n      if (!_done) { Console.WriteLine (\"Done\"); _done = true; }\n    }\n  }\n}\n```", "```cs\nThread t = new Thread ( () => Print (\"Hello from t!\") );\nt.Start();\n\nvoid Print (string message) => Console.WriteLine (message);\n```", "```cs\nnew Thread (() =>\n{\n  Console.WriteLine (\"I'm running on another thread!\");\n  Console.WriteLine (\"This is so easy!\");\n}).Start();\n```", "```cs\nThread t = new Thread (Print);\nt.Start (\"Hello from t!\");\n\nvoid Print (object messageObj)\n{\n  string message = (string) messageObj;   // We need to cast here\n  Console.WriteLine (message);\n}\n```", "```cs\npublic delegate void ThreadStart();\npublic delegate void ParameterizedThreadStart (object obj);\n```", "```cs\nfor (int i = 0; i < 10; i++)\n  new Thread (() => Console.Write (i)).Start();\n```", "```cs\n0223557799\n```", "```cs\nfor (int i = 0; i < 10; i++)\n{\n  int temp = i;\n  new Thread (() => Console.Write (temp)).Start();\n}\n```", "```cs\nstring text = \"t1\";\nThread t1 = new Thread ( () => Console.WriteLine (text) );\n\ntext = \"t2\";\nThread t2 = new Thread ( () => Console.WriteLine (text) );\n\nt1.Start(); t2.Start();\n```", "```cs\ntry\n{\n  new Thread (Go).Start();\n}\ncatch (Exception ex)\n{\n  // We'll never get here!\n  Console.WriteLine (\"Exception!\");\n}\n\nvoid Go() { throw null; }   // Throws a NullReferenceException\n```", "```cs\nnew Thread (Go).Start();\n\nvoid Go()\n{\n  try\n  {\n    ...\n    throw null;    // The NullReferenceException will get caught below\n    ...\n  }\n  catch (Exception ex)\n  {\n    // Typically log the exception and/or signal another thread\n    // that we've come unstuck\n    ...\n  }\n}\n```", "```cs\nstatic void Main (string[] args)\n{\n  Thread worker = new Thread ( () => Console.ReadLine() );\n  if (args.Length > 0) worker.IsBackground = true;\n  worker.Start();\n}\n```", "```cs\nenum ThreadPriority { Lowest, BelowNormal, Normal, AboveNormal, Highest }\n```", "```cs\nusing Process p = Process.GetCurrentProcess();\np.PriorityClass = ProcessPriorityClass.High;\n```", "```cs\nvar signal = new ManualResetEvent (false);\n\nnew Thread (() =>\n{\n  Console.WriteLine (\"Waiting for signal...\");\n  signal.WaitOne();\n  signal.Dispose();\n  Console.WriteLine (\"Got signal!\");\n}).Start();\n\nThread.Sleep(2000);\nsignal.Set();        // “Open” the signal\n```", "```cs\nwhile (!*thisApplication.Ended*)\n{\n *wait for something to appear in message queue*\n *Got something: what kind of message is it?*\n *Keyboard/mouse message -> fire an event handler*\n *User* BeginInvoke *message -> execute delegate*\n *User **Invoke** message -> execute delegate & post result*\n}\n```", "```cs\npartial class MyWindow : Window\n{\n  public MyWindow()\n  {\n    InitializeComponent();\n    new Thread (Work).Start();\n  }\n\n  void Work()\n  {\n    Thread.Sleep (5000);           // Simulate time-consuming task\n    UpdateMessage (\"The answer\");\n  }\n\n  void UpdateMessage (string message)\n  {\n    Action action = () => txtMessage.Text = message;\n    Dispatcher.BeginInvoke (action);\n  }\n}\n```", "```cs\n  void UpdateMessage (string message)\n  {\n    Action action = () => txtMessage.Text = message;\n    this.BeginInvoke (action);\n  }\n```", "```cs\npartial class MyWindow : Window\n{\n  SynchronizationContext _uiSyncContext;\n\n  public MyWindow()\n  {\n    InitializeComponent();\n    // Capture the synchronization context for the current UI thread:\n    _uiSyncContext = SynchronizationContext.Current;\n    new Thread (Work).Start();\n  }\n\n  void Work()\n  {\n    Thread.Sleep (5000);           // Simulate time-consuming task\n    UpdateMessage (\"The answer\");\n  }\n\n  void UpdateMessage (string message)\n  {\n    // Marshal the delegate to the UI thread:\n    _uiSyncContext.Post (_ => txtMessage.Text = message, null);\n  }\n}\n```", "```cs\n// Task is in System.Threading.Tasks\nTask.Run (() => Console.WriteLine (\"Hello from the thread pool\"));\n```", "```cs\nThreadPool.QueueUserWorkItem (notUsed => Console.WriteLine (\"Hello\"));\n```", "```cs\nTask.Run (() => Console.WriteLine (\"Foo\"));\n```", "```cs\nTask.Run (() => Console.WriteLine (\"Foo\"));\nConsole.ReadLine();\n```", "```cs\nnew Thread (() => Console.WriteLine (\"Foo\")).Start();\n```", "```cs\nTask task = Task.Run (() =>\n{\n  Thread.Sleep (2000);\n  Console.WriteLine (\"Foo\");\n});\nConsole.WriteLine (task.IsCompleted);  // False\ntask.Wait();  // Blocks until task is complete\n```", "```cs\nTask task = Task.Factory.StartNew (() => ...,\n                                   TaskCreationOptions.LongRunning);\n```", "```cs\nTask<int> task = Task.Run (() => { Console.WriteLine (\"Foo\"); return 3; });\n// ...\n```", "```cs\nint result = task.Result;      // Blocks if not already finished\nConsole.WriteLine (result);    // 3\n```", "```cs\nTask<int> primeNumberTask = Task.Run (() =>\n  Enumerable.Range (2, 3000000).Count (n => \n    Enumerable.Range (2, (int)Math.Sqrt(n)-1).All (i => n % i > 0)));\n\nConsole.WriteLine (\"Task running...\");\nConsole.WriteLine (\"The answer is \" + primeNumberTask.Result);\n```", "```cs\n// Start a Task that throws a NullReferenceException:\nTask task = Task.Run (() => { throw null; });\ntry \n{\n  task.Wait();\n}\ncatch (AggregateException aex)\n{\n  if (aex.InnerException is NullReferenceException)\n    Console.WriteLine (\"Null!\");\n  else\n    throw;\n}\n```", "```cs\nTask<int> primeNumberTask = Task.Run (() =>\n  Enumerable.Range (2, 3000000).Count (n => \n    Enumerable.Range (2, (int)Math.Sqrt(n)-1).All (i => n % i > 0)));\n\nvar awaiter = primeNumberTask.GetAwaiter();\nawaiter.OnCompleted (() => \n{\n  int result = awaiter.GetResult();\n  Console.WriteLine (result);       // Writes result\n});\n```", "```cs\nvar awaiter = primeNumberTask.ConfigureAwait (false).GetAwaiter();\n```", "```cs\nprimeNumberTask.ContinueWith (antecedent => \n{\n  int result = antecedent.Result;\n  Console.WriteLine (result);          // Writes 123\n});\n```", "```cs\npublic class TaskCompletionSource<TResult>\n{\n  public void SetResult (TResult result);\n  public void SetException (Exception exception);\n  public void SetCanceled();\n\n  public bool TrySetResult (TResult result);\n  public bool TrySetException (Exception exception);\n  public bool TrySetCanceled();\n  public bool TrySetCanceled (CancellationToken cancellationToken);\n  ...\n}\n```", "```cs\nvar tcs = new TaskCompletionSource<int>();\n\nnew Thread (() => { Thread.Sleep (5000); tcs.SetResult (42); })\n  { IsBackground = true }\n  .Start();\n\nTask<int> task = tcs.Task;         // Our \"slave\" task.\nConsole.WriteLine (task.Result);   // 42\n```", "```cs\nTask<TResult> Run<TResult> (Func<TResult> function)\n{\n  var tcs = new TaskCompletionSource<TResult>();\n  new Thread (() => \n  {\n    try { tcs.SetResult (function()); }\n    catch (Exception ex) { tcs.SetException (ex); }\n  }).Start();\n  return tcs.Task;\n}\n...\nTask<int> task = Run (() => { Thread.Sleep (5000); return 42; });\n```", "```cs\nTask<int> GetAnswerToLife()\n{\n  var tcs = new TaskCompletionSource<int>();\n  // Create a timer that fires once in 5000 ms:\n  var timer = new System.Timers.Timer (5000) { AutoReset = false };\n  timer.Elapsed += delegate { timer.Dispose(); tcs.SetResult (42); };\n  timer.Start();\n  return tcs.Task;\n}\n```", "```cs\nvar awaiter = GetAnswerToLife().GetAwaiter();\nawaiter.OnCompleted (() => Console.WriteLine (awaiter.GetResult()));\n```", "```cs\nvar tcs = new TaskCompletionSource<object>();\nTask task = tcs.Task;\n```", "```cs\nTask Delay (int milliseconds)\n{\n  var tcs = new TaskCompletionSource<object>();\n  var timer = new System.Timers.Timer (milliseconds) { AutoReset = false };\n  timer.Elapsed += delegate { timer.Dispose(); tcs.SetResult (null); };\n  timer.Start();\n  return tcs.Task;\n}\n```", "```cs\nDelay (5000).GetAwaiter().OnCompleted (() => Console.WriteLine (42));\n```", "```cs\nfor (int i = 0; i < 10000; i++)\n  Delay (5000).GetAwaiter().OnCompleted (() => Console.WriteLine (42));\n```", "```cs\nTask.Delay (5000).GetAwaiter().OnCompleted (() => Console.WriteLine (42));\n```", "```cs\nTask.Delay (5000).ContinueWith (ant => Console.WriteLine (42));\n```", "```cs\nint GetPrimesCount (int start, int count)\n{\n  return\n    ParallelEnumerable.Range (start, count).Count (n => \n      Enumerable.Range (2, (int)Math.Sqrt(n)-1).All (i => n % i > 0));\n}\n```", "```cs\nvoid DisplayPrimeCounts()\n{\n  for (int i = 0; i < 10; i++)\n    Console.WriteLine (GetPrimesCount (i*1000000 + 2, 1000000) +\n      \" primes between \" + (i*1000000) + \" and \" + ((i+1)*1000000-1));\n  Console.WriteLine (\"Done!\");\n}\n```", "```cs\n78498 primes between 0 and 999999\n70435 primes between 1000000 and 1999999\n67883 primes between 2000000 and 2999999\n66330 primes between 3000000 and 3999999\n65367 primes between 4000000 and 4999999\n64336 primes between 5000000 and 5999999\n63799 primes between 6000000 and 6999999\n63129 primes between 7000000 and 7999999\n62712 primes between 8000000 and 8999999\n62090 primes between 9000000 and 9999999\n```", "```cs\nTask.Run (() => DisplayPrimeCounts());\n```", "```cs\nTask<int> GetPrimesCountAsync (int start, int count)\n{\n  return Task.Run (() =>\n    ParallelEnumerable.Range (start, count).Count (n => \n      Enumerable.Range (2, (int) Math.Sqrt(n)-1).All (i => n % i > 0)));\n}\n```", "```cs\nfor (int i = 0; i < 10; i++)\n{\n  var awaiter = GetPrimesCountAsync (i*1000000 + 2, 1000000).GetAwaiter();\n  awaiter.OnCompleted (() =>\n    Console.WriteLine (awaiter.GetResult() + \" primes between... \"));\n}\nConsole.WriteLine (\"Done\");\n```", "```cs\nvoid DisplayPrimeCounts()\n{\n  DisplayPrimeCountsFrom (0);\n}\n\nvoid DisplayPrimeCountsFrom (int i)\n{\n  var awaiter = GetPrimesCountAsync (i*1000000 + 2, 1000000).GetAwaiter();\n  awaiter.OnCompleted (() => \n  {\n    Console.WriteLine (awaiter.GetResult() + \" primes between...\");\n    if (++i < 10) DisplayPrimeCountsFrom (i);\n    else Console.WriteLine (\"Done\");\n  });\n}\n```", "```cs\nTask DisplayPrimeCountsAsync()\n{\n  var machine = new PrimesStateMachine();\n  machine.DisplayPrimeCountsFrom (0);\n  return machine.Task;\n}\n\nclass PrimesStateMachine\n{\n  TaskCompletionSource<object> _tcs = new TaskCompletionSource<object>();\n  public Task Task { get { return _tcs.Task; } }\n\n  public void DisplayPrimeCountsFrom (int i)\n  {\n    var awaiter = GetPrimesCountAsync (i*1000000+2, 1000000).GetAwaiter();\n    awaiter.OnCompleted (() => \n    {\n      Console.WriteLine (awaiter.GetResult());\n      if (++i < 10) DisplayPrimeCountsFrom (i);\n      else { Console.WriteLine (\"Done\"); _tcs.SetResult (null); }\n    });\n  }\n}\n```", "```cs\nasync Task DisplayPrimeCountsAsync()\n{\n  for (int i = 0; i < 10; i++)\n    Console.WriteLine (await GetPrimesCountAsync (i*1000000 + 2, 1000000) +\n      \" primes between \" + (i*1000000) + \" and \" + ((i+1)*1000000-1));\n  Console.WriteLine (\"Done!\");\n}\n```", "```cs\nvar *result* = await *expression*;\n*statement(s)*;\n```", "```cs\nvar awaiter = *expression*.GetAwaiter();\nawaiter.OnCompleted (() => \n{\n  var *result* = awaiter.GetResult();\n  *statement(s)*;\n});\n```", "```cs\nTask<int> GetPrimesCountAsync (int start, int count)\n{\n  return Task.Run (() =>\n    ParallelEnumerable.Range (start, count).Count (n => \n      Enumerable.Range (2, (int)Math.Sqrt(n)-1).All (i => n % i > 0)));\n}\n```", "```cs\nint result = await GetPrimesCountAsync (2, 1000000);\nConsole.WriteLine (result);\n```", "```cs\nasync void DisplayPrimesCount()\n{\n  int result = await GetPrimesCountAsync (2, 1000000);\n  Console.WriteLine (result);\n}\n```", "```cs\nvoid DisplayPrimesCount()\n{\n  var awaiter = GetPrimesCountAsync (2, 1000000).GetAwaiter();\n  awaiter.OnCompleted (() =>    \n  {\n    int result = awaiter.GetResult();\n    Console.WriteLine (result);\n  });\n}\n```", "```cs\nawait Task.Delay (5000);\nConsole.WriteLine (\"Five seconds passed!\");\n```", "```cs\nasync void DisplayPrimeCounts()\n{\n  for (int i = 0; i < 10; i++)\n    Console.WriteLine (await GetPrimesCountAsync (i*1000000+2, 1000000));\n}\n```", "```cs\nclass TestUI : Window\n{\n  Button _button = new Button { Content = \"Go\" };\n  TextBlock _results = new TextBlock();\n\n  public TestUI()\n  {\n    var panel = new StackPanel();\n    panel.Children.Add (_button);\n    panel.Children.Add (_results);\n    Content = panel;\n    _button.Click += (sender, args) => Go();\n  }\n\n  void Go()\n  {\n    for (int i = 1; i < 5; i++)\n      _results.Text += GetPrimesCount (i * 1000000, 1000000) +\n        \" primes between \" + (i*1000000) + \" and \" + ((i+1)*1000000-1) +\n        Environment.NewLine;\n  }\n\n  int GetPrimesCount (int start, int count)\n  {\n    return ParallelEnumerable.Range (start, count).Count (n => \n      Enumerable.Range (2, (int) Math.Sqrt(n)-1).All (i => n % i > 0));\n  }\n}\n```", "```cs\nTask<int> GetPrimesCountAsync (int start, int count)\n{\n  return Task.Run (() =>\n    ParallelEnumerable.Range (start, count).Count (n => \n      Enumerable.Range (2, (int) Math.Sqrt(n)-1).All (i => n % i > 0)));\n}\n```", "```cs\nasync void Go()\n{\n  _button.IsEnabled = false;\n  for (int i = 1; i < 5; i++)\n    _results.Text += await GetPrimesCountAsync (i * 1000000, 1000000) +\n      \" primes between \" + (i*1000000) + \" and \" + ((i+1)*1000000-1) +\n      Environment.NewLine;\n  _button.IsEnabled = true;\n}\n```", "```cs\nasync void Go() \n{\n  _button.IsEnabled = false;\n  string[] urls = \"www.albahari.com www.oreilly.com www.linqpad.net\".Split();\n  int totalLength = 0;\n  try\n  {\n    foreach (string url in urls)\n    {\n      var uri = new Uri (\"http://\" + url);\n      byte[] data = await new WebClient().DownloadDataTaskAsync (uri);\n      _results.Text += \"Length of \" + url + \" is \" + data.Length +\n                       Environment.NewLine;\n      totalLength += data.Length;\n    }\n    _results.Text += \"Total length: \" + totalLength;\n  }\n  catch (WebException ex)\n  {\n    _results.Text += \"Error: \" + ex.Message;\n  }\n  finally { _button.IsEnabled = true; }\n}\n```", "```cs\n*Set synchronization context for this thread to WPF sync context*\nwhile (!*thisApplication.Ended*)\n{\n *wait for something to appear in message queue*\n *Got something: what kind of message is it?*\n *Keyboard/mouse message -> fire an event handler*\n *User **BeginInvoke/Invoke** message -> execute delegate*\n}\n```", "```cs\n  ...\n  _button.Click += (sender, args) =>\n  {\n    _button.IsEnabled = false;\n    Task.Run (() => Go());\n  };\n```", "```cs\nvoid Go()\n{\n  for (int i = 1; i < 5; i++)\n  {\n    int result = GetPrimesCount (i * 1000000, 1000000);\n    Dispatcher.BeginInvoke (new Action (() =>\n      _results.Text += result + \" primes between \" + (i*1000000) +\n      \" and \" + ((i+1)*1000000-1) + Environment.NewLine));\n  }\n  Dispatcher.BeginInvoke (new Action (() => _button.IsEnabled = true));\n}\n```", "```cs\n  for (int i = 1; i < GetUpperBound(); i++)\n```", "```cs\nasync Task PrintAnswerToLife()   // We can return Task instead of void\n{\n  await Task.Delay (5000);\n  int answer = 21 * 2;\n  Console.WriteLine (answer);  \n}\n```", "```cs\nasync Task Go()\n{\n  await PrintAnswerToLife();\n  Console.WriteLine (\"Done\");\n}\n```", "```cs\nTask PrintAnswerToLife()\n{\n  var tcs = new TaskCompletionSource<object>();\n  var awaiter = Task.Delay (5000).GetAwaiter();\n  awaiter.OnCompleted (() =>\n  {\n    try\n    {\n      awaiter.GetResult();    // Re-throw any exceptions\n      int answer = 21 * 2;\n      Console.WriteLine (answer);\n      tcs.SetResult (null);\n    }\n    catch (Exception ex) { tcs.SetException (ex); }\n  });\n  return tcs.Task;\n}\n```", "```cs\nasync Task<int> GetAnswerToLife()\n{\n  await Task.Delay (5000);\n  int answer = 21 * 2;\n  return answer;    // Method has return type Task<int> we return int\n}\n```", "```cs\nasync Task Go()\n{\n  await PrintAnswerToLife();\n  Console.WriteLine (\"Done\");\n}\n\nasync Task PrintAnswerToLife()\n{\n  int answer = await GetAnswerToLife();\n  Console.WriteLine (answer);\n}\n\nasync Task<int> GetAnswerToLife()\n{\n  await Task.Delay (5000);\n  int answer = 21 * 2;\n  return answer;\n}\n```", "```cs\nvoid Go()\n{\n  PrintAnswerToLife();\n  Console.WriteLine (\"Done\");\n}\n\nvoid PrintAnswerToLife()\n{\n  int answer = GetAnswerToLife();\n  Console.WriteLine (answer);\n}\n\nint GetAnswerToLife()\n{\n  Thread.Sleep (5000);\n  int answer = 21 * 2;\n  return answer;\n}\n```", "```cs\nasync Task Go()\n{\n  var task = PrintAnswerToLife();\n  await task; Console.WriteLine (\"Done\");\n}\n\nasync Task PrintAnswerToLife()\n{\n  var task = GetAnswerToLife();\n  int answer = await task; Console.WriteLine (answer);\n}\n\nasync Task<int> GetAnswerToLife()\n{\n  var task = Task.Delay (5000);\n  await task; int answer = 21 * 2; return answer;\n}\n```", "```cs\n_button.Click += (sender, args) => Go();\n```", "```cs\nvar task1 = PrintAnswerToLife();\nvar task2 = PrintAnswerToLife();\nawait task1; await task2;\n```", "```cs\nasync Task<int> GetAnswerToLife()\n{\n  _x++;\n  await Task.Delay (5000);\n  return 21 * 2;\n}\n```", "```cs\nasync Task NamedMethod()\n{\n  await Task.Delay (1000);\n  Console.WriteLine (\"Foo\");\n}\n```", "```cs\nFunc<Task> unnamed = async () =>\n{\n  await Task.Delay (1000);\n  Console.WriteLine (\"Foo\");\n};\n```", "```cs\nawait NamedMethod();\nawait unnamed();\n```", "```cs\nmyButton.Click += async (sender, args) =>\n{\n  await Task.Delay (1000);\n  myButton.Content = \"Done\";\n};\n```", "```cs\nmyButton.Click += ButtonHandler;\n...\nasync void ButtonHandler (object sender, EventArgs args)\n{\n  await Task.Delay (1000);\n  myButton.Content = \"Done\";\n};\n```", "```cs\nFunc<Task<int>> unnamed = async () =>\n{\n  await Task.Delay (1000);\n  return 123;\n};\nint answer = await unnamed();\n```", "```cs\npublic interface IAsyncEnumerable<out T>\n{\n  IAsyncEnumerator<T> GetAsyncEnumerator (...);\n}\n\npublic interface IAsyncEnumerator<out T>: IAsyncDisposable\n{\n  T Current { get; }\n  ValueTask<bool> MoveNextAsync();\n}\n```", "```cs\npublic interface IAsyncDisposable\n{\n  ValueTask DisposeAsync();\n}\n```", "```cs\nTask<IEnumerable<T>>\n```", "```cs\nasync IAsyncEnumerable<int> RangeAsync (\n  int start, int count, int delay)\n{\n  for (int i = start; i < start + count; i++)\n  {\n    await Task.Delay (delay);\n    yield return i;\n  }\n}\n```", "```cs\nawait foreach (var number in RangeAsync (0, 10, 500))\n  Console.WriteLine (number);\n```", "```cs\nstatic async Task<IEnumerable<int>> RangeTaskAsync (int start, int count,\n                                                    int delay)\n{\n  List<int> data = new List<int>();\n  for (int i = start; i < start + count; i++)\n  {\n    await Task.Delay (delay);\n    data.Add (i);\n  }\n\n  return data;\n}\n```", "```cs\nforeach (var data in await RangeTaskAsync(0, 10, 500))\n  Console.WriteLine (data);\n```", "```cs\nIAsyncEnumerable<int> query =\n  from i in RangeAsync (0, 10, 500)\n  where i % 2 == 0   // Even numbers only.\n  select i * 10;     // Multiply by 10.\n\nawait foreach (var number in query)\n  Console.WriteLine (number);\n```", "```cs\n[HttpGet]\npublic async IAsyncEnumerable<string> Get()\n{\n    using var dbContext = new BookContext();\n    await foreach (var title in dbContext.Books\n                                         .Select(b => b.Title)\n                                         .AsAsyncEnumerable())\n       yield return title;\n}\n```", "```cs\nTask<StorageFile> fileTask = KnownFolders.DocumentsLibrary.CreateFileAsync\n                             (\"test.txt\").AsTask();\n```", "```cs\nStorageFile file = await KnownFolders.DocumentsLibrary.CreateFileAsync\n                         (\"test.txt\");\n```", "```cs\nasync void ButtonClick (object sender, RoutedEventArgs args)\n{\n  await Task.Delay(1000);\n  throw new Exception (\"Will this be ignored?\");\n}\n```", "```cs\nasync void Foo() { throw null; await Task.Delay(1000); }\n```", "```cs\nasync Task Foo()\n{\n  if (*someCondition*) await Task.Delay (100);\n  throw new InvalidOperationException();\n}\n```", "```cs\nIEnumerable<int> Foo() { throw null; yield return 123; }\n```", "```cs\nstatic Dictionary<string,string> _cache = new Dictionary<string,string>();\n\nasync Task<string> GetWebPageAsync (string uri)\n{\n  string html;\n  if (_cache.TryGetValue (uri, out html)) return html;\n  return _cache [uri] = \n    await new WebClient().DownloadStringTaskAsync (uri);\n}\n```", "```cs\nConsole.WriteLine (await GetWebPageAsync (\"http://oreilly.com\"));\n```", "```cs\nvar awaiter = GetWebPageAsync().GetAwaiter();\nif (awaiter.IsCompleted)\n  Console.WriteLine (awaiter.GetResult());\nelse\n  awaiter.OnCompleted (() => Console.WriteLine (awaiter.GetResult());\n```", "```cs\nasync Task<string> Foo() { return \"abc\"; }\n```", "```cs\nTask<string> Foo() { return Task.FromResult (\"abc\"); }\n```", "```cs\nstatic Dictionary<string,Task<string>> _cache = \n   new Dictionary<string,Task<string>>();\n\nTask<string> GetWebPageAsync (string uri)\n{\n  if (_cache.TryGetValue (uri, out var downloadTask)) return downloadTask;\n  return _cache [uri] = new WebClient().DownloadStringTaskAsync (uri);\n}\n```", "```cs\nlock (_cache)\n  if (_cache.TryGetValue (uri, out var downloadTask))\n    return downloadTask;\n  else\n    return _cache [uri] = new WebClient().DownloadStringTaskAsync (uri);\n}\n```", "```cs\nasync ValueTask<int> Foo() { ... }\n```", "```cs\nint answer = await Foo();   // (Potentially) allocation-free\n```", "```cs\nawait Foo();   // Safe\n```", "```cs\nValueTask<int> valueTask = Foo();  // Caution!\n// Our use of valueTask can now lead to errors.\n```", "```cs\nTask<int> task = Foo().AsTask();   // Safe\n// task is safe to work with.\n```", "```cs\nasync void A() { ... await B(); ... }\n\nasync Task B()\n{\n  for (int i = 0; i < 1000; i++)\n    await C().ConfigureAwait (false);\n}\n\nasync Task C() { ... }\n```", "```cs\nclass CancellationToken\n{\n  public bool IsCancellationRequested { get; private set; }\n  public void Cancel() { IsCancellationRequested = true; }\n  public void ThrowIfCancellationRequested()\n  {\n    if (IsCancellationRequested)\n      throw new OperationCanceledException();\n  }\n}\n```", "```cs\nasync Task Foo (CancellationToken cancellationToken)\n{\n  for (int i = 0; i < 10; i++)\n  {\n    Console.WriteLine (i);\n    await Task.Delay (1000);\n    cancellationToken.ThrowIfCancellationRequested();\n  }\n}\n```", "```cs\nvar cancelSource = new CancellationTokenSource();\n```", "```cs\nvar cancelSource = new CancellationTokenSource();\nTask foo = Foo (cancelSource.Token);\n...\n... *(sometime later)*\ncancelSource.Cancel();\n```", "```cs\nasync Task Foo (CancellationToken cancellationToken)\n{\n  for (int i = 0; i < 10; i++)\n  {\n    Console.WriteLine (i);\n    await Task.Delay (1000, cancellationToken);\n  }\n}\n```", "```cs\nvar cancelSource = new CancellationTokenSource();\nTask.Delay (5000).ContinueWith (ant => cancelSource.Cancel());\n...\n```", "```cs\nvar cancelSource = new CancellationTokenSource (5000);\ntry { await Foo (cancelSource.Token); }\ncatch (OperationCanceledException ex) { Console.WriteLine (\"Cancelled\"); }\n```", "```cs\nTask Foo (Action<int> onProgressPercentChanged)\n{\n  return Task.Run (() =>\n  {\n    for (int i = 0; i < 1000; i++)\n    {\n      if (i % 10 == 0) onProgressPercentChanged (i / 10);\n      // Do something compute-bound...\n    }\n  });\n}\n```", "```cs\nAction<int> progress = i => Console.WriteLine (i + \" %\");\nawait Foo (progress);\n```", "```cs\npublic interface IProgress<in T>\n{\n  void Report (T value);\n}\n```", "```cs\nTask Foo (IProgress<int> onProgressPercentChanged)\n{\n  return Task.Run (() =>\n  {\n    for (int i = 0; i < 1000; i++)\n    {\n      if (i % 10 == 0) onProgressPercentChanged.Report (i / 10);\n      // Do something compute-bound...\n    }\n  });\n}\n```", "```cs\nvar progress = new Progress<int> (i => Console.WriteLine (i + \" %\"));\nawait Foo (progress);\n```", "```cs\nIAsyncActionWithProgress<TProgress>\nIAsyncOperationWithProgress<TResult, TProgress>\n```", "```cs\nvar progress = new Progress<int> (i => Console.WriteLine (i + \" %\"));\nCancellationToken cancelToken = ...\nvar task = someWinRTobject.FooAsync().AsTask (cancelToken, progress);\n```", "```cs\nasync Task<int> Delay1() { await Task.Delay (1000); return 1; }\nasync Task<int> Delay2() { await Task.Delay (2000); return 2; }\nasync Task<int> Delay3() { await Task.Delay (3000); return 3; }\n```", "```cs\nTask<int> winningTask = await Task.WhenAny (Delay1(), Delay2(), Delay3());\nConsole.WriteLine (\"Done\");\nConsole.WriteLine (winningTask.Result);   // 1\n```", "```cs\nConsole.WriteLine (await winningTask);   // 1\n```", "```cs\nint answer = await await Task.WhenAny (Delay1(), Delay2(), Delay3());\n```", "```cs\nTask<string> task = SomeAsyncFunc();\nTask winner = await (Task.WhenAny (task, Task.Delay(5000)));\nif (winner != task) throw new TimeoutException();\nstring result = await task;   // Unwrap result/re-throw\n```", "```cs\nawait Task.WhenAll (Delay1(), Delay2(), Delay3());\n```", "```cs\nTask task1 = Delay1(), task2 = Delay2(), task3 = Delay3();\nawait task1; await task2; await task3;\n```", "```cs\nTask task1 = Task.Run (() => { throw null; } );\nTask task2 = Task.Run (() => { throw null; } );\nTask all = Task.WhenAll (task1, task2);\ntry { await all; }\ncatch\n{\n  Console.WriteLine (all.Exception.InnerExceptions.Count);   // 2 \n}   \n```", "```cs\nTask<int> task1 = Task.Run (() => 1);\nTask<int> task2 = Task.Run (() => 2);\nint[] results = await Task.WhenAll (task1, task2);   // { 1, 2 }\n```", "```cs\nasync Task<int> GetTotalSize (string[] uris)\n{\n  IEnumerable<Task<byte[]>> downloadTasks = uris.Select (uri => \n    new WebClient().DownloadDataTaskAsync (uri));\n\n  byte[][] contents = await Task.WhenAll (downloadTasks);\n  return contents.Sum (c => c.Length);\n}\n```", "```cs\nasync Task<int> GetTotalSize (string[] uris)\n{\n  IEnumerable<Task<int>> downloadTasks = uris.Select (async uri =>\n    (await new WebClient().DownloadDataTaskAsync (uri)).Length);\n\n  int[] contentLengths = await Task.WhenAll (downloadTasks);\n  return contentLengths.Sum();\n}\n```", "```cs\nasync static Task<TResult> WithTimeout<TResult> (this Task<TResult> task,\n                                                 TimeSpan timeout)\n{\n  Task winner = await Task.WhenAny (task, Task.Delay (timeout))\n                          .ConfigureAwait (false);\n  if (winner != task) throw new TimeoutException();\n  return await task.ConfigureAwait (false);   // Unwrap result/re-throw\n}\n```", "```cs\nasync static Task<TResult> WithTimeout<TResult> (this Task<TResult> task,\n                                                 TimeSpan timeout)\n{\n  var cancelSource = new CancellationTokenSource();\n  var delay = Task.Delay (timeout, cancelSource.Token);\n  Task winner = await Task.WhenAny (task, delay).ConfigureAwait (false);\n  if (winner == task)\n    cancelSource.Cancel();\n  else\n    throw new TimeoutException();\n  return await task.ConfigureAwait (false);   // Unwrap result/re-throw\n}\n```", "```cs\nstatic Task<TResult> WithCancellation<TResult> (this Task<TResult> task,\n                                          CancellationToken cancelToken)\n{\n  var tcs = new TaskCompletionSource<TResult>();\n  var reg = cancelToken.Register (() => tcs.TrySetCanceled ());\n  task.ContinueWith (ant => \n  {\n    reg.Dispose();\n    if (ant.IsCanceled)\n      tcs.TrySetCanceled();\n    else if (ant.IsFaulted)\n      tcs.TrySetException (ant.Exception.InnerExceptions);\n    else\n      tcs.TrySetResult (ant.Result);\n  });\n  return tcs.Task;\n}\n```", "```cs\nasync Task<TResult[]> WhenAllOrError<TResult> \n  (params Task<TResult>[] tasks)\n{\n  var killJoy = new TaskCompletionSource<TResult[]>();\n  foreach (var task in tasks)\n    task.ContinueWith (ant =>\n    {\n      if (ant.IsCanceled) \n        killJoy.TrySetCanceled();\n      else if (ant.IsFaulted)\n        killJoy.TrySetException (ant.Exception.InnerExceptions);\n    });\n  return await await Task.WhenAny (killJoy.Task, Task.WhenAll (tasks))\n                         .ConfigureAwait (false);\n}\n```", "```cs\npublic int Read (byte[] buffer, int offset, int size);\n```", "```cs\npublic Task<int> ReadAsync (byte[] buffer, int offset, int size);\n```", "```cs\npublic IAsyncResult BeginRead (byte[] buffer, int offset, int size,\n                               AsyncCallback callback, object state);\npublic int EndRead (IAsyncResult asyncResult);\n```", "```cs\npublic delegate void AsyncCallback (IAsyncResult ar);\n```", "```cs\nTask<int> readChunk = Task<int>.Factory.FromAsync (\n  stream.BeginRead, stream.EndRead, buffer, 0, 1000, null);\n```", "```cs\n// These members are from the WebClient class:\n\npublic byte[] DownloadData (Uri address);    // Synchronous version\npublic void DownloadDataAsync (Uri address);\npublic void DownloadDataAsync (Uri address, object userToken);\npublic event DownloadDataCompletedEventHandler DownloadDataCompleted;\n\npublic void CancelAsync (object userState);  // Cancels an operation\npublic bool IsBusy { get; }                  // Indicates if still running\n```", "```cs\npublic event DownloadProgressChangedEventHandler DownloadProgressChanged;\n```", "```cs\nvar worker = new BackgroundWorker { WorkerSupportsCancellation = true };\nworker.DoWork += (sender, args) =>\n{                                      // This runs on a worker thread\n  if (args.Cancel) return;\n  Thread.Sleep(1000); \n  args.Result = 123;\n};\nworker.RunWorkerCompleted += (sender, args) =>    \n{                                                  // Runs on UI thread\n  // We can safely update UI controls here...\n  if (args.Cancelled)\n    Console.WriteLine (\"Cancelled\");\n  else if (args.Error != null)\n    Console.WriteLine (\"Error: \" + args.Error.Message);\n  else\n    Console.WriteLine (\"Result is: \" + args.Result);\n};\nworker.RunWorkerAsync();   // Captures sync context and starts operation\n```"]