["```cs\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n\nnamespace ImageManagement.Tests;\n\n`[TestClass]`\npublic class WhenPropertiesRetrieved\n{\n    private ImageMetadataReader? _reader;\n\n    `[TestInitialize]`\n    public void Initialize()\n    {\n        _reader = new ImageMetadataReader(TestFiles.GetImage());\n    }\n\n    `[TestMethod]`\n    public void ReportsCameraMaker()\n    {\n        Assert.AreEqual(_reader!.CameraManufacturer, \"Fabrikam\");\n    }\n\n    `[TestMethod]`\n    public void ReportsCameraModel()\n    {\n        Assert.AreEqual(_reader!.CameraModel, \"Fabrikam F450D\");\n    }\n}\n```", "```cs\n`[TestCategory(\"Property Handling\")]`\n[TestMethod]\npublic void ReportsCameraMaker()\n{\n    ...\n```", "```cs\n`[ExpectedException(typeof(ArgumentException), AllowDerivedTypes = true)]`\n[TestMethod]\npublic void ThrowsWhenNameMalformed()\n{\n    ...\n```", "```cs\n[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage(\n \"Style\",\n \"IDE0060:Remove unused parameter\",\n Justification = \"This is just some example code from a book\",\n Scope = \"member\",\n Target = \"~M:Idg.Examples.SomeMethod\")]\n```", "```cs\nusing System.Diagnostics;\n\n[module: Debuggable(DebuggableAttribute.DebuggingModes.DisableOptimizations)]\n```", "```cs\n[field: NonSerialized]\npublic int DynamicId { get; set; }\n\n[field: NonSerialized]\npublic event EventHandler? Frazzled;\n```", "```cs\n[DllImport(\"User32.dll\")]\n[return: MarshalAs(UnmanagedType.Bool)]\nstatic extern bool IsWindowVisible(HandleRef hWnd);\n```", "```cs\napp.MapGet(\n    \"/items/{id}\",\n [Authorize] ([FromRoute] int id) => $\"Item {id} requested\");\n```", "```cs\n//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"MyCompany\")]\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Debug\")]\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0\")]\n[assembly: System.Reflection.AssemblyProductAttribute(\"MyApp\")]\n[assembly: System.Reflection.AssemblyTitleAttribute(\"MyApp\")]\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n```", "```cs\n[assembly: AssemblyVersion(\"1.0.0.0\")]\n[assembly: AssemblyFileVersion(\"1.0.0.0\")]\n```", "```cs\n[assembly: AssemblyTitle(\"ExamplePlugin\")]\n[assembly: AssemblyDescription(\"An example plug-in DLL\")]\n[assembly: AssemblyConfiguration(\"Retail\")]\n[assembly: AssemblyCompany(\"Endjin Ltd.\")]\n[assembly: AssemblyProduct(\"ExamplePlugin\")]\n[assembly: AssemblyCopyright(\"Copyright Â© 2022 Endjin Ltd.\")]\n[assembly: AssemblyTrademark(\"\")]\n```", "```cs\npublic static void Log(\n    string message,\n [CallerMemberName] string callingMethod = \"\",\n [CallerFilePath] string callingFile = \"\",\n [CallerLineNumber] int callingLineNumber = 0)\n{\n    Console.WriteLine(\"Message {0}, called from {1} in file '{2}', line {3}\",\n        message, callingMethod, callingFile, callingLineNumber);\n}\n```", "```cs\npublic interface INotifyPropertyChanged\n{\n    event PropertyChangedEventHandler? PropertyChanged;\n}\n```", "```cs\npublic class NotifyPropertyChanged : INotifyPropertyChanged\n{\n    public event PropertyChangedEventHandler? PropertyChanged;\n\n    protected bool SetProperty<T>(\n        ref T field,\n        T value,\n [CallerMemberName] string propertyName = \"\")\n    {\n        if (Equals(field, value))\n        {\n            return false;\n        }\n\n        field = value;\n\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n        return true;\n    }\n}\n```", "```cs\npublic class MyViewModel : NotifyPropertyChanged\n{\n    private string? _name;\n\n    public string? Name\n    {\n        get => _name;\n        set => SetProperty(ref _name, value);\n    }\n}\n```", "```cs\npublic class ArgumentNullException\n{\n    public static void ThrowIfNull(\n [NotNull] object? argument,\n [CallerArgumentExpression(\"argument\")] string? paramName =  null)\n    {\n...\n```", "```cs\nstatic void Greet(string greetingRecipient)\n{\n    ArgumentNullException.ThrowIfNull(greetingRecipient);\n    Console.WriteLine($\"Hello, {greetingRecipient}\");\n}\n\nGreet(\"world\");\nGreet(null!);\n```", "```cs\nValue cannot be null. (Parameter 'greetingRecipient')\n```", "```cs\n[assembly:InternalsVisibleTo(\"ImageManagement.Tests\")]\n[assembly:InternalsVisibleTo(\"ImageServices.Tests\")]\n```", "```cs\n[DllImport(\"advapi32.dll\", CharSet = CharSet.Unicode, SetLastError = true,\n EntryPoint = \"LookupPrivilegeValueW\")]\ninternal static extern bool LookupPrivilegeValue(\n [MarshalAs(UnmanagedType.LPWStr)] string lpSystemName,\n [MarshalAs(UnmanagedType.LPWStr)] string lpName,\n    out LUID lpLuid);\n```", "```cs\n[AttributeUsage(AttributeTargets.Class)]\npublic class PluginInformationAttribute : Attribute\n{\n    public PluginInformationAttribute(string name, string author)\n    {\n        Name = name;\n        Author = author;\n    }\n\n    public string Name { get; }\n\n    public string Author { get; }\n\n    public string? Description { get; set; }\n}\n```", "```cs\n[PluginInformation(\"Reporting\", \"Endjin Ltd.\")]\npublic class ReportingPlugin\n{\n    ...\n}\n```", "```cs\n[PluginInformation(\"Reporting\", \"Endjin Ltd.\", `Description = \"Automated report generation\")]`\npublic class ReportingPlugin\n{\n    ...\n}\n```", "```cs\npublic interface ICustomAttributeProvider\n{\n    object[] GetCustomAttributes(bool inherit);\n    object[] GetCustomAttributes(Type attributeType, bool inherit);\n    bool IsDefined(Type attributeType, bool inherit);\n}\n```", "```cs\nstatic void ShowPluginInformation(string pluginFolder)\n{\n    var dir = new DirectoryInfo(pluginFolder);\n    foreach (FileInfo file in dir.GetFiles(\"*.dll\"))\n    {\n        Assembly pluginAssembly = Assembly.LoadFrom(file.FullName);\n        var plugins =\n             from type in pluginAssembly.ExportedTypes\n             `let` `info` `=` `type``.``GetCustomAttribute``<``PluginInformationAttribute``>``(``)`\n             where info != null\n             select new { type, info };\n\n        foreach (var plugin in plugins)\n        {\n            Console.WriteLine($\"Plugin type: {plugin.type.Name}\");\n            Console.WriteLine(\n                $\"Name: {plugin.info.Name}, written by {plugin.info.Author}\");\n            Console.WriteLine($\"Description: {plugin.info.Description}\");\n        }\n    }\n}\n\n```", "```cs\nstring[] runtimeAssemblies = Directory.GetFiles(\n    RuntimeEnvironment.GetRuntimeDirectory(), \"*.dll\");\nvar paths = new List<string>(runtimeAssemblies);\npaths.Add(file.FullName);\n\nvar resolver = new PathAssemblyResolver(paths);\nvar mlc = new MetadataLoadContext(resolver);\n\nAssembly pluginAssembly = mlc.LoadFromAssemblyPath(file.FullName);\nvar plugins =\n     from type in pluginAssembly.ExportedTypes\n     `let` `info` `=` `type``.``GetCustomAttributesData``(``)``.``SingleOrDefault``(``attrData` `=``>`\n            `attrData``.``AttributeType``.``FullName` `=``=` `pluginAttributeType``.``FullName``)`\n     where info != null\n     let description = info.NamedArguments\n                           .SingleOrDefault(a => a.MemberName == \"Description\")\n     select new\n     {\n         type,\n         Name = (string) info.ConstructorArguments[0].Value,\n         Author = (string) info.ConstructorArguments[1].Value,\n         Description =\n             description == null ? null : description.TypedValue.Value\n     };\n\nforeach (var plugin in plugins)\n{\n    Console.WriteLine($\"Plugin type: {plugin.type.Name}\");\n    Console.WriteLine($\"Name: {plugin.Name}, written by {plugin.Author}\");\n    Console.WriteLine($\"Description: {plugin.Description}\");\n}\n```"]