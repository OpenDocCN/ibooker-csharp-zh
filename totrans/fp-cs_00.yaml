- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Functional Programming (FP) is one of the greatest innovations in the history
    of software development, it’s also cool. Fun as well. Not only that, but it’s
    gaining traction year by year.
  prefs: []
  type: TYPE_NORMAL
- en: I attend developer’s conferences as often as I’m able, and I’ve noticed a trend.
    Each year, there always seems to be more content about Functional Programming,
    not less. There is often even an entire track dedicated to it, and the other talks
    even often include FP content somewhere as a talking point.
  prefs: []
  type: TYPE_NORMAL
- en: It’s slowly, but surely, becoming a big deal. Why is that?
  prefs: []
  type: TYPE_NORMAL
- en: With the growth of concepts like containerization and serverless applications,
    FP isn’t just a bit of fun for developer’s free-time projects; it’s not a fad
    that’ll be forgotten in a few years. It has real benefit to bring to our stakeholders.
  prefs: []
  type: TYPE_NORMAL
- en: In the .NET world there are several additional factors at play.
  prefs: []
  type: TYPE_NORMAL
- en: Mads Torgerson, the C# Lead Designer is himself a fan of functional programming,
    and one of the major driving forces behind the adoption of the functional paradigm
    into .NET. There’s also F# - the .NET functional language. F# and C# share a common
    runtime, consequently many functional features requested by the F# team often
    become available in C# in some form as well.
  prefs: []
  type: TYPE_NORMAL
- en: The big question though - What is it? And^([1](preface01.html#idm45400887144768)),
    will I need to learn an entire new programming language just to be able to use
    it? The good news is that if you’re a .NET developer, then you don’t need to spend
    large chunks of your own time learning a new technology just to stay up-to-date
    - you don’t even have to invest in another 3rd party library to add to your application’s
    dependencies - this is all possible with out-of-the-box C# code - albeit with
    a little tinkering around.
  prefs: []
  type: TYPE_NORMAL
- en: This book is going to introduce all the fundamental concepts of Functional Programming,
    demonstrate their benefits, and how they might be achieved in C# - not just for
    your own hobby programming, but with a very real eye towards how they can be used
    to bring immediate benefit to your work life as well.
  prefs: []
  type: TYPE_NORMAL
- en: Who Should Read This Book?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is intended for developers - whether professional, students, or hobbyist
    - who already have a basic grounding in C#. You don’t need to be an expert, but
    you’ll need to be familiar with the basics, and feel comfortable putting together
    at least a relatively simply C# application.
  prefs: []
  type: TYPE_NORMAL
- en: There will be some more advanced .NET topics covered, but I’ll provide explainations
    when they come up.
  prefs: []
  type: TYPE_NORMAL
- en: 'This book has been written with a few different catagories of people in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: Those of you that have learned the basics of C#, but want to find ways to take
    your learning further. To learn more advanced techniques to write better, more
    robust code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: .NET developers that have heard of Functional Programming, and perhaps even
    know what it is, but want to know how to get started writing code that way in
    C#.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: F# developers looking for ways to keep using the Functional toys you’re used
    to.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Those migrating to .NET from another functional, or functional-supporting language
    (like Java).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anyone that really, truly loves coding. If you spend all day writing code in
    the office, then come home to write more for fun, then this book is probably for
    you.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why I wrote this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I’ve been interested in programming for as long as I can remember. When I was
    a young boy, we had a ZX Spectrum - an early British home computer developed by
    Sinclair Research in the early 80s. If anyone remembers the Commodore 64, it was
    a bit like that, but far more primitive. It had just 15 colours^([2](preface01.html#idm45400888509984))
    - and one of them was black. I had the more advanced model with 48k of memory,
    though my Dad had the earlier machine - the ZX81 - which had a single kilobyte
    of memory available (and rubber keys). It couldn’t even have colored-in character
    sprites, just areas of the screen, so your game avatar would change colour to
    that of whatever they were standing in front of. In short, it was pure awesome
    on toast.
  prefs: []
  type: TYPE_NORMAL
- en: One of the best things about it was that it had an OS that effectively consisted
    of a text-based programming interface, and code was required to load a game (from
    a cassette tape, with the command LOAD “”), but there were also magazines and
    books for kids with code for games you could enter yourself, and it was from these
    that I developed my lasting obsession with the mysteries of computer code. Thanks
    so much, Usbourne Publishing!
  prefs: []
  type: TYPE_NORMAL
- en: When I was around 14 years old or so, a computer-based careers advice program
    at school suggested I could think about taking up a career in software development.
    This is the first time I realised that you could take this silly hobby and turn
    it into something that you could actually make money from!
  prefs: []
  type: TYPE_NORMAL
- en: After University was over, it was time to get a proper job, and that was where
    I got my first exposure to C#. So, the next step, I supposed, was to learn how
    to develop code *properly*. Easy, right? I’ll be honest, nearly 2 decades on,
    and I’m still trying to work that out.
  prefs: []
  type: TYPE_NORMAL
- en: One of the big turning points for me in my programming career was when I attended
    a developer’s conference in Norway, and finally started to understand what this
    “Functional Programming” thing I’d been hearing about was actually about. Functional
    code is elegant, concise and easy to read in a way that other forms of code just
    don’t seem to be. As with any type of code, it’s still possible to write horrible-looking
    codebases, but it still fundamentally feels like it’s finally code being done
    *properly*, in a way that I’ve never really felt from other styles of coding.
    Hopefully after reading this book, you’ll not only agree, but be interested in
    searching out the many other avenues that exist out there for exploring it further.
  prefs: []
  type: TYPE_NORMAL
- en: Navigating This Book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is how I’ve organized this book:'
  prefs: []
  type: TYPE_NORMAL
- en: The introduction talks about what exactly Functional Programming is, where it
    comes from, and why any of us should be interested in it. I argue that it brings
    significant business benefits to our employers, and that it’s a skill worth adding
    to your developer toolbelt.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 1 looks at what you can do right now to start coding Functionally in
    C#, without having to reference a single new Nuget package, 3rd party library
    or hack around with the language. Nearly all of the examples in this chapter work
    with just about every version of C# since version 3\. This chapter represents
    the very first steps into Functional Programming, all fairly easy code, but it
    sets the groundwork for what’s to come.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 2 provides some slightly less conventional ways to look at structures
    already available to us in C#. It includes ways to take the Functional Paradigm
    a bit futher. At this point there are still no extra code dependencies, but things
    start to look a bit more unusual here.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapters 4 to 7 each show a component of the Functional Programming paradigm
    and how you can go about implementing it in C#. It’s in these chapters that we
    start to play around with the structure of C# a little.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapters 8 and 9 talk more about the practicalities of uing Functional C# in
    a business environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Feel free to dive in at the level you feel ready for. This isn’t a novel^([3](preface01.html#idm45400888030352)),
    read the chapters in the order that makes sense to you.
  prefs: []
  type: TYPE_NORMAL
- en: Acknowledgments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The very first person I should thank is Kathleen Dollard. She gave a talk at
    NDC Oslo some years ago called “Functional Techniques for C#”. It was the first
    real exposure I’d ever had to Functional Programming, and it was [a real eye-opener
    (https://www.youtube.com/watch?v=rHmIf5xmKQg)](https://www.youtube.com/watch?v=rHmIf5xmKQg).
  prefs: []
  type: TYPE_NORMAL
- en: 'The other guru I’ve followed on this trail is Enrico Buananno, who’s book “Functional
    Programming in C#” (ISBN: 978-1617293955) was the first that allowed me to properly
    understand for the first time, how some of the hard-to-grasp functional concepts
    worked.'
  prefs: []
  type: TYPE_NORMAL
- en: Ian Russell, Matthew Fletcher, Liam Riley, Max Dietze, Steve “Talks Code” Collins,
    Gerardo Lijs, Matt Eland, Rahul Nath, Siva Gudivada, Christian Horsdal, Martin
    Fuß, Dave McCollough, Sebastian Robbins, David Schaefer, Peter De Tender, Mark
    Seeman who read the early drafts and provided invaluable feedback. Thanks, folks!
  prefs: []
  type: TYPE_NORMAL
- en: My editor, Jill Leonard. She must have the patience of a saint to put up with
    me for a whole year!
  prefs: []
  type: TYPE_NORMAL
- en: Conventions Used in This Book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following typographical conventions are used in this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Italic*'
  prefs: []
  type: TYPE_NORMAL
- en: Indicates new terms, URLs, email addresses, filenames, and file extensions.
  prefs: []
  type: TYPE_NORMAL
- en: '`Constant width`'
  prefs: []
  type: TYPE_NORMAL
- en: Used for program listings, as well as within paragraphs to refer to program
    elements such as variable or function names, databases, data types, environment
    variables, statements, and keywords.
  prefs: []
  type: TYPE_NORMAL
- en: '**`Constant width bold`**'
  prefs: []
  type: TYPE_NORMAL
- en: Shows commands or other text that should be typed literally by the user.
  prefs: []
  type: TYPE_NORMAL
- en: '*`Constant width italic`*'
  prefs: []
  type: TYPE_NORMAL
- en: Shows text that should be replaced with user-supplied values or by values determined
    by context.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element signifies a tip or suggestion.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element signifies a general note.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element indicates a warning or caution.
  prefs: []
  type: TYPE_NORMAL
- en: Using Code Examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Supplemental material (code examples, exercises, etc.) is available for download
    at LINK TO COME.
  prefs: []
  type: TYPE_NORMAL
- en: If you have a technical question or a problem using the code examples, please
    send email to [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: This book is here to help you get your job done. In general, if example code
    is offered with this book, you may use it in your programs and documentation.
    You do not need to contact us for permission unless you’re reproducing a significant
    portion of the code. For example, writing a program that uses several chunks of
    code from this book does not require permission. Selling or distributing examples
    from O’Reilly books does require permission. Answering a question by citing this
    book and quoting example code does not require permission. Incorporating a significant
    amount of example code from this book into your product’s documentation does require
    permission.
  prefs: []
  type: TYPE_NORMAL
- en: 'We appreciate, but generally do not require, attribution. An attribution usually
    includes the title, author, publisher, and ISBN. For example: “*Functional Programming
    with C#* by Simon J. Painter (O’Reilly). Copyright 2024 Simon Painter, 978-1-492-09707-5.”'
  prefs: []
  type: TYPE_NORMAL
- en: If you feel your use of code examples falls outside fair use or the permission
    given above, feel free to contact us at [*permissions@oreilly.com*](mailto:permissions@oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: O’Reilly Online Learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For more than 40 years, [*O’Reilly Media*](http://oreilly.com) has provided
    technology and business training, knowledge, and insight to help companies succeed.
  prefs: []
  type: TYPE_NORMAL
- en: Our unique network of experts and innovators share their knowledge and expertise
    through books, articles, and our online learning platform. O’Reilly’s online learning
    platform gives you on-demand access to live training courses, in-depth learning
    paths, interactive coding environments, and a vast collection of text and video
    from O’Reilly and 200+ other publishers. For more information, visit [*http://oreilly.com*](http://oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: How to Contact Us
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please address comments and questions concerning this book to the publisher:'
  prefs: []
  type: TYPE_NORMAL
- en: O’Reilly Media, Inc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1005 Gravenstein Highway North
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sebastopol, CA 95472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 800-998-9938 (in the United States or Canada)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 707-829-0515 (international or local)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 707-829-0104 (fax)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have a web page for this book, where we list errata, examples, and any additional
    information. You can access this page at LINK TO COME.
  prefs: []
  type: TYPE_NORMAL
- en: Email [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com) to comment
    or ask technical questions about this book.
  prefs: []
  type: TYPE_NORMAL
- en: For news and information about our books and courses, visit [*http://oreilly.com*](http://oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'Find us on Facebook: [*http://facebook.com/oreilly*](http://facebook.com/oreilly)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow us on Twitter: [*http://twitter.com/oreillymedia*](http://twitter.com/oreillymedia)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Watch us on YouTube: [*http://www.youtube.com/oreillymedia*](http://www.youtube.com/oreillymedia)'
  prefs: []
  type: TYPE_NORMAL
- en: Dedication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is dedicated to my wife, Sushma Mahadik. My Billi. Also to my two
    daughters, Sophie and Katie. Your daddy loves you, girls.
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](preface01.html#idm45400887144768-marker)) OK, The **two** questions
  prefs: []
  type: TYPE_NORMAL
- en: ^([2](preface01.html#idm45400888509984-marker)) 8 base colors, and a bright
    version of each. One was Black, though, and how on earth can you have bright black!
    So..15.
  prefs: []
  type: TYPE_NORMAL
- en: ^([3](preface01.html#idm45400888030352-marker)) but if it were, you can guarantee
    the Butler would have done it!
  prefs: []
  type: TYPE_NORMAL
