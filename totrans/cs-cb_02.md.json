["```cs\npublic class InvoiceItem\n{\n    public decimal Cost { get; set; }\n    public string Description { get; set; }\n}\n```", "```cs\nstatic List<InvoiceItem> GetInvoiceItems()\n{\n    var items = new List<InvoiceItem>();\n    var rand = new Random();\n    for (int i = 0; i < 100; i++)\n        items.Add(\n            new InvoiceItem\n            {\n                Cost = rand.Next(i),\n                Description = \"Invoice Item #\" + (i+1)\n            });\n\n    return items;\n}\n```", "```cs\nstatic string DoStringConcatenation(List<InvoiceItem> lineItems)\n{\n    string report = \"\";\n\n    foreach (var item in lineItems)\n        report += $\"{item.Cost:C} - {item.Description}\\n\";\n\n    return report;\n}\n```", "```cs\nstatic string DoStringBuilderConcatenation(List<InvoiceItem> lineItems)\n{\n    var reportBuilder = new StringBuilder();\n\n    foreach (var item in lineItems)\n        reportBuilder.Append($\"{item.Cost:C} - {item.Description}\\n\");\n\n    return reportBuilder.ToString();\n}\n```", "```cs\nstatic void Main(string[] args)\n{\n    List<InvoiceItem> lineItems = GetInvoiceItems();\n\n    DoStringConcatenation(lineItems);\n\n    DoStringBuilderConcatenation(lineItems);\n}\n```", "```cs\nclass Program\n{\n    const string FileName = \"Invoice.txt\";\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(\n            \"Invoice App\\n\" +\n            \"-----------\\n\");\n\n        WriteDetails();\n\n        ReadDetails();\n    }\n\n    static void WriteDetails()\n    {\n        using var writer = new StreamWriter(FileName);\n\n        Console.WriteLine(\"Type details and press [Enter] to end.\\n\");\n\n        string detail;\n        do\n        {\n            Console.Write(\"Detail: \");\n            detail = Console.ReadLine();\n            writer.WriteLine(detail);\n        }\n        while (!string.IsNullOrWhiteSpace(detail));\n    }\n\n    static void ReadDetails()\n    {\n        Console.WriteLine(\"\\nInvoice Details:\\n\");\n\n        using var reader = new StreamReader(FileName);\n\n        string detail;\n        do\n        {\n            detail = reader.ReadLine();\n            Console.WriteLine(detail);\n        }\n        while (!string.IsNullOrWhiteSpace(detail));\n    }\n}\n```", "```cs\npublic enum CustomerType\n{\n    None,\n    Bronze,\n    Silver,\n    Gold\n}\n\npublic class InvoiceItem\n{\n    public decimal Cost { get; set; }\n    public string Description { get; set; }\n}\n```", "```cs\nstatic List<InvoiceItem> GetInvoiceItems()\n{\n    var items = new List<InvoiceItem>();\n    var rand = new Random();\n    for (int i = 0; i < 100; i++)\n        items.Add(\n            new InvoiceItem\n            {\n                Cost = rand.Next(i),\n                Description = \"Invoice Item #\" + (i + 1)\n            });\n\n    return items;\n}\n```", "```cs\nstatic void Main()\n{\n    List<InvoiceItem> lineItems = GetInvoiceItems();\n\n    decimal total = 0;\n\n    foreach (var item in lineItems)\n        total += item.Cost;\n\n    total = ApplyDiscount(total, CustomerType.Gold);\n\n    Console.WriteLine($\"Total Invoice Balance: {total:C}\");\n\n    decimal ApplyDiscount(decimal total, CustomerType customerType)\n    {\n        switch (customerType)\n        {\n            case CustomerType.Bronze:\n                return total - total * .10m;\n            case CustomerType.Silver:\n                return total - total * .05m;\n            case CustomerType.Gold:\n                return total - total * .02m;\n            case CustomerType.None:\n            default:\n                return total;\n        }\n    }\n}\n```", "```cs\npublic interface IInvoice\n{\n    bool IsApproved();\n\n    void PopulateLineItems();\n\n    void CalculateBalance();\n\n    void SetDueDate();\n}\n```", "```cs\npublic class BankInvoice : IInvoice\n{\n    public void CalculateBalance()\n    {\n        Console.WriteLine(\"Calculating balance for BankInvoice.\");\n    }\n\n    public bool IsApproved()\n    {\n        Console.WriteLine(\"Checking approval for BankInvoice.\");\n        return true;\n    }\n\n    public void PopulateLineItems()\n    {\n        Console.WriteLine(\"Populating items for BankInvoice.\");\n    }\n\n    public void SetDueDate()\n    {\n        Console.WriteLine(\"Setting due date for BankInvoice.\");\n    }\n}\n\npublic class EnterpriseInvoice : IInvoice\n{\n    public void CalculateBalance()\n    {\n        Console.WriteLine(\"Calculating balance for EnterpriseInvoice.\");\n    }\n\n    public bool IsApproved()\n    {\n        Console.WriteLine(\"Checking approval for EnterpriseInvoice.\");\n        return true;\n    }\n\n    public void PopulateLineItems()\n    {\n        Console.WriteLine(\"Populating items for EnterpriseInvoice.\");\n    }\n\n    public void SetDueDate()\n    {\n        Console.WriteLine(\"Setting due date for EnterpriseInvoice.\");\n    }\n}\n\npublic class GovernmentInvoice : IInvoice\n{\n    public void CalculateBalance()\n    {\n        Console.WriteLine(\"Calculating balance for GovernmentInvoice.\");\n    }\n\n    public bool IsApproved()\n    {\n        Console.WriteLine(\"Checking approval for GovernmentInvoice.\");\n        return true;\n    }\n\n    public void PopulateLineItems()\n    {\n        Console.WriteLine(\"Populating items for GovernmentInvoice.\");\n    }\n\n    public void SetDueDate()\n    {\n        Console.WriteLine(\"Setting due date for GovernmentInvoice.\");\n    }\n}\n```", "```cs\nstatic IEnumerable<IInvoice> GetInvoices()\n{\n    return new List<IInvoice>\n    {\n        new BankInvoice(),\n        new EnterpriseInvoice(),\n        new GovernmentInvoice()\n    };\n}\n```", "```cs\nstatic void Main(string[] args)\n{\n    IEnumerable<IInvoice> invoices = GetInvoices();\n\n    foreach (var invoice in invoices)\n    {\n        if (invoice.IsApproved())\n        {\n            invoice.CalculateBalance();\n            invoice.PopulateLineItems();\n            invoice.SetDueDate();\n        }\n    }\n}\n```", "```cs\npublic class Invoice : IEquatable<Invoice>\n{\n    public int CustomerID { get; set; }\n\n    public DateTime Created { get; set; }\n\n    public List<string> InvoiceItems { get; set; }\n\n    public decimal Total { get; set; }\n\n    public bool Equals(Invoice other)\n    {\n        if (ReferenceEquals(other, null))\n            return false;\n\n        if (ReferenceEquals(this, other))\n            return true;\n\n        if (GetType() != other.GetType())\n            return false;\n\n        return\n            CustomerID == other.CustomerID &&\n            Created.Date == other.Created.Date;\n    }\n\n    public override bool Equals(object other)\n    {\n        return Equals(other as Invoice);\n    }\n\n    public override int GetHashCode()\n    {\n        return (CustomerID + Created.Ticks).GetHashCode();\n    }\n\n    public static bool operator ==(Invoice left, Invoice right)\n    {\n        if (ReferenceEquals(left, null))\n            return ReferenceEquals(right, null);\n\n        return left.Equals(right);\n    }\n\n    public static bool operator !=(Invoice left, Invoice right)\n    {\n        return !(left == right);\n    }\n}\n```", "```cs\nstatic List<Invoice> GetAllInvoices()\n{\n    DateTime date = DateTime.Now;\n\n    return new List<Invoice>\n    {\n        new Invoice { CustomerID = 1, Created = date },\n        new Invoice { CustomerID = 2, Created = date },\n        new Invoice { CustomerID = 1, Created = date },\n        new Invoice { CustomerID = 3, Created = date }\n    };\n}\n```", "```cs\nstatic void Main(string[] args)\n{\n    List<Invoice> allInvoices = GetAllInvoices();\n\n    Console.WriteLine($\"# of All Invoices: {allInvoices.Count}\");\n\n    var invoicesToProcess = new List<Invoice>();\n\n    foreach (var invoice in allInvoices)\n    {\n        if (!invoicesToProcess.Contains(invoice))\n            invoicesToProcess.Add(invoice);\n    }\n\n    Console.WriteLine($\"# of Invoices to Process: {invoicesToProcess.Count}\");\n}\n```", "```cs\npublic class BillingCategory\n{\n    public int ID { get; set; }\n    public string Name { get; set; }\n    public int? Parent { get; set; }\n}\n```", "```cs\nstatic List<BillingCategory> GetBillingCategories()\n{\n    return new List<BillingCategory>\n    {\n        new BillingCategory { ID = 1, Name = \"First 1\",  Parent = null },\n        new BillingCategory { ID = 2, Name = \"First 2\",  Parent = null },\n        new BillingCategory { ID = 4, Name = \"Second 1\", Parent = 1 },\n        new BillingCategory { ID = 3, Name = \"First 3\",  Parent = null },\n        new BillingCategory { ID = 5, Name = \"Second 2\", Parent = 2 },\n        new BillingCategory { ID = 6, Name = \"Second 3\", Parent = 3 },\n        new BillingCategory { ID = 8, Name = \"Third 1\",  Parent = 5 },\n        new BillingCategory { ID = 8, Name = \"Third 2\",  Parent = 6 },\n        new BillingCategory { ID = 7, Name = \"Second 4\", Parent = 3 },\n        new BillingCategory { ID = 9, Name = \"Second 5\", Parent = 1 },\n        new BillingCategory { ID = 8, Name = \"Third 3\",  Parent = 9 }\n    };\n}\n```", "```cs\nstatic List<BillingCategory> BuildHierarchy(\n     List<BillingCategory> categories, int? catID, int level)\n{\n    var found = new List<BillingCategory>();\n\n    foreach (var cat in categories)\n    {\n        if (cat.Parent == catID)\n        {\n            cat.Name = new string('\\t', level) + cat.Name;\n            found.Add(cat);\n            List<BillingCategory> subCategories =\n                BuildHierarchy(categories, cat.ID, level + 1);\n            found.AddRange(subCategories);\n        }\n    }\n\n    return found;\n}\n```", "```cs\nstatic void Main(string[] args)\n{\n    List<BillingCategory> categories = GetBillingCategories();\n\n    List<BillingCategory> hierarchy =\n        BuildHierarchy(categories, catID: null, level: 0);\n\n    PrintHierarchy(hierarchy);\n}\n\nstatic void PrintHierarchy(List<BillingCategory> hierarchy)\n{\n    foreach (var cat in hierarchy)\n        Console.WriteLine(cat.Name);\n}\n```", "```cs\nFirst 1\n        Second 1\n        Second 5\n                Third 3\nFirst 2\n        Second 2\n                Third 1\nFirst 3\n        Second 3\n                Third 2\n        Second 4\n```", "```cs\nstatic readonly DateTime LinuxEpoch =\n    new DateTime(1970, 1, 1, 0, 0, 0, 0);\nstatic readonly DateTime WindowsEpoch =\n    new DateTime(0001, 1, 1, 0, 0, 0, 0);\nstatic readonly double EpochMillisecondDifference =\n    new TimeSpan(\n        LinuxEpoch.Ticks - WindowsEpoch.Ticks).TotalMilliseconds;\n```", "```cs\npublic static string ToLinuxTimestampFromDateTime(DateTime date)\n{\n    double dotnetMilliseconds = TimeSpan.FromTicks(date.Ticks).TotalMilliseconds;\n\n    double linuxMilliseconds = dotnetMilliseconds - EpochMillisecondDifference;\n\n    double timestamp = Math.Round(\n        linuxMilliseconds, 0, MidpointRounding.AwayFromZero);\n\n    return timestamp.ToString();\n}\n\npublic static DateTime ToDateTimeFromLinuxTimestamp(string timestamp)\n{\n    ulong.TryParse(timestamp, out ulong epochMilliseconds);\n    return LinuxEpoch + +TimeSpan.FromMilliseconds(epochMilliseconds);\n}\n```", "```cs\nstatic void Main()\n{\n    Console.WriteLine(\n        $\"WindowsEpoch == DateTime.MinValue: \" +\n        $\"{WindowsEpoch == DateTime.MinValue}\");\n\n    DateTime testDate = new DateTime(2021, 01, 01);\n\n    Console.WriteLine($\"testDate: {testDate}\");\n\n    string linuxTimestamp = ToLinuxTimestampFromDateTime(testDate);\n\n    TimeSpan dotnetTimeSpan =\n        TimeSpan.FromMilliseconds(long.Parse(linuxTimestamp));\n    DateTime problemDate =\n        new DateTime(dotnetTimeSpan.Ticks);\n\n    Console.WriteLine(\n        $\"Accidentally based on .NET Epoch: {problemDate}\");\n\n    DateTime goodDate = ToDateTimeFromLinuxTimestamp(linuxTimestamp);\n\n    Console.WriteLine(\n        $\"Properly based on Linux Epoch: {goodDate}\");\n}\n```", "```cs\nWindowsEpoch == DateTime.MinValue: True\ntestDate: 1/1/2021 12:00:00 AM\nAccidentally based on .NET Epoch: 1/2/0052 12:00:00 AM\nProperly based on Linux Epoch: 1/1/2021 12:00:00 AM\n```", "```cs\npublic class InvoiceCategory\n{\n    public int ID { get; set; }\n\n    public string Name { get; set; }\n}\n```", "```cs\npublic interface IInvoiceRepository\n{\n    List<InvoiceCategory> GetInvoiceCategories();\n}\n```", "```cs\npublic class InvoiceRepository : IInvoiceRepository\n{\n    static List<InvoiceCategory> invoiceCategories;\n\n    public List<InvoiceCategory> GetInvoiceCategories()\n    {\n        if (invoiceCategories == null)\n            invoiceCategories = GetInvoiceCategoriesFromDB();\n\n        return invoiceCategories;\n    }\n\n    List<InvoiceCategory> GetInvoiceCategoriesFromDB()\n    {\n        return new List<InvoiceCategory>\n        {\n            new InvoiceCategory { ID = 1, Name = \"Government\" },\n            new InvoiceCategory { ID = 2, Name = \"Financial\" },\n            new InvoiceCategory { ID = 3, Name = \"Enterprise\" },\n        };\n    }\n}\n```", "```cs\nclass Program\n{\n    readonly IInvoiceRepository invoiceRep;\n\n    public Program(IInvoiceRepository invoiceRep)\n    {\n        this.invoiceRep = invoiceRep;\n    }\n\n    void Run()\n        List<InvoiceCategory> categories =\n            invoiceRep.GetInvoiceCategories();\n\n        foreach (var category in categories)\n            Console.WriteLine(\n                $\"ID: {category.ID}, Name: {category.Name}\");\n    }\n\n    static void Main()\n    {\n        new Program(new InvoiceRepository()).Run();\n    }\n}\n```", "```cs\npublic class InvoiceCategory\n{\n    public int ID { get; set; }\n\n    public string Name { get; set; }\n}\n```", "```cs\npublic interface IInvoiceRepository\n{\n    void AddInvoiceCategory(string category);\n}\n```", "```cs\npublic class InvoiceRepository : IInvoiceRepository\n{\n    public InvoiceRepository()\n    {\n        Console.WriteLine(\"InvoiceRepository Instantiated.\");\n    }\n\n    public void AddInvoiceCategory(string category)\n    {\n        Console.WriteLine($\"for category: {category}\");\n    }\n}\n```", "```cs\nclass Program\n{\n    public static ServiceProvider Container;\n\n    readonly Lazy<InvoiceRepository> InvoiceRep =\n        new Lazy<InvoiceRepository>();\n\n    readonly Lazy<IInvoiceRepository> InvoiceRepFactory =\n        new Lazy<IInvoiceRepository>(CreateInvoiceRepositoryInstance);\n\n    readonly Lazy<IInvoiceRepository> InvoiceRepIoC =\n        new Lazy<IInvoiceRepository>(CreateInvoiceRepositoryFromIoC);\n\n    static IInvoiceRepository CreateInvoiceRepositoryInstance()\n    {\n        return new InvoiceRepository();\n    }\n\n    static IInvoiceRepository CreateInvoiceRepositoryFromIoC()\n    {\n        return Container.GetRequiredService<IInvoiceRepository>();\n    }\n\n    static void Main()\n    {\n        Container =\n            new ServiceCollection()\n                .AddTransient<IInvoiceRepository, InvoiceRepository>()\n                .BuildServiceProvider();\n\n        new Program().Run();\n    }\n\n    void Run()\n    {\n        IInvoiceRepository viaLazyDefault = InvoiceRep.Value;\n        viaLazyDefault.AddInvoiceCategory(\"Via Lazy Default \\n\");\n\n        IInvoiceRepository viaLazyFactory = InvoiceRepFactory.Value;\n        viaLazyFactory.AddInvoiceCategory(\"Via Lazy Factory \\n\");\n\n        IInvoiceRepository viaLazyIoC = InvoiceRepIoC.Value;\n        viaLazyIoC.AddInvoiceCategory(\"Via Lazy IoC \\n\");\n    }\n}\n```", "```cs\npublic class InvoiceItem\n{\n    public decimal Cost { get; set; }\n    public string Description { get; set; }\n}\n\npublic class Invoice\n{\n    public string Customer { get; set; }\n    public DateTime Created { get; set; }\n    public List<InvoiceItem> Items { get; set; }\n}\n```", "```cs\nstatic string GetInvoiceTransferFile()\n{\n    return\n        \"Creator 1::8/05/20::Item 1\\t35.05\\t\" +\n        \"Item 2\\t25.18\\tItem 3\\t13.13::Customer 1::Note 1\\n\" +\n        \"Creator 2::8/10/20::Item 1\\t45.05\" +\n        \"::Customer 2::Note 2\\n\" +\n        \"Creator 1::8/15/20::Item 1\\t55.05\\t\" +\n        \"Item 2\\t65.18::Customer 3::Note 3\\n\";\n}\n```", "```cs\nstatic Invoice GetInvoice(\n    string matchCustomer, ..., string matchItems)\n{\n    List<InvoiceItem> lineItems = GetLineItems(matchItems);\n\n    DateTime.TryParse(matchCreated, out DateTime created);\n\n    var invoice =\n        new Invoice\n        {\n            Customer = matchCustomer,\n            Created = created,\n            Items = lineItems\n        };\n    return invoice;\n}\n\nstatic List<InvoiceItem> GetLineItems(string matchItems)\n{\n    var lineItems = new List<InvoiceItem>();\n\n    string[] itemStrings = matchItems.Split('\\t');\n\n    for (int i = 0; i < itemStrings.Length; i += 2)\n    {\n        decimal.TryParse(itemStrings[i + 1], out decimal cost);\n        lineItems.Add(\n            new InvoiceItem\n            {\n                Description = itemStrings[i],\n                Cost = cost\n            });\n    }\n\n    return lineItems;\n}\n\nstatic void SaveInvoices(List<Invoice> invoices)\n{\n    Console.WriteLine($\"{invoices.Count} invoices saved.\");\n}\n```", "```cs\nstatic List<Invoice> ParseInvoices(string invoiceFile)\n{\n    var invoices = new List<Invoice>();\n\n    Regex invoiceRegEx = new Regex(\n        @\"^.+?::(?<created>.+?)::(?<items>.+?)::(?<customer>.+?)::.+\");\n\n    foreach (var invoiceString in invoiceFile.Split('\\n'))\n    {\n        Match match = invoiceRegEx.Match(invoiceString);\n\n        if (match.Success)\n        {\n            string matchCustomer = match.Groups[\"customer\"].Value;\n            string matchCreated = match.Groups[\"created\"].Value;\n            string matchItems = match.Groups[\"items\"].Value;\n\n            Invoice invoice =\n                GetInvoice(matchCustomer, matchCreated, matchItems);\n            invoices.Add(invoice);\n        }\n    }\n\n    return invoices;\n}\n```", "```cs\nstatic void Main(string[] args)\n{\n    string invoiceFile = GetInvoiceTransferFile();\n\n    List<Invoice> invoices = ParseInvoices(invoiceFile);\n\n    SaveInvoices(invoices);\n}\n```"]