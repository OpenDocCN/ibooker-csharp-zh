- en: Chapter 4\. Work Smart, Not Hard with Functional Code
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章。通过功能代码工作智能，而不是努力工作
- en: Everything I’ve covered so far has been functional programming as intended by
    Microsoft’s C# team. You’ll find these features mentioned, along with examples
    on the Microsoft website. In this chapter however, I want to start being a bit
    more creative with C#.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我所涵盖的一切都是微软 C# 团队旨在实现的功能编程。您会在微软网站上找到这些功能的提及及其示例。然而，在本章中，我想开始对 C# 进行更富创意的探索。
- en: I don’t know about you, but I like being lazy, or at least I don’t like wasting
    my time with tedious boilerplate code. One of the many wonderful things about
    functional programming is how concise it is, compared to Imperative code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我不知道你怎么看，但我喜欢偷懒，或者说我不喜欢浪费时间在冗长的样板代码上。函数式编程的许多精彩之处之一就是它的简洁性，相比命令式代码。
- en: In this chapter I’m going to show you ways to push the Functional envelope further
    than out-of-the-box C# will allow, as well as ways to implement some of the more
    recent versions of C# in legacy versions, and hopefully allow you to get on with
    your day job an awful lot quicker.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将展示如何推动功能编程的边界，超出 C# 的开箱即用功能，以及如何在旧版本中实现一些较新版本的 C#，希望能让您更快地完成日常工作。
- en: 'There are broadly three categories which this chapter will explore:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将探讨以下三个广泛的类别：
- en: Funcs in Enumerables
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举中的 Funcs
- en: '`Func` delegates don’t seem to get used all that much, but they’re incredibly
    powerful features of C#. I’ll show a few ways of using them that help extend C#’s
    capabilities. In this case by adding them to Enumerables and operating on them
    with Linq expressions.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`Func` 委托似乎并没有被广泛使用，但它们是 C# 的非常强大的特性。我将展示一些使用它们来扩展 C# 能力的方法。在这种情况下，通过将它们添加到
    Enumerable 并使用 Linq 表达式对它们进行操作。'
- en: Funcs as Filters
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Funcs 作为过滤器
- en: You can also use Funcs as filters - something that sits between you and the
    real value you’re trying to reach. There are a few neat bits of code you can write
    using these principles.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以将 Funcs 用作过滤器 - 这是一种位于您和真正想要达到的值之间的东西。您可以使用这些原则编写一些精彩的代码。
- en: Custom Enumerables
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义枚举
- en: I’ve discussed IEnumerables and how cool they are before, but did you know you
    can break them open and implement your own customised behavior? I’ll show you
    how.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我之前讨论过 IEnumerable 及其有多酷的功能，但你知道你可以打开它们并实现自定义行为吗？我会向你展示如何做。
- en: It’s Time to get Func-y
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是时候变得“Func-y”
- en: 'I’ve already talked about `Func` delegate types the introduction, but just
    to recap - they’re functions stored as variables. You define what parameters they
    take, what they return and call them like any other function. Here’s a quick example:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我在介绍中已经谈到了 `Func` 委托类型，但简要回顾一下 - 它们是存储为变量的函数。您定义它们接受什么参数，返回什么，并像任何其他函数一样调用它们。这里有一个快速的例子：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The last generic type in the list between the two chevrons is the return value,
    all of the previous types are the parameters. My example above takes 2 string
    parameters and returns a string.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在两个尖括号之间的列表中，最后一个泛型类型是返回值，之前的所有类型都是参数。我上面的例子接受两个字符串参数并返回一个字符串。
- en: We’re going to be seeing an awful lot of Func delegates from now on, so please
    do make sure you’re comfortable with them before reading on.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来将经常见到许多**Func 委托**，所以请确保在继续阅读之前对它们感到舒适。
- en: Funcs in Enumerables
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 枚举中的 Funcs
- en: I’ve seen plenty of examples of Funcs as parameters to functions, but I’m not
    sure many developers realise you can put them in Enumerable, and create some interesting
    behaviors.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我见过很多将 Funcs 作为函数参数的例子，但我不确定有多少开发人员意识到你可以将它们放入 Enumerable，并创建一些有趣的行为。
- en: 'First, is the obvious one - put them in an array to act on the same data mulitple
    times:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，显而易见的是 - 将它们放入数组中以对同一数据进行多次操作：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Using this method, we can have a single original source of data (here, an Employee
    object) and have multiple records of the same type generated from it, and in my
    case I aggreated using the built-in .NET method `string.Join` to present a single,
    unified string to present to the end user.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法，我们可以从单一的数据源（这里是一个 Employee 对象）生成多个相同类型的记录，在我的案例中，我使用内置的 .NET 方法 `string.Join`
    聚合生成一个统一的字符串呈现给最终用户。
- en: There are a few advantages of this method over a simple StringBuilder.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法相对于简单的 StringBuilder 有一些优势。
- en: Firstly, the array can be assembled dynamically. There could be multiple rules
    for each property and how it’s rendered, which could be selected from a set of
    local variables depending on some custom logic.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，数组可以动态组装。每个属性和其呈现方式可能有多个规则，这些规则可以根据某些自定义逻辑从一组本地变量中选择。
- en: Secondly, this is an Enumerable, so by defining it this way, we’re taking advantage
    of a feature of Enumerables called *Lazy Evaluation*. The thing about Enumerables
    is that they aren’t arrays, they aren’t even data. They’re just pointers to something
    that will tell you how to extract the data. It might well be - and in fact usually
    is the case - that the source at the back of the Enumerable is a simple array,
    but not necessarily. An Enumerable requires a function to be executed each time
    the next item is accessed via a `ForEach` loop. Enumerables were developed so
    that it only transforms into actual data at the very last possible moment - typically
    when starting a `ForEach` loop iteration. Most of the time this doesn’t matter
    if there’s an array held in-memory somewhere feeding the Enumerable, but if there’s
    an expensive function or look-up to an external system powering it, then Lazy
    Loading can be incredibly useful to prevent unnecessary work.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，这是一个可枚举对象，因此通过这种方式定义它，我们利用了可枚举对象称为*惰性评估*的功能。关于可枚举对象的一点是，它们不是数组，甚至不是数据。它们只是指向某个东西的指针，这个东西将告诉你如何提取数据。很可能
    - 实际上通常是这样的情况 - 可枚举对象背后的源头是一个简单的数组，但不一定如此。可枚举对象需要在每次通过 `ForEach` 循环访问下一个项目时执行一个函数。可枚举对象的开发目的是使其在最后可能的时刻才转换为实际数据
    - 通常是在开始 `ForEach` 循环迭代时。大多数情况下，如果内存中有一个数组供可枚举对象使用，这并不重要，但如果有一个昂贵的函数或者用于驱动它的外部系统查找，则惰性加载可以非常有用，以防止不必要的工作。
- en: The elements of an Enumerable are evaluated one at a time and only when their
    turn has come to be used by whatever process is performing the enumeration. For
    example, if we use the LINQ `Any` function to evaluate each element in an Enumerable,
    it will stop enumerating the first time that an element is found that matches
    the specified criteria, meaning the remaining elements will be left un-evaluated.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 可枚举对象的元素将逐一评估，并且只有当它们被某个执行枚举的过程使用时才会被使用。例如，如果我们使用 LINQ 的 `Any` 函数来评估可枚举对象中的每个元素，它将在找到满足指定条件的第一个元素时停止枚举，这意味着剩余的元素将保持未评估状态。
- en: Lastly, from a maintanance perspective, this technique is easier to live with.
    Adding a new line to the final result is as easy as adding a new element to the
    array. It also acts as a restraint to future programmers, making it harder for
    them to try to put too much complex logic where it doesn’t belong.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，从维护的角度来看，这种技术更容易维护。向最终结果添加新行就像向数组添加新元素一样简单。它还作为对未来程序员的一种限制，使他们更难在不适当的地方加入过多复杂的逻辑。
- en: A Super-Simple Validator
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个超级简单的验证器
- en: 'Let’s imagine ourselves a quick validation function. They typically look something
    like this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们设想一个快速验证函数。它们通常看起来像这样：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Well, for a start, that’s a **lot** of code for what is, in fact, a fairly simple
    set of rules. There’s a whole heap of repetitive boilerplate code that Imperative
    code forces us to write here. On top of that, if we want to add in another rule,
    that’s potentially around 4 new lines of code to add when really only 1 is especially
    interesting to us.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，首先，实际上这是一堆代码，用来实现一个相当简单的规则。在这里，命令式代码迫使我们写下一堆重复的样板代码。除此之外，如果我们想要添加另一条规则，那可能会多写大约4行代码，但其实只有1行对我们特别有意义。
- en: If only there were a way to compact it into just a few simple lines of code…​
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要是能把它压缩成几行简单的代码就好了……
- en: 'Well…​since you asked so nicely, here you go:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯……既然你这么客气地问了，那就给你看看：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Not so long now, is it? What is it I’ve done here? I’ve put all of the rules
    into an array of Funcs that turn a string into a bool - i.e. check a single validation
    rule. I’ve used a Linq statement - `.All()`. The purpose of this function is to
    evaluate whatever lambda expression I give it against all elements of the array
    it’s attached to. If a single one of these returns false, then the process is
    terminated early and false is returned from the `All` (As mentioned earlier, the
    subsequent values aren’t accesssed, so Lazy Evaluation saves us time by not evaluating
    them). If every single one of the items returns true, then the All also returns
    true.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在不那么长了吧？这里我做了什么？我把所有规则放入了一个将字符串转换为布尔值的Func数组中 - 即检查单个验证规则。我使用了一个Linq语句 - `.All()`。这个函数的目的是评估我给它的任何Lambda表达式对其附加的数组的所有元素进行检查。如果其中一个返回false，那么进程将提前终止，并且从`All`返回false（如前所述，后续值不会被访问，因此惰性评估通过不评估它们来节省时间）。如果所有项都返回true，则`All`也返回true。
- en: We’ve effectively re-created the first code sample, but the boilerplate code
    we were forced to write - If statements and early returns - is now implicit in
    the structure.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有效地重新创建了第一个代码示例，但我们被迫编写的样板代码 - If语句和早期返回 - 现在在结构中是隐含的。
- en: 'This also has the advantage of once again being very easy to maintain, as a
    code structure. If you wanted, you could even generalize it into an extension
    method. Something I often do. Something like this:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这也有一个优势，那就是作为代码结构非常容易维护。如果你愿意，甚至可以将其泛化为一个扩展方法。我经常这样做。类似于这样：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This reduces the size of the password validator yet further, and gives you
    a handy, generic structure to use elsewhere:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这进一步减少了密码验证器的大小，并为您提供了一个方便的通用结构可供其他用途使用：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: At this point, I hope you’re re-considering ever writing something as long and
    ungainly as that first validation code sample ever again.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 此时此刻，我希望你重新考虑是否再写像第一个验证代码示例那样长而臃肿的东西了。
- en: 'I think an `IsValid` check is easier to read and maintain, but if you wanted
    a piece of code that is much more in line with the original code sample, then
    a new extension method can be created using an Any instead of an All:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为`IsValid`检查更易读和维护，但如果你想要一个更符合原始代码示例的代码片段，那么可以创建一个新的扩展方法，使用`Any`代替`All`：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This means that the boolean logic of each array element can be reversed, as
    they were originally:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着每个数组元素的布尔逻辑可以被反转，因为它们最初是这样的：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you want to maintain both functions: `IsValid` and `IsInvalid` because each
    have their place in your codebase, it’s probably worth saving yourself some coding
    effort, and preventing a potential maintenance task in the future by simply referencing
    one in the other:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望维护`IsValid`和`IsInvalid`两个函数，因为它们在代码库中各有用处，那么通过简单地引用其中一个来节省编码工作并避免未来的潜在维护任务可能是值得的：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Use it wisely, my young Functional Padawan Learner.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 聪明地使用它，我的年轻函数式学徒。
- en: Pattern Matching for Old Versions of C#
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 旧版本C#的模式匹配：
- en: Pattern matching is one of the very best features of C# in recent years, along
    with record types, but it isn’t available in anything except the most recent .NET
    versions - See Chapter 3 for more details on native Pattern Matching in C# 7 and
    up.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 模式匹配是近年来C#中最好的功能之一，与记录类型一起，但除了最新的.NET版本外，其他版本都不支持 - 更多有关C# 7及以上本机模式匹配的详情，请参见第3章。
- en: Is there a way to allow pattern matching to happen, but without needing up upgrade
    to a newer version of C#?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 有没有一种方法可以允许模式匹配发生，但不需要升级到较新版本的C#？
- en: There most certainly is. It is nowhere near as elegant as the native syntax
    in C# 8, but it provides a few of the same benefits.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当然有。它远不及C# 8中的本机语法那么优雅，但它提供了一些相同的好处。
- en: In this example, I’ll calculate how much tax someone should pay based on a grossly
    simplified version of the UK Income Tax rules. Please note, these really are much
    simpler than the real thing. I don’t want to get too bogged down in the complexities
    of tax.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我将根据英国所得税规则的大大简化版本计算某人应缴纳的税款。请注意，这比真实情况简单得多。我不想陷入税务复杂性的泥沼。
- en: 'The rules I’m going to apply look like this:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我将要应用的规则如下：
- en: Yearly income ⇐ £12,570, then no tax is taken
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 年收入 ≤ £12,570，则不扣税。
- en: Yearly income is between £12,571 and £50,270, then take 20% tax
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 年收入在£12,571到£50,270之间，则缴纳20%的税款。
- en: Yearly income is between £50,271 and £150,000, then take 40% tax
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 年收入在£50,271到£150,000之间，则缴纳40%的税款。
- en: Yearly income is over £150,000, then take 45% tax
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 年收入超过£150,000，则缴纳45%的税款。
- en: 'If you wanted to write this long-hand (i.e. non-functionally), it would look
    like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想手写（即非功能性地）编写这段代码，看起来会像这样：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, in C# 8 and onwards, switch expressions would compress this to a few lines.
    So long as you’re running at least C# 7 (i.e. .NET Framework 4.7) this is the
    style of pattern matching I can create:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在C# 8及以后的版本中，switch表达式可以压缩为几行代码。只要你至少运行C# 7（即.NET Framework 4.7），这就是我可以创建的模式匹配风格：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: I’m passing in an array of tuples containing 2 lambda expressions. The first
    determines whether the input matches against the current pattern, the second is
    the transformation in value that occurs if the pattern is a match. There’s a final
    check to see whether the default pattern should be applied - i.e. because none
    of the other patterns were a match.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我传递了一个包含2个lambda表达式的元组数组。第一个确定输入是否与当前模式匹配，第二个是匹配时发生的值转换。最后检查是否应用默认模式 - 即因为没有其他模式匹配。
- en: Despite being a fraction of the length of the original code sample, this contains
    all of the same functionality. My matching patterns on the left-hand side of the
    tuple are simple here, but they can contain expressions as complicated as you’d
    like, and could even be calls to whole functions containing detailed criteria
    to match on.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管长度只有原始代码样本的一小部分，但这包含了所有相同的功能。这里左侧元组的匹配模式很简单，但它们可以包含像您想要的那样复杂的表达式，甚至可以是调用包含详细匹配条件的整个函数。
- en: 'So, how did I make this work? This is an extremely simple version that provides
    most of the functionality required:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我是如何让这个工作的呢？这是一个非常简单的版本，提供了大部分所需的功能：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: I’m using the Linq method `FirstOrDefault` to first iterate through the left-hand
    functions to find one that returns true (i.e. one with the right criteria) then
    call the right-hand conversion Func to get my modified value.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用Linq方法`FirstOrDefault`首先遍历左侧函数，以找到返回true的函数（即具有正确条件的函数），然后调用右侧的转换Func来获取我的修改后的值。
- en: This is fine, except that if *none* of the patterns match, we’ll be in a bit
    of a fix. There will most likely be a null reference exception.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这很好，除非*没有*任何模式匹配，我们可能会遇到一些问题。很可能会出现空引用异常。
- en: To cover this, we need to force the need to provide a default match (the equivalent
    of a simple `else` statement, or the _ pattern match in switch expressions).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要覆盖这一点，我们需要强制提供默认匹配的需要（简单的`else`语句的等效或switch表达式中的_模式匹配）。
- en: 'My answer is to have the `Match` function return a placeholder object that
    holds either a transformed value from the Match expressions, or else executes
    the Default pattern lambda expression. The improved version looks like this:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我的答案是让`Match`函数返回一个占位符对象，该对象保存从匹配表达式转换得到的值，或执行默认的模式lambda表达式。改进后的版本如下：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This method is severely limited compared to what can be accomplished in the
    latest versions of C#. There is no object type matching, and the syntax isn’t
    as elegant, but it’s still usable and could save an awful lot of boilerplate,
    as well as encouraging good code standards.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 与最新版本的C#相比，此方法受到严重限制。它没有对象类型匹配，并且语法不那么优雅，但仍然可用，并且可以节省大量样板代码，同时也鼓励良好的代码标准。
- en: Versions of C# that are older still, and which don’t include Tuples, can consider
    the use of `KeyValuePair<T,T>`, though the syntax is far from attractive.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 较旧版本的C#，不包括元组的版本，可以考虑使用`KeyValuePair<T,T>`，尽管语法远非理想。
- en: What, you don’t want to take my word? Ok, here we go. Don’t say I didn’t warn
    you…​
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你不相信？好的，我们来试试。别说我没警告过你……
- en: 'The Extension method itself is just about the same, and just needs a small
    alteration to use `KeyValuePair` instead of Tuples:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展方法本身几乎一样，并且只需少量修改即可使用`KeyValuePair`代替元组：
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'And here’s the ugly bit. The syntax for creating `KeyValuePair` objects is
    pretty awful:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有个丑陋的地方。创建`KeyValuePair`对象的语法非常糟糕：
- en: '[PRE14]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: So you *can* still have a form of Pattern Matching in C# 4, but I’m not sure
    how much you’re gaining by doing it. That’s perhaps up to you to decide. At least
    I’ve shown you the way.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在C# 4中*仍然可以*使用某种形式的模式匹配，但我不确定你这样做能获得多少好处。这可能由你来决定。至少我已经向你展示了路径。
- en: Functional Filtering
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数式过滤
- en: Functions don’t only have to be used for turning one form of data into another,
    you can also use them as filters, extra layers, that sit between the developer
    and an original source of information or functionality.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 函数不仅可以用于将一种形式的数据转换为另一种形式，还可以用作过滤器，额外的层，它们位于开发者和信息或功能的原始来源之间。
- en: This section looks at a few examples of how this method can be used to make
    your daily C# coding look simpler, and also be less error prone.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将介绍如何使用这种方法的几个示例，使您的日常C#编码看起来更简单，同时更少出错。
- en: Make Dictionaries More Useful
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使字典更加有用
- en: One of my absolute favorite things in C# by far is Dictionaries. Used appropriately
    they can reduce a heap of ugly, boilerplate-riddled code with a few simple elegant
    array-like lookups. They’re also very efficient to find data in, once created.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在C#中，我绝对喜欢的一件事情是字典。如果适当使用，它们可以通过几个简单而优雅的类似数组的查找来减少大量丑陋、样板化的代码。一旦创建，它们在查找数据时也非常高效。
- en: 'They have a problem, however, that makes it often necessary to add in a heap
    of boilerplate that invalidates the whole reason they’re so lovely to use. Consider
    the following code sample:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，它们存在一个问题，这使得通常需要添加大量样板代码，这些代码无效化了它们使用的原因。考虑以下代码示例：
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: What’s up with this code? It falls foul of a code feature of Dictionaries that
    I find inexplicable, if you try looking up an entry that doesn’t exist^([1](ch04.html#idm45400869322320)),
    it will trigger an Exception that has to be handled!
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码怎么了？它触犯了我发现的字典的一个令人费解的代码特性，如果尝试查找一个不存在的条目^([1](ch04.html#idm45400869322320))，它将触发一个必须处理的异常！
- en: 'The only safe way to handle this is to use one of several methods available
    in C# to check against the available keys before compiling the string, like this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 处理这种情况的唯一安全方法是使用C#中提供的几种方法之一，在编译字符串之前检查可用键，就像这样：
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Alternatively, using slightly newer versions of C#, there is a `TryGetValue`
    function available as well to simplify this code a little:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，使用稍新版本的C#，还可以使用`TryGetValue`函数来简化这段代码：
- en: '[PRE17]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: So, can we use functional programming techniques to reduce our boilerplate code,
    and give us all of the useful features of Dictionaries, but without the awful
    tendency to explode on us? You bet’cha!
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们能否使用函数式编程技术来减少我们的样板代码，并为我们提供字典的所有有用功能，但又不会出现糟糕的膨胀倾向？你可以打赌！
- en: 'First I need a quick extension method:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我需要一个快速的扩展方法：
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'I’ll explain further in a minute, but first, here’s how I’d use my extension
    methods:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我稍后会进一步解释，但首先，这是我如何使用我的扩展方法：
- en: '[PRE19]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Notice the difference?
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 注意区别了吗？
- en: If you look carefully, I’m now using rounded function brackets, rather than
    square array/dictionary brackets to access values from the Dictionary. That’s
    because it’s technically not a dictionary any more! It’s a function.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细观察，现在我使用的是圆括号函数，而不是方括号访问字典/数组的值。这是因为它实际上不再是一个字典！它是一个函数。
- en: If you look at my extension methods, they return functions, but they’re functions
    that keep the original Dictionary object in scope for as long as they exist. Basically,
    they’re like a filter layer sitting between the Dictionary and the rest of the
    codebase. The functions make a decision on whether use of the Dictionary is safe
    or not.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看我的扩展方法，它们返回函数，但它们是保持原始Dictionary对象在其存在期间有效的函数。基本上，它们就像是位于Dictionary和代码库其余部分之间的过滤器层。这些函数决定了是否安全使用Dictionary。
- en: It means we can use a Dictionary, but the Exception that occurs when a key isn’t
    found will no longer be thrown, and we can either have the default for the type
    (usually Null) returned, or supply our own default value. Simples.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们可以使用一个字典，但是当找不到键时不会再抛出异常，我们可以返回类型的默认值（通常是Null），或者提供我们自己的默认值。简单吧。
- en: The only down side to this method is that it’s no longer a dictionary, in effect.
    This means you can’t modify it any further, or perform any LINQ operations on
    it. If you are a situation though, where you’re sure you won’t need to, then this
    is something you can use.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法唯一的缺点是它不再是一个字典。这意味着你不能进一步修改它，或者在它上面执行任何LINQ操作。然而，如果你确信你不需要这样做，那么这是你可以使用的东西。
- en: Parsing Values
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解析值
- en: 'Another common cause of noisy, boilerplate code is parsing values from `string`
    to other forms. Something like this for parsing in a hypothetical settings object,
    in the event we were working in .NET Framework, and the appsettings.JSON and `IOption<T>`
    features aren’t available:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个导致冗长、样板代码的常见原因是将字符串解析为其他形式。例如，对于在假设我们在.NET Framework中工作且不可用appsettings.JSON和`IOption<T>`功能的设置对象中进行解析：
- en: '[PRE20]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: That’s a lot of code to do something simple, isn’t it? There’s a lot of boilerplate
    code noise there that obscures the intention of the code to all but those familiar
    with these sorts of operations. Also, if a new setting were to be added, it would
    take 5 or 6 lines of new code for each and every one. That’s quite a waste.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做一些简单的事情确实需要很多代码，对吧？在那里有很多样板代码噪音，使得代码的意图除了熟悉这类操作的人之外几乎无法理解。而且，如果要添加新的设置，每个设置可能需要新增
    5 到 6 行代码。这是一种浪费。
- en: Instead, we can do things a little more Functionally and hide the structure
    away somewhere, leaving just the intent of the code visible for us to see.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们可以更加功能化地处理，将结构隐藏在某个地方，只留下代码的意图可见。
- en: 'As usual, here’s an extension method to take care of business for me:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，这里是一个扩展方法来为我处理业务：
- en: '[PRE21]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This takes away all of the repetitive code from the first example, and allows
    us to move to a more readable, result-driven code sample, like this:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这消除了第一个示例中所有重复的代码，并允许我们转向更可读、以结果为导向的代码示例，如下所示：
- en: '[PRE22]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: It’s easy now to see at a glance what the code does, what the default values
    are, and how you’d add more settings with a single line of code.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一目了然代码的作用，缺省值是什么，以及如何通过一行代码添加更多的设置。
- en: Any other settings value types besides `int` and `string` would need another
    extension method creating, but that’s no great hardship.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `int` 和 `string` 之外的任何其他设置值类型都需要创建另一个扩展方法，但这并不是什么大困难。
- en: Custom Enumerations
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义枚举
- en: Most of us have likely used Enumerables when coding, but did you know that there’s
    an engine under the surface that you can access and use to create all sorts of
    interesting custom behaviors?
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数人在编码时可能都使用过 Enumerables，但您知道表面下有一个引擎可以访问并用于创建各种有趣的自定义行为吗？
- en: With a custom iterator, we can drastically reduce the number of lines of code
    needed when more complicated behavior is needed when looping through data. First
    though, it’s necessary to understand just how an Enumerable works beneath the
    surface.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 使用自定义迭代器时，可以大大减少在需要更复杂行为时循环数据所需的代码行数。不过，首先需要了解 Enumerable 在表面之下是如何工作的。
- en: There’s a class sitting beneath the surface of the Enumerable, the engine which
    drives the Enumeration, which is what allows you to use a ForEach to loop through
    values. It’s called the Enumerator.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Enumerable 表面下有一个类，驱动枚举的引擎，这使得你可以使用 ForEach 来循环遍历值。它被称为 Enumerator。
- en: 'The Enumerator has basically two features:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举器基本上有两个特性：
- en: 'Current: Get the current item out of the enumerable. This may be called as
    many times as you want, provided you don’t try moving to the next item. If you
    try getting the Current value before first calling MoveNext, an exception is thrown.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前：从可枚举中获取当前项。可以随意调用多次，前提是不尝试移动到下一项。如果在首次调用 MoveNext 之前尝试获取当前值，则会抛出异常。
- en: 'MoveNext: Move from the current item, and try to see whether there is another
    to be selected or not. Returns `True` if another value is found, `False` if we’ve
    reached the end of the Enumerable, or there were no elements in the first place.
    The first time this is called, it points the Enumerator at the first element in
    the Enumerable.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MoveNext：从当前项移动，并尝试看看是否有另一个可选择的值。如果找到另一个值，则返回 `True`；如果已经到达 Enumerable 的末尾，或者根本没有元素，则返回
    `False`。首次调用此方法时，它将 Enumerator 指向 Enumerable 的第一个元素。
- en: Query Adjacent Elements
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查询相邻元素
- en: A relatively simple example to start with. Let’s imagine that I want to run
    through an Enumerable of Integers, to see whether it contains any numbers that
    are consecutive.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 一个相对简单的例子来开始。假设我想遍历一个整数的 Enumerable，看看是否包含任何连续的数字。
- en: 'An Imperative solution would likely look something like this:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 一种命令式的解决方案可能看起来像这样：
- en: '[PRE23]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: To make this code functional, as is often the case, we need an extension method.
    Something that takes the Enumerable, extracts its Enumerator and controls the
    customised behavior.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 要使这段代码功能化，通常情况下，我们需要一个扩展方法。这个方法接收 Enumerable，提取其 Enumerator，并控制定制的行为。
- en: To avoid use of an imperative-style loop, I’m using recursion here. In brief
    - recursion is a way of implementing an indefinite^([2](ch04.html#idm45400868337712))
    loop by having a function call itself repeatedly.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免使用命令式风格的循环，我在这里使用了递归。简而言之，递归是通过让函数重复调用自身来实现无限循环的一种方式。
- en: I’ll revisit the concept of recursion in a later chapter. For now though, I’m
    just going to use the standard, simple version of recursion
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在后面的章节中重新讨论递归的概念。但现在，我只会使用标准的简单递归版本。
- en: '[PRE24]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: So, what’s happening here? It’s kind’ve like juggling, in a way. I start by
    extracting the Enumerator, and moving to the first item.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这里发生了什么？在某种程度上有点像杂耍。我首先提取枚举器，然后移到第一项。
- en: Inside the private function, I accept the enumerator (now pointing to the first
    item), the “are we done” evaluator function and a copy of that same first item.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在私有函数内部，我接受枚举器（现在指向第一个项目）、“我们完成了吗”的评估器函数以及同一个第一个项目的副本。
- en: What I do then is immediately move to the next item, and run the evaluator function,
    passing in the first item, and the new “current”, so they can be compared.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，我立即移到下一个项目，并运行评估器函数，传入第一个项目和新的“当前项目”，这样它们就可以进行比较。
- en: At this point either we find out we’ve run out of items or the evaluator returns
    true, in which case we can terminate the iteration. If MoveNext returned true
    then we check if the `previousValue` and `Current` match our requirement (as specified
    by `evaluator`). If they do then we finish and return true, otherwise we make
    a recursive call to check the rest of the values.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，要么我们发现物品用完了，要么评估器返回 true，这种情况下我们可以终止迭代。如果 MoveNext 返回 true，那么我们检查`previousValue`和`Current`是否符合我们的要求（由`evaluator`指定）。如果符合，则完成并返回
    true，否则我们递归调用以检查其余的值。
- en: 'This is the updated version of the code to find consecutive numbers:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这是查找连续数字的代码的更新版本：
- en: '[PRE25]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'It would also be easy enough to create an `All` method based on the same logic,
    like so:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，基于相同逻辑，创建一个`All`方法也相当容易，如下所示：
- en: '[PRE26]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The only difference are the conditions for deciding whether or not to continue,
    and whether we need to return early. With an `All`, the point is to check every
    pair of values, and only return out of the loop early if one is found not to meet
    the criteria.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的区别在于决定是否继续的条件以及我们是否需要提前返回。使用`All`，关键是检查每对值，并且仅在找到不满足条件的情况下提前退出循环。
- en: Iterate Until a Condition is Met
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 迭代直到满足条件
- en: This is basically a replacement for a while loop, so that there’s another statement
    we don’t necessarily need.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上是替换 while 循环的一种方法，所以这是我们不一定需要的另一种语句。
- en: For my example, I want to imagine what the turn system might be like for a text-based
    adventure game. For younger readers - this is what we had in the old days, before
    graphics^([3](ch04.html#idm45400867718416)). You used to have to write what you
    wanted to do and the game would write what happened. Kind of like a book, except
    you wrote what happened yourself.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我的示例，我想象文本冒险游戏的轮换系统可能是什么样子。对于年轻读者来说 - 这就是我们在旧日子里没有图形之前的样子。你过去必须写下你想做的事情，然后游戏会写下发生的事情。有点像书，只不过你自己写发生了什么。
- en: 'The basic structure of one of those games was something like:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个游戏的基本结构大致如下：
- en: Write a description of the current location
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 写下当前位置的描述
- en: Receive user input
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接收用户输入
- en: Execute requested command
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行请求的命令
- en: 'Here’s how Imperative code might handle that situation:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这里展示了命令式代码如何处理这种情况：
- en: '[PRE27]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In principle what we want is a Linq-style Aggregate function, but one that doesn’t
    loop through all of the elements of an array, then finish. Instead we want it
    to loop continuously until our end condition (the player is dead) is met. I’m
    simplifying a little here, obviously our player in a proper game could *win* as
    well. But my example game is like life, and life’s not fair!
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 原则上，我们想要的是一个类似 Linq 风格的聚合函数，但不是循环遍历数组的方式，然后结束。相反，我们希望它持续循环，直到满足我们的结束条件（玩家死亡）。我这里稍微简化了一下，显然在真正的游戏中，我们的玩家也可能会*赢*。但我的示例游戏就像生活一样，生活并不公平！
- en: The extension method for this is another place where we’d benefit from tail
    recursion optimised calls, and I’ll be looking into options for that in a later
    chapter, but for now I’ll just use simple recursion - which may become an issue
    if there are a lot of turns, but for now it’d stop me from introducing too many
    ideas too soon.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种情况的扩展方法，我们可以从尾递归优化调用中受益，我将在后面的章节中研究这方面的选择，但目前我将仅使用简单的递归 - 如果回合很多可能会成为一个问题，但目前它会阻止我过早引入太多想法。
- en: '[PRE28]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Using this, I can do away with the `while` loop entirely and transform the
    entire turn sequence into a single function, like so:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个方法，我可以完全摆脱`while`循环，并将整个回合序列转换为一个函数，如下所示：
- en: '[PRE29]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This isn’t perfect, but it’s functional now. There are far better ways of handling
    the multiple steps of the update to the game’s state, and there’s the issue of
    how to handle user interaction in a functional manner, too. There’s a section
    coming up on that in chapter [X].
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这还不完美，但现在它是可以运行的。有更好的方法来处理游戏状态更新的多个步骤，以及如何以函数式的方式处理用户交互的问题。在第[X]章中将有专门的部分讨论这个问题。
- en: Conclusion
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this chapter, we looked at ways to use Funcs, Enumerables and Extension methods
    to extend C# to make it easier to write Functional-style code, and to get around
    a few existing limitations of the language.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了如何使用Funcs、Enumerables和扩展方法来扩展C#，使得编写函数式代码更加容易，并且解决了语言中一些现有的局限性。
- en: I’m certain that I’m barely scratching the surface with these techniques, and
    that there are plenty more out there to be discovered and used.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信我只是触及到了这些技术的皮毛，还有很多其他的技术等待被发现和应用。
- en: In our next chapter, we’ll be looking at Higher-order functions, and some structures
    that can be used to take advantage of them to create yet more useful functionality.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的下一章中，我们将讨论高阶函数，以及一些可以利用它们来创建更多有用功能的结构。
- en: ^([1](ch04.html#idm45400869322320-marker)) Incidentally, it was Peter Davison.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch04.html#idm45400869322320-marker)) 顺便提一句，那是彼得·戴维森。
- en: ^([2](ch04.html#idm45400868337712-marker)) but hopefully not infinite!
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch04.html#idm45400868337712-marker)) 但希望不是无限的！
- en: ^([3](ch04.html#idm45400867718416-marker)) go and check out the epic adventure
    game Zork if you’d like to see this for yourself. Try not to get eaten by a Grue!
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch04.html#idm45400867718416-marker)) 如果你想亲自体验，请去玩一下史诗冒险游戏Zork。试着不要被Grue吃掉！
