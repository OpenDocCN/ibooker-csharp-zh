- en: 'Unity Lab #2: Write C# Code for Unity'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Unity 实验室 #2：为 Unity 编写 C# 代码'
- en: Unity isn’t *just* a powerful, cross-platform engine and editor for building
    2D and 3D games and simulations. It’s also a **great way to get practice writing
    C# code**.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 不仅是一个强大的跨平台引擎和编辑器，用于构建 2D 和 3D 游戏和模拟。它还是一个**很好的练习编写 C# 代码的方式**。
- en: In the last Unity Lab, you learned how to navigate around Unity and your 3D
    space, and started to create and explore GameObjects. Now it’s time to write some
    code to take control of your GameObjects. The whole goal of that lab was to get
    you oriented in the Unity editor (and give you an easy way to remind yourself
    of how to navigate around it if you need it).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个 Unity 实验室中，你学会了如何在 Unity 和你的 3D 空间中导航，并开始创建和探索游戏对象。现在是时候写一些代码来控制你的游戏对象了。那个实验室的整个目标是让你熟悉
    Unity 编辑器（并提供一个简单的方法，以便在需要时提醒自己如何在其中导航）。
- en: In this Unity Lab, you’ll start writing code to control your GameObjects. You’ll
    write C# code to explore concepts you’ll use in the rest of the Unity Labs, starting
    with adding a method that rotates the 8 Ball GameObject that you created in the
    last Unity Lab. You’ll also start using the Visual Studio debugger with Unity
    to sleuth out problems in your games.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个 Unity 实验室中，你将开始编写代码来控制你的游戏对象。你将编写 C# 代码来探索你在其余 Unity 实验室中将使用的概念，首先是添加一个方法来旋转你在上一个
    Unity 实验室中创建的 8 球游戏对象。你还将开始在 Unity 中使用 Visual Studio 调试器来解决游戏中的问题。
- en: C# scripts add behavior to your GameObjects
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C# 脚本为你的游戏对象添加行为
- en: Now that you can add a GameObject to your scene, you need a way to make it,
    well, do stuff. That’s where your C# skills come in. Unity uses **C# scripts**
    to define the behavior of everything in the game.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以向场景中添加一个游戏对象了，你需要一种方法来让它做些事情。这就是你的 C# 技能发挥作用的地方。Unity 使用**C# 脚本**来定义游戏中所有内容的行为。
- en: 'This Unity Lab will introduce tools that you’ll use to work with C# and Unity.
    You’re going to build a simple “game” that’s really just a little bit of visual
    eye candy: you’ll make your 8 ball fly around the scene. Start by going to Unity
    Hub and **opening the same project** that you created in the first Unity Lab.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 Unity 实验室将介绍一些工具，这些工具将帮助你处理 C# 和 Unity。你将构建一个简单的“游戏”，实际上只是一些视觉效果：你将让你的 8
    球在场景中飞来飞去。首先去 Unity Hub 并**打开你在第一个 Unity 实验室中创建的相同项目**。
- en: '![Images](assets/214fig01.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/214fig01.png)'
- en: 'Here’s what you’ll do in this Unity Lab:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个 Unity 实验室中你将做什么：
- en: '**Attach a C# script to your GameObject.** You’ll add a Script component to
    your Sphere GameObject. When you add it, Unity will create a class for you. You’ll
    modify that class so that it drives the 8 ball sphere’s behavior.'
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**将 C# 脚本附加到你的游戏对象上。** 你将向你的球体游戏对象添加一个脚本组件。当你添加它时，Unity 将为你创建一个类。你将修改这个类以驱动
    8 球球体的行为。'
- en: '**Use Visual Studio to edit the script.** Remember how you set the Unity editor’s
    preferences to make Visual Studio the script editor? That means you can just double-click
    on the script in the Unity editor and it will open up in Visual Studio.'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用 Visual Studio 编辑脚本。** 记得如何设置 Unity 编辑器的偏好设置，使 Visual Studio 成为脚本编辑器吗？这意味着你只需在
    Unity 编辑器中双击脚本，它就会在 Visual Studio 中打开。'
- en: '**Play your game in Unity.** There’s a Play button at the top of the screen.
    When you press it, it starts executing all of the scripts attached to the GameObjects
    in your scene. You’ll use that button to run the script that you added to the
    sphere.'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在 Unity 中玩你的游戏。** 屏幕顶部有一个播放按钮。当你按下它时，它会开始执行场景中附加到游戏对象的所有脚本。你将使用该按钮来运行你添加到球体的脚本。'
- en: '![Images](assets/214fig02.png)'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图像](assets/214fig02.png)'
- en: '**Use Unity and Visual Studio together to debug your script.** You’ve already
    seen how valuable the Visual Studio debugger is when you’re trying to track down
    problems in your C# code. Unity and Visual Studio work together seamlessly so
    you can add breakpoints, use the Locals window, and work with the other familiar
    tools in the Visual Studio debugger while your game is running.'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用 Unity 和 Visual Studio 一起调试你的脚本。** 当你试图追踪你的 C# 代码中的问题时，你已经看到 Visual Studio
    调试器是多么有价值。Unity 和 Visual Studio 无缝协作，因此你可以添加断点，使用本地变量窗口，并在游戏运行时使用 Visual Studio
    调试器中的其他熟悉工具。'
- en: Add a C# script to your GameObject
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向你的游戏对象添加一个 C# 脚本
- en: Unity is more than an amazing platform for building 2D and 3D games. Many people
    use it for artistic work, data visualization, augmented reality, and more. It’s
    especially valuable to you, as a C# learner, because you can write code to control
    everything that you see in a Unity game. That makes Unity **a great tool for learning
    and exploring C#**.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 不仅仅是一个用于构建 2D 和 3D 游戏的惊人平台。许多人还将它用于艺术作品、数据可视化、增强现实等等。作为一个学习 C# 的人，对你来说尤为宝贵，因为你可以编写代码来控制
    Unity 游戏中的一切。这使得 Unity **成为学习和探索 C# 的绝佳工具**。
- en: Let’s start using C# and Unity right now. Make sure the Sphere GameObject is
    selected, then **click the Add Component button** at the bottom of the Inspector
    window.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在就开始使用 C# 和 Unity 吧。确保选择了 Sphere GameObject，然后在检查器窗口底部点击“添加组件”按钮。
- en: '![Images](assets/215fig01.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/215fig01.png)'
- en: When you click it, Unity pops up a window with all of the different kinds of
    components that you can add—and there are ***a lot*** of them. **Choose “New script”**
    to add a new C# script to your Sphere GameObject. You’ll be prompted for a name.
    **Name your script** `**BallBehaviour**`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击它时，Unity 弹出一个窗口，显示可以添加的所有不同类型的组件——而且有***很多***种。**选择“新建脚本”**来为你的 Sphere GameObject
    添加一个新的 C# 脚本。系统会提示你输入一个名称。**把你的脚本命名为** `**BallBehaviour**`。
- en: '![Images](assets/215fig02.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/215fig02.png)'
- en: Click the “Create and Add” button to add the script. You’ll see a component
    called *Ball Behaviour (Script)* appear in the Inspector window.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“创建并添加”按钮来添加这个脚本。你会在检查器窗口中看到一个名为 *Ball Behaviour (Script)* 的组件出现。
- en: '![Images](assets/215fig03.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/215fig03.png)'
- en: You’ll also see the C# script in the Project window.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你也会在项目窗口中看到这个 C# 脚本。
- en: '![Images](assets/215fig04.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/215fig04.png)'
- en: Note
  id: totrans-24
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**The Project window gives you a folder-based view of your project. Your Unity
    project is made up of files: media files, data files, C# scripts, textures, and
    more. Unity calls these files assets. The Project window was displaying a folder
    called Assets when you right-clicked inside it to import your texture, so Unity
    added it to that folder.**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**项目窗口以文件夹视图显示你的项目。你的 Unity 项目由文件组成：媒体文件、数据文件、C# 脚本、纹理等等。Unity 将这些文件称为资产。当你在资产内右键单击导入纹理时，项目窗口显示了一个名为
    Assets 的文件夹，所以 Unity 将其添加到了那个文件夹中。**'
- en: Note
  id: totrans-26
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Did you notice a folder called Materials appeared in the Project window as soon
    as you dragged the 8 ball texture onto your sphere?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你有没有注意到，在你把 8 球纹理拖到球体上时，项目窗口里会出现一个叫做 Materials 的文件夹？
- en: Write C# code to rotate your sphere
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写 C# 代码来旋转你的球体
- en: 'In the first lab, you told Unity to use Visual Studio as its external script
    editor. So go ahead and **double-click on your new C# script**. When you do, ***Unity
    will open your script in Visual Studio***. Your C# script contains a class called
    BallBehaviour with two empty methods called Start and Update:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个实验中，你告诉 Unity 使用 Visual Studio 作为其外部脚本编辑器。所以现在**双击你的新的 C# 脚本**。这样做时，***Unity
    将会在 Visual Studio 中打开你的脚本***。你的 C# 脚本包含一个名为 BallBehaviour 的类，其中有两个空方法分别称为 Start
    和 Update：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-31
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**You opened your C# script in Visual Studio by clicking on it in the Hierarchy
    window, which shows you a list of every GameObject in the current scene. When
    Unity created your project, it added a scene called SampleScene with a camera
    and a light. You added a sphere to it, so your Hierarchy window will show all
    of those things.**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**通过在 Hierarchy 窗口中点击它来在 Visual Studio 中打开你的 C# 脚本，该窗口显示了当前场景中每个 GameObject
    的列表。当 Unity 创建你的项目时，它添加了一个名为 SampleScene 的场景，并包含一个摄像机和一个灯光。你向其中添加了一个球体，所以你的 Hierarchy
    窗口将显示所有这些内容。**'
- en: Note
  id: totrans-33
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: If Unity didn’t launch Visual Studio and open your C# script in it, go back
    to the beginning of Unity Lab 1 and make sure you followed the steps to set the
    External Tools preferences.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Unity 没有启动 Visual Studio 并在其中打开你的 C# 脚本，回到 Unity 实验 1 的开始，确保你遵循了设置外部工具偏好的步骤。
- en: 'Here’s a line of code that will rotate your sphere. **Add it to your Update
    method**:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一行代码，可以使你的球体旋转。**将其添加到你的 Update 方法中**：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now **go back to the Unity editor** and click the Play button in the toolbar
    to start your game: ![Images](assets/216fig02.png)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在**回到 Unity 编辑器**，点击工具栏中的播放按钮来启动你的游戏： ![图片](assets/216fig02.png)
- en: '![Images](assets/216fig03.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/216fig03.png)'
- en: Add a breakpoint and debug your game
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一个断点并调试你的游戏
- en: Let’s debug your Unity game. First **stop your game** if it’s still running
    (by pressing the Play button again). Then switch over to Visual Studio, and **add
    a breakpoint** on the line that you added to the Update method.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来调试你的 Unity 游戏。首先，如果游戏仍在运行，请**停止游戏**（通过再次点击播放按钮）。然后切换到 Visual Studio，并在你添加到
    Update 方法的行上**添加一个断点**。
- en: '![Images](assets/218fig01.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/218fig01.png)'
- en: 'Now find the button at the top of Visual Studio that starts the debugger:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在找到 Visual Studio 顶部的启动调试器按钮：
- en: In Windows it looks like this—![Images](assets/218fig02.png)—or choose Debug
    >> Start Debugging (F5) from the menu
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 上看起来是这样的——![图片](assets/218fig02.png)——或者从菜单选择 Debug >> Start Debugging
    (F5)
- en: In macOS it looks like this—![Images](assets/218fig03.png)—or choose Run >>
    Start Debugging (![Images](assets/218fig04.png))
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 macOS 上看起来是这样的——![图片](assets/218fig03.png)——或者选择 Run >> Start Debugging (![图片](assets/218fig04.png))
- en: 'Click that button to **start the debugger**. Now switch back to the Unity editor.
    If this is the first time you’re debugging this project, the Unity editor will
    pop up a dialog window with these buttons:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 点击那个按钮**启动调试器**。现在切换回 Unity 编辑器。如果这是你第一次调试这个项目，Unity 编辑器将弹出一个带有以下按钮的对话框窗口：
- en: '![Images](assets/218fig05.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/218fig05.png)'
- en: Press the “Enable debugging for this session” button (or if you want to keep
    that pop-up from appearing again, press “Enable debugging for all projects” ).
    Visual Studio is now ***attached*** to Unity, which means it can debug your game.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 按下“启用本次会话的调试”按钮（或者如果你想要避免弹出窗口再次出现，按“为所有项目启用调试”）。Visual Studio 现在已经***连接到***
    Unity，这意味着它可以调试你的游戏。
- en: Now **press the Play button in Unity** to start your game. Since Visual Studio
    is attached to Unity, it ***breaks immediately*** on the breakpoint that you added,
    just like with any other breakpoint you’ve set.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在 Unity 中**按下播放按钮**启动你的游戏。由于 Visual Studio 已连接到 Unity，它会立即在你添加的断点上***中断***，就像你设置的任何其他断点一样。
- en: Note
  id: totrans-49
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Congratulations, you’re now debugging a game!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，你现在正在调试一个游戏！
- en: Use a hit count to skip frames
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用命中计数跳过帧
- en: 'Sometimes it’s useful to let your game run for a while before your breakpoint
    stops it. For example, you might want your game to spawn and move its enemies
    before your breakpoint hits. Let’s tell your breakpoint to break every 500 frames.
    You can do that by adding a **Hit Count condition** to your breakpoint:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，在你的断点停止之前让游戏运行一段时间是很有用的。例如，你可能希望在你的断点命中之前让游戏生成并移动其敌人。让我们告诉你的断点每 500 帧暂停一次。你可以通过向你的断点添加一个**命中计数条件**来实现这一点：
- en: 'On Windows, right-click on the breakpoint dot (![Images](assets/218fig07.png))
    at the left side of the line, choose **Conditions** from the pop-up menu, select
    *Hit Count* and *Is a multiple of* from the dropdowns, and enter 500 in the box:'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 上，右键点击行左侧的断点点 (![图片](assets/218fig07.png))，从弹出菜单中选择**条件**，从下拉菜单中选择*Hit
    Count*和*Is a multiple of*，并在框中输入 500：
- en: '![Images](assets/218fig08.png)'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/218fig08.png)'
- en: 'On macOS, right-click on the breakpoint dot (![Images](assets/218fig09.png)),
    choose **Edit breakpoint…** from the menu, then choose *When hit count is a multiple
    of* from the dropdown and enter 500 in the box:'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 macOS 上，右键点击断点点 (![图片](assets/218fig09.png))，从菜单中选择**编辑断点…**，然后从下拉菜单中选择*When
    hit count is a multiple of*，并在框中输入 500：
- en: '![Images](assets/218fig10.png)'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/218fig10.png)'
- en: Now the breakpoint will only pause the game every 500 times the Update method
    is run—or every 500 frames­. So if your game is running at 60 FPS, that means
    when you press Continue the game will run for a little over 8 seconds before it
    breaks again. **Press Continue, then switch back to Unity** and watch the ball
    spin until the breakpoint breaks.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，断点只会在 Update 方法运行 500 次——或者每 500 帧——时暂停游戏。所以如果你的游戏以 60 FPS 运行，那么当你按下继续按钮后，游戏将在再次中断前运行约
    8 秒多一点。**按下 Continue，然后切换回 Unity**，观察球旋转直到断点再次触发。
- en: Use the debugger to understand Time.deltaTime
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用调试器理解 Time.deltaTime
- en: You’re going to be using Time.deltaTime in many of the Unity Labs projects.
    Let’s take advantage of your breakpoint and use the debugger to really understand
    what’s going on with this value.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Unity Labs 项目中，你将会经常使用 Time.deltaTime。让我们利用你的断点并使用调试器来真正理解这个值的含义。
- en: While your game is paused on the breakpoint in Visual Studio, **hover over Time.deltaTime**
    to see the fraction of a second that elapsed since the previous frame (you’ll
    need to put your mouse cursor over `**deltaTime**`). Then **add a watch for Time.deltaTime**
    by selecting Time.deltaTime and choosing Add Watch from the right-mouse menu.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的游戏在 Visual Studio 的断点上暂停时，**悬停在 Time.deltaTime** 上可以看到自上一帧以来经过的秒数的分数（你需要把鼠标光标放在`**deltaTime**`上）。然后通过右键菜单选择
    Time.deltaTime 并选择添加监视来**添加一个监视**。
- en: '![Images](assets/219fig01.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/219fig01.png)'
- en: '**Continue debugging** (F5 on Windows, ![Images](assets/219fig02.png) on macOS),
    just like with the other apps you’ve debugged), to resume your game. The ball
    will start rotating again, and after another 500 frames the breakpoint will trigger
    again. You can keep running the game for 500 frames at a time. Keep your eye on
    the Watch window each time it breaks.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**继续调试**（在Windows上是F5，![图片](assets/219fig02.png)在macOS上），就像你调试其他应用程序一样），以恢复你的游戏。球体将再次开始旋转，再过500帧后，断点将再次触发。你可以每次运行500帧游戏。每次断点中断时，都要注意观察监视窗口。'
- en: '![Images](assets/219fig03.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/219fig03.png)'
- en: '**Stop debugging** (Shift+F5 on Windows, ![Images](assets/219fig02.png) on
    macOS) to stop your program. Then **start debugging again**.Since your game is
    still running, the breakpoint will continue to work when you reattach Visual Studio
    to Unity. Once you’re done debugging, **toggle your breakpoint again** so the
    IDE will still keep track of it but not break when it’s hit. **Stop debugging**
    one more time to detach from Unity.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**停止调试**（在Windows上是Shift+F5，![图片](assets/219fig02.png)在macOS上）来停止你的程序。然后**再次开始调试**。由于你的游戏仍在运行，当你重新连接Visual
    Studio到Unity时，断点将继续工作。完成调试后，**再次切换你的断点**，这样IDE将继续跟踪它，但不会在命中时中断。**再次停止调试**以从Unity中分离出来。'
- en: Go back to Unity and **stop your game**—and save it, because the Play button
    doesn’t automatically save the game.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 返回Unity并**停止你的游戏**—并保存它，因为播放按钮不会自动保存游戏。
- en: Note
  id: totrans-66
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The Play button in Unity starts and stops your game. Visual Studio will stay
    attached to Unity even when the game is stopped.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Unity中的播放按钮用于启动和停止游戏。即使游戏停止，Visual Studio也会保持与Unity的连接。
- en: Add a cylinder to show where the Y axis is
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一个圆柱来显示Y轴的位置
- en: Your sphere is rotating around the Y axis at the very center of the scene. Let’s
    add a very tall and very skinny cylinder to make it visible. ***Create a new cylinder***
    by choosing *3D Object >> Cylinder* from the GameObject menu. Make sure it’s selected
    in the Hierarchy window, then look at the Inspector window and check that Unity
    created it at position (0, 0, 0)—if not, use the context menu (![Images](assets/220fig01.png))
    to reset it.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你的球体正在场景的中心围绕Y轴旋转。让我们添加一个非常高和非常细的圆柱以使其可见。通过从GameObject菜单选择*3D对象 >> 圆柱*来***创建一个新的圆柱***。确保在Hierarchy窗口中它被选中，然后查看Inspector窗口并检查Unity是否在位置（0,
    0, 0）处创建它—如果没有，请使用上下文菜单（![图片](assets/220fig01.png)）来重置它。
- en: 'Let’s make the cylinder tall and skinny. Choose the Scale tool from the toolbar:
    either click on it (![Images](assets/220fig02.png)) or press the R key. You should
    see the Scale Gizmo appear on your cylinder:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使圆柱高而细。从工具栏选择Scale工具：要么点击它（![图片](assets/220fig02.png)），要么按下R键。你应该会看到Scale
    Gizmo出现在你的圆柱上：
- en: '![Images](assets/220fig03.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/220fig03.png)'
- en: Click and drag the green cube up to elongate your cylinder along the Y axis.
    Then click on the red cube and drag it toward the cylinder to make it very narrow
    along the X axis, and do the same with the blue cube to make it very narrow along
    the Z axis. Watch the Transform panel in the Inspector as you change the cylinder’s
    scale—the Y scale will get larger, and the X and Z values will get much smaller.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 将绿色立方体点击并拖拽向上，沿Y轴拉长你的圆柱。然后点击红色立方体并向圆柱拉伸，使其沿X轴变得非常狭窄，接着再用蓝色立方体也使其沿Z轴变得非常狭窄。在改变圆柱尺寸时，请观察检视器中的Transform面板—Y轴将变大，而X和Z的值将变得更小。
- en: '![Images](assets/220fig04.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/220fig04.png)'
- en: '**Click on the X label in the Scale row in the Transform panel and drag up
    and down.** Make sure you click the actual X label to the left of the input box
    with the number. When you click the label it turns blue, and a blue box appears
    around the X value. As you drag your mouse up and down, the number in the box
    goes up and down, and the Scene view updates the scale in as you change it. Look
    closely as you drag—the scale can be positive and negative.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**点击Transform面板中的Scale行中的X标签并上下拖动。**确保你点击实际的X标签，在输入框左侧。当你点击标签时，它会变蓝色，并且X值周围会出现蓝色框。随着你拖动鼠标，框中的数字会上下移动，场景视图会根据你的更改更新比例。在拖动时仔细观察—比例可以是正数和负数。'
- en: Now **select the number inside the X box and type .1**—the cylinder gets very
    skinny. Press Tab and type 20, then press Tab again and type .1, and press Enter.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在**选择X框中的数字并键入.1**—圆柱变得非常细。按Tab键，然后键入20，再次按Tab键并键入.1，最后按Enter键。
- en: '![Images](assets/220fig05.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/220fig05.png)'
- en: Now your sphere has a very long cylinder going through it that shows the Y axis
    where Y = 0.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的球体中有一个穿过的非常长的圆柱，显示Y轴，其中Y = 0。
- en: '![Images](assets/220fig06.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/220fig06.png)'
- en: Add fields to your class for the rotation angle and speed
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为你的类添加字段以存储旋转角度和速度。
- en: In [#objectshellipget_orientedexclamation_mar](ch03.html#objectshellipget_orientedexclamation_mar)
    you learned how C# classes can have **fields** that store values methods can use.
    Let’s modify your code to use fields. Add these four lines just under the class
    declaration, **immediately after the first curly brace** `**{:**`
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在[#objectshellipget_orientedexclamation_mar](ch03.html#objectshellipget_orientedexclamation_mar)中，你学习了
    C# 类如何拥有**字段**来存储方法可以使用的值。让我们修改你的代码来使用字段。在类声明后的第一个左花括号`**{:**`后立即添加这四行：
- en: '[PRE2]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-82
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**These are just like the fields that you added to the projects in [#objectshellipget_orientedexclamation_mar](ch03.html#objectshellipget_orientedexclamation_mar)
    and [#types_and_references_getting_the_referen](ch04.html#types_and_references_getting_the_referen).
    They’re variables that keep track of their values—each time Update is called it
    reuses the same field over and over again.**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**这些字段就像你在[#objectshellipget_orientedexclamation_mar](ch03.html#objectshellipget_orientedexclamation_mar)和[#types_and_references_getting_the_referen](ch04.html#types_and_references_getting_the_referen)项目中添加的字段一样。它们是变量，用于跟踪它们的值——每次调用
    Update 时，它们会重复使用相同的字段。**'
- en: 'The XRotation, YRotation, and ZRotation fields each contain a value between
    0 and 1, which you’ll combine to create a **vector** that determines the direction
    that the ball will rotate:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: XRotation、YRotation 和 ZRotation 字段分别包含一个介于 0 和 1 之间的值，你将它们结合起来创建一个**向量**，确定球体旋转的方向：
- en: '[PRE3]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The DegreesPerSecond field contains the number of degrees to rotate per second,
    which you’ll multiply by Time.deltaTime just like before. **Modify your Update
    method to use the fields.** This new code creates a Vector3 variable called `**axis**`
    and passes it to the transform.Rotate method:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: DegreesPerSecond 字段包含每秒旋转的角度数，你将像以前一样将其乘以 Time.deltaTime。**修改你的 Update 方法以使用这些字段。**
    这段新代码创建了一个名为`**axis**`的 Vector3 变量，并将其传递给 transform.Rotate 方法：
- en: '[PRE4]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Select the Sphere in the Hierarchy window. Your fields now show up in the Script
    component. When the Script component renders fields, it adds spaces between the
    capital letters to make them easier to read.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在层次视图窗口中选择球体。你的字段现在显示在脚本组件中。当脚本组件渲染字段时，它在大写字母之间添加空格，以便更容易阅读。
- en: '![Images](assets/221fig03.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/221fig03.png)'
- en: Run your game again. ***While it’s running***, select the Sphere in the Hierarchy
    window and change the degrees per second to 360 or 90—the ball starts to spin
    at twice or half the speed. Stop your game—and the field will reset to 180.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行你的游戏。***当游戏运行时***，在层次视图窗口中选择球体，并将每秒度数更改为 360 或 90——球体开始以两倍或一半的速度旋转。停止你的游戏——字段将重置为
    180。
- en: While the game is stopped, use the Unity editor to change the X Rotation to
    field to 1 and the Y Rotation field to 0\. Start your game—the ball will rotate
    away from you. Click the X Rotation label and drag it up and down to change the
    value while the game is running. As soon as the number turns negative, the ball
    starts rotating toward you. Make it positive again and it starts rotating away
    from you.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当游戏停止时，使用 Unity 编辑器将 X Rotation 字段更改为 1，将 Y Rotation 字段更改为 0。开始你的游戏——球体将远离你旋转。在游戏运行时点击
    X Rotation 标签并上下拖动以更改值。一旦数字变为负数，球体开始朝你旋转。再次使它为正数，它将远离你旋转。
- en: '![Images](assets/221fig04.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/221fig04.png)'
- en: Use Debug.DrawRay to explore how 3D vectors work
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Debug.DrawRay 探索三维向量的工作原理
- en: 'A **vector** is a value with a **length** (or magnitude) and a **direction**.
    If you ever learned about vectors in a math class, you probably saw lots of diagrams
    like this one of a 2D vector:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**向量**是一个具有**长度**（或大小）和**方向**的值。如果你在数学课上学过向量，你可能见过很多像这样的二维向量图示：'
- en: '![Images](assets/222fig01.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/222fig01.png)'
- en: That’s not hard to understand…on an intellectual level. But even those of us
    who took a math class that covered vectors don’t always have an ***intuitive***
    grasp of how vectors work, especially in 3D. Here’s another area where we can
    use C# and Unity as a tool for learning and exploration.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这在理智层面上并不难理解。但是，即使我们上过涵盖向量的数学课程，我们也并不总是对向量如何工作有一个***直观***的理解，尤其是在三维空间中。这里是我们可以使用
    C# 和 Unity 作为学习和探索工具的另一个领域。
- en: Use Unity to visualize vectors in 3D
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Unity 可视化三维向量
- en: 'You’re going to add code to your game to help you really “get” how 3D vectors
    work. Start by having a closer look at the first line of your Update method:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你将要为你的游戏添加代码，帮助你真正理解三维向量的工作原理。首先，仔细查看你的 Update 方法的第一行：
- en: '[PRE5]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: What does this line tell us about the vector?
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码告诉我们关于向量的什么？
- en: '**It has a type: Vector3.** Every variable declaration starts with a type.
    Instead of using string, int, or bool, you’re declaring it with the type Vector3\.
    This is a type that Unity uses for 3D vectors.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**它有一个类型：Vector3**。每个变量声明都以一个类型开头。不再使用 string、int 或 bool，而是声明为 Vector3 类型。这是
    Unity 用于 3D 向量的类型。'
- en: '**It has a variable name:** `**axis**.`'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**它有一个变量名：** `**axis**`。'
- en: '**It uses the** `**new**` **keyword to create a Vector3.** It uses the XRotation,
    YRotation, and ZRotation fields to create a vector with those values.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**它使用 `new` 关键字创建 Vector3**。它使用 XRotation、YRotation 和 ZRotation 字段创建一个具有这些值的向量。'
- en: So what does that 3D vector look like? There’s no need to guess—we can use one
    of Unity’s useful debugging tools to draw the vector for us. **Add this line of
    code to the end of your Update method:**
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这个 3D 向量是什么样子呢？我们无需猜测 —— 我们可以使用 Unity 提供的有用的调试工具之一来为我们绘制这个向量。**在您的 Update
    方法末尾添加这行代码：**
- en: '[PRE6]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The Debug.DrawRay method is a special method that Unity provides to help you
    debug your games. It draws a **ray**—which is a vector that goes from one point
    to another—and takes parameters for its start point, end point, and color. There’s
    one catch: ***the ray only appears in the Scene view***. The methods in Unity’s
    Debug class are designed so that they don’t interfere with your game. They typically
    only affect how your game interacts with the Unity editor.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Debug.DrawRay 方法是 Unity 提供的特殊方法，帮助您调试游戏。它绘制一条射线 —— 一种从一个点到另一个点的向量，并接受其起始点、终点和颜色参数。有一个注意点：***射线只出现在场景视图中***。Unity
    的 Debug 类中的方法设计成不会干扰您的游戏。它们通常只影响游戏与 Unity 编辑器的交互方式。
- en: Run the game to see the ray in the Scene view
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行游戏以在场景视图中看到射线
- en: Now run your game again. You won’t see anything different in the Game view because
    Debug.DrawRay is a tool for debugging that doesn’t affect gameplay at all. Use
    the Scene tab to **switch to the Scene view**. You may also need to **reset the
    Wide layout** by choosing Wide from the Layout dropdown.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在再次运行游戏。在 Game 视图中看不到任何不同，因为 Debug.DrawRay 是一个用于调试的工具，不会对游戏玩法产生任何影响。使用 Scene
    选项卡**切换到场景视图**。您可能还需要通过选择布局下拉菜单中的 Wide 来**重置 Wide 布局**。
- en: '![Images](assets/223fig01.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/223fig01.png)'
- en: 'Now you’re back in the familiar Scene view. Do these things to get a real sense
    of how 3D vectors work:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您又回到了熟悉的场景视图。按以下步骤来真正了解 3D 向量的工作原理：
- en: Use the Inspector to **modify the BallBehaviour script’s fields**. Set the X
    Rotation to 0, Y Rotation to 0, and **Z Rotation to 3**. You should now see a
    yellow ray coming directly out of the Z axis and the ball rotating around it (remember,
    the ray only shows up in the Scene view).
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Inspector 来**修改 BallBehaviour 脚本的字段**。将 X Rotation 设置为 0，Y Rotation 设置为 0，**Z
    Rotation 设置为 3**。现在，您应该看到一个黄色射线直接从 Z 轴出来，球体围绕其旋转（请记住，射线只会显示在场景视图中）。
- en: '![Images](assets/223fig02.png)'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/223fig02.png)'
- en: Set the Z Rotation back to 3\. Experiment with dragging the X Rotation and Y
    Rotation values to see what they do to the ray. Make sure to reset the Transform
    component each time you change them.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Z 旋转设置回 3\. 拖动 X 旋转和 Y 旋转的值，看看它们对射线的影响。确保每次更改后重置 Transform 组件。
- en: Use the Hand tool and the Scene Gizmo to get a better view. Click the X cone
    on the Scene Gizmo to set it to the view from the right. Keep clicking the cones
    on the Scene Gizmo until you see the view from the front. It’s easy to get lost—you
    can **reset the Wide layout to get back to a familiar view**.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Hand 工具和 Scene Gizmo 来获得更好的视图。单击 Scene Gizmo 上的 X 锥体，将其设置为从右侧查看。继续单击 Scene
    Gizmo 上的锥体，直到您从正面看到视图。很容易迷失方向 —— 您可以**重置 Wide 布局**以回到熟悉的视图。
- en: Add a duration to the ray so it leaves a trail
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为射线添加持续时间以留下轨迹
- en: 'You can add a fourth argument to your Debug.DrawRay method call that specifies
    the number of seconds the ray should stay on the screen. Add **.5f** to make each
    ray stay on screen for half a second:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以向 Debug.DrawRay 方法调用添加第四个参数，指定射线在屏幕上停留的秒数。添加 **.5f** 使每条射线在屏幕上停留半秒钟：
- en: '[PRE7]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now run the game again and switch to the Scene view. Now when you drag the numbers
    up and down, you’ll see a trail of rays left behind. This looks really interesting,
    but more importantly, it’s a great tool to visualize 3D vectors.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在再次运行游戏并切换到场景视图。现在，当您上下拖动数字时，将会看到留下一串射线。这看起来非常有趣，但更重要的是，它是一个很好的可视化 3D 向量的工具。
- en: '![Images](assets/223fig03.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/223fig03.png)'
- en: Rotate your ball around a point in the scene
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 围绕场景中的一个点旋转您的球体
- en: Your code calls the transform.Rotate method to rotate your ball around its center,
    which changes its X, Y, and Z rotation values. **Select Sphere in the Hierarchy
    window and change its X position to 5** in the Transform component. Then **use
    the context menu (**![Images](assets/224fig01.png)**) in the BallBehaviour Script
    component** to reset its fields. Run the game again—now the ball will be at position
    (5, 0, 0) and rotating around its own Y axis.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码调用transform.Rotate方法来使你的球围绕其中心旋转，从而改变其X、Y和Z旋转值。**在层次结构窗口中选择Sphere并将其X位置更改为5**在Transform组件中。然后**使用BallBehaviour
    Script组件中的上下文菜单（![图片](assets/224fig01.png)）**来重置其字段。再次运行游戏——现在球将位于位置（5, 0, 0）并围绕自己的Y轴旋转。
- en: '![Images](assets/224fig02.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/224fig02.png)'
- en: Let’s modify the Update method to use a different kind of rotation. Now we’ll
    make the ball rotate around the center point of the scene, coordinate (0, 0, 0),
    using the **transform.RotateAround method**, which rotates a GameObject around
    a point in the scene. (This is *different* from the transform.Rotate method you
    used earlier, which rotates a GameObject around its center.) Its first parameter
    is the point to rotate around. We’ll use **Vector3.zero** for that parameter,
    which is a shortcut for writing `**new Vector3(0, 0, 0)**`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改Update方法，使用不同类型的旋转。现在我们将使球围绕场景中心点（0, 0, 0）旋转，使用**transform.RotateAround方法**，它会使一个GameObject围绕场景中的一个点旋转。（这与你之前使用的transform.Rotate方法不同，后者使一个GameObject围绕其中心旋转。）它的第一个参数是要围绕的点。我们将使用**Vector3.zero**作为该参数，这是写`**new
    Vector3(0, 0, 0)**`的快捷方式。
- en: Note
  id: totrans-124
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: This new Update method rotates the ball around the point (0, 0, 0) in the scene.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新的Update方法使球围绕场景中点（0, 0, 0）旋转。
- en: 'Here’s the new Update method:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这是新的Update方法：
- en: '[PRE8]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now run your code. This time it rotates the ball in a big circle around the
    center point:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行你的代码。这次它会使球围绕中心点画一个大圆：
- en: '![Images](assets/224fig04.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/224fig04.png)'
- en: Use Unity to take a closer look at rotation and vectors
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Unity更仔细地查看旋转和向量
- en: You’re going to be working with 3D objects and scenes in the rest of the Unity
    Labs throughout the book. Even those of us who spend a lot of time playing 3D
    video games don’t have a perfect feel for how vectors and 3D objects work, and
    how to move and rotate in a 3D space. Luckily, Unity is a great tool to **explore
    how 3D objects work**. Let’s start experimenting right now.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的其余部分中，你将会使用Unity Labs处理3D对象和场景。即使我们中的许多人花费大量时间玩3D视频游戏，也不完全了解向量和3D对象的工作原理，以及如何在3D空间中移动和旋转。幸运的是，Unity是一个很好的工具，可以**探索3D对象的工作原理**。让我们立即开始实验。
- en: 'While your code is running, try changing parameters to experiment with the
    rotation:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的代码运行时，尝试更改参数以实验旋转：
- en: '**Switch back to the Scene view** so you can see the yellow ray that Debug.DrawRay
    renders in your BallBehaviour.Update method.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**切换回场景视图**，这样你就可以看到Debug.DrawRay在BallBehaviour.Update方法中呈现的黄色射线。'
- en: Use the Hierarchy window to **select the Sphere**. You should see its components
    in the Inspector window.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用层次结构窗口**选择Sphere**。你应该在检视器窗口中看到它的组件。
- en: Change the **X Rotation, Y Rotation, and Z Rotation values** in the Script component
    to **10** so you see the vector rendered as a long ray. Use the Hand tool (Q)
    to rotate the Scene view until you can clearly see the ray.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Script组件中将**X Rotation、Y Rotation和Z Rotation值**更改为**10**，这样你就会看到向量呈现为一条长射线。使用手动工具（Q）旋转场景视图，直到你能清楚地看到射线。
- en: Use the Transform component’s context menu (![Images](assets/225fig01a.png))
    to **reset the Transform component**. Since the center of the sphere is now at
    the zero point in the scene, (0, 0, 0), it will rotate around its own center.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Transform组件的上下文菜单（![图片](assets/225fig01a.png)）来**重置Transform组件**。由于球体的中心现在位于场景中的零点（0,
    0, 0），它将围绕自己的中心旋转。
- en: Then **change the X position in** the Transform component to **2**. The ball
    should now be rotating around the vector. You’ll see the ball cast a shadow on
    the Y axis cylinder as it flies by.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后在Transform组件中将X位置更改为**2**。现在球应该围绕该向量旋转。当它飞过时，你会看到球在Y轴圆柱上投下阴影。
- en: '![Images](assets/225fig01.png)'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](assets/225fig01.png)'
- en: Try **repeating the last three steps** for different values of X, Y, and Z rotation,
    resetting the Transform component each time so you start from a fixed point. Then
    try clicking the rotation field labels and dragging them up and down—see if you
    can get a feel for how the rotation works.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试**重复最后三个步骤**，使用不同的X、Y和Z旋转值，每次重置Transform组件，以便从一个固定点开始。然后尝试点击旋转字段标签并上下拖动它们——看看你是否能感受到旋转的工作原理。
- en: Unity is a great tool to explore how 3D objects work by modifying properties
    on your GameObjects in real time.
  id: totrans-140
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 通过修改GameObject的属性，Unity是探索3D对象工作原理的绝佳工具，可以实时观察效果。
- en: Get creative!
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多发挥创意！
- en: 'This is your chance to **experiment on your own with C# and Unity**. You’ve
    seen the basics of how you combine C# and Unity GameObjects. Take some time and
    play around with the different Unity tools and methods that you’ve learned about
    in the first two Unity Labs. Here are some ideas:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你**通过C#和Unity自行实验**的机会。你已经了解了如何将C#与Unity游戏对象结合起来的基础知识。花点时间玩转一下你在前两个Unity实验中学到的不同Unity工具和方法。以下是一些想法：
- en: Add cubes, cylinders, or capsules to your scene. Attach new scripts to them—make
    sure you give each script a unique name!—and make them rotate in different ways.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向场景中添加立方体、圆柱体或胶囊体。将新的脚本附加到它们上——确保每个脚本都有一个唯一的名称！——并使它们以不同的方式旋转。
- en: Try putting your rotating GameObjects in different positions around the scene.
    See if you can make interesting visual patterns out of multiple rotating GameObjects.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试将旋转的游戏对象放置在场景中不同的位置。看看你能否从多个旋转的游戏对象中制造出有趣的视觉图案。
- en: Try adding a light to the scene. What happens when you use transform.rotateAround
    to rotate the new light around various axes?
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试向场景中添加一个光源。当你使用`transform.rotateAround`来围绕各个轴旋转新的光源时会发生什么？
- en: 'Here’s a quick coding challenge: try using += to add a value to one of the
    fields in your BallBehaviour script. Make sure you multiply that value by Time.deltaTime.
    Try adding an `**if**` statement that resets the field to 0 if it gets too large.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一个快速的编码挑战：尝试使用`+=`来向你的`BallBehaviour`脚本中的一个字段添加值。确保将该值乘以`Time.deltaTime`。尝试添加一个**if**语句，如果字段变得太大，将其重置为0。
- en: Note
  id: totrans-147
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Before you run the code, try to figure out what it will do. Does it act the
    way you expected it to act? Trying to predict how the code you added will act
    is a great technique for getting better at C#.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行代码之前，尝试弄清楚它的作用。它表现得符合你的预期吗？试图预测你添加的代码将如何作用是提高C#技能的一个好方法。
- en: Take the time to experiment with the tools and techniques you just learned.
    This is a great way to take advantage of Unity and Visual Studio as tools for
    exploration and learning.
  id: totrans-149
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 抽出时间来尝试你刚学到的工具和技术。这是利用Unity和Visual Studio进行探索和学习的绝佳方式。
