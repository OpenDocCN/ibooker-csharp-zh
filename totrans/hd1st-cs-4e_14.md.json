["```cs\n            IEnumerable<int> firstAndLastFive = numbers.Take(5).Concat(numbers.TakeLast(5));\n            foreach (int i in firstAndLastFive)\n            {\n                Console.Write($\"{i} \");\n            }\n        }\n    }\n}\n```", "```cs\n1 2 3 4 5 95 96 97 98 99\n```", "```cs\nfrom (variable) in (sequence)\n```", "```cs\nfrom v in values\n```", "```cs\n    Hippie Madness (misprinted) is worth $13,525.00\n    Johnny America vs. the Pinko is worth $3,600.00\n    Woman's Work is worth $650.00\n    ```", "```cs\nIEnumerable<int> numbers = Enumerable.Range(1, 10);\nstring s = $\"The count is {numbers.Count()}\";\nIEnumerable<Comic> comics = new List<Comic>();\nIReadOnlyDictionary<int, decimal> prices = Comic.Prices;\n```", "```cs\nvar numbers = Enumerable.Range(1, 10);\nvar s = $\"The count is {numbers.Count()}\";\nvar comics = new List<Comic>();\nvar prices = Comic.Prices;\n```", "```cs\nint hours = 24;\nshort RPM = 33;\nlong radius = 3;\nchar initial = 'S';\nint balance = 345667 - 567;\n```", "```cs\nSwordDamage swordDamage = new SwordDamage(RollDice(3));\nArrowDamage arrowDamage = new ArrowDamage(RollDice(1));\n```", "```cs\nList<Card> cards = new List<Card>();\n```", "```cs\nvar hours = 24;\nvar RPM = 33;\nvar radius = 3;\nvar initial = 'S';\nvar balance = 345667 - 567;\n```", "```cs\nvar swordDamage = new SwordDamage(RollDice(3));\nvar arrowDamage = new ArrowDamage(RollDice(1));\n```", "```cs\nvar cards = new List<Card>();\n```", "```cs\nclass Program\n{\n   static var random = new Random(); // this will cause a compiler error\n\n   static void Main(string[] args)\n   {\n```", "```cs\n    var random = new Random();\n    var numbers = new List<int>();\n    int length = random.Next(50, 150);\n    for (int i = 0; i < length; i++)\n        numbers.Add(random.Next(100));\n\n    Console.WriteLine($@\"Stats for these {numbers.Count()} numbers:\n    The first 5 numbers: {String.Join(\", \", numbers.Take(5))}\n    The last 5 numbers: {String.Join(\", \", numbers.TakeLast(5))}\n    The first is {numbers.First()} and the last is {numbers.Last()}\n    The smallest is {numbers.Min()}, and the biggest is {numbers.Max()}\n    The sum is {numbers.Sum()}\n    The average is {numbers.Average():F2}\");\n    ```", "```cs\n    class PrintWhenGetting\n    {\n        private int instanceNumber;\n        public int InstanceNumber\n        {\n            set { instanceNumber = value; }\n            get\n            {\n                Console.WriteLine($\"Getting #{instanceNumber}\");\n                return instanceNumber;\n            }\n        }\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var listOfObjects = new List<PrintWhenGetting>();\n            for (int i = 1; i < 5; i++)\n                listOfObjects.Add(new PrintWhenGetting() { InstanceNumber = i });\n\n            Console.WriteLine(\"Set up the query\");\n            var result =\n                from o in listOfObjects\n                select o.InstanceNumber;\n\n            Console.WriteLine(\"Run the foreach\");\n            foreach (var number in result)\n                Console.WriteLine($\"Writing #{number}\");\n        }\n    }\n```", "```cs\n        var immediate = result.ToList();\n\n Console.WriteLine(\"Run the foreach\");\n foreach (var number in **immediate)**\n Console.WriteLine($\"Writing #{number}\");\n```", "```cs\n    join name in collection\n    ```", "```cs\npublic class Program\n{\n    public static void Main()\n    {\n        var whatAmI = new { Color = \"Blue\", Flavor = \"Tasty\", Height = 37 };\n        Console.WriteLine(whatAmI);\n    }\n}\n```", "```cs\n{ Color = Blue, Flavor = Tasty, Height = 37 }\n```", "```cs\nConsole.WriteLine($\"My color is {whatAmI.Color} and I’m {whatAmI.Flavor}\");\n```", "```cs\nTest method JimmyLinqUnitTests.ComicAnalyzerTests.ComicAnalyzer_Should_Group_Comics threw exception:\nSystem.Collections.Generic.KeyNotFoundException: The given key ‘2’ was not present in the dictionary.\n```", "```cs\n   CollectionAssert.AreEqual(expectedResults, actualResults);\n```", "```cs\n[TestMethod]\npublic void ComicAnalyzer_Should_Generate_A_List_Of_Reviews()\n{\n    var testReviews = new[]\n    {\n        new Review() { Issue = 1, Critic = Critics.MuddyCritic, Score = 14.5},\n        new Review() { Issue = 1, Critic = Critics.RottenTornadoes, Score = 59.93},\n        new Review() { Issue = 2, Critic = Critics.MuddyCritic, Score = 40.3},\n        new Review() { Issue = 2, Critic = Critics.RottenTornadoes, Score = 95.11},\n    };\n\n    var expectedResults = new[]\n    {\n        \"MuddyCritic rated #1 ‘Issue 1’ 14.50\",\n        \"RottenTornadoes rated #1 ‘Issue 1’ 59.93\",\n        \"MuddyCritic rated #2 ‘Issue 2’ 40.30\",\n        \"RottenTornadoes rated #2 ‘Issue 2’ 95.11\",\n    };\n\n    var actualResults = ComicAnalyzer.GetReviews(testComics, testReviews).ToList();\n    CollectionAssert.AreEqual(expectedResults, actualResults);\n}\n```", "```cs\n    public override string ToString() => $\"{Name} (Issue #{Issue})\";\n```", "```cs\n    public override string ToString() {\n        return $\"{Name} (Issue #{Issue})\";\n    }\n```", "```cs\n    (input-parameters) => expression;\n```", "```cs\n    class Program\n    {\n        static Random random = new Random();\n        static double GetRandomDouble(int max)\n        {\n            return max * random.NextDouble();\n        }\n        static void PrintValue(double d)\n        {\n            Console.WriteLine($\"The value is {d:0.0000}\");\n        }\n        static void Main(string[] args)\n        {\n            var value = Program.GetRandomDouble(100);\n            Program.PrintValue(value);\n        }\n    }\n    ```", "```cs\n     static Random random **=>** new Random();\n    ```", "```cs\nclass TallGuy {\n    public string Name;\n    public int Height;\n\n    public void TalkAboutYourself() {\n        Console.WriteLine($\"My name is {Name} and I’m {Height} inches tall.\");\n    }\n}\n```", "```cs\nclass TallGuy : IClown {\n```", "```cs\n    public string FunnyThingIHave => \"big red shoes\";\n    public void Honk() => Console.WriteLine(\"Honk honk!\");\n```", "```cs\n TallGuy tallGuy = new TallGuy() { Height = 76, Name = \"Jimmy\" };\n tallGuy.TalkAboutYourself();\n Console.WriteLine($\"The tall guy has {tallGuy.FunnyThingIHave}\");\n tallGuy.Honk();\n```", "```cs\n    condition ? consequent : alternative;\n```", "```cs\n var array = new[] { 1, 2, 3, 4 };\n var result = array.Select(i => i * 2);\n```", "```cs\nforeach (var i in result) Console.WriteLine(i);\n```", "```cs\n       int[] values = new int[] { 0, 12, 44, 36, 92, 54, 13, 8 };\n       IEnumerable<int> result =\n                  from v in values\n                  where v < 37\n                  orderby -v\n                  select v;\n```", "```cs\n   case myVariable:\n```", "```cs\nvar emptyInts = Enumerable.Empty<int>(); // an empty sequence of ints\nvar emptyComics = Enumerable.Empty<Comic>(); // an empty sequence of Comic references\n```", "```cs\nvar oneHundredThrees = Enumerable.Repeat(3, 100);\nvar twelveYesStrings = Enumerable.Repeat(\"yes\", 12);\nvar eightyThreeObjects = Enumerable.Repeat(\n    new { cost = 12.94M, sign = \"ONE WAY\", isTall = false }, 83);\n```", "```cs\n   enum Sport { Football, Baseball, Basketball, Hockey, Boxing, Rugby, Fencing }\n```", "```cs\n    var sports = new ManualSportSequence();\n    foreach (var sport in sports)\n        Console.WriteLine(sport);\n```", "```cs\n    public Sport this[int index] {\n        get => (Sport)index;\n    }\n```", "```cs\n    var sequence = new BetterSportSequence();\n    Console.WriteLine(sequence[3]);\n```"]