["```cs\nif (weaponKey == ’S’) { /* calculate sword damage */ }\nelse if (weaponKey == ’A’) { /* calculate arrow damage */ }\nelse return;\n```", "```cs\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            VendingMachine vendingMachine = new AnimalFeedVendingMachine();\n            Console.WriteLine(vendingMachine.Dispense(2.00M));\n        }\n    }\n    ```", "```cs\n        vendingMachine.CheckAmount(1F);\n    ```", "```cs\n    class SafeOwner\n    {\n        private string valuables = \"\";\n        public void ReceiveContents(string safeContents)\n        {\n            valuables = safeContents;\n            Console.WriteLine($\"Thank you for returning my {valuables}!\");\n        }\n    }\n    ```", "```cs\n    class Locksmith\n    {\n        public void OpenSafe(Safe safe, SafeOwner owner)\n        {\n            safe.PickLock(this);\n            string safeContents = safe.Open(Combination);\n            ReturnContents(safeContents, owner);\n        }\n        public string Combination { private get; set; }\n        protected void ReturnContents(string safeContents, SafeOwner owner)\n        {\n            owner.ReceiveContents(safeContents);\n        }\n    }\n    ```", "```cs\n    class JewelThief : Locksmith\n    {\n        private string stolenJewels;\n        protected void ReturnContents(string safeContents, SafeOwner owner)\n        {\n            stolenJewels = safeContents;\n            Console.WriteLine($\"I’m stealing the jewels! I stole: {stolenJewels}\");\n        }\n    }\n    ```", "```cs\n    static void Main(string[] args)\n    {\n        SafeOwner owner = new SafeOwner();\n        Safe safe = new Safe();\n        JewelThief jewelThief = new JewelThief();\n        jewelThief.OpenSafe(safe, owner);\n        Console.ReadKey(true);\n    }\n    ```", "```cs\nI’m stealing the jewels! I stole: precious jewels\n```", "```cs\nnew public void ReturnContents(Jewels safeContents, Owner owner)\n```", "```cs\n// The JewelThief subclass hides a method in the Locksmith base class,\n// so you can get different behavior from the same object based on the\n// reference you use to call it!\n\n// Declaring your JewelThief object as a Locksmith reference causes it to\n// call the base class ReturnContents() method.\nLocksmith calledAsLocksmith = new JewelThief();\ncalledAsLocksmith.ReturnContents(safeContents, owner);\n\n// Declaring your JewelThief object as a JewelThief reference causes it to\n// call JewelThief’s ReturnContents() method instead, because it hides\n// the base class’s method of the same name.\nJewelThief calledAsJewelThief = new JewelThief();\ncalledAsJewelThief.ReturnContents(safeContents, owner);\n```", "```cs\n    class Vertebrate {\n       public virtual void Eat(Food morsel) {\n          Swallow(morsel);\n          Digest();\n       }\n    }\n    ```", "```cs\n    if (Bird.Randomizer.Next(4) == 0)\n        eggs[i] = new BrokenEgg(Bird.Randomizer.NextDouble() * 2 + 1, \"white\");\n    else\n        eggs[i] = new Egg(Bird.Randomizer.NextDouble() * 2 + 1, \"white\");\n```", "```cs\nclass BrokenEgg : Egg\n{\n    public BrokenEgg()\n    {\n        Console.WriteLine(\"A bird laid a broken egg\");\n    }\n}\n```", "```cs\npublic BrokenEgg(double size, string color)\n```", "```cs\npublic BrokenEgg(double size, string color): base(size, color)\n```", "```cs\n if (Bird.Randomizer.Next(4) == 0)\n eggs[i] = new BrokenEgg(\"white\");\n else\n eggs[i] = new Egg(Bird.Randomizer.NextDouble() * 2 + 1, \"white\");\n```", "```cs\nPress P for pigeon, O for ostrich:\np\nHow many eggs should it lay? 7\nA bird laid a broken egg\nA bird laid a broken egg\nA bird laid a broken egg\nA 2.4cm white egg\nA 0.0cm broken White egg\nA 3.0cm white egg\nA 1.4cm white egg\nA 0.0cm broken White egg\nA 0.0cm broken White egg\nA 2.7cm white egg\n```", "```cs\n/// <summary>\n/// Expand the workers array by one slot and add a Bee reference.\n/// </summary>\n/// <param name=\"worker\">Worker to add to the workers array.</param>\nprivate void AddWorker(Bee worker)\n{\n    if (unassignedWorkers >= 1)\n    {\n        unassignedWorkers--;\n        Array.Resize(ref workers, workers.Length + 1);\n        workers[workers.Length - 1] = worker;\n    }\n}\n```", "```cs\n    using System.Windows.Threading;\n    ```", "```cs\n    private DispatcherTimer timer = new DispatcherTimer();\n    ```", "```cs\nclass Bird\n{\n    public static Random Randomizer = new Random();\n    public virtual Egg[] LayEggs(int numberOfEggs)\n    {\n        Console.Error.WriteLine\n             (\"Bird.LayEggs should never get called\");\n        return new Egg[0];\n    }\n}\n```", "```cs\nclass WeaponDamage\n{\n     /* ... code for the properties ... */  }\n    protected virtual void CalculateDamage()\n    {\n        /* the subclass overrides this */ \n    }\n    public WeaponDamage(int startingRoll)\n    {\n        roll = startingRoll;\n        CalculateDamage();\n    }\n}\n```", "```cs\nclass Bee\n{\n    public virtual float CostPerShift { get; }\n    public string Job { get; private set; }\n    public Bee(string job)\n    {\n        Job = job;\n    }\n    public void WorkTheNextShift()\n    {\n        if (HoneyVault.ConsumeHoney(CostPerShift))\n        {\n            DoJob();\n        }\n    }\n    protected virtual void DoJob() { /* the subclass overrides this */  }\n}\n```", "```cs\nclass PlanetMission\n{\n    protected float fuelPerKm;\n    protected long kmPerHour;\n    protected long kmToPlanet;\n    public string MissionInfo()\n    {\n        long fuel = (long)(kmToPlanet * fuelPerKm);\n        long time = kmToPlanet / kmPerHour;\n        return $\"We’ll burn {fuel} units of fuel in {time} hours\";\n    }\n}\nclass Mars : PlanetMission\n{\n    public Mars()\n    {\n        kmToPlanet = 92000000;\n        fuelPerKm = 1.73f;\n        kmPerHour = 37000;\n    }\n}\nclass Venus : PlanetMission\n{\n    public Venus()\n    {\n        kmToPlanet = 41000000;\n        fuelPerKm = 2.11f;\n        kmPerHour = 29500;\n    }\n}\nclass Program\n{\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(new Venus().MissionInfo());\n        Console.WriteLine(new Mars().MissionInfo());\n        Console.WriteLine(new PlanetMission().MissionInfo());\n    }\n}\n```", "```cs\nWe’ll burn 86509992 units of fuel in 1389 hours\nWe’ll burn 159160000 units of fuel in 2486 hours\n```", "```cs\nclass Bird\n{\n    public static Random Randomizer = new Random();\n    public virtual Egg[] LayEggs(int numberOfEggs)\n    {\n        Console.Error.WriteLine\n             (\"Bird.LayEggs should never get called\");\n        return new Egg[0];\n    }\n}\n```", "```cs\nabstract class Bird\n{\n    public static Random Randomizer = new Random();\n    public abstract Egg[] LayEggs(int numberOfEggs);\n}\n```", "```cs\nBird abstractBird = new Bird();\n```", "```cs\n    public abstract Egg[] LayEggs(int numberOfEggs)\n    {\n        return new Egg[0];\n    }\n```", "```cs\nabstract class Bee\n{\n   /* the rest of the class stays the same */\n   protected abstract void DoJob();\n}\n```", "```cs\n   public virtual float CostPerShift { get; }\n```", "```cs\n   public abstract float CostPerShift { get; }\n```", "```cs\nabstract class Bee\n{\n    public abstract float CostPerShift { get; }\n    public string Job { get; private set; }\n\n    public Bee(string job)\n    {\n        Job = job;\n    }\n\n    public void WorkTheNextShift()\n    {\n        if (HoneyVault.ConsumeHoney(CostPerShift))\n        {\n            DoJob();\n        }\n    }\n\n    protected abstract void DoJob();\n}\n```"]