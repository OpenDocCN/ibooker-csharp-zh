["```cs\npublic class Counter\n{\n    private int _count;\n\n    public int GetNextValue()\n    {\n        _count += 1;\n        return _count;\n    }\n}\n```", "```cs\nvar c1 = new Counter();\nvar c2 = new Counter();\nConsole.WriteLine(\"c1: \" + c1.GetNextValue());\nConsole.WriteLine(\"c1: \" + c1.GetNextValue());\nConsole.WriteLine(\"c1: \" + c1.GetNextValue());\n\nConsole.WriteLine(\"c2: \" + c2.GetNextValue());\n\nConsole.WriteLine(\"c1: \" + c1.GetNextValue());\n```", "```cs\nc1: 1\nc1: 2\nc1: 3\nc2: 1\nc1: 4\n```", "```cs\npublic class Counter\n{\n    private int _count;\n    `private` `static` `int` `_totalCount``;`\n\n    public int GetNextValue()\n    {\n        _count += 1;\n        `_totalCount` `+``=` `1``;`\n        return _count;\n    }\n\n    `public` `static` `int` `TotalCount` `=``>` `_totalCount``;`\n}\n```", "```cs\nConsole.WriteLine(Counter.TotalCount);\n```", "```cs\nerror CS0120: An object reference is required for the non-static field, method,\n or property Counter._count'\n```", "```cs\nthis._count += 1;\n```", "```cs\npublic static class Normal\n{\n    public static void UseStatics()\n    {\n        Console.WriteLine(Math.Sin(Math.PI / 4));\n    }\n}\n```", "```cs\nusing static System.Console;\nusing static System.Math;\n\npublic static class WithoutQualification\n{\n    public static void UseStatics()\n    {\n        WriteLine(Sin(PI / 4));\n    }\n}\n```", "```cs\npublic class Person\n{\n    public string? Name;\n    public string? FavoriteColor;\n}\n```", "```cs\npublic class Person\n{\n    public string Name;\n    public string FavoriteColor;\n\n    public Person(string name, string favoriteColor)\n    {\n        this.Name = name;\n        this.FavoriteColor = favoriteColor;\n    }\n}\n```", "```cs\npublic record Person(string Name, string FavoriteColor);\n```", "```cs\nvoid ShowPerson(Person p)\n{\n    Console.WriteLine($\"{p.Name}'s favorite color is {p.FavoriteColor}\");\n}\n\nvar ian = new Person(\"Ian\", \"Blue\");\nvar deborah = new Person(\"Deborah\", \"Green\");\nShowPerson(ian);\nShowPerson(deborah);\n```", "```cs\nvar startingRecord = new Person(\"Ian\", \"Blue\");\nvar modifiedCopy = startingRecord with\n{\n    FavoriteColor = \"Green\"\n};\n```", "```cs\npublic record Person\n{\n    public Person(string name, string favoriteColor)\n    {\n        this.Name = name;\n        this.FavoriteColor = favoriteColor;\n    }\n\n    public string Name { get; set; }\n    public string FavoriteColor { get; set; }\n}\n```", "```cs\nvar p1 = new Person(\"Ian\", \"Blue\");\nvar p2 = new Person(\"Ian\", \"Blue\");\nif (p1 == p2)\n{\n    Console.WriteLine(\"Equal\");\n}\n```", "```cs\npublic record Person(string Name, string FavoriteColor);\npublic record Relation(Person Subject, Person Other, string RelationshipType);\n```", "```cs\nvar ian = new Person(\"Ian\", \"Blue\");\nvar gina = new Person(\"Gina\", \"Green\");\nvar ian2 = new Person(\"Ian\", \"Blue\");\nvar gina2 = new Person(\"Gina\", \"Green\");\nvar r1 = new Relation(ian, gina, \"Sister\");\nvar r2 = new Relation(gina, ian, \"Brother\");\nvar r3 = new Relation(ian2, gina2, \"Sister\");\n\nConsole.WriteLine(r1);\nConsole.WriteLine(r2);\nConsole.WriteLine(r3);\nConsole.WriteLine(r1 == r2);\nConsole.WriteLine(r1 == r3);\nConsole.WriteLine(r2 == r3);\n```", "```cs\nRelation { Subject = Person { Name = Ian, FavoriteColor = Blue },\n Other = Person { Name = Gina, FavoriteColor = Green },\n RelationshipType = Sister }\nRelation { Subject = Person { Name = Gina, FavoriteColor = Green },\n Other = Person { Name = Ian, FavoriteColor = Blue },\n RelationshipType = Brother }\nRelation { Subject = Person { Name = Ian, FavoriteColor = Blue },\n Other = Person { Name = Gina, FavoriteColor = Green },\n RelationshipType = Sister }\nFalse\nTrue\nFalse\n```", "```cs\nCounter c1 = new Counter();\n`var` `c2` `=` `c1``;`\nConsole.WriteLine(\"c1: \" + c1.GetNextValue());\nConsole.WriteLine(\"c1: \" + c1.GetNextValue());\nConsole.WriteLine(\"c1: \" + c1.GetNextValue());\n\nConsole.WriteLine(\"c2: \" + c2.GetNextValue());\n\nConsole.WriteLine(\"c1: \" + c1.GetNextValue());\n```", "```cs\nc1: 1\nc1: 2\nc1: 3\nc2: 4\nc1: 5\n```", "```cs\nvar c1 = new Counter();\nc1.GetNextValue();\nCounter c2 = c1;\nvar c3 = new Counter();\nc3.GetNextValue();\n\nConsole.WriteLine(c1.Count);\nConsole.WriteLine(c2.Count);\nConsole.WriteLine(c3.Count);\nConsole.WriteLine(c1 == c2);\nConsole.WriteLine(c1 == c3);\nConsole.WriteLine(c2 == c3);\nConsole.WriteLine(object.ReferenceEquals(c1, c2));\nConsole.WriteLine(object.ReferenceEquals(c1, c3));\nConsole.WriteLine(object.ReferenceEquals(c2, c3));\n```", "```cs\n1\n1\n1\nTrue\nFalse\nFalse\nTrue\nFalse\nFalse\n```", "```cs\nint c1 = new int();\nc1++;\nint c2 = c1;\nint c3 = new int();\nc3++;\n\nConsole.WriteLine(c1);\nConsole.WriteLine(c2);\nConsole.WriteLine(c3);\nConsole.WriteLine(c1 == c2);\nConsole.WriteLine(c1 == c3);\nConsole.WriteLine(c2 == c3);\nConsole.WriteLine(object.ReferenceEquals(c1, c2));\nConsole.WriteLine(object.ReferenceEquals(c1, c3));\nConsole.WriteLine(object.ReferenceEquals(c2, c3));\nConsole.WriteLine(object.ReferenceEquals(c1, c1));\n```", "```cs\n1\n1\n1\nTrue\nTrue\nTrue\nFalse\nFalse\nFalse\nFalse\n```", "```cs\nstring cannotBeNull = \"Text\";\nstring? mayBeNull = null;\n```", "```cs\n<PropertyGroup>\n  <Nullable>enable</Nullable>\n</PropertyGroup>\n```", "```cs\nif (mayBeNull is not null)\n{\n    // Allowed because we can only get here if mayBeNull is not null\n    Console.WriteLine(mayBeNull.Length);\n}\n\n// Allowed because it checks for null and handles it\nConsole.WriteLine(mayBeNull?.Length ?? 0);\n\n// The compiler will warn about this in an enabled nullable warning context\nConsole.WriteLine(mayBeNull.Length);\n```", "```cs\nstring? referenceFromLegacyComponent = legacy.GetReferenceWeKnowWontBeNull();\nstring nonNullableReferenceFromLegacyComponent = referenceFromLegacyComponent!;\n```", "```cs\npublic static string Get(IDictionary<int, string> d)\n{\n    if (d.TryGetValue(42, out string s))\n    {\n        return s;\n    }\n\n    return \"Not found\";\n}\n```", "```cs\npublic static string Get(IDictionary<int, string> d)\n{\n    if (d.TryGetValue(42, out string? s))\n    {\n        return s;\n    }\n\n    return \"Not found\";\n}\n```", "```cs\npublic bool TryGetValue(TKey key, [MaybeNullWhen(false)] out TValue value)\n```", "```cs\nvar nullableStrings = new string?[10];\nvar nonNullableStrings = new string[10];\n```", "```cs\npublic struct Point\n{\n    private double _x;\n    private double _y;\n    public Point(double x, double y)\n    {\n        _x = x;\n        _y = y;\n    }\n\n    public double X => _x;\n    public double Y => _y;\n}\n```", "```cs\npublic struct Point : IEquatable<Point>\n{\n    private double _x;\n    private double _y;\n    public Point(double x, double y)\n    {\n        _x = x;\n        _y = y;\n    }\n\n    public double X => _x;\n    public double Y => _y;\n\n    public override bool Equals(object? o) => o is Point p && this.Equals(p);\n    public bool Equals(Point o) => this.X == o.X && this.Y == o.Y;\n    public override int GetHashCode() => HashCode.Combine(X, Y);\n\n    public static bool operator ==(Point a, Point b) => a.Equals(b);\n    public static bool operator !=(Point a, Point b) => !(a == b);\n}\n```", "```cs\nvar p1 = new Point(40, 2);\nPoint p2 = p1;\nvar p3 = new Point(40, 2);\n\nConsole.WriteLine($\"{p1.X}, {p1.Y}\");\nConsole.WriteLine($\"{p2.X}, {p2.Y}\");\nConsole.WriteLine($\"{p3.X}, {p3.Y}\");\nConsole.WriteLine(p1 == p2);\nConsole.WriteLine(p1 == p3);\nConsole.WriteLine(p2 == p3);\nConsole.WriteLine(object.ReferenceEquals(p1, p2));\nConsole.WriteLine(object.ReferenceEquals(p1, p3));\nConsole.WriteLine(object.ReferenceEquals(p2, p3));\nConsole.WriteLine(object.ReferenceEquals(p1, p1));\n```", "```cs\n40, 2\n40, 2\n40, 2\nTrue\nTrue\nTrue\nFalse\nFalse\nFalse\nFalse\n```", "```cs\npublic readonly struct Point\n{\n    public Point(double x, double y)\n    {\n        X = x;\n        Y = y;\n    }\n\n    public double X { get; }\n    public double Y { get; }\n    public double DistanceFromOrigin() => Math.Sqrt(X * X + Y * Y);\n}\n```", "```cs\npublic class LocationData\n{\n    public LocationData(string label, Point location)\n    {\n        Label = label;\n        Location = location;\n    }\n\n    public string Label { get; }\n    public Point Location { get; }\n}\n```", "```cs\npublic record PointRecord(int X, int Y);\npublic record struct PointStructRecord(int X, int Y);\npublic readonly record struct PointReadonlyStructRecord(int X, int Y);\n```", "```cs\nconst double kilometersPerMile = 1.609344;\n```", "```cs\nUri oops = new Uri();  // Will not compile\n```", "```cs\npublic class Item\n{\n    public Item(decimal price, string name)\n    {\n        _price = price;\n        _name = name;\n    }\n    private readonly decimal _price;\n    private readonly string _name;\n}\n```", "```cs\nvar item1 = new Item(9.99M, \"Hammer\");\n```", "```cs\npublic record Item(decimal Price, string Name);\n```", "```cs\npublic class ItemWithId\n{\n    private static int _lastId;\n    private int _id;\n\n    public ItemWithId()\n    {\n        _id = ++_lastId;\n    }\n}\n```", "```cs\npublic record ValueWithId(int Value, int Id)\n{\n    public ValueWithId(ValueWithId source)\n    {\n        Value = source.Value;\n        Id = source.Id + 1;\n    }\n}\n```", "```cs\npublic class ItemWithId\n{\n    private static int _lastId;\n    private int _id;\n    private string? _name;\n\n    public ItemWithId()\n    {\n        _id = ++_lastId;\n    }\n\n    `public` `ItemWithId``(``string` `name``)`\n        `:` `this``(``)`\n    {\n        _name = name;\n    }\n\n    public ItemWithId(string name, int id)\n    {\n        _name = name;\n        _id = id;\n    }\n}\n```", "```cs\npublic ItemWithId()\n    : this(null)\n{\n}\n\npublic ItemWithId(string? name)\n    : this(name, ++_lastId)\n{\n}\n\nprivate ItemWithId(string? name, int id)\n{\n    _name = name;\n    _id = id;\n}\n```", "```cs\npublic class Bar\n{\n    private static DateTime _firstUsed;\n    static Bar()\n    {\n        Console.WriteLine(\"Bar's static constructor\");\n        _firstUsed = DateTime.Now;\n    }\n}\n```", "```cs\nprivate static int a = b + 1;\nprivate static int b = 41;\nprivate static int c = b + 1;\n```", "```cs\npublic class InitializationTestClass\n{\n    public InitializationTestClass()\n    {\n        Console.WriteLine(\"Constructor\");\n    }\n\n    static InitializationTestClass()\n    {\n        Console.WriteLine(\"Static constructor\");\n    }\n\n    public static int s1 = GetValue(\"Static field 1\");\n    public int ns1 = GetValue(\"Non-static field 1\");\n    public static int s2 = GetValue(\"Static field 2\");\n    public int ns2 = GetValue(\"Non-static field 2\");\n\n    private static int GetValue(string message)\n    {\n        Console.WriteLine(message);\n        return 1;\n    }\n\n    public static void Foo()\n    {\n        Console.WriteLine(\"Static method\");\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(\"Main\");\n        InitializationTestClass.Foo();\n        Console.WriteLine(\"Constructing 1\");\n        var i = new InitializationTestClass();\n        Console.WriteLine(\"Constructing 2\");\n        i = new InitializationTestClass();\n    }\n}\n```", "```cs\nMain\nStatic field 1\nStatic field 2\nStatic constructor\nStatic method\nConstructing 1\nNon-static field 1\nNon-static field 2\nConstructor\nConstructing 2\nNon-static field 1\nNon-static field 2\nConstructor\n```", "```cs\npublic class AfterYou\n{\n    static AfterYou()\n    {\n        Console.WriteLine(\"AfterYou static constructor starting\");\n        Console.WriteLine(\"AfterYou: NoAfterYou.Value = \" + NoAfterYou.Value);\n        Value = 123;\n        Console.WriteLine(\"AfterYou static constructor ending\");\n    }\n\n    public static int Value = 42;\n}\n\npublic class NoAfterYou\n{\n    static NoAfterYou()\n    {\n        Console.WriteLine(\"NoAfterYou static constructor starting\");\n        Console.WriteLine(\"NoAfterYou: AfterYou.Value: = \" + AfterYou.Value);\n        Value = 456;\n        Console.WriteLine(\"NoAfterYou static constructor ending\");\n    }\n\n    public static int Value = 42;\n}\n```", "```cs\nAfterYou static constructor starting\nNoAfterYou static constructor starting\nNoAfterYou: AfterYou.Value: = 42\nNoAfterYou static constructor ending\nAfterYou: NoAfterYou.Value = 456\nAfterYou static constructor ending\n```", "```cs\npublic readonly struct Size\n{\n    public Size(double w, double h)\n    {\n        W = w;\n        H = h;\n    }\n\n    public void Deconstruct(out double w, out double h)\n    {\n        w = W;\n        h = H;\n    }\n\n    public double W { get; }\n    public double H { get; }\n}\n```", "```cs\nstatic double DiagonalLength(Size s)\n{\n    (double w, double h) = s;\n    return Math.Sqrt(w * w + h * h);\n}\n```", "```cs\nstatic string DescribeSize(Size s) => s switch\n{\n    (0, 0) => \"Empty\",\n    (0, _) => \"Extremely narrow\",\n    (double w, 0) => $\"Extremely short, and this wide: {w}\",\n    _ => \"Normal\"\n};\n```", "```cs\nstatic string Describe(object o) => o switch\n{\n    Size (0, 0) => \"Empty\",\n    Size (0, _) => \"Extremely narrow\",\n    Size (double w, 0) => $\"Extremely short, and this wide: {w}\",\n    Size _ => \"Normal shape\",\n    _ => \"Not a shape\"\n};\n```", "```cs\npublic readonly record struct Size(double W, double H);\n```", "```cs\npublic static int Divide(int x, int y, out int remainder)\n{\n    remainder = x % y;\n    return x / y;\n}\n```", "```cs\nint q = Divide(10, 3, out int r);\n```", "```cs\nint value = int.TryParse(text, out int x) ? x : -1;\n```", "```cs\nint r, q;\nq = Divide(10, 3, out r);\nConsole.WriteLine($\"3: {q}, {r}\");\nq = Divide(10, 4, out r);\nConsole.WriteLine($\"4: {q}, {r}\");\n```", "```cs\nint q = Divide(10, 3, out _);\n```", "```cs\nlong x = 41;\nInterlocked.Increment(ref x);\n```", "```cs\npublic readonly record struct Rect(double X, double Y, double Width, double Height);\n```", "```cs\npublic static double GetArea(in Rect r) => r.Width * r.Height;\n```", "```cs\nvar r = new Rect(10, 20, 100, 100);\ndouble area = GetArea(in r);\ndouble area2 = GetArea(r);\n```", "```cs\nstring rose = null;\nref string rosaIndica = ref rose;\nrosaIndica = \"smell as sweet\";\nConsole.WriteLine($\"A rose by any other name would {rose}\");\n```", "```cs\npublic class Referable\n{\n    private int i;\n    private int[] items = new int[10];\n\n    public ref int FieldRef => ref i;\n\n    public ref int GetArrayElementRef(int index) => ref items[index];\n\n    public ref int GetBackSameRef(ref int arg) => ref arg;\n\n    public ref int WillNotCompile()\n    {\n        int v = 42;\n        return ref v;\n    }\n\n    public ref int WillAlsoNotCompile()\n    {\n        int i = 42;\n        return ref GetBackSameRef(ref i);\n    }\n\n    public ref int WillCompile(ref int i)\n    {\n        return ref GetBackSameRef(ref i);\n    }\n}\n```", "```cs\npublic static void Blame(string perpetrator = \"the youth of today\",\n    string problem = \"the downfall of society\")\n{\n     Console.WriteLine($\"I blame {perpetrator} for {problem}.\");\n}\n```", "```cs\nBlame(\"mischievous gnomes\");\n```", "```cs\nBlame(problem: \"everything\");\n```", "```cs\nusing var r = new StreamReader(stream, Encoding.UTF8, true, 8192, false);\nusing var w = new StreamWriter(filepath, true, Encoding.UTF8);\n```", "```cs\nusing var r = new StreamReader(stream, Encoding.UTF8,\n  detectEncodingFromByteOrderMarks: true, bufferSize: 8192, leaveOpen: false);\nusing var w = new StreamWriter(filepath, append: true, Encoding.UTF8);\n```", "```cs\npublic static void Blame(string perpetrator, string problem)\n{\n     Console.WriteLine($\"I blame {perpetrator} for {problem}.\");\n}\n\npublic static void Blame(string perpetrator)\n{\n    Blame(perpetrator, \"the downfall of society\");\n}\n\npublic static void Blame()\n{\n    Blame(\"the youth of today\", \"the downfall of society\");\n}\n```", "```cs\nvar r = new Random();\nConsole.WriteLine(string.Format(\n    \"{0}, {1}, {2}, {3}\",\n    r.Next(10), r.Next(10), r.Next(10), r.Next(10)));\n```", "```cs\nConsole.WriteLine(string.Format(\n    \"{0}, {1}, {2}, {3}\",\n    new object[] { r.Next(10), r.Next(10), r.Next(10), r.Next(10) }));\n```", "```cs\npublic static string Format(string format, params object[] args)\n```", "```cs\nstatic double GetAverageDistanceFrom(\n    (double X, double Y) referencePoint,\n    (double X, double Y)[] points)\n{\n    double total = 0;\n    for (int i = 0; i < points.Length; ++i)\n    {\n        total += GetDistanceFromReference(points[i]);\n    }\n    return total / points.Length;\n\n    double GetDistanceFromReference((double X, double Y) p)\n    {\n        return GetDistance(p, referencePoint);\n    }\n\n    static double GetDistance((double X, double Y) p1, (double X, double Y) p2)\n    {\n        double dx = p1.X - p2.X;\n        double dy = p1.Y - p2.Y;\n        return Math.Sqrt(dx * dx + dy * dy);\n    }\n}\n```", "```cs\ndouble GetDistanceFromReference((double X, double Y) p)\n    => GetDistance(p, referencePoint);\n```", "```cs\nnamespace MyApplication;\n\npublic static class StringExtensions\n{\n    public static void Show(this string s)\n    {\n        Console.WriteLine(s);\n    }\n}\n```", "```cs\n`namespace` `MyApplication``;`\n\ninternal class Showy\n{\n    public static void Greet()\n    {\n        `\"Hello\"``.``Show``(``)``;`\n    }\n}\n```", "```cs\n`using` `MyApplication``;`\n\nnamespace Other;\n\ninternal class Vocal\n{\n    public static void Hail()\n    {\n        \"Hello\".Show();\n    }\n}\n```", "```cs\npublic class HasProperty\n{\n    private int _x;\n    `public` `int` `X`\n    `{`\n        `get`\n        `{`\n            `return` `_x``;`\n        `}`\n        `set`\n        `{`\n            `_x` `=` `value``;`\n        `}`\n    `}`\n}\n```", "```cs\npublic class HasProperty\n{\n    private int _x;\n    public int X\n    {\n        get => _x;\n        set => _x = value;\n    }\n}\n```", "```cs\npublic class HasProperty\n{\n    public int X { get; set; }\n}\n```", "```cs\nvar o = new HasProperty();\no.X = 123;\no.X += 432;\nConsole.WriteLine(o.X);\n```", "```cs\npublic int X { get; private set; }\n```", "```cs\npublic int X { get; }\n```", "```cs\npublic class WithAutos\n{\n    public int X { get; } = 42;\n\n    public WithAutos()\n    {\n    }\n\n    public WithAutos(int val)\n    {\n        X = val;\n    }\n}\n```", "```cs\npublic record EnforcedInitButMutable(string Name, string FavoriteColor)\n{\n    public string Name { get; set; } = Name;\n    public string FavoriteColor { get; set; } = FavoriteColor;\n}\n```", "```cs\npublic class WithInit\n{\n    public int X { get; init; }\n}\n```", "```cs\nvar x = new WithInit\n{\n    X = 42\n};\n```", "```cs\npublic readonly struct Point\n{\n    public Point(double x, double y)\n    {\n        X = x;\n        Y = y;\n    }\n\n    public double X { get; init; }\n    public double Y { get; init; }\n}\n```", "```cs\nPoint p1 = new(0, 10);\nPoint p2 = p1 with { X = 20 };\n```", "```cs\npublic double Magnitude\n{\n    get\n    {\n        return Math.Sqrt(X * X + Y * Y);\n    }\n}\n```", "```cs\npublic double Magnitude => Math.Sqrt(X * X + Y * Y);\n```", "```cs\nusing System.Windows;\n\npublic class Item\n{\n    public Point Location { get; set; }\n}\n```", "```cs\nvar item = new Item();\nitem.Location.X = 123;  // Will not compile\n```", "```cs\nerror CS1612: Cannot modify the return value of 'Item.Location' because it is\nnot a variable\n```", "```cs\nusing System.Windows;\n\npublic class Item\n{\n    private Point _location;\n    public Point get_Location()\n    {\n        return _location;\n    }\n    public void set_Location(Point value)\n    {\n        _location = value;\n    }\n}\n```", "```cs\nusing System.Windows;\n\npublic class Item\n{\n    private Point _location;\n\n    public ref Point Location => ref _location;\n}\n```", "```cs\nvar item = new Item();\nPoint location = item.Location;\nlocation.X = 123;\n```", "```cs\nvar item = new Item();\nref Point location = ref item.Location;\nlocation.X = 123;\n```", "```cs\nvar numbers = new List<int> { 1, 2, 1, 4 };\n`numbers``[``2``]` `+``=` `numbers``[``1``]``;`\n`Console``.``WriteLine``(``numbers``[``0``]``)``;`\n```", "```cs\npublic class Indexed\n{\n    public string this[int index]\n    {\n        get => index < 5 ? \"Foo\" : \"bar\";\n    }\n}\n```", "```cs\nstring? s = objectWithIndexer?[2];\n```", "```cs\nstring? s = objectWithIndexer == null ? null : objectWithIndexer[2];\n```", "```cs\nProcess.Start(new ProcessStartInfo\n{\n    FileName = \"cmd.exe\",\n    UseShellExecute = true,\n    WindowStyle = ProcessWindowStyle.Maximized,\n});\n```", "```cs\nProcess.Start(new ProcessStartInfo(\"cmd.exe\")\n{\n    UseShellExecute = true,\n    WindowStyle = ProcessWindowStyle.Maximized,\n});\n```", "```cs\nvar d = new Dictionary<string, int>\n{\n [\"One\"] = 1,\n [\"Two\"] = 2,\n [\"Three\"] = 3\n};\n```", "```cs\npublic static Counter operator +(Counter x, Counter y)\n{\n    return new Counter { _count = x._count + y._count };\n}\n```", "```cs\npublic static Counter operator +(Counter x, int y)\n{\n    return new Counter { _count = x._count + y };\n}\n\npublic static Counter operator +(int x, Counter y)\n{\n    return new Counter { _count = x + y._count };\n}\n```", "```cs\npublic static explicit operator int(Counter value)\n{\n    return value._count;\n}\n\npublic static explicit operator Counter(int value)\n{\n    return new Counter { _count = value };\n}\n```", "```cs\nvar c = (Counter) 123;\nvar v = (int) c;\n```", "```cs\ninternal static class FileSorter\n{\n    public static string[] GetByNameLength(string path)\n    {\n        string[] files = Directory.GetFiles(path);\n        var comparer = new LengthComparer();\n        Array.Sort(files, comparer);\n        return files;\n    }\n\n    `private` `class` `LengthComparer` `:` `IComparer``<``string``>`\n    `{`\n        `public` `int` `Compare``(``string?` `x``,` `string?` `y``)`\n        `{`\n            `int` `diff` `=` `(``x``?``.``Length` `?``?` `0``)` `-` `(``y``?``.``Length` `?``?` `0``)``;`\n            `return` `diff` `=``=` `0`\n                `?` `StringComparer``.``OrdinalIgnoreCase``.``Compare``(``x``,` `y``)`\n                `:` `diff``;`\n        `}`\n    `}`\n}\n```", "```cs\npublic interface IDoStuff\n{\n    string this[int i] { get; set; }\n    string Name { get; set; }\n    int Id { get; }\n    int SomeMethod(string arg);\n    event EventHandler? Click;\n}\n```", "```cs\npublic class DoStuff : IDoStuff\n{\n    public string this[int i] { get { return i.ToString(); } set { } }\n    public string Name { get; set; }\n    ...etc\n}\n```", "```cs\nint IDoStuff.SomeMethod(string arg)\n{\n    ...\n}\n```", "```cs\npublic interface INamed\n{\n    int Id { get; }\n    string Name => $\"{this.GetType()}: {this.Id}\";\n}\n```", "```cs\npublic interface IContainMultitudes\n{\n    public const string TheMagicWord = \"Please\";\n\n    public enum Outcome\n    {\n        Yes,\n        No\n    }\n\n    Outcome MayI(string request)\n    {\n        return request == TheMagicWord ? Outcome.Yes : Outcome.No;\n    }\n}\n```", "```cs\npublic enum PorridgeTemperature\n{\n    TooHot,\n    TooCold,\n    JustRight\n}\n```", "```cs\nswitch (porridge.Temperature)\n{\ncase PorridgeTemperature.TooHot:\n    GoOutsideForABit();\n    break;\n\ncase PorridgeTemperature.TooCold:\n    MicrowaveMyBreakfast();\n    break;\n\ncase PorridgeTemperature.JustRight:\n    NomNomNom();\n    break;\n}\n```", "```cs\n[System.Flags]\npublic enum Ingredients\n{\n    Eggs           =        0b1,\n    Bacon          =       0b10,\n    Sausages       =      0b100,\n    Mushrooms      =     0b1000,\n    Tomato         =   0b1_0000,\n    BlackPudding   =  0b10_0000,\n    BakedBeans     = 0b100_0000,\n    TheFullEnglish = 0b111_1111\n}\n```", "```cs\n[Flags]\npublic enum TooManyChoices : long\n{\n    ...\n}\n```", "```cs\nusing var rdr = new StreamReader(stream, true);\n```", "```cs\nusing var fs = new FileStream(path, FileMode.Append);\n```", "```cs\nvar x = new { Title = \"Lord\", Surname = \"Voldemort\" };\n\nConsole.WriteLine($\"Welcome, {x.Title} {x.Surname}\");\n```"]