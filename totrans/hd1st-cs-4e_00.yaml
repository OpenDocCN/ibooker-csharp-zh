- en: Table of Contents (the real thing)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[**Intro**](preface02.html#intro)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Your brain on C#.** You’re sitting around trying to *learn* something, but
    your *brain* keeps telling you all that learning *isn’t important*. Your brain’s
    saying, “Better leave room for more important things, like which wild animals
    to avoid and whether nude archery is a bad idea.” So how *do* you trick your brain
    into thinking that your life really depends on learning C#?'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Who is this book for?](preface02.html#who_is_this_book_forquestion_mark)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[We know what you’re thinking.](preface02.html#we_know_what_youapostrophere_thinkingdot)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[And we know what your brain is thinking.](preface02.html#and_we_know_what_your_brain_is_thinkingd)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Metacognition: thinking about thinking](preface02.html#metacognition_thinking_about_thinking)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Here’s what WE did](preface02.html#hereapostrophes_what_we_did)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Here’s what YOU can do to bend your brain into submission](preface02.html#hereapostrophes_what_you_can_do_to_bend)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[README](preface02.html#readme)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[The technical review team](preface02.html#the_technical_review_team)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Acknowledgments](preface02.html#acknowledgments)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[O’Reilly online learning](preface02.html#oapostrophereilly_online_learning)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[1 start building with C#: **Build something great*…*fast!**](ch01.html#start_building_with_chash_build_somethin)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Want to build great apps…right now?**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: With C#, you’ve got a **modern programming language** and a **valuable tool**
    at your fingertips. And with **Visual Studio**, you’ve got an **amazing development
    environment** with highly intuitive features that make coding as easy as possible.
    Not only is Visual Studio a great tool for writing code, it’s also a **really
    valuable learning tool** for exploring C#. Sound appealing? Turn the page, and
    let’s get coding.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Why you should learn C#](ch01.html#why_you_should_learn_chash)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Visual Studio is a tool for writing code and exploring C#](ch01.html#visual_studio_is_a_tool_for_writing_code)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Create your first project in Visual Studio](ch01.html#create_your_first_project_in_visual_stud)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Let’s build a game!](ch01.html#letapostrophes_build_a_gameexclamation_m)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Here’s how you’ll build your game](ch01.html#hereapostrophes_how_youapostrophell_buil)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Create a WPF project in Visual Studio](ch01.html#create_a_wpf_project_in_visual_studio)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use XAML to design your window](ch01.html#use_xaml_to_design_your_window)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Design the window for your game](ch01.html#design_the_window_for_your_game)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Set the window size and title with XAML properties](ch01.html#set_the_window_size_and_title_with_xaml)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Add rows and columns to the XAML grid](ch01.html#add_rows_and_columns_to_the_xaml_grid)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Make the rows and columns equal size](ch01.html#make_the_rows_and_columns_equal_size)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Add a TextBlock control to your grid](ch01.html#add_a_textblock_control_to_your_grid)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Now you’re ready to start writing code for your game](ch01.html#now_youapostrophere_ready_to_start_writi)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Generate a method to set up the game](ch01.html#generate_a_method_to_set_up_the_game)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Finish your SetUpGame method](ch01.html#finish_your_setupgame_method)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Run your program](ch01.html#run_your_program)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Add your new project to source control](ch01.html#add_your_new_project_to_source_control)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[The next step to build the game is handling mouse clicks](ch01.html#the_next_step_to_build_the_game_is_handl)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Make your TextBlocks respond to mouse clicks](ch01.html#make_your_textblocks_respond_to_mouse_cl)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Add the TextBlock_MouseDown code](ch01.html#add_the_textblock_mousedown_code)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Make the rest of the TextBlocks call the same MouseDown event handler](ch01.html#make_the_rest_of_the_textblocks_call_the)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Finish the game by adding a timer](ch01.html#finish_the_game_by_adding_a_timer)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Add a timer to your game’s code](ch01.html#add_a_timer_to_your_gameapostrophes_code)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use the debugger to troubleshoot the exception](ch01.html#use_the_debugger_to_troubleshoot_the_exc)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Add the rest of the code and finish the game](ch01.html#add_the_rest_of_the_code_and_finish_the)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Update your code in source control](ch01.html#update_your_code_in_source_control)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[2 dive into C#: **Statements, classes, and code**](ch02.html#dive_into_chash_statementscomma_classesc)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**You’re not just an IDE user. You’re a developer.**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can get a lot of work done using the IDE, but there’s only so far it can
    take you. Visual Studio is one of the most advanced software development tools
    ever made, but a **powerful IDE** is only the beginning. It’s time to **dig in
    to C# code**: how it’s structured, how it works, and how you can take control
    of it*…*because there’s no limit to what you can get your apps to do.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Let’s take a closer look at the files for a console app](ch02.html#letapostrophes_take_a_closer_look_at_the)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Two classes can be in the same namespace (and file!)](ch02.html#two_classes_can_be_in_the_same_namespace)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Statements are the building blocks for your apps](ch02.html#statements_are_the_building_blocks_for_y)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Your programs use variables to work with data](ch02.html#your_programs_use_variables_to_work_with)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Generate a new method to work with variables](ch02.html#generate_a_new_method_to_work_with_varia)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Add code that uses operators to your method](ch02.html#add_code_that_uses_operators_to_your_met)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use the debugger to watch your variables change](ch02.html#use_the_debugger_to_watch_your_variables)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use operators to work with variables](ch02.html#use_operators_to_work_with_variables)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“if” statements make decisions](ch02.html#quotation_markifquotation_mark_statement)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Loops perform an action over and over](ch02.html#loops_perform_an_action_over_and_over)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use code snippets to help write loops](ch02.html#use_code_snippets_to_help_write_loops)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Controls drive the mechanics of your user interfaces](ch02.html#controls_drive_the_mechanics_of_your_use)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Create a WPF app to experiment with controls](ch02.html#create_a_wpf_app_to_experiment_with_cont)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Add a TextBox control to your app](ch02.html#add_a_textbox_control_to_your_app)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Add C# code to update the TextBlock](ch02.html#add_chash_code_to_update_the_textblock)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Add an event handler that only allows number input](ch02.html#add_an_event_handler_that_only_allows_nu)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Add sliders to the bottom row of the grid](ch02.html#add_sliders_to_the_bottom_row_of_the_gri)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Add C# code to make the rest of the controls work](ch02.html#add_chash_code_to_make_the_rest_of_the_c)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[**Unity Lab 1: Explore C# with Unity**](afterword01.html#unity_lab_hash1_explore_chash_with_unity)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Welcome to your first **Head First C# Unity Lab**. Writing code is a skill,
    and like any other skill, getting better at it takes **practice and experimentation**.
    Unity will be a really valuable tool for that. In this lab, you can begin practicing
    what you’ve learned about C# in [#start_building_with_chash_build_somethin](ch01.html#start_building_with_chash_build_somethin)
    and [#dive_into_chash_statementscomma_classesc](ch02.html#dive_into_chash_statementscomma_classesc).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Unity is a powerful tool for game design](afterword01.html#unity_is_a_powerful_tool_for_game_design)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Download Unity Hub](afterword01.html#download_unity_hub)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use Unity Hub to create a new project](afterword01.html#use_unity_hub_to_create_a_new_project)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Take control of the Unity layout](afterword01.html#take_control_of_the_unity_layout)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Your scene is a 3D environment](afterword01.html#your_scene_is_a_3d_environment)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Unity games are made with GameObjects](afterword01.html#unity_games_are_made_with_gameobjects)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use the Move Gizmo to move your GameObjects](afterword01.html#use_the_move_gizmo_to_move_your_gameobje)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[The Inspector shows your GameObject’s components](afterword01.html#the_inspector_shows_your_gameobjectapost)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Add a material to your Sphere GameObject](afterword01.html#add_a_material_to_your_sphere_gameobject)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Rotate your sphere](afterword01.html#rotate_your_sphere)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Get creative!](afterword01.html#get_creativeexclamation_mark)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[3 objects*…*get oriented!: **Making code make sense**](ch03.html#objectshellipget_orientedexclamation_mar)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Every program you write solves a problem.**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When you’re building a program, it’s always a good idea to start by thinking
    about what *problem* your program’s supposed to solve. That’s why **objects**
    are really useful. They let you structure your code based on the problem it’s
    solving so that you can spend your time *thinking about the problem* you need
    to work on rather than getting bogged down in the mechanics of writing code. When
    you use objects right—and really put some thought into how you design them—you
    end up with code that’s *intuitive* to write, and easy to read and change.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[If code is useful, it gets reused](ch03.html#if_code_is_usefulcomma_it_gets_reused)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Some methods take parameters and return a value](ch03.html#some_methods_take_parameters_and_return)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Let’s build a program that picks some cards](ch03.html#letapostrophes_build_a_program_that_pick)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Create your PickRandomCards console app](ch03.html#create_your_pickrandomcards_console_app)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Finish your PickSomeCards method](ch03.html#finish_your_picksomecards_method)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Your finished CardPicker class](ch03.html#your_finished_cardpicker_class)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Ana’s working on her next game](ch03.html#anaapostrophes_working_on_her_next_game)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Build a paper prototype for a classic game](ch03.html#build_a_paper_prototype_for_a_classic_ga)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Up next: build a WPF version of your card picking app](ch03.html#up_next_build_a_wpf_version_of_your_card)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[A StackPanel is a container that stacks other controls](ch03.html#a_stackpanel_is_a_container_that_stacks)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Reuse your CardPicker class in a new WPF app](ch03.html#reuse_your_cardpicker_class_in_a_new_wpf)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use a Grid and StackPanel to lay out the main window](ch03.html#use_a_grid_and_stackpanel_to_lay_out_the)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Lay out your Card Picker desktop app’s window](ch03.html#lay_out_your_card_picker_desktop_appapos)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Ana can use objects to solve her problem](ch03.html#ana_can_use_objects_to_solve_her_problem)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[You use a class to build an object](ch03.html#you_use_a_class_to_build_an_object)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[When you create a new object from a class, it’s called an instance of that
    class](ch03.html#when_you_create_a_new_object_from_a_clas)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[A better solution for Ana… brought to you by objects](ch03.html#a_better_solution_for_anahellipbrought_t)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[An instance uses fields to keep track of things](ch03.html#an_instance_uses_fields_to_keep_track_of)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Thanks for the memory](ch03.html#thanks_for_the_memory)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[What’s on your program’s mind](ch03.html#whatapostrophes_on_your_programapostroph)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Sometimes code can be difficult to read](ch03.html#sometimes_code_can_be_difficult_to_read)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use intuitive class and method names](ch03.html#use_intuitive_class_and_method_names)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Build a class to work with some guys](ch03.html#build_a_class_to_work_with_some_guys)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[There’s an easier way to initialize objects with C#](ch03.html#thereapostrophes_an_easier_way_to_initia)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use the C# Interactive window to run C# code](ch03.html#use_the_chash_interactive_window_to_run)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[4 types and references: **Getting the reference**](ch04.html#types_and_references_getting_the_referen)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**What would your apps be without data?** Think about it for a minute. Without
    data, your programs are*…*well, it’s actually hard to imagine writing code without
    data. You need **information** from your users, and you use that to look up or
    produce new information to give back to them. In fact, almost everything you do
    in programming involves **working with data** in one way or another. In this chapter,
    you’ll learn the ins and outs of C#’s **data types** and **references**, see how
    to work with data in your program, and even learn a few more things about **objects**
    (*guess what…objects are data, too!*).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Owen could use our help!](ch04.html#owen_could_use_our_helpexclamation_mark)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Character sheets store different types of data on paper](ch04.html#character_sheets_store_different_types_o)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[A variable’s type determines what kind of data it can store](ch04.html#a_variableapostrophes_type_determines_wh)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[C# has several types for storing integers](ch04.html#chash_has_several_types_for_storing_inte)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Let’s talk about strings](ch04.html#letapostrophes_talk_about_strings)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[A literal is a value written directly into your code](ch04.html#a_literal_is_a_value_written_directly_in)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[A variable is like a data to-go cup](ch04.html#a_variable_is_like_a_data_to_go_cup)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Other types come in different sizes, too](ch04.html#other_types_come_in_different_sizescomma)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[10 pounds of data in a 5-pound bag](ch04.html#ten_pounds_of_data_in_a_five_pound_bag)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Casting lets you copy values that C# can’t automatically convert to another
    type](ch04.html#casting_lets_you_copy_values_that_chash)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[C# does some conversion automatically](ch04.html#chash_does_some_conversions_automaticall)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[When you call a method, the arguments need to be compatible with the types
    of the parameters](ch04.html#when_you_call_a_methodcomma_the_argument)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Let’s help Owen experiment with ability scores](ch04.html#letapostrophes_help_owen_experiment_with)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use the C# compiler to find the problematic line of code](ch04.html#use_the_chash_compiler_to_find_the_probl)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use reference variables to access your objects](ch04.html#use_reference_variables_to_access_your_o)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Multiple references and their side effects](ch04.html#multiple_references_and_their_side_effec)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Objects use references to talk to each other](ch04.html#objects_use_references_to_talk_to_each_o)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Arrays hold multiple values](ch04.html#arrays_hold_multiple_values)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Arrays can contain reference variables](ch04.html#arrays_can_contain_reference_variables)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[null means a reference points to nothing](ch04.html#null_means_a_reference_points_to_nothing)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Welcome to Sloppy Joe’s Budget House o’ Discount Sandwiches!](ch04.html#welcome_to_sloppy_joeapostrophes_budget)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[**Unity Lab 2: Write C# Code for Unity**](afterword02.html#unity_lab_hash2_write_chash_code_for_uni)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unity isn’t just a powerful, cross-platform engine and editor for building 2D
    and 3D games and simulations. It’s also a **great way to get practice writing
    C# code**. In this lab, you’ll get more practice writing C# code for a project
    in Unity.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[C# scripts add behavior to your GameObjects](afterword02.html#chash_scripts_add_behavior_to_your_gameo)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Add a C# script to your GameObject](afterword02.html#add_a_chash_script_to_your_gameobject)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Write C# code to rotate your sphere](afterword02.html#write_chash_code_to_rotate_your_sphere)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Add a breakpoint and debug your game](afterword02.html#add_a_breakpoint_and_debug_your_game)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use the debugger to understand Time.deltaTime](afterword02.html#use_the_debugger_to_understand_timedotde)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Add a cylinder to show where the Y axis is](afterword02.html#add_a_cylinder_to_show_where_the_y_axis)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Add fields to your class for the rotation angle and speed](afterword02.html#add_fields_to_your_class_for_the_rotatio)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use Debug.DrawRay to explore how 3D vectors work](afterword02.html#use_debugdotdrawray_to_explore_how_3d_ve)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Run the game to see the ray in the Scene view](afterword02.html#run_the_game_to_see_the_ray_in_the_scene)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Rotate your ball around a point in the scene](afterword02.html#rotate_your_ball_around_a_point_in_the_s)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use Unity to take a closer look at rotation and vectors](afterword02.html#use_unity_to_take_a_closer_look_at_rotat)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Get creative!](afterword02.html#get_creativeexclamation_mark-idd0001)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[5 encapsulation: **Keep your privates*…*private**](ch05.html#encapsulation_keep_your_privateshellippr)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Ever wished for a little more privacy?**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Sometimes your objects feel the same way. Just like you don’t want anybody you
    don’t trust reading your journal or paging through your bank statements, good
    objects don’t let **other** objects go poking around their fields. In this chapter,
    you’re going to learn about the power of **encapsulation**, a way of programming
    that helps you make code that’s flexible, easy to use, and difficult to misuse.
    You’ll **make your objects’ data private**, and add **properties** to protect
    how that data is accessed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Let’s help Owen roll for damage](ch05.html#letapostrophes_help_owen_roll_for_damage)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Create a console app to calculate damage](ch05.html#create_a_console_app_to_calculate_damage)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Design the XAML for a WPF version of the damage calculator](ch05.html#design_the_xaml_for_a_wpf_version_of_the)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[The code-behind for the WPF damage calculator](ch05.html#the_code_behind_for_the_wpf_damage_calcu)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Tabletop talk (or maybe*…*dice discussion?)](ch05.html#tabletop_talk_left_parenthesisor_maybehe)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Let’s try to fix that bug](ch05.html#letapostrophes_try_to_fix_that_bug)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use Debug.WriteLine to print diagnostic information](ch05.html#use_debugdotwriteline_to_print_diagnosti)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[It’s easy to accidentally misuse your objects](ch05.html#itapostrophes_easy_to_accidentally_misus)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Encapsulation means keeping some of the data in a class private](ch05.html#encapsulation_means_keeping_some_of_the)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use encapsulation to control access to your class’s methods and fields](ch05.html#use_encapsulation_to_control_access_to_y)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[But is the RealName field REALLY protected?](ch05.html#but_is_the_realname_field_really_protect)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Private fields and methods can only be accessed from instances of the same
    class](ch05.html#private_fields_and_methods_can_only_be_a)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Why encapsulation? Think of an object as a black box...](ch05.html#why_encapsulationquestion_mark_think_of)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Let’s use encapsulation to improve the SwordDamage class](ch05.html#letapostrophes_use_encapsulation_to_impr)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Encapsulation keeps your data safe](ch05.html#encapsulation_keeps_your_data_safe)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Write a console app to test the PaintballGun class](ch05.html#write_a_console_app_to_test_the_paintbal)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Properties make encapsulation easier](ch05.html#properties_make_encapsulation_easier)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Modify your Main method to use the Bullets property](ch05.html#modify_your_main_method_to_use_the_balls)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Auto-implemented properties simplify your code](ch05.html#auto_implemented_properties_simplify_you)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use a private setter to create a read-only property](ch05.html#use_a_private_setter_to_create_a_read_on)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[What if we want to change the magazine size?](ch05.html#what_if_we_want_to_change_the_magazine_s)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use a constructor with parameters to initialize properties](ch05.html#use_a_constructor_with_parameters_to_ini)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Specify arguments when you use the new keyword](ch05.html#specify_arguments_when_you_use_the_quota)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[6 inheritance: **Your object’s family tree**](ch06.html#inheritance_your_objectapostrophes_famil)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Sometimes you *DO* want to be just like your parents.**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Ever run across a class that ***almost*** does exactly what you want ***your***
    class to do? Found yourself thinking that if you could just ***change a few things***,
    that class would be perfect? With **inheritance**, you can **extend** an existing
    class so your new class gets all of its behavior—with the **flexibility** to make
    changes to that behavior so you can tailor it however you want. Inheritance is
    one of the most powerful concepts and techniques in the C# language: with it you’ll
    **avoid duplicate code**, **model the real world** more closely, and end up with
    apps that are **easier to maintain** and **less prone to bugs**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Calculate damage for MORE weapons](ch06.html#calculate_damage_for_more_weapons)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use a switch statement to match several candidates](ch06.html#use_a_switch_statement_to_match_several)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[One more thing*…*can we calculate damage for a dagger? and a mace?](ch06.html#one_more_thinghellipcan_we_calculate_dam)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[When your classes use inheritance, you only need to write your code once](ch06.html#when_your_classes_use_inheritancecomma_y)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Build up your class model by starting general and getting more specific](ch06.html#build_up_your_class_model_by_starting_ge)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[How would you design a zoo simulator?](ch06.html#how_would_you_design_a_zoo_simulatorques)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Every subclass extends its base class](ch06.html#every_subclass_extends_its_base_class)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use a colon to extend a base class](ch06.html#use_a_colon_to_extend_a_base_class)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[A subclass can override methods to change or replace members it inherited](ch06.html#a_subclass_can_override_methods_to_chang)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Some members are only implemented in a subclass](ch06.html#some_members_are_only_implemented_in_a_s)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use the debugger to understand how overriding works](ch06.html#use_the_debugger_to_understand_how_overr)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Build an app to explore virtual and override](ch06.html#build_an_app_to_explore_virtual_and_over)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[A subclass can hide methods in the base class](ch06.html#a_subclass_can_hide_methods_in_the_base)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use the override and virtual keywords to inherit behavior](ch06.html#use_the_override_and_virtual_keywords_to)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[When a base class has a constructor, your subclass needs to call it](ch06.html#when_a_base_class_has_a_constructorcomma)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[It’s time to finish the job for Owen](ch06.html#itapostrophes_time_to_finish_the_job_for)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Build a beehive management system](ch06.html#build_a_beehive_management_system)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[The Queen class: how she manages the worker bees](ch06.html#the_queen_class_how_she_manages_the_work)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[The UI: add the XAML for the main window](ch06.html#the_ui_add_the_xaml_for_the_main_window)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Feedback drives your Beehive Management game](ch06.html#feedback_drives_your_beehive_management)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Some classes should never be instantiated](ch06.html#some_classes_should_never_be_instantiate)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[An abstract class is an intentionally incomplete class](ch06.html#an_abstract_class_is_an_intentionally_in)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Like we said, some classes should never be instantiated](ch06.html#like_we_saidcomma_some_classes_should_ne)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[An abstract method doesn’t have a body](ch06.html#an_abstract_method_doesnapostrophet_have)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Abstract properties work just like abstract methods](ch06.html#abstract_properties_work_just_like_abstr)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[**Unity Lab 3: GameObject Instances**](afterword03.html#unity_lab_hash3_gameobject_instances)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: C# is an object-oriented language, and since these Head First C# Unity Labs
    are all **about getting practice writing C# code**, it makes sense that these
    labs will focus on creating objects.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Let’s build a game in Unity!](afterword03.html#letapostrophes_build_a_game_in_unityexcl)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Create a new material inside the Materials folder](afterword03.html#create_a_new_material_inside_the_materia)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Spawn a billiard ball at a random point in the scene](afterword03.html#spawn_a_billiard_ball_at_a_random_point)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use the debugger to understand Random.value](afterword03.html#use_the_debugger_to_understand_randomdot)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Turn your GameObject into a prefab](afterword03.html#turn_your_gameobject_into_a_prefab)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Create a script to control the game](afterword03.html#create_a_script_to_control_the_game)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Attach the script to the Main Camera](afterword03.html#attach_the_script_to_the_main_camera)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Press Play to run your code](afterword03.html#press_play_to_run_your_code)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use the Inspector to work with GameObject instances](afterword03.html#use_the_inspector_to_work_with_gameobjec)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use physics to keep balls from overlapping](afterword03.html#use_physics_to_keep_balls_from_overlappi)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Get creative!](afterword03.html#get_creativeexclamation_mark-idd0002)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[**7 interfaces, casting, and “is”: Making classes keep their promises**](ch07.html#interfacescomma_castingcomma_and_quotati)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Actions speak louder than words.**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Sometimes you need to group your objects together based on the **things they
    can do** rather than the classes they inherit from. That’s where **interfaces**
    come in—they let you work with any class that can do the job. But with **great
    power comes great responsibility**, and any class that implements an interface
    must promise to **fulfill all of its obligations**…or the compiler will break
    its kneecaps, see?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[The beehive is under attack!](ch07.html#the_beehive_is_under_attackexclamation_m)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[We can use casting to call the DefendHive method...](ch07.html#we_can_use_casting_to_call_the_defendhiv)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[An interface defines methods and properties that a class must implement...](ch07.html#an_interface_defines_methods_and_propert)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Get a little practice using interfaces](ch07.html#get_a_little_practice_using_interfaces)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[You can’t instantiate an interface, but you can reference an interface](ch07.html#you_canapostrophet_instantiate_an_interf)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Interface references are ordinary object references](ch07.html#interface_references_are_ordinary_object)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[The RoboBee 4000 can do a worker bee’s job without using valuable honey](ch07.html#the_robobee_4000_can_do_a_worker_beeapos)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[The IWorker’s Job property is a hack](ch07.html#the_iworkerapostrophes_job_property_is_a)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use “is” to check the type of an object](ch07.html#use_quotation_markisquotation_mark_to_ch)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use “is” to access methods in a subclass](ch07.html#use_quotation_markisquotation_mark_to_ac)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[What if we want different animals to swim or hunt in packs?](ch07.html#what_if_we_want_different_animals_to_swi)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use interfaces to work with classes that do the same job](ch07.html#use_interfaces_to_work_with_classes_that)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Safely navigate your class hierarchy with “is”](ch07.html#safely_navigate_your_class_hierarchy_wit)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[C# has another tool for safe type conversion: the “as” keyword](ch07.html#chash_has_another_tool_for_safe_type_con)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use upcasting and downcasting to move up and down a class hierarchy](ch07.html#use_upcasting_and_downcasting_to_move_up)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Upcasting turns your CoffeeMaker into an Appliance](ch07.html#upcasting_turns_your_coffeemaker_into_an)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Upcasting and downcasting work with interfaces, too](ch07.html#upcasting_and_downcasting_work_with_inte)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Downcasting turns your Appliance back into a CoffeeMaker](ch07.html#downcasting_turns_your_appliance_back_in)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Interfaces can inherit from other interfaces](ch07.html#interfaces_can_inherit_from_other_interf)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Interfaces can have static members](ch07.html#interfaces_can_have_static_members)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Default implementations give bodies to interface methods](ch07.html#default_implementations_give_bodies_to_i)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Add a ScareAdults method with a default implementation](ch07.html#add_a_scareadults_method_with_a_default)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Data binding updates WPF controls automatically](ch07.html#data_binding_updates_wpf_controls_automa)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Modify the Beehive Management System to use data binding](ch07.html#modify_the_beehive_management_system_to)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Polymorphism means that one object can take many different forms](ch07.html#polymorphism_means_that_one_object_can_t)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[8 enums and collections: **Organizing your data**](ch08.html#enums_and_collections_organizing_your_da)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**When it rains, it pours.**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the real world, you don’t receive your data in tiny little bits and pieces.
    No, your data’s going to come at you in **loads, piles, and bunches**. You’ll
    need some pretty powerful tools to organize all of it, and that’s where **enums**
    and collections come in. Enums are types that let you define valid values to categorize
    your data. Collections are special objects that store many values, letting you
    **store, sort, and manage** all the data that your programs need to pore through.
    That way, you can spend your time thinking about writing programs to work with
    your data, and let the collections worry about keeping track of it for you.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Strings don’t always work for storing categories of data](ch08.html#strings_donapostrophet_always_work_for_s)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Enums let you work with a set of valid values](ch08.html#enums_let_you_work_with_a_set_of_valid_v)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Enums let you represent numbers with names](ch08.html#enums_let_you_represent_numbers_with_nam)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[We could use an array to create a deck of cards…](ch08.html#we_could_use_an_array_to_create_a_deck_o)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Lists make it easy to store collections of…anything](ch08.html#lists_make_it_easy_to_store_collections)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Lists are more flexible than arrays](ch08.html#lists_are_more_flexible_than_arrays)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Let’s build an app to store shoes](ch08.html#letapostrophes_build_an_app_to_store_sho)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Generic collections can store any type](ch08.html#generic_collections_can_store_any_type)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Collection initializers are similar to object initializers](ch08.html#collection_initializers_are_similar_to_o)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Let’s create a List of Ducks](ch08.html#letapostrophes_create_a_list_of_ducks)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Lists are easy, but SORTING can be tricky](ch08.html#lists_are_easycomma_but_sorting_can_be_t)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[IComparable<Duck> helps your list sort its ducks](ch08.html#icomparableless_thanduckgreater_than_hel)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use IComparer to tell your List how to sort](ch08.html#use_icomparer_to_tell_your_list_how_to_s)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Create an instance of your comparer object](ch08.html#create_an_instance_of_your_comparer_obje)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Overriding a ToString method lets an object describe itself](ch08.html#overriding_a_tostring_method_lets_an_obj)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Update your foreach loops to let your Ducks and Cards write themselves to
    the console](ch08.html#update_your_foreach_loops_to_let_your_du)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[You can upcast an entire list using IEnumerable<T>](ch08.html#you_can_upcast_an_entire_list_using_ienu)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use a Dictionary to store keys and values](ch08.html#use_a_dictionary_to_store_keys_and_value)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[The Dictionary functionality rundown](ch08.html#the_dictionary_functionality_rundown)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Build a program that uses a dictionary](ch08.html#build_a_program_that_uses_a_dictionary)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[And yet MORE collection types…](ch08.html#and_yet_more_collection_typeshellip)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[A queue is FIFO—first in, first out](ch08.html#a_queue_is_fifoem_dashfirst_incomma_firs)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[A stack is LIFO—last in, first out](ch08.html#a_stack_is_lifoem_dashlast_incomma_first)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Downloadable exercise: Two Decks](ch08.html#downloadable_exercise_two_decks)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[**Unity Lab 4: User Interfaces**](afterword04.html#unity_lab_hash4_user_interfaces)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the last Unity Lab you started to build a game, using a prefab to create
    GameObject instances that appear at random points in 3D space and fly in circles.
    This Unity Lab picks up where the last one left off, allowing you to apply what
    you’ve learned about interfaces in C# and more.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Add a score that goes up when the player clicks a ball](afterword04.html#add_a_score_that_goes_up_when_the_player)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Add two different modes to your game](afterword04.html#add_two_different_modes_to_your_game)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Add game mode to your game](afterword04.html#add_game_mode_to_your_game)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Add a UI to your game](afterword04.html#add_a_ui_to_your_game)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Set up the Text that will display the score in the UI](afterword04.html#set_up_the_text_that_will_display_the_sc)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Add a button that calls a method to start the game](afterword04.html#add_a_button_that_calls_a_method_to_star)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Make the Play Again button and Score Text work](afterword04.html#make_the_play_again_button_and_score_tex)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Finish the code for the game](afterword04.html#finish_the_code_for_the_game)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Get creative!](afterword04.html#get_creativeexclamation_mark-idd0003)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[9 LINQ and lambdas: **Get control of your data**](ch09.html#linq_and_lambdas_get_control_of_your_dat)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**You’re ready for a whole new world of app development.**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using WinForms to build Windows Desktop apps is a great way to learn important
    C# concepts, but there’s *so much more* you can do with your programs. In this
    chapter, you’ll use **XAML** to design your Windows Store apps, you’ll learn how
    to **build pages to fit any device**, **integrate** your data into your pages
    with **data binding**, and use Visual Studio to cut through the mystery of XAML
    pages by exploring the objects created by your XAML code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Jimmy’s a Captain Amazing super-fan...](ch09.html#jimmyapostrophes_a_captain_amazing_super)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use LINQ to query your collections](ch09.html#use_linq_to_query_your_collections)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[LINQ works with any IEnumerable<T>](ch09.html#linq_works_with_any_ienumerableless_than)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[LINQ’s query syntax](ch09.html#linqapostrophes_query_syntax)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[LINQ works with objects](ch09.html#linq_works_with_objects)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use a LINQ query to finish the app for Jimmy](ch09.html#use_a_linq_query_to_finish_the_app_for_j)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[The var keyword lets C# figure out variable types for you](ch09.html#the_var_keyword_lets_chash_figure_out_va)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[LINQ queries aren’t run until you access their results](ch09.html#linq_queries_arenapostrophet_run_until_y)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use a group query to separate your sequence into groups](ch09.html#use_a_group_query_to_separate_your_seque)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use join queries to merge data from two sequences](ch09.html#use_join_queries_to_merge_data_from_two)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use the new keyword to create anonymous types](ch09.html#use_the_new_keyword_to_create_anonymous)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Add a unit test project to Jimmy’s comic collection app](ch09.html#add_a_unit_test_project_to_jimmyapostrop)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Write your first unit test](ch09.html#write_your_first_unit_test)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Write a unit test for the GetReviews method](ch09.html#write_a_unit_test_for_the_getreviews_met)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Write unit tests to handle edge cases and weird data](ch09.html#write_unit_tests_to_handle_edge_cases_an)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use the `=>` operator to create lambda expressions](ch09.html#use_the_equalsgreater_than_operator_to_c)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[A lambda test drive](ch09.html#a_lambda_test_drive)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Refactor a clown with lambdas](ch09.html#refactor_a_clown_with_lambdas)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use the ?: operator to make your lambdas make choices](ch09.html#use_the_question_mark_operator_to_make_y)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Lambda expressions and LINQ](ch09.html#lambda_expressions_and_linq)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[LINQ queries can be written as chained LINQ methods](ch09.html#linq_queries_can_be_written_as_chained_l)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use the `=>` operator to create switch expressions](ch09.html#use_the_equalsgreater_than_operator_to)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Explore the Enumerable class](ch09.html#explore_the_enumerable_class)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Create an enumerable sequence by hand](ch09.html#create_an_enumerable_sequence_by_hand)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use yield return to create your own sequences](ch09.html#use_yield_return_to_create_your_own_sequ)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use yield return to refactor ManualSportSequence](ch09.html#use_yield_return_to_refactor_manualsport)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Downloadable exercise: Go Fish!](ch09.html#downloadable_exercise_go_fish)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[10 reading and writing files: **Save the last byte for me!**](ch10.html#reading_and_writing_files_save_the_last)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Sometimes it pays to be a little persistent.**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: So far, all of your programs have been pretty short-lived. They fire up, run
    for a while, and shut down. But that’s not always enough, especially when you’re
    dealing with important information. You need to be able to **save your work**.
    In this chapter, we’ll look at how to **write data to a file**, and then how to
    **read that information back in** from a file. You’ll learn about the .NET **stream
    classes**, and also take a look at the mysteries of **hexadecimal** and **binary**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[.NET uses streams to read and write data](ch10.html#dotnet_uses_streams_to_read_and_write_da)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Different streams read and write different things](ch10.html#different_streams_read_and_write_differe)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[A FileStream reads and writes bytes in a file](ch10.html#a_filestream_reads_and_writes_bytes_in_a)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Write text to a file in three simple steps](ch10.html#write_text_to_a_file_in_three_simple_ste)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[The Swindler launches another diabolical plan](ch10.html#the_swindler_launches_another_diabolical)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use a StreamReader to read a file](ch10.html#use_a_streamreader_to_read_a_file)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Data can go through more than one stream](ch10.html#data_can_go_through_more_than_one_stream)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use the static File and Directory classes to work with files and directories](ch10.html#use_the_static_file_and_directory_classe)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[IDisposable makes sure objects are closed properly](ch10.html#idisposable_makes_sure_objects_are_close)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use a MemoryStream to stream data to memory](ch10.html#use_a_memorystream_to_stream_data_to_mem)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[What happens to an object when it’s serialized?](ch10.html#what_happens_to_an_object_when_itapostro)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[But what exactly IS an object’s state? What needs to be saved?](ch10.html#but_what_exactly_is_an_objectapostrophes)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use JsonSerialization to serialize your objects](ch10.html#use_jsonserialization_to_serialize_your)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[JSON only includes data, not specific C# types](ch10.html#json_only_includes_datacomma_not_specifi)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Next up: we’ll take a deep dive into our data](ch10.html#next_up_weapostrophell_take_a_deep_dive)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[C# strings are encoded with Unicode](ch10.html#chash_strings_are_encoded_with_unicode)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Visual Studio works really well with Unicode](ch10.html#visual_studio_works_really_well_with_uni)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[.NET uses Unicode to store characters and text](ch10.html#dotnet_uses_unicode_to_store_characters)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[C# can use byte arrays to move data around](ch10.html#chash_can_use_byte_arrays_to_move_data_a)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use a BinaryWriter to write binary data](ch10.html#use_a_binarywriter_to_write_binary_data)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use BinaryReader to read the data back in](ch10.html#use_binaryreader_to_read_the_data_back_i)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[A hex dump lets you see the bytes in your files](ch10.html#a_hex_dump_lets_you_see_the_bytes_in_you)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use Stream.Read to read bytes from a stream](ch10.html#use_streamdotread_to_read_bytes_from_a_s)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Modify your hex dumper to use command-line arguments](ch10.html#modify_your_hex_dumper_to_use_command_li)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Downloadable exercise: Hide and Seek](ch10.html#downloadable_exercise_hide_and_seek)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[**Unity Lab 5: Raycasting**](afterword05.html#unity_lab_hash5_raycasting)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you set up a scene in Unity, you’re creating a virtual 3D world for the
    characters in your game to move around in. But in most games, things aren’t directly
    controlled by the player. So how do these objects find their way around a scene?
    In this lab, we’ll look at how C# can help.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Create a new Unity project and start to set up the scene](afterword05.html#create_a_new_unity_project_and_start_to)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Set up the camera](afterword05.html#set_up_the_camera)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Create a GameObject for the player](afterword05.html#create_a_gameobject_for_the_player)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Introducing Unity’s navigation system](afterword05.html#introducing_unityapostrophes_navigation)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Set up the NavMesh](afterword05.html#set_up_the_navmesh)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Make your player automatically navigate the play area](afterword05.html#make_your_player_automatically_navigate)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[11 CAPTAIN AMAZING: **THE DEATH OF THE OBJECT**](ch11.html#captain_amazing_the_death_of_the_object)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[The life and death of an object](ch11.html#the_life_and_death_of_an_object)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use the GC class (with caution) to force garbage collection](ch11.html#use_the_gc_class_left_parenthesiswith_ca)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Your last chance to DO something…your object’s finalizer](ch11.html#your_last_chance_to_do_somethinghellipyo)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[When EXACTLY does a finalizer run?](ch11.html#when_exactly_does_a_finalizer_runquestio)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Finalizers can’t depend on other objects](ch11.html#finalizers_canapostrophet_depend_on_othe)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[A struct looks like an object…](ch11.html#a_struct_looks_like_an_objecthellip)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Values get copied; references get assigned](ch11.html#values_get_copied_references_get_assigne)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Structs are value types; objects are reference types](ch11.html#structs_are_value_types_objects_are_refe)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[The stack vs. the heap: more on memory](ch11.html#the_stack_vsdot_the_heap_more_on_memory)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use out parameters to make a method return more than one value](ch11.html#use_out_parameters_to_make_a_method_retu)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Pass by reference using the ref modifier](ch11.html#pass_by_reference_using_the_ref_modifier)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use optional parameters to set default values](ch11.html#use_optional_parameters_to_set_default_v)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[A null reference doesn’t refer to any object](ch11.html#a_null_reference_doesnapostrophet_refer)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Non-nullable reference types help you avoid NREs](ch11.html#non_nullable_reference_types_help_you_av)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[The null-coalescing operator ?? helps with nulls](ch11.html#the_null_coalescing_operator_question_ma)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Nullable value types can be null…and handled safely](ch11.html#nullable_value_types_can_be_nullhellipan)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[“Captain” Amazing…not so much](ch11.html#quotation_markcaptainquotation_mark_amaz)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Extension methods add new behavior to EXISTING classes](ch11.html#extension_methods_add_new_behavior_to_ex)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Extending a fundamental type: string](ch11.html#extending_a_fundamental_type_string)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[12 exception handling: **Putting out fires gets old**](ch12.html#exception_handling_putting_out_fires_get)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Programmers aren’t meant to be firefighters.**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You’ve worked your tail off, waded through technical manuals and a few engaging
    *Head First* books, and you’ve reached the pinnacle of your profession. But you’re
    still getting panicked phone calls in the middle of the night from work because
    **your program crashes**, or **doesn’t behave like it’s supposed to**. Nothing
    pulls you out of the programming groove like having to fix a strange bug*…*but
    with **exception handling**, you can write code to **deal with problems** that
    come up. Better yet, you can even plan for those problems, and **keep things running**
    when they happen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Your hex dumper reads a filename from the command line](ch12.html#your_hex_dumper_reads_a_filename_from_th)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[When your program throws an exception, the CLR generates an Exception object](ch12.html#when_your_program_throws_an_exceptioncom)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[All Exception objects inherit from System.Exception](ch12.html#all_exception_objects_inherit_from_syste)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[There are some files you just can’t dump](ch12.html#there_are_some_files_you_just_canapostro)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[What happens when a method you want to call is risky?](ch12.html#what_happens_when_a_method_you_want_to_c)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Handle exceptions with try and catch](ch12.html#handle_exceptions_with_try_and_catch)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use the debugger to follow the try/catch flow](ch12.html#use_the_debugger_to_follow_the_trysolidu)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[If you have code that ALWAYS needs to run, use a finally block](ch12.html#if_you_have_code_that_always_needs_to_ru)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Catch-all exceptions handle System.Exception](ch12.html#catch_all_exceptions_handle_systemdotexc)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use the right exception for the situation](ch12.html#use_the_right_exception_for_the_situatio)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exception filters help you create precise handlers](ch12.html#exception_filters_help_you_create_precis)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[The worst catch block EVER: catch-all plus comments](ch12.html#the_worst_catch_block_ever_catch_all_plu)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Temporary solutions are OK (temporarily)](ch12.html#temporary_solutions_are_ok_left_parenthe)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Unity Lab 6: **Scene Navigation**](afterword06.html#unity_lab_hash6_scene_navigation)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the last Unity Lab, you created a scene with a floor (a plane) and a player
    (a sphere nested under a cylinder), and you used a NavMesh, a NavMesh Agent, and
    raycasting to get your player to follow your mouse clicks around the scene. In
    this lab, you’ll add to the scene with the help of C#.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Let’s pick up where the last Unity Lab left off](afterword06.html#letapostrophes_pick_up_where_the_last_un)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Add a platform to your scene](afterword06.html#add_a_platform_to_your_scene)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use bake options to make the platform walkable](afterword06.html#use_bake_options_to_make_the_platform_wa)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Include the stairs and ramp in your NavMesh](afterword06.html#include_the_stairs_and_ramp_in_your_navm)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Fix height problems in the NavMesh](afterword06.html#fix_height_problems_in_the_navmesh)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Add a NavMesh Obstacle](afterword06.html#add_a_navmesh_obstacle)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Add a script to move the obstacle up and down](afterword06.html#add_a_script_to_move_the_obstacle_up_and)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Get creative!](afterword06.html#get_creativeexclamation_mark-idd0004)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[appendix i: ASP.NET Core Blazor projects: **Visual Studio for Mac Learner’s
    Guide**](app01.html#aspdotnet_core_blazor_projects_visual_st)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Why you should learn C#](app01.html#why_you_should_learn_chash-idd0001)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Create your first project in Visual Studio for Mac](app01.html#create_your_first_project_in_vis-idd0001)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Let’s build a game!](app01.html#letapostrophes_build_a_gameexcl-idd0001)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Create a Blazor WebAssembly App in Visual Studio](app01.html#create_a_blazor_webassembly_app_in_visua)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Run your Blazor web app in a browser](app01.html#run_your_blazor_web_app_in_a_browser)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Start writing code for your game](app01.html#now_youapostrophere_ready_to-idd0001)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Finish creating your emoji list and diplay it in the app](app01.html#finish_creating_your_emoji_list_and_disp)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Shuffle the animals so they’re in a random order](app01.html#shuffle_the_animals_so_theyapostrophere)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[You’re running your game in the debugger](app01.html#youapostrophere_running_your_game_in_the)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Add your new project to source control](app01.html#add_your_new_project_to_source-idd0001)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Add C# code to handle mouse clicks](app01.html#add_chash_code_to_handle_mouse_clicks)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Add click event handlers to your buttons](app01.html#add_click_event_handlers_to_your_buttons)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Test your event handler](app01.html#test_your_event_handler)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Use the debugger to troubleshoot the problem](app01.html#use_the_debugger_to_troubleshoot_the_pro)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Track down the bug that’s causing the problem](app01.html#track_down_the_bug_thatapostrophes_causi)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Add code to reset the game when the player wins](app01.html#add_code_to_reset_the_game_when_the_play)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Add a timer to your game’s code](app01.html#add_a_timer_to_your_gameapostroph-id0001)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Clean up the navigation menu](app01.html#clean_up_the_navigation_menu)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Controls drive the mechanics of your user interfaces](app01.html#controls_drive_the_mechanics-idd0001)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Create a new Blazor WebAssemply App project](app01.html#create_a_new_blazor_webassembly_app_proj)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Add a page with a slider control](app01.html#create_a_page_with_a_slider_control)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Add text input to your app](app01.html#add_a_text_input_to_your_app)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Add color and date pickers to your app](app01.html#add_color_and_date_pickers_to_your_app)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Build a Blazor version of your card picking game](app01.html#up_next_build_a_blazor_version_of_your_c)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[The page is laid out with rows and columns](app01.html#the_page_is_laid_out_with_rows_and_colum)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[The slider uses data binding to update a variable](app01.html#the_slider_uses_data_binding_to_update_a)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Welcome to Sloppy Joe’s Budget House o’Discount Sandwiches!](app01.html#welcome_to_sloppy_joeapostrophes-id0001)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[appendix ii: Code Kata: **A learning guide for advanced and impatient readers**](app02.html#code_kata_guide_for_the_advanced_andsoli)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
