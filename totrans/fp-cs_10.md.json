["```cs\nvar actors = new []\n{\n \"Tom Hanks\",\n \"Meg Ryan\",\n \"David Tennant\",\n \"Marilyn Monroe\",\n \"Aamir Khan\"\n};\n\nvar actorsWithBaconNumber = actors.Select(x => (a: x, b: GetBaconNumber(x)));\n\nvar report = string.Join(\"\\r\\n\", actorsWithBaconNumber.Select(x =>\n x.a+ \": \" + x.b);\n```", "```cs\npublic int CalculateBaconNumber(string actor)\n{\n\n\tvar initialState = (\n\t\tcheckedActors: new Dictionary<string, int>(),\n\t\tactorsToCheck: new[] { \"Kevin Bacon\" },\n\t\tbaconNumber: 0\n\t);\n\n\tvar answer = initialState.IterateUntil(\n\t\tx => x.checkedActors.ContainsKey(actor),\n\t\tacc => {\n\t\t\tvar filmsToCheck =\n\t\t\t acc.actorsToCheck.SelectMany(GetAllActorsFilms);\n\t\t\tvar newActorsFound = filmsToCheck.SelectMany(x => x.ActorList)\n\t\t\t\t.Distinct()\n\t\t\t\t.ToArray();\n\n\t\t\treturn (\n\t\t\t\tacc.checkedActors.Concat(acc.actorsToCheck\n\t\t\t\t\t.Where(x => !acc.checkedActors.ContainsKey(x))\n\t\t\t\t\t.Select(x =>\n\t\t\t\t\t new KeyValuePair<string, int>(x, acc.baconNumber)))\n\t\t\t\t\t.ToArray()\n\t\t\t\t\t.ToDictionary(x => x.Key, x => x.Value),\n\n\t\t\t\tnewActorsFound.SelectMany(GetAllActorsFilms)\n\t\t\t\t\t.SelectMany(x => x.ActorList).ToArray(),\n\n\t\t\t\tacc.baconNumber + 1\n\t\t\t);\n\t\t});\n\treturn answer.checkedActors[actor];\n}\n```", "```cs\nvar getAllActorsFilms = (String a) => this._filmGetter.GetAllActorsFilms(a);\nvar getAllFilmsMemoized = getAllActorsFilms(getAllActorsFilms);\n\nvar kb1 = getAllFilmsMemoized(\"Kevin Bacon\");\nvar kb2 = getAllFilmsMemoized(\"Kevin Bacon\");\nvar kb3 = getAllFilmsMemoized(\"Kevin Bacon\");\nvar kb4 = getAllFilmsMemoized(\"Kevin Bacon\");\n```", "```cs\npublic int CalculateBaconNumber2(string actor)\n{\n\n\tvar initialState = (\n\t\tcheckedActors: new Dictionary<string, int>(),\n\t\tactorsToCheck: new[] { \"Kevin Bacon\" },\n\t\tbaconNumber: 0\n\t);\n\n\tvar getActorsFilms = GetAllActorsFilms;\n\tvar getActorsFilmsMem = getActorsFilms.Memoize();\n\n\tvar answer = initialState.IterateUntil(\n\t\tx => x.checkedActors.ContainsKey(actor),\n\t\tacc => {\n\t\t\tvar filmsToCheck = acc.actorsToCheck.SelectMany(getActorsFilmsMem);\n\t\t\tvar newActorsFound = filmsToCheck.SelectMany(x => x.ActorList)\n\t\t\t\t.Distinct()\n\t\t\t\t.ToArray();\n\n\t\t\treturn (\n\t\t\t\tacc.checkedActors.Concat(acc.actorsToCheck\n\t\t\t\t\t\t.Where(x => !acc.checkedActors.ContainsKey(x))\n\t\t\t\t\t\t.Select(x => new KeyValuePair<string, int>(x, acc.baconNumber)))\n\t\t\t\t\t.ToArray()\n\t\t\t\t\t.ToDictionary(x => x.Key, x => x.Value),\n\n\t\t\t\tnewActorsFound.SelectMany(getActorsFilmsMem)\n\t\t\t\t\t.SelectMany(x => x.ActorList).ToArray(),\n\n\t\t\t\tacc.baconNumber + 1\n\t\t\t);\n\t\t});\n\treturn answer.checkedActors[actor];\n}\n```", "```cs\npublic static Func<T1, TOut> Memoize<T1, TOut>(this Func<T1, TOut> @this)\n{\n\tvar dict = new Dictionary<T1, TOut>();\n\treturn x =>\n\t{\n\t\tif (!dict.ContainsKey(x))\n\t\t\tdict.Add(x, @this(x));\n\t\treturn dict[x];\n\t};\n}\n```", "```cs\npublic static Func<T1, T2, TOut> Memoize<T1, T2, TOut>(this Func<T1, T2, TOut> @this)\n{\n\tvar dict = new Dictionary<string, TOut>();\n\treturn (x, y) =>\n\t{\n\t\tvar key = $\"{x},{y}\";\n\t\tif (!dict.ContainsKey(key))\n\t\t\tdict.Add(key, @this(x, y));\n\t\treturn dict[key];\n\t};\n}\n```", "```cs\npublic static Func<T1, TOut> Memoize<T1, TOut>(\n this Func<T1, TOut> @this,\n Func<T1, string> keyGenerator)\n{\n\tvar dict = new Dictionary<string, TOut>();\n\treturn x =>\n\t{\n\t\tvar key = keyGenerator(x);\n\t\tif (!dict.ContainsKey(key))\n\t\t\tdict.Add(key, @this(x));\n\t\treturn dict[key];\n\t};\n}\n\npublic static Func<T1, T2, TOut> Memoize<T1, T2, TOut>(\n this Func<T1, T2, TOut> @this,\n Func<T1, T2, string> keyGenerator)\n{\n\tvar dict = new Dictionary<string, TOut>();\n\treturn (x, y) =>\n\t{\n\t\tvar key = keyGenerator(x, y);\n\t\tif (!dict.ContainsKey(key))\n\t\t\tdict.Add(key, @this(x, y));\n\t\treturn dict[key];\n\t};\n}\n```", "```cs\nvar getCastForFilm((Film x) => this.castRepo.GetCast(x.Filmid);\nvar getCastForFilmM = getCastForFilm.Memoize(x => x.Id.ToString());\n```"]