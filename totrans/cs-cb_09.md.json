["```cs\nusing System;\n\nConsole.WriteLine(\"Address Info:\\n\");\n\nConsole.Write(\"Street: \");\nstring street = Console.ReadLine();\n\nConsole.Write(\"City: \");\nstring city = Console.ReadLine();\n\nConsole.Write(\"State: \");\nstring state = Console.ReadLine();\n\nConsole.Write(\"Zip: \");\nstring zip = Console.ReadLine();\n\nConsole.WriteLine($@\"\n Your address is:\n\n {street}\n {city}, {state} {zip}\");\n```", "```cs\nusing System;\nusing System.Runtime.CompilerServices;\n\n[CompilerGenerated]\ninternal static class <Program>$\n{\n  private static void <Main>$(string[] args)\n  {\n    Console.WriteLine(\"Address Info:\\n\");\n    Console.Write(\"Street: \");\n    string street = Console.ReadLine();\n    Console.Write(\"City: \");\n    string city = Console.ReadLine();\n    Console.Write(\"State: \");\n    string state = Console.ReadLine();\n    Console.Write(\"Zip: \");\n    string zip = Console.ReadLine();\n    Console.WriteLine(\n      \"\\r\\n    Your address is:\\r\\n\\r\\n    \" + street +\n      \"\\r\\n    \" + city + \", \" + state + \" \" + zip);\n  }\n}\n```", "```cs\nCS8802  Only one compilation unit can have top-level statements.\n```", "```cs\npublic class Address\n{\n    public Address() { }\n\n    public Address(\n        string street,\n        string city,\n        string state,\n        string zip)\n    {\n        Street = street;\n        City = city;\n        State = state;\n        Zip = zip;\n    }\n\n    public string Street { get; set; }\n    public string City { get; set; }\n    public string State { get; set; }\n    public string Zip { get; set; }\n}\n```", "```cs\nclass Program\n{\n    // doesn't work at this level\n    // var address = new Address();\n\n    // this still works\n    Address addressOld = new Address();\n\n    // new target typed field\n    Address addressNew = new();\n\n    static void Main()\n    {\n        // these still work\n        var addressLocalVar = new Address();\n        Address addressLocalOld = new Address();\n\n        // new target typed local variable\n        Address addressLocalNew = new();\n\n        // target typed with object ini\n        Address addressObjectInit = new()\n        {\n            Street = \"123 4th St.\",\n            City =   \"My City\",\n            State =  \"ZZ\",\n            Zip =    \"55555-3333\"\n        };\n\n        // target typed with ctor init\n        Address addressCtorInit = new(\n            street: \"567 8th Ave.\",\n            city:   \"Some Place\",\n            state:  \"YY\",\n            zip:    \"12345-7890\");\n    }\n}\n```", "```cs\npublic class Address\n{\n    public Address() { }\n\n    public Address(\n        string street,\n        string city,\n        string state,\n        string zip)\n    {\n        Street = street;\n        City = city;\n        State = state;\n        Zip = zip;\n    }\n\n    public string Street { get; init; }\n    public string City { get; init; }\n    public string State { get; init; }\n    public string Zip { get; init; }\n}\n```", "```cs\nstatic void Main(string[] args)\n{\n    Address addressObjectInit = new()\n    {\n        Street = \"123 4th St.\",\n        City = \"My City\",\n        State = \"ZZ\",\n        Zip = \"55555-3333\"\n    };\n\n    // not allowed\n    //addressObjectInit.City = \"A Locality\";\n\n    // target typed with ctor init\n    Address addressCtorInit = new(\n        street: \"567 8th Ave.\",\n        city: \"Some Place\",\n        state: \"YY\",\n        zip: \"12345-7890\");\n\n    // not allowed\n    //addressCtorInit.Zip = \"98765\";\n}\n```", "```cs\nrecord Address(\n    string Street,\n    string City,\n    string State,\n    string Zip);\n```", "```cs\nstatic void Main(string[] args)\n{\n    var addressClassic = new Address(\n        Street: \"567 8th Ave.\",\n        City: \"Some Place\",\n        State: \"YY\",\n        Zip: \"12345-7890\");\n\n    // or\n\n    Address addressCtorInit = new(\n        Street: \"567 8th Ave.\",\n        City: \"Some Place\",\n        State: \"YY\",\n        Zip: \"12345-7890\");\n\n    // not allowed\n    //addressCtorInit.Street = \"333 2nd St.\";\n\n    Console.WriteLine(\n        $\"Value Equal:     \" +\n        $\"{addressClassic == addressCtorInit}\");\n    Console.WriteLine(\n        $\"Reference Equal: \" +\n        $\"{ReferenceEquals(addressClassic, addressCtorInit)}\");\n\n    Console.WriteLine(\n        $\"{nameof(addressClassic)}: {addressClassic}\");\n    Console.WriteLine(\n        $\"{nameof(Address)}:        {addressCtorInit}\");\n}\n```", "```cs\nValue Equal:     True\nReference Equal: False\naddressClassic: Address\n{\n    Street = 567 8th Ave., City = Some Place,\n    State = YY, Zip = 12345-7890\n}\nAddress:        Address\n{\n    Street = 567 8th Ave., City = Some Place,\n    State = YY, Zip = 12345-7890\n}\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Runtime.CompilerServices;\nusing System.Text;\nusing Section_09_04;\n\ninternal class Address : IEquatable<Address>\n{\n    protected virtual Type EqualityContract\n    {\n [CompilerGenerated]\n        get\n        {\n            return typeof(Address);\n        }\n    }\n\n    public string Street { get; set; }\n\n    public string City { get; set; }\n\n    public string State { get; set; }\n\n    public string Zip { get; set; }\n\n    public Address(string Street, string City, string State, string Zip)\n    {\n        this.Street = Street;\n        this.City = City;\n        this.State = State;\n        this.Zip = Zip;\n        base..ctor();\n    }\n\n    public override string ToString()\n    {\n        StringBuilder stringBuilder = new StringBuilder();\n        stringBuilder.Append(\"Address\");\n        stringBuilder.Append(\" { \");\n        if (PrintMembers(stringBuilder))\n        {\n            stringBuilder.Append(\" \");\n        }\n        stringBuilder.Append(\"}\");\n        return stringBuilder.ToString();\n    }\n\n    protected virtual bool PrintMembers(StringBuilder builder)\n    {\n        builder.Append(\"Street\");\n        builder.Append(\" = \");\n        builder.Append((object?)Street);\n        builder.Append(\", \");\n        builder.Append(\"City\");\n        builder.Append(\" = \");\n        builder.Append((object?)City);\n        builder.Append(\", \");\n        builder.Append(\"State\");\n        builder.Append(\" = \");\n        builder.Append((object?)State);\n        builder.Append(\", \");\n        builder.Append(\"Zip\");\n        builder.Append(\" = \");\n        builder.Append((object?)Zip);\n        return true;\n    }\n\n    public static bool operator !=(Address? r1, Address? r2)\n    {\n        return !(r1 == r2);\n    }\n\n    public static bool operator ==(Address? r1, Address? r2)\n    {\n        return (object)r1 == r2 || (r1?.Equals(r2) ?? false);\n    }\n\n    public override int GetHashCode()\n    {\n        return\n        (((EqualityComparer<Type>.Default.GetHashCode(EqualityContract)\n        * -1521134295\n        + EqualityComparer<string>.Default.GetHashCode(Street))\n        * -1521134295\n        + EqualityComparer<string>.Default.GetHashCode(City))\n        * -1521134295\n        + EqualityComparer<string>.Default.GetHashCode(State))\n        * -1521134295\n        + EqualityComparer<string>.Default.GetHashCode(Zip);\n    }\n\n    public override bool Equals(object? obj)\n    {\n        return Equals(obj as Address);\n    }\n\n    public virtual bool Equals(Address? other)\n    {\n        return (object)other != null\n        && EqualityContract == other!.EqualityContract\n        && EqualityComparer<string>.Default.Equals(Street, other!.Street)\n        && EqualityComparer<string>.Default.Equals(City, other!.City)\n        && EqualityComparer<string>.Default.Equals(State, other!.State)\n        && EqualityComparer<string>.Default.Equals(Zip, other!.Zip);\n    }\n\n    public virtual Address <Clone>$()\n    {\n        return new Address(this);\n    }\n\n    protected Address(Address original)\n    {\n        Street = original.Street;\n        City = original.City;\n        State = original.State;\n        Zip = original.Zip;\n    }\n\n    public void Deconstruct(\n        out string Street, out string City,\n        out string State, out string Zip)\n    {\n        Street = this.Street;\n        City = this.City;\n        State = this.State;\n        Zip = this.Zip;\n    }\n}\n```", "```cs\nrecord Address(\n    string Street,\n    string City,\n    string State,\n    string Zip);\n```", "```cs\nstatic void Main(string[] args)\n{\n    Address addressPre = new(\n        Street: \"567 8th Ave.\",\n        City: \"Some Place\",\n        State: \"YY\",\n        Zip: \"12345-7890\");\n\n    Address addressPost =\n        addressPre with\n        {\n            Street = \"569 8th Ave.\"\n        };\n\n    Console.WriteLine($\"Pre:  {addressPre}\");\n    Console.WriteLine($\"Post: {addressPost}\");\n\n    Console.WriteLine(\n        $\"Value Equal: \" +\n        $\"{addressPre == addressPost}\");\n}\n```", "```cs\npublic abstract record AddressBase(\n    string Street,\n    string City,\n    string State,\n    string Zip);\n```", "```cs\npublic record MailingAddress(\n    string Street,\n    string City,\n    string State,\n    string Zip,\n    string Email,\n    bool PreferEmail)\n    : AddressBase(Street, City, State, Zip);\n\npublic record ShippingAddress : AddressBase\n{\n    public ShippingAddress(\n        string street,\n        string city,\n        string state,\n        string zip,\n        string deliveryInstructions)\n        : base(street, city, state, zip)\n    {\n        if (street.Contains(\"P.O. Box\"))\n            throw new ArgumentException(\n                \"P.O. Boxes aren't allowed\");\n\n        DeliveryInstructions = deliveryInstructions;\n    }\n\n    public string DeliveryInstructions { get; init; }\n}\n```", "```cs\nstatic void Main(string[] args)\n{\n    MailingAddress mailAddress = new(\n        Street: \"567 8th Ave.\",\n        City: \"Some Place\",\n        State: \"YY\",\n        Zip: \"12345-7890\",\n        Email: \"me@example.com\",\n        PreferEmail: true);\n\n    ShippingAddress shipAddress = new(\n        street: \"567 8th Ave.\",\n        city: \"Some Place\",\n        state: \"YY\",\n        zip: \"12345-7890\",\n        deliveryInstructions: \"Ring Doorbell\");\n\n    Console.WriteLine($\"Mail: {mailAddress}\");\n    Console.WriteLine($\"Ship: {shipAddress}\");\n\n    Console.WriteLine(\n        $\"Derived types equal: \" +\n        $\"{mailAddress == shipAddress}\");\n\n    AddressBase mailBase = mailAddress;\n    AddressBase shipBase = shipAddress;\n    Console.WriteLine(\n        $\"Base types equal: \" +\n        $\"{mailBase == shipBase}\");\n}\n```", "```cs\npublic abstract record AddressBase(\n    string Street,\n    string City,\n    string State,\n    string Zip);\n\npublic record MailingAddress(\n    string Street,\n    string City,\n    string State,\n    string Zip,\n    string Email,\n    bool PreferEmail)\n    : AddressBase(Street, City, State, Zip);\n\npublic record ShippingAddress : AddressBase\n{\n    public ShippingAddress(\n        string street,\n        string city,\n        string state,\n        string zip,\n        string deliveryInstructions)\n        : base(street, city, state, zip)\n    {\n        if (street.Contains(\"P.O. Box\"))\n            throw new ArgumentException(\n                \"P.O. Boxes aren't allowed\");\n\n        DeliveryInstructions = deliveryInstructions;\n    }\n\n    public string DeliveryInstructions { get; init; }\n}\n```", "```cs\nabstract class DeliveryBase\n{\n    public abstract AddressBase GetAddress(string name);\n}\n```", "```cs\nclass Communications : DeliveryBase\n{\n    public override MailingAddress GetAddress(string name)\n    {\n        return new(\n            Street: \"567 8th Ave.\",\n            City: \"Some Place\",\n            State: \"YY\",\n            Zip: \"12345-7890\",\n            Email: \"me@example.com\",\n            PreferEmail: true);\n    }\n}\n\nclass Shipping : DeliveryBase\n{\n    public override ShippingAddress GetAddress(string name)\n    {\n        return new(\n            street: \"567 8th Ave.\",\n            city: \"Some Place\",\n            state: \"YY\",\n            zip: \"12345-7890\",\n            deliveryInstructions: \"Ring Doorbell\");\n    }\n}\n```", "```cs\nstatic void Main(string[] args)\n{\n    Communications comm = new();\n    MailingAddress mailAddr = comm.GetAddress(\"Person A\");\n    Console.WriteLine(mailAddr);\n\n    Shipping ship = new();\n    ShippingAddress shipAddr = ship.GetAddress(\"Person B\");\n    Console.WriteLine(shipAddr);\n}\n```", "```cs\npublic record Address(\n    string Street,\n    string City,\n    string State,\n    string Zip);\n```", "```cs\npublic static class AddressExtensions\n{\n    public static IEnumerator<string> GetEnumerator(\n        this Address address)\n    {\n        yield return address.Street;\n        yield return address.City;\n        yield return address.State;\n        yield return address.Zip;\n        yield break;\n    }\n}\n```", "```cs\nclass Program\n{\n    static void Main()\n    {\n        IEnumerable<Address> addresses = GetAddresses();\n\n        foreach (var address in addresses)\n        {\n            foreach (var line in address)\n                Console.WriteLine(line);\n\n            Console.WriteLine();\n        }\n    }\n\n    static IEnumerable<Address> GetAddresses()\n    {\n        return new List<Address>\n        {\n            new Address(\n                Street: \"567 8th Ave.\",\n                City: \"Some Place\",\n                State: \"YY\",\n                Zip: \"12345-7890\"),\n            new Address(\n                Street: \"569 8th Ave.\",\n                City: \"Some Place\",\n                State: \"YY\",\n                Zip: \"12345-7890\")\n        };\n    }\n}\n```", "```cs\npublic record Address(\n    string Street,\n    string City,\n    string State,\n    string Zip);\n```", "```cs\nAddress[] GetAddresses()\n{\n    int count = 15;\n    List<Address> addresses = new();\n\n    for (int i = 0; i < count; i++)\n    {\n        string streetSuffix =\n            i switch\n            {\n                0 => \"st\",\n                1 => \"nd\",\n                2 => \"rd\",\n                _ => \"th\"\n            };\n\n        addresses.Add(\n            new(\n            Street: $\"{i+100} {i+1}{streetSuffix} St.\",\n            City: \"My Place\",\n            State: \"ZZ\",\n            Zip: \"12345-7890\"));\n    }\n\n    return addresses.ToArray();\n}\n```", "```cs\npublic IEnumerable<Address[]> GetAddresses(int perPage)\n{\n    Address[] addresses = GetAddresses();\n\n    for (int i = 0, j = i+perPage;\n         i < addresses.Length;\n         i+=perPage, j+=perPage)\n    {\n        yield return addresses[i..j];\n    }\n}\n```", "```cs\nstatic void Main()\n{\n    AddressService addressSvc = new();\n\n    foreach (var addresses in\n        addressSvc.GetAddresses(perRow: 3))\n    {\n        foreach (var address in addresses)\n        {\n            Console.WriteLine(address);\n        }\n\n        Console.WriteLine(\"\\nNew Page\\n\");\n    }\n}\n```", "```cs\npublic record Address(\n    string Street,\n    string City,\n    string State,\n    string Zip);\n\npublic interface IAddressRepository\n{\n    List<Address> GetAddresses();\n}\n\npublic class AddressRepository : IAddressRepository\n{\n    public List<Address> GetAddresses() =>\n        new List<Address>\n        {\n            new (\n                Street: \"123 4th St.\",\n                City: \"My Place\",\n                State: \"ZZ\",\n                Zip: \"12345-7890\"),\n            new (\n                Street: \"567 8th Ave.\",\n                City: \"Some Place\",\n                State: \"YY\",\n                Zip: \"12345-7890\"),\n            new (\n                Street: \"567 8th Ave.\",\n                City: \"Some Place\",\n                State: \"YY\",\n                Zip: \"12345-7890\")\n        };\n}\n```", "```cs\nclass Initializer\n{\n    internal static ServiceProvider Container { get; set; }\n\n [ModuleInitializer]\n    internal static void InitAddressUtilities()\n    {\n        var services = new ServiceCollection();\n        services.AddTransient<AddressService>();\n        services.AddTransient<IAddressRepository, AddressRepository>();\n        Container = services.BuildServiceProvider();\n    }\n}\n```", "```cs\npublic class AddressService\n{\n    readonly IAddressRepository addressRep;\n\n    public AddressService(IAddressRepository addressRep) =>\n        this.addressRep = addressRep;\n\n    public static AddressService Create() =>\n        Initializer.Container.GetRequiredService<AddressService>();\n\n    public List<Address> GetAddresses() =>\n        (from address in addressRep.GetAddresses()\n         select address)\n        .Distinct()\n        .ToList();\n}\n```", "```cs\nstatic void Main()\n{\n    AddressService addressSvc = AddressService.Create();\n\n    addressSvc\n        .GetAddresses()\n        .ForEach(address =>\n            Console.WriteLine(address));\n}\n```"]