["```cs\n// i.e. the definite loop\npublic int GetFinalFloorNumber(string input)\n{\n var floor = 0;\n foreach(var i in input)\n {\n  if(i == '(')\n   floor++;\n  else\n   i--;\n }\n return floor;\n}\n\n// i.e. the indefinte loop\npublic int WhichCharacterEntersBasement(string input)\n{\n var floor = 0;\n var charNo = 0;\n\n foreach(var i in input)\n {\n  charNo++;\n  if(i == '(')\n   floor++;\n  else\n   floor--;\n\n  if(floor == -1)\n   return charNo;\n }\n}\n```", "```cs\npublic int GetFinalFloorNumber(string input) =>\n input.Sum(x => x switch\n {\n  '(' => 1,\n  _ => -1\n });\n```", "```cs\npublic int GetFinalFloorNumber(string input) =>\n input.Select(x => x == '(' ? 1 : -1).Sum();\n```", "```cs\npublic int GetFinalFloorNumber(string input)\n{\n var grouped = input.GroupBy(x => x).ToDictionary(x => x.Key, x => x.Count());\n var answer = grouped['('] - grouped[')'];\n return answer;\n}\n```", "```cs\npublic int WhichCharacterEntersBasement(string input)\n{\n int GetBasementFloor(string s, int currentFloor = 0, int currentChar = 0) =>\n  currentFloor == -1\n   ? currentChar\n   : GetBasementFloor(s[1..], s[0] ==\n    '(' ? currentFloor + 1 : currentFloor - 1, currentChar + 1);\n\n return GetBasementFloor(input);\n\n}\n```", "```cs\npublic int WhichCharacterEntersBasement(string input)\n{\n var startingInput = new FloorState\n {\n  InputString = input,\n  CurrentChar = 0,\n  CurrentFloor = 0\n };\n\n var returnValue = startingInput.IterateUntil(x =>\n  x with\n {\n  CurrentChar = x.CurrentChar + 1,\n  CurrentFloor = x.InputString[x.CurrentChar] ==\n   '(' ? x.CurrentFloor + 1 : x.CurrentFloor - 1\n }\n, x => x.CurrentFloor == -1);\n\nreturn returnValue.CurrentChar;\n\n}\n\npublic record FloorState\n{\n public string InputString { get; set; }\n public int CurrentFloor { get; set; }\n public int CurrentChar { get; set; }\n}\n```", "```cs\npublic int WhichCharacterEntersBasement(string input)\n{\n var startingInput = (InputString: input, CurrentFloor: 0, CurrentChar: 0);\n\n var (_, _, currentChar) = startingInput.IterateUntil(x =>\n (\n  x.InputString,\n  x.InputString[x.CurrentChar] ==\n   '(' ? x.CurrentFloor + 1 : x.CurrentFloor - 1,\n  x.CurrentChar + 1\n ), x => x.CurrentFloor == -1);\n\n return currentChar;\n}\n```", "```cs\npublic class LiftEnumerable : IEnumerable<int>\n{\n private readonly string _input;\n\n public LiftEnumerable(string input)\n {\n  this._input = input;\n }\n\n public IEnumerator<int> GetEnumerator() => new LifeEnumerator(this._input);\n\n IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();\n}\n\npublic class LifeEnumerator : IEnumerator<int>\n{\n private int _currentFloorNumber = 0;\n private int _currentCharacter = -1;\n private readonly string input;\n\n public LifeEnumerator(string input)\n {\n  this.input = input;\n }\n\n public bool MoveNext()\n {\n  var startingFloorNumber = this._currentFloorNumber;\n\n  this._currentCharacter++;\n  this._currentFloorNumber = startingFloorNumber == -1 ? -1 : this.input[this._currentCharacter] == '(' ? this._currentFloorNumber + 1 : this._currentFloorNumber - 1;\n\n  return startingFloorNumber != -1;\n }\n\n public void Reset()\n {\n  this._currentCharacter= -1;\n  this._currentFloorNumber = 0;\n }\n\n public int Current => this._currentCharacter + 1;\n\n object IEnumerator.Current => Current;\n\n public void Dispose()\n {\n }\n}\n\n// The actual code call\npublic int WhichCharacterEntersBasement(string input)\n{\n var result = new LiftEnumerable(input).Select(x => x);\n return result.Last();\n}\n```", "```cs\nmodule Advent =\n let calculateFinalFloor start input =\n  input\n  |> Seq.fold (fun acc c -> match c with | '(' -> acc+1 | ')' -> acc-1  | _ -> acc) start\n\n let whichStepIsTheBasement start input =\n  input\n  |> Seq.scan (fun acc c -> match c with | '(' -> acc+1 | ')' -> acc-1  | _ -> acc) start\n  |> Seq.findIndex(fun i -> i = -1)\n```"]