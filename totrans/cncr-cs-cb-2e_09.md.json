["```cs\nImmutableStack<int> stack = ImmutableStack<int>.Empty;\nstack = stack.Push(13);\nstack = stack.Push(7);\n\n// Displays \"7\" followed by \"13\".\nforeach (int item in stack)\n  Trace.WriteLine(item);\n\nint lastItem;\nstack = stack.Pop(out lastItem);\n// lastItem == 7\n```", "```cs\nImmutableStack<int> stack = ImmutableStack<int>.Empty;\nstack = stack.Push(13);\nImmutableStack<int> biggerStack = stack.Push(7);\n\n// Displays \"7\" followed by \"13\".\nforeach (int item in biggerStack)\n  Trace.WriteLine(item);\n\n// Only displays \"13\".\nforeach (int item in stack)\n  Trace.WriteLine(item);\n```", "```cs\nImmutableQueue<int> queue = ImmutableQueue<int>.Empty;\nqueue = queue.Enqueue(13);\nqueue = queue.Enqueue(7);\n\n// Displays \"13\" followed by \"7\".\nforeach (int item in queue)\n  Trace.WriteLine(item);\n\nint nextItem;\nqueue = queue.Dequeue(out nextItem);\n// Displays \"13\".\nTrace.WriteLine(nextItem);\n```", "```cs\nImmutableList<int> list = ImmutableList<int>.Empty;\nlist = list.Insert(0, 13);\nlist = list.Insert(0, 7);\n\n// Displays \"7\" followed by \"13\".\nforeach (int item in list)\n  Trace.WriteLine(item);\n\nlist = list.RemoveAt(1);\n```", "```cs\n// The best way to iterate over an ImmutableList<T>.\nforeach (var item in list)\n  Trace.WriteLine(item);\n\n// This will also work, but it will be much slower.\nfor (int i = 0; i != list.Count; ++i)\n  Trace.WriteLine(list[i]);\n```", "```cs\nImmutableHashSet<int> hashSet = ImmutableHashSet<int>.Empty;\nhashSet = hashSet.Add(13);\nhashSet = hashSet.Add(7);\n\n// Displays \"7\" and \"13\" in an unpredictable order.\nforeach (int item in hashSet)\n  Trace.WriteLine(item);\n\nhashSet = hashSet.Remove(7);\n```", "```cs\nImmutableSortedSet<int> sortedSet = ImmutableSortedSet<int>.Empty;\nsortedSet = sortedSet.Add(13);\nsortedSet = sortedSet.Add(7);\n\n// Displays \"7\" followed by \"13\".\nforeach (int item in sortedSet)\n  Trace.WriteLine(item);\nint smallestItem = sortedSet[0];\n// smallestItem == 7\n\nsortedSet = sortedSet.Remove(7);\n```", "```cs\nImmutableDictionary<int, string> dictionary =\n    ImmutableDictionary<int, string>.Empty;\ndictionary = dictionary.Add(10, \"Ten\");\ndictionary = dictionary.Add(21, \"Twenty-One\");\ndictionary = dictionary.SetItem(10, \"Diez\");\n\n// Displays \"10Diez\" and \"21Twenty-One\" in an unpredictable order.\nforeach (KeyValuePair<int, string> item in dictionary)\n  Trace.WriteLine(item.Key + item.Value);\n\nstring ten = dictionary[10];\n// ten == \"Diez\"\n\ndictionary = dictionary.Remove(21);\n```", "```cs\nImmutableSortedDictionary<int, string> sortedDictionary =\n    ImmutableSortedDictionary<int, string>.Empty;\nsortedDictionary = sortedDictionary.Add(10, \"Ten\");\nsortedDictionary = sortedDictionary.Add(21, \"Twenty-One\");\nsortedDictionary = sortedDictionary.SetItem(10, \"Diez\");\n\n// Displays \"10Diez\" followed by \"21Twenty-One\".\nforeach (KeyValuePair<int, string> item in sortedDictionary)\n  Trace.WriteLine(item.Key + item.Value);\n\nstring ten = sortedDictionary[10];\n// ten == \"Diez\"\n\nsortedDictionary = sortedDictionary.Remove(21);\n```", "```cs\nvar dictionary = new ConcurrentDictionary<int, string>();\nstring newValue = dictionary.AddOrUpdate(0,\n    key => \"Zero\",\n    (key, oldValue) => \"Zero\");\n```", "```cs\n// Using the same \"dictionary\" as above.\n// Adds (or updates) key 0 to have the value \"Zero\".\ndictionary[0] = \"Zero\";\n```", "```cs\n// Using the same \"dictionary\" as above.\nbool keyExists = dictionary.TryGetValue(0, out string currentValue);\n```", "```cs\n// Using the same \"dictionary\" as above.\nbool keyExisted = dictionary.TryRemove(0, out string removedValue);\n```", "```cs\nprivate readonly BlockingCollection<int> _blockingQueue =\n    new BlockingCollection<int>();\n```", "```cs\n_blockingQueue.Add(7);\n_blockingQueue.Add(13);\n_blockingQueue.CompleteAdding();\n```", "```cs\n// Displays \"7\" followed by \"13\".\nforeach (int item in _blockingQueue.GetConsumingEnumerable())\n  Trace.WriteLine(item);\n```", "```cs\nBlockingCollection<int> _blockingStack = new BlockingCollection<int>(\n    new ConcurrentStack<int>());\nBlockingCollection<int> _blockingBag = new BlockingCollection<int>(\n    new ConcurrentBag<int>());\n```", "```cs\n// Producer code\n_blockingStack.Add(7);\n_blockingStack.Add(13);\n_blockingStack.CompleteAdding();\n\n// Consumer code\n// Displays \"13\" followed by \"7\".\nforeach (int item in _blockingStack.GetConsumingEnumerable())\n  Trace.WriteLine(item);\n```", "```cs\nChannel<int> queue = Channel.CreateUnbounded<int>();\n\n// Producer code\nChannelWriter<int> writer = queue.Writer;\nawait writer.WriteAsync(7);\nawait writer.WriteAsync(13);\nwriter.Complete();\n\n// Consumer code\n// Displays \"7\" followed by \"13\".\nChannelReader<int> reader = queue.Reader;\nawait foreach (int value in reader.ReadAllAsync())\n  Trace.WriteLine(value);\n```", "```cs\n// Consumer code (older platforms)\n// Displays \"7\" followed by \"13\".\nChannelReader<int> reader = queue.Reader;\nwhile (await reader.WaitToReadAsync())\n  while (reader.TryRead(out int value))\n    Trace.WriteLine(value);\n```", "```cs\nvar _asyncQueue = new BufferBlock<int>();\n\n// Producer code\nawait _asyncQueue.SendAsync(7);\nawait _asyncQueue.SendAsync(13);\n_asyncQueue.Complete();\n\n// Consumer code\n// Displays \"7\" followed by \"13\".\nwhile (await _asyncQueue.OutputAvailableAsync())\n  Trace.WriteLine(await _asyncQueue.ReceiveAsync());\n```", "```cs\nwhile (true)\n{\n  int item;\n  try\n  {\n    item = await _asyncQueue.ReceiveAsync();\n  }\n  catch (InvalidOperationException)\n  {\n    break;\n  }\n  Trace.WriteLine(item);\n}\n```", "```cs\nvar _asyncQueue = new AsyncProducerConsumerQueue<int>();\n\n// Producer code\nawait _asyncQueue.EnqueueAsync(7);\nawait _asyncQueue.EnqueueAsync(13);\n_asyncQueue.CompleteAdding();\n\n// Consumer code\n// Displays \"7\" followed by \"13\".\nwhile (await _asyncQueue.OutputAvailableAsync())\n  Trace.WriteLine(await _asyncQueue.DequeueAsync());\n```", "```cs\nwhile (true)\n{\n  int item;\n  try\n  {\n    item = await _asyncQueue.DequeueAsync();\n  }\n  catch (InvalidOperationException)\n  {\n    break;\n  }\n  Trace.WriteLine(item);\n}\n```", "```cs\nChannel<int> queue = Channel.CreateBounded<int>(1);\nChannelWriter<int> writer = queue.Writer;\n\n// This Write completes immediately.\nawait writer.WriteAsync(7);\n\n// This Write (asynchronously) waits for the 7 to be removed\n// before it enqueues the 13.\nawait writer.WriteAsync(13);\n\nwriter.Complete();\n```", "```cs\nvar queue = new BufferBlock<int>(\n    new DataflowBlockOptions { BoundedCapacity = 1 });\n\n// This Send completes immediately.\nawait queue.SendAsync(7);\n\n// This Send (asynchronously) waits for the 7 to be removed\n// before it enqueues the 13.\nawait queue.SendAsync(13);\n\nqueue.Complete();\n```", "```cs\nvar queue = new AsyncProducerConsumerQueue<int>(maxCount: 1);\n\n// This Enqueue completes immediately.\nawait queue.EnqueueAsync(7);\n\n// This Enqueue (asynchronously) waits for the 7 to be removed\n// before it enqueues the 13.\nawait queue.EnqueueAsync(13);\n\nqueue.CompleteAdding();\n```", "```cs\nvar queue = new BlockingCollection<int>(boundedCapacity: 1);\n\n// This Add completes immediately.\nqueue.Add(7);\n\n// This Add waits for the 7 to be removed before it adds the 13.\nqueue.Add(13);\n\nqueue.CompleteAdding();\n```", "```cs\nChannel<int> queue = Channel.CreateBounded<int>(\n    new BoundedChannelOptions(1)\n    {\n      FullMode = BoundedChannelFullMode.DropOldest,\n    });\nChannelWriter<int> writer = queue.Writer;\n\n// This Write completes immediately.\nawait writer.WriteAsync(7);\n\n// This Write also completes immediately.\n// The 7 is discarded unless a consumer has already retrieved it.\nawait writer.WriteAsync(13);\n```", "```cs\nChannel<int> queue = Channel.CreateBounded<int>(\n    new BoundedChannelOptions(1)\n    {\n      FullMode = BoundedChannelFullMode.DropWrite,\n    });\nChannelWriter<int> writer = queue.Writer;\n\n// This Write completes immediately.\nawait writer.WriteAsync(7);\n\n// This Write also completes immediately.\n// The 13 is discarded unless a consumer has already retrieved the 7.\nawait writer.WriteAsync(13);\n```", "```cs\nvar _asyncStack = new AsyncCollection<int>(\n    new ConcurrentStack<int>());\nvar _asyncBag = new AsyncCollection<int>(\n    new ConcurrentBag<int>());\n```", "```cs\n// Producer code\nawait _asyncStack.AddAsync(7);\nawait _asyncStack.AddAsync(13);\n_asyncStack.CompleteAdding();\n\n// Consumer code\n// Displays \"13\" followed by \"7\".\nwhile (await _asyncStack.OutputAvailableAsync())\n  Trace.WriteLine(await _asyncStack.TakeAsync());\n```", "```cs\nvar _asyncStack = new AsyncCollection<int>(\n    new ConcurrentStack<int>(), maxCount: 1);\n```", "```cs\n// This Add completes immediately.\nawait _asyncStack.AddAsync(7);\n\n// This Add (asynchronously) waits for the 7 to be removed\n// before it enqueues the 13.\nawait _asyncStack.AddAsync(13);\n\n_asyncStack.CompleteAdding();\n```", "```cs\nwhile (true)\n{\n  int item;\n  try\n  {\n    item = await _asyncStack.TakeAsync();\n  }\n  catch (InvalidOperationException)\n  {\n    break;\n  }\n  Trace.WriteLine(item);\n}\n```", "```cs\nvar queue = new BufferBlock<int>();\n\n// Producer code\nawait queue.SendAsync(7);\nawait queue.SendAsync(13);\nqueue.Complete();\n\n// Consumer code for a single consumer\nwhile (await queue.OutputAvailableAsync())\n  Trace.WriteLine(await queue.ReceiveAsync());\n\n// Consumer code for multiple consumers\nwhile (true)\n{\n  int item;\n  try\n  {\n    item = await queue.ReceiveAsync();\n  }\n  catch (InvalidOperationException)\n  {\n    break;\n  }\n\n  Trace.WriteLine(item);\n}\n```", "```cs\nvar queue = new BufferBlock<int>();\n\n// Producer code\nqueue.Post(7);\nqueue.Post(13);\nqueue.Complete();\n\n// Consumer code\nwhile (true)\n{\n  int item;\n  try\n  {\n    item = queue.Receive();\n  }\n  catch (InvalidOperationException)\n  {\n    break;\n  }\n\n  Trace.WriteLine(item);\n}\n```", "```cs\n// Consumer code is passed to queue constructor.\nActionBlock<int> queue = new ActionBlock<int>(item => Trace.WriteLine(item));\n\n// Asynchronous producer code\nawait queue.SendAsync(7);\nawait queue.SendAsync(13);\n\n// Synchronous producer code\nqueue.Post(7);\nqueue.Post(13);\nqueue.Complete();\n```", "```cs\nvar queue = new AsyncProducerConsumerQueue<int>();\n\n// Asynchronous producer code\nawait queue.EnqueueAsync(7);\nawait queue.EnqueueAsync(13);\n\n// Synchronous producer code\nqueue.Enqueue(7);\nqueue.Enqueue(13);\n\nqueue.CompleteAdding();\n\n// Asynchronous single consumer code\nwhile (await queue.OutputAvailableAsync())\n  Trace.WriteLine(await queue.DequeueAsync());\n\n// Asynchronous multi-consumer code\nwhile (true)\n{\n  int item;\n  try\n  {\n    item = await queue.DequeueAsync();\n  }\n  catch (InvalidOperationException)\n  {\n    break;\n  }\n  Trace.WriteLine(item);\n}\n\n// Synchronous consumer code\nforeach (int item in queue.GetConsumingEnumerable())\n  Trace.WriteLine(item);\n```", "```cs\nChannel<int> queue = Channel.CreateBounded<int>(10);\n\n// Producer code\nChannelWriter<int> writer = queue.Writer;\nTask.Run(async () =>\n{\n  await writer.WriteAsync(7);\n  await writer.WriteAsync(13);\n  writer.Complete();\n}).GetAwaiter().GetResult();\n\n// Consumer code\nChannelReader<int> reader = queue.Reader;\nTask.Run(async () =>\n{\n  while (await reader.WaitToReadAsync())\n    while (reader.TryRead(out int value))\n      Trace.WriteLine(value);\n}).GetAwaiter().GetResult();\n```"]