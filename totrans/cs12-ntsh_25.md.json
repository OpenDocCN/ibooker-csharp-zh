["```cs\nConsole.WriteLine (Regex.Match (\"color\",   @\"colou?r\").Success);  // True\nConsole.WriteLine (Regex.Match (\"colour\",  @\"colou?r\").Success);  // True\nConsole.WriteLine (Regex.Match (\"colouur\", @\"colou?r\").Success);  // False\n```", "```cs\nMatch m = Regex.Match (\"any colour you like\", @\"colou?r\");\n\nConsole.WriteLine (m.Success);     // True\nConsole.WriteLine (m.Index);       // 4\nConsole.WriteLine (m.Length);      // 6\nConsole.WriteLine (m.Value);       // colour\nConsole.WriteLine (m.ToString());  // colour\n```", "```cs\nMatch m1 = Regex.Match (\"One color? There are two colours in my head!\",\n                        @\"colou?rs?\");\nMatch m2 = m1.NextMatch();\nConsole.WriteLine (m1);         // color\nConsole.WriteLine (m2);         // colours\n```", "```cs\nforeach (Match m in Regex.Matches\n          (\"One color? There are two colours in my head!\", @\"colou?rs?\"))\n  Console.WriteLine (m);\n```", "```cs\nConsole.WriteLine (Regex.IsMatch (\"Jenny\", \"Jen(ny|nifer)?\"));  // True\n```", "```cs\nRegex r = new Regex (@\"sausages?\", RegexOptions.Compiled);\nConsole.WriteLine (r.Match (\"sausage\"));   // sausage\nConsole.WriteLine (r.Match (\"sausages\"));  // sausages\n```", "```cs\nConsole.WriteLine (Regex.Match (\"a\", \"A\", RegexOptions.IgnoreCase)); // a\n```", "```cs\nConsole.WriteLine (Regex.Match (\"a\", \"A\", RegexOptions.IgnoreCase\n                                        | RegexOptions.CultureInvariant));\n```", "```cs\nConsole.WriteLine (Regex.Match (\"a\", @\"(?i)A\"));                     // a\n```", "```cs\nConsole.WriteLine (Regex.Match (\"AAAa\", @\"(?i)a(?-i)a\"));            // Aa\n```", "```cs\nConsole.WriteLine (Regex.Match (\"what?\", @\"what\\?\")); // what? (correct)\nConsole.WriteLine (Regex.Match (\"what?\", @\"what?\"));  // what  (incorrect)\n```", "```cs\nConsole.WriteLine (Regex.Escape   (@\"?\"));     // \\?\nConsole.WriteLine (Regex.Unescape (@\"\\?\"));    // ?>\n```", "```cs\nConsole.WriteLine (Regex.Match (\"\\\\\", \"\\\\\\\\\"));    // \\\n```", "```cs\nConsole.Write (Regex.IsMatch (\"hello world\", @\"hello world\"));  // True\n```", "```cs\nConsole.Write (Regex.Matches (\"That is that.\", \"[Tt]hat\").Count);   // 2\n```", "```cs\nConsole.Write (Regex.Match (\"quiz qwerty\", \"q[^aeiou]\").Index);    // 5\n```", "```cs\nConsole.Write (Regex.Match (\"b1-c4\", @\"[a-h]\\d-[a-h]\\d\").Success);  // True\n```", "```cs\nConsole.Write (Regex.IsMatch (\"Yes, please\", @\"\\p{P}\"));   // True\n```", "```cs\nConsole.Write (Regex.Match (\"cv15.docx\", @\"cv\\d*\\.docx\").Success);  // True\n```", "```cs\nConsole.Write (Regex.Match (\"cvjoint.docx\", @\"cv.*\\.docx\").Success); // True\n```", "```cs\nConsole.Write (Regex.Matches (\"slow! yeah slooow!\", \"slo+w\").Count);  // 2\n```", "```cs\nRegex bp = new Regex (@\"\\d{2,3}/\\d{2,3}\");\nConsole.WriteLine (bp.Match (\"It used to be 160/110\"));  // 160/110\nConsole.WriteLine (bp.Match (\"Now it's only 115/75\"));   // 115/75\n```", "```cs\nstring html = \"<i>By default</i> quantifiers are <i>greedy</i> creatures\";\n```", "```cs\nforeach (Match m in Regex.Matches (html, @\"<i>.*</i>\"))\n  Console.WriteLine (m);\n```", "```cs\n<i>By default</i> quantifiers are <i>greedy</i>\n```", "```cs\nforeach (Match m in Regex.Matches (html, @\"<i>.*?</i>\"))\n  Console.WriteLine (m);\n```", "```cs\n<i>By default</i>\n<i>greedy</i>\n```", "```cs\nConsole.WriteLine (Regex.Match (\"say 25 miles more\", @\"\\d+\\s(?=miles)\"));\n\n*OUTPUT: 25*\n```", "```cs\nConsole.WriteLine (Regex.Match (\"say 25 miles more\", @\"\\d+\\s(?=miles).*\"));\n```", "```cs\nstring password = \"...\";\nbool ok = Regex.IsMatch (password, @\"(?=.*\\d).{6,}\");\n```", "```cs\nstring regex = \"(?i)good(?!.*(however|but))\";\nConsole.WriteLine (Regex.IsMatch (\"Good work! But...\",  regex));  // False\nConsole.WriteLine (Regex.IsMatch (\"Good work! Thanks!\", regex));  // True\n```", "```cs\nstring regex = \"(?i)(?<!however.*)good\";\nConsole.WriteLine (Regex.IsMatch (\"However good, we...\", regex)); // False\nConsole.WriteLine (Regex.IsMatch (\"Very good, thanks!\", regex));  // True\n```", "```cs\nConsole.WriteLine (Regex.Match (\"Not now\", \"^[Nn]o\"));   // No\nConsole.WriteLine (Regex.Match (\"f = 0.2F\", \"[Ff]$\"));   // F\n```", "```cs\n(?=\\r?$)\n```", "```cs\nstring fileNames = \"a.txt\" + \"\\r\\n\" + \"b.docx\" + \"\\r\\n\" + \"c.txt\";\nstring r = @\".+\\.txt(?=\\r?$)\";\nforeach (Match m in Regex.Matches (fileNames, r, RegexOptions.Multiline))\n  Console.Write (m + \" \");\n\n*OUTPUT: a.txt c.txt*\n```", "```cs\nMatchCollection emptyLines = Regex.Matches (s, \"^(?=\\r?$)\",\n                                            RegexOptions.Multiline);\n```", "```cs\nMatchCollection blankLines = Regex.Matches (s, \"^[ \\t]*(?=\\r?$)\",\n                                            RegexOptions.Multiline);\n```", "```cs\nConsole.WriteLine (Regex.Match (\"x\", \"$\").Length);   // 0\n```", "```cs\nforeach (Match m in Regex.Matches (\"Wedding in Sarajevo\", @\"\\b\\w+\\b\"))\n  Console.WriteLine (m);\n\n*Wedding*\n*in*\n*Sarajevo*\n```", "```cs\nint one = Regex.Matches (\"Wedding in Sarajevo\", @\"\\bin\\b\").Count; // 1\nint two = Regex.Matches (\"Wedding in Sarajevo\", @\"in\").Count;     // 2\n```", "```cs\nstring text = \"Don't loose (sic) your cool\";\nConsole.Write (Regex.Match (text, @\"\\b\\w+\\b\\s(?=\\(sic\\))\"));  // loose\n```", "```cs\n\\d{3}-\\d{3}-\\d{4}\n```", "```cs\n(\\d{3})-(\\d{3}-\\d{4})\n```", "```cs\nMatch m = Regex.Match (\"206-465-1918\", @\"(\\d{3})-(\\d{3}-\\d{4})\");\n\nConsole.WriteLine (m.Groups[1]);   // 206\nConsole.WriteLine (m.Groups[2]);   // 465-1918\n```", "```cs\nConsole.WriteLine (m.Groups[0]);   // 206-465-1918\nConsole.WriteLine (m);             // 206-465-1918\n```", "```cs\nforeach (Match m in Regex.Matches (\"pop pope peep\", @\"\\b(\\w)\\w+\\1\\b\"))\n  Console.Write (m + \" \");  // pop peep\n```", "```cs\nstring regEx =\n  @\"\\b\"             +  // word boundary\n  @\"(?'letter'\\w)\"  +  // match first letter, and name it 'letter'\n  @\"\\w+\"            +  // match middle letters\n  @\"\\k'letter'\"     +  // match last letter, denoted by 'letter'\n  @\"\\b\";               // word boundary\n\nforeach (Match m in Regex.Matches (\"bob pope peep\", regEx))\n  Console.Write (m + \" \");  // bob peep\n```", "```cs\n(?'*group-name*'group-expr)  *or*  (?<*group-name*>group-expr)\n```", "```cs\n\\k'*group-name*'  *or*  \\k<*group-name*>\n```", "```cs\nstring regFind =\n  @\"<(?'tag'\\w+?).*>\" +  // lazy-match first tag, and name it 'tag'\n  @\"(?'text'.*?)\"     +  // lazy-match text content, name it 'text'\n  @\"</\\k'tag'>\";         // match last tag, denoted by 'tag'\n\nMatch m = Regex.Match (\"<h1>hello</h1>\", regFind);\nConsole.WriteLine (m.Groups [\"tag\"]);          // h1\nConsole.WriteLine (m.Groups [\"text\"]);         // hello\n```", "```cs\nstring find = @\"\\bcat\\b\";\nstring replace = \"dog\";\nConsole.WriteLine (Regex.Replace (\"catapult the cat\", find, replace));\n\n*OUTPUT: catapult the dog*\n```", "```cs\nstring text = \"10 plus 20 makes 30\";\nConsole.WriteLine (Regex.Replace (text, @\"\\d+\", @\"<$0>\"));\n\n*OUTPUT: <10> plus <20> makes <30>*\n```", "```cs\nstring regFind =\n  @\"<(?'tag'\\w+?).*>\" +  // lazy-match first tag, and name it 'tag'\n  @\"(?'text'.*?)\"     +  // lazy-match text content, name it 'text'\n  @\"</\\k'tag'>\";         // match last tag, denoted by 'tag'\n\nstring regReplace =\n  @\"<${tag}\"         +  // <tag\n  @\"value=\"\"\"        +  // value=\"\n  @\"${text}\"         +  // text\n  @\"\"\"/>\";              // \"/>\n\nConsole.Write (Regex.Replace (\"<msg>hello</msg>\", regFind, regReplace));\n```", "```cs\n<msg value=\"hello\"/>\n```", "```cs\nConsole.WriteLine (Regex.Replace (\"5 is less than 10\", @\"\\d+\",\n                   m => (int.Parse (m.Value) * 10).ToString()) );\n\n*OUTPUT: 50 is less than 100*\n```", "```cs\nforeach (string s in Regex.Split (\"a5b7c\", @\"\\d\"))\n  Console.Write (s + \" \");     // a b c\n```", "```cs\nforeach (string s in Regex.Split (\"oneTwoThree\", @\"(?=[A-Z])\"))\n  Console.Write (s + \" \");    // one Two Three\n```", "```cs\nstring ssNum = @\"\\d{3}-\\d{2}-\\d{4}\";\n\nConsole.WriteLine (Regex.IsMatch (\"123-45-6789\", ssNum));      // True\n\nstring phone = @\"(?x)\n ( \\d{3}[-\\s] | \\(\\d{3}\\)\\s? )\n \\d{3}[-\\s]?\n \\d{4}\";\n\nConsole.WriteLine (Regex.IsMatch (\"123-456-7890\",   phone));   // True\nConsole.WriteLine (Regex.IsMatch (\"(123) 456-7890\", phone));   // True\n```", "```cs\nstring r = @\"(?m)^\\s*(?'name'\\w+)\\s*=\\s*(?'value'.*)\\s*(?=\\r?$)\";\n\nstring text =\n  @\"id = 3\n    secure = true\n    timeout = 30\";\n\nforeach (Match m in Regex.Matches (text, r))\n  Console.WriteLine (m.Groups[\"name\"] + \" is \" + m.Groups[\"value\"]);\n*id is 3 secure is true timeout is 30*\n```", "```cs\nstring r = @\"(?x)^(?=.* ( \\d | \\p{P} | \\p{S} )).{6,}\";\n\nConsole.WriteLine (Regex.IsMatch (\"abc12\", r));     // False\nConsole.WriteLine (Regex.IsMatch (\"abcdef\", r));    // False\nConsole.WriteLine (Regex.IsMatch (\"ab88yz\", r));    // True\n```", "```cs\nstring r = @\"(?m)^.{80,}(?=\\r?$)\";\n\nstring fifty = new string ('x', 50);\nstring eighty = new string ('x', 80);\n\nstring text = eighty + \"\\r\\n\" + fifty + \"\\r\\n\" + eighty;\n\nConsole.WriteLine (Regex.Matches (text, r).Count);   // 2\n```", "```cs\nstring r = @\"(?x)(?i)\n (\\d{1,4}) [./-]\n **(\\d{1,2}) [./-]**\n **(\\d{1,4}) [\\sT]**\n (\\d+):(\\d+):(\\d+) \\s? (A\\.?M\\.?|P\\.?M\\.?)?\";\n\nstring text = \"01/02/2008 5:20:50 PM\";\n\nforeach (Group g in Regex.Match (text, r).Groups)\n  Console.WriteLine (g.Value + \" \");\n*01/02/2008 5:20:50 PM 01 02 2008 5 20 50 PM*\n```", "```cs\nstring r =\n  @\"(?i)\\bm*\"         +\n  @\"(d?c{0,3}|c[dm])\" +\n  @\"(l?x{0,3}|x[lc])\" +\n  @\"(v?i{0,3}|i[vx])\" +\n  @\"\\b\";\n\nConsole.WriteLine (Regex.IsMatch (\"MCMLXXXIV\", r));   // True\n```", "```cs\nstring r = @\"(?'dupe'\\w+)\\W\\k'dupe'\";\n\nstring text = \"In the the beginning...\";\nConsole.WriteLine (Regex.Replace (text, r, \"${dupe}\"));\n\n*In the beginning*\n```", "```cs\nstring r = @\"\\b(\\w|[-'])+\\b\";\n\nstring text = \"It's all mumbo-jumbo to me\";\nConsole.WriteLine (Regex.Matches (text, r).Count);   // 5\n```", "```cs\nstring r =\n  @\"(?i)\\b\"           +\n  @\"[0-9a-fA-F]{8}\\-\" +\n  @\"[0-9a-fA-F]{4}\\-\" +\n  @\"[0-9a-fA-F]{4}\\-\" +\n  @\"[0-9a-fA-F]{4}\\-\" +\n  @\"[0-9a-fA-F]{12}\"  +\n  @\"\\b\";\n\nstring text = \"Its key is {3F2504E0-4F89-11D3-9A0C-0305E82C3301}.\";\nConsole.WriteLine (Regex.Match (text, r).Index);                    // 12\n```", "```cs\nstring r =\n  @\"<(?'tag'\\w+?).*>\"  +  // lazy-match first tag, and name it 'tag'\n  @\"(?'text'.*?)\"      +  // lazy-match text content, name it 'textd'\n  @\"</\\k'tag'>\";          // match last tag, denoted by 'tag'\n\nstring text = \"<h1>hello</h1>\";\n\nMatch m = Regex.Match (text, r);\n\nConsole.WriteLine (m.Groups [\"tag\"]);       // h1\nConsole.WriteLine (m.Groups [\"text\"]);      // hello\n```", "```cs\nstring r = @\"(?=[A-Z])\";\n\nforeach (string s in Regex.Split (\"oneTwoThree\", r))\n  Console.Write (s + \" \");    // one Two Three\n```", "```cs\nstring input = \"My \\\"good\\\" <recipes>.txt\";\n\nchar[] invalidChars = System.IO.Path.GetInvalidFileNameChars();\nstring invalidString = Regex.Escape (new string (invalidChars));\n\nstring valid = Regex.Replace (input, \"[\" + invalidString + \"]\", \"\");\nConsole.WriteLine (valid);\n\n*My good recipes.txt*\n```", "```cs\nstring htmlFragment = \"© 2007\";\n\nstring result = Regex.Replace (htmlFragment, @\"[\\u0080-\\uFFFF]\",\n                m => @\"&#\" + ((int)m.Value[0]).ToString() + \";\");\n\nConsole.WriteLine (result);        // &#169; 2007\n```", "```cs\nstring sample = \"C%23 rocks\";\n\nstring result = Regex.Replace (\n    sample,\n    @\"%[0-9a-f][0-9a-f]\", \n    m => ((char) Convert.ToByte (m.Value.Substring (1), 16)).ToString(),\n    RegexOptions.IgnoreCase\n);\n\nConsole.WriteLine (result);   // C# rocks\n```", "```cs\nstring sample = \n  \"http://google.com/search?hl=en&q=greedy+quantifiers+regex&btnG=Search\";\n\nMatch m = Regex.Match (sample, @\"(?<=google\\..+search\\?.*q=).+?(?=(&|$))\");\n\nstring[] keywords = m.Value.Split (\n  new[] { '+' }, StringSplitOptions.RemoveEmptyEntries);\n\nforeach (string keyword in keywords)\n  Console.Write (keyword + \" \");       // greedy quantifiers regex\n```"]