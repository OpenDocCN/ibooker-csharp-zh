["```cs\nstatic byte[] GenerateSalt()\n{\n    const int SaltLength = 64;\n\n    byte[] salt = new byte[SaltLength];\n    var rngRand = new RNGCryptoServiceProvider();\n\n    rngRand.GetBytes(salt);\n\n    return salt;\n}\n```", "```cs\nstatic byte[] GenerateMD5Hash(string password, byte[] salt)\n{\n    byte[] passwordBytes = Encoding.UTF8.GetBytes(password);\n\n    byte[] saltedPassword =\n        new byte[salt.Length + passwordBytes.Length];\n\n    using var hash = new MD5CryptoServiceProvider();\n\n    return hash.ComputeHash(saltedPassword);\n}\n\nstatic byte[] GenerateSha256Hash(string password, byte[] salt)\n{\n    byte[] passwordBytes = Encoding.UTF8.GetBytes(password);\n\n    byte[] saltedPassword =\n        new byte[salt.Length + passwordBytes.Length];\n\n    using var hash = new SHA256CryptoServiceProvider();\n\n    return hash.ComputeHash(saltedPassword);\n}\n```", "```cs\nstatic void Main(string[] args)\n{\n    Console.WriteLine(\"\\nPassword Hash Demo\\n\");\n\n    Console.Write(\"What is your password? \");\n    string password = Console.ReadLine();\n\n    byte[] salt = GenerateSalt();\n\n    byte[] md5Hash = GenerateMD5Hash(password, salt);\n    string md5HashString = Convert.ToBase64String(md5Hash);\n    Console.WriteLine($\"\\nMD5:    {md5HashString}\");\n\n    byte[] sha256Hash = GenerateSha256Hash(password, salt);\n    string sha256HashString = Convert.ToBase64String(sha256Hash);\n    Console.WriteLine($\"\\nSHA256: {sha256HashString}\");\n}\n```", "```cs\npublic class Crypto\n{\n    public byte[] Encrypt(string plainText, byte[] key)\n    {\n        using Aes aes = Aes.Create();\n        aes.Key = key;\n\n        using var memStream = new MemoryStream();\n        memStream.Write(aes.IV, 0, aes.IV.Length);\n\n        using var cryptoStream = new CryptoStream(\n            memStream,\n            aes.CreateEncryptor(),\n            CryptoStreamMode.Write);\n\n        byte[] plainTextBytes = Encoding.UTF8.GetBytes(plainText);\n\n        cryptoStream.Write(plainTextBytes);\n        cryptoStream.FlushFinalBlock();\n\n        memStream.Position = 0;\n\n        return memStream.ToArray();\n    }\n\n    public string Decrypt(byte[] cypherBytes, byte[] key)\n    {\n        using var memStream = new MemoryStream();\n        memStream.Write(cypherBytes);\n        memStream.Position = 0;\n\n        using var aes = Aes.Create();\n\n        byte[] iv = new byte[aes.IV.Length];\n        memStream.Read(iv, 0, iv.Length);\n\n        using var cryptoStream = new CryptoStream(\n            memStream,\n            aes.CreateDecryptor(key, iv),\n            CryptoStreamMode.Read);\n\n        int plainTextByteLength = cypherBytes.Length - iv.Length;\n        var plainTextBytes = new byte[plainTextByteLength];\n        cryptoStream.Read(plainTextBytes, 0, plainTextByteLength);\n\n        return Encoding.UTF8.GetString(plainTextBytes);\n    }\n}\n```", "```cs\nstatic byte[] GenerateKey()\n{\n    const int KeyLength = 32;\n\n    byte[] key = new byte[KeyLength];\n    var rngRand = new RNGCryptoServiceProvider();\n\n    rngRand.GetBytes(key);\n\n    return key;\n}\n```", "```cs\nstatic void Main()\n{\n    var crypto = new Crypto();\n\n    Console.Write(\"Please enter text to encrypt: \");\n    string userPlainText = Console.ReadLine();\n\n    byte[] key = GenerateKey();\n\n    byte[] cypherBytes = crypto.Encrypt(userPlainText, key);\n\n    string cypherText = Convert.ToBase64String(cypherBytes);\n\n    Console.WriteLine($\"Cypher Text: {cypherText}\");\n\n    string decryptedPlainText = crypto.Decrypt(cypherBytes, key);\n\n    Console.WriteLine($\"Plain Text: {decryptedPlainText}\");\n}\n```", "```cs\n<Project Sdk=\"Microsoft.NET.Sdk\">\n    <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net5.0</TargetFramework>\n    <RootNamespace>Section_07_03</RootNamespace>\n    <UserSecretsId>d3d91a8b-d440-414a-821e-7f11eec48f32</UserSecretsId>\n    </PropertyGroup>\n\n    <ItemGroup>\n    <PackageReference\n        Include=\"Microsoft.Extensions.Hosting\" Version=\"5.0.0\" />\n    </ItemGroup>\n</Project>\n```", "```cs\nclass Program\n{\n    static void Main()\n    {\n        var config = new ConfigurationBuilder()\n            .AddUserSecrets<Program>()\n            .Build();\n\n        string key = \"CSharpCookbook:ApiKey\";\n        Console.WriteLine($\"{key}: {config[key]}\");\n    }\n}\n```", "```cs\nif (env.IsDevelopment())\n{\n    config.AddUserSecrets<Program>();\n}\n```", "```cs\ndotnet user-secrets init\n```", "```cs\n%APPDATA%\\Microsoft\\UserSecrets\\d3d91a8b-d440-414a-821e-7f11eec48f32\n\\secrets.json\n```", "```cs\n~/.microsoft/usersecrets/d3d91a8b-d440-414a-821e-7f11eec48f32\n/secrets.json\n```", "```cs\ndotnet user-secrets set \"CSharpCookbook:ApiKey\" \"mYaPIsECRET\"\n```", "```cs\ndotnet user-secrets list\n```", "```cs\npublic enum PurchaseOrderStatus\n{\n    Received,\n    Processing,\n    Fulfilled\n}\n\npublic class PurchaseItem\n{\n [JsonPropertyName(\"serialNo\")]\n    public string SerialNumber { get; set; }\n\n [JsonPropertyName(\"description\")]\n    public string Description { get; set; }\n\n [JsonPropertyName(\"qty\")]\n    public float Quantity { get; set; }\n\n [JsonPropertyName(\"amount\")]\n    public decimal Price { get; set; }\n}\n\npublic class PurchaseOrder\n{\n [JsonPropertyName(\"company\")]\n    public string CompanyName { get; set; }\n [JsonPropertyName(\"address\")]\n    public string Address { get; set; }\n [JsonPropertyName(\"phone\")]\n    public string Phone { get; set; }\n\n [JsonPropertyName(\"status\")]\n    public PurchaseOrderStatus Status { get; set; }\n\n [JsonPropertyName(\"other\")]\n    public Dictionary<string, string> AdditionalInfo { get; set; }\n\n [JsonPropertyName(\"details\")]\n    public List<PurchaseItem> Items { get; set; }\n}\n```", "```cs\npublic class PurchaseOrderService\n{\n    public void View(PurchaseOrder po)\n    {\n        var jsonOptions = new JsonSerializerOptions\n        {\n            WriteIndented = true\n        };\n\n        string poJson = JsonSerializer.Serialize(po, jsonOptions);\n\n        // send HTTP request\n\n        Console.WriteLine(poJson);\n    }\n}\n```", "```cs\nstatic PurchaseOrder GetPurchaseOrder()\n{\n    return new PurchaseOrder\n    {\n        CompanyName = \"Acme, Inc.\",\n        Address = \"123 4th St.\",\n        Phone = \"555-835-7609\",\n        AdditionalInfo = new Dictionary<string, string>\n        {\n            { \"terms\", \"Net 30\" },\n            { \"poc\", \"J. Smith\" }\n        },\n        Items = new List<PurchaseItem>\n        {\n            new PurchaseItem\n            {\n                Description = \"Widget\",\n                Price = 13.95m,\n                Quantity = 5,\n                SerialNumber = \"123\"\n            }\n        }\n    };\n}\n```", "```cs\nstatic void Main()\n{\n    PurchaseOrder po = GetPurchaseOrder();\n    new PurchaseOrderService().View(po);\n}\n```", "```cs\n{\n  \"company\": \"Acme, Inc.\",\n  \"address\": \"123 4th St.\",\n  \"phone\": \"555-835-7609\",\n  \"status\": 0,\n  \"other\": {\n    \"terms\": \"Net 30\",\n    \"poc\": \"J. Smith\"\n  },\n  \"details\": [\n    {\n      \"serialNo\": \"123\",\n      \"description\": \"Widget\",\n      \"qty\": 5,\n      \"amount\": 13.95\n    }\n  ]\n}\n```", "```cs\npublic enum PurchaseOrderStatus\n{\n    Received,\n    Processing,\n    Fulfilled\n}\n\npublic class PurchaseItem\n{\n    public string SerialNumber { get; set; }\n\n    public string Description { get; set; }\n\n    public float Quantity { get; set; }\n\n    public decimal Price { get; set; }\n}\n\npublic class PurchaseOrder\n{\n    public string CompanyName { get; set; }\n    public string Address { get; set; }\n    public string Phone { get; set; }\n\n [JsonConverter(typeof(PurchaseOrderStatusConverter))]\n    public PurchaseOrderStatus Status { get; set; }\n\n    public Dictionary<string, string> AdditionalInfo { get; set; }\n\n    public List<PurchaseItem> Items { get; set; }\n}\n```", "```cs\npublic class PurchaseOrderStatusConverter\n    : JsonConverter<PurchaseOrderStatus>\n{\n    public override PurchaseOrderStatus Read(\n        ref Utf8JsonReader reader,\n        Type typeToConvert,\n        JsonSerializerOptions options)\n    {\n        string statusString = reader.GetString();\n\n        if (Enum.TryParse(\n            statusString,\n            out PurchaseOrderStatus status))\n        {\n            return status;\n        }\n        else\n        {\n            throw new JsonException(\n                $\"{statusString} is not a valid \" +\n                $\"{nameof(PurchaseOrderStatus)} value.\");\n        }\n    }\n\n    public override void Write(\n        Utf8JsonWriter writer,\n        PurchaseOrderStatus value,\n        JsonSerializerOptions options)\n    {\n        writer.WriteStringValue(value.ToString());\n    }\n}\n```", "```cs\npublic class SnakeCaseNamingPolicy : JsonNamingPolicy\n{\n    public override string ConvertName(string name)\n    {\n        var targetChars = new List<char>();\n        char[] sourceChars = name.ToCharArray();\n\n        char first = sourceChars[0];\n        if (char.IsUpper(first))\n            targetChars.Add(char.ToLower(first));\n        else\n            targetChars.Add(first);\n\n        for (int i = 1; i < sourceChars.Length; i++)\n        {\n            char ch = sourceChars[i];\n\n            if (char.IsUpper(ch))\n            {\n                targetChars.Add('_');\n                targetChars.Add(char.ToLower(ch));\n            }\n            else\n            {\n                targetChars.Add(ch);\n            }\n        }\n\n        return new string(targetChars.ToArray());\n    }\n}\n```", "```cs\npublic class PurchaseOrderService\n{\n    public string Get(int poID)\n    {\n        // get HTTP request\n\n        return @\"{\n\"\"company_name\"\": \"\"Acme, Inc.\"\",\n\"\"address\"\": \"\"123 4th St.\"\",\n\"\"phone\"\": \"\"555-835-7609\"\",\n\"\"additional_info\"\": {\n \"\"terms\"\": \"\"Net 30\"\",\n \"\"poc\"\": \"\"J. Smith\"\",\n},\n\"\"status\"\": \"\"Processing\"\",\n\"\"items\"\": [\n {\n \"\"serial_number\"\": \"\"123\"\",\n \"\"description\"\": \"\"Widget\"\",\n \"\"quantity\"\": 5,\n \"\"price\"\": 13.95\n }\n]\n}\";\n    }\n}\n```", "```cs\nstatic void Main()\n{\n    string poJson =\n        new PurchaseOrderService()\n            .Get(poID: 123);\n\n    var jsonOptions = new JsonSerializerOptions\n    {\n        AllowTrailingCommas = true,\n        Converters =\n        {\n            new PurchaseOrderStatusConverter()\n        },\n        PropertyNameCaseInsensitive = true,\n        PropertyNamingPolicy = new SnakeCaseNamingPolicy(),\n        WriteIndented = true\n    };\n\n    PurchaseOrder po =\n        JsonSerializer\n        .Deserialize<PurchaseOrder>(poJson, jsonOptions);\n\n    Console.WriteLine($\"{po.CompanyName}\");\n    Console.WriteLine($\"{po.AdditionalInfo[\"terms\"]}\");\n    Console.WriteLine($\"{po.Items[0].Description}\");\n\n    string poJson2 = JsonSerializer.Serialize(po, jsonOptions);\n\n    Console.WriteLine(poJson2);\n}\n```", "```cs\nAcme, Inc.\nNet 30\nWidget\n{\n  \"company_name\": \"Acme, Inc.\",\n  \"address\": \"123 4th St.\",\n  \"phone\": \"555-835-7609\",\n  \"status\": \"Processing\",\n  \"additional_info\": {\n    \"terms\": \"Net 30\",\n    \"poc\": \"J. Smith\"\n  },\n  \"items\": [\n    {\n      \"serial_number\": \"123\",\n      \"description\": \"Widget\",\n      \"quantity\": 5,\n      \"price\": 13.95\n    }\n  ]\n}\n```", "```cs\nvar serializeOptions = new JsonSerializerOptions\n{\n    PropertyNamingPolicy = JsonNamingPolicy.CamelCase\n};\n```", "```cs\npublic enum PurchaseOrderStatus\n{\n    Received,\n    Processing,\n    Fulfilled\n}\n\npublic class PurchaseItem\n{\n    public string SerialNumber { get; set; }\n\n    public string Description { get; set; }\n\n    public double Quantity { get; set; }\n\n    public decimal Price { get; set; }\n}\n\npublic class PurchaseOrder\n{\n    public string CompanyName { get; set; }\n    public string Address { get; set; }\n    public string Phone { get; set; }\n    public string Terms { get; set; }\n    public string POC { get; set; }\n\n    public PurchaseOrderStatus Status { get; set; }\n\n    public Dictionary<string, string> AdditionalInfo { get; set; }\n\n    public List<PurchaseItem> Items { get; set; }\n}\n```", "```cs\npublic class PurchaseOrderService\n{\n    public string Get(int poID)\n    {\n        // get HTTP request\n\n        return @\"{\n\"\"company_name\"\": \"\"Acme, Inc.\"\",\n\"\"address\"\": \"\"123 4th St.\"\",\n\"\"phone\"\": \"\"555-835-7609\"\",\n\"\"additional_info\"\": {\n \"\"terms\"\": \"\"Net 30\"\",\n \"\"poc\"\": \"\"J. Smith\"\"\n},\n\"\"status\"\": \"\"Processing\"\",\n\"\"items\"\": [\n {\n \"\"serial_number\"\": \"\"123\"\",\n \"\"description\"\": \"\"Widget\"\",\n \"\"quantity\"\": 5,\n \"\"price\"\": 13.95\n }\n]\n}\";\n    }\n}\n```", "```cs\npublic static class JsonConversionExtensions\n{\n    public static bool IsNull(this JsonElement json)\n    {\n        return\n            json.ValueKind == JsonValueKind.Undefined ||\n            json.ValueKind == JsonValueKind.Null;\n    }\n\n    public static string GetString(\n        this JsonElement json,\n        string propertyName,\n        string defaultValue = default)\n    {\n        if (!json.IsNull() &&\n            json.TryGetProperty(propertyName, out JsonElement element))\n            return element.GetString() ?? defaultValue;\n\n        return defaultValue;\n    }\n\n    public static int GetInt(\n        this JsonElement json,\n        string propertyName,\n        int defaultValue = default)\n    {\n        if (!json.IsNull() &&\n            json.TryGetProperty(propertyName, out JsonElement element) &&\n            !element.IsNull() &&\n            element.TryGetInt32(out int value))\n            return value;\n\n        return defaultValue;\n    }\n\n    public static ulong GetULong(\n        this string val,\n        ulong defaultValue = default)\n    {\n        return string.IsNullOrWhiteSpace(val) ||\n            !ulong.TryParse(val, out ulong result)\n                ? defaultValue\n                : result;\n    }\n\n    public static ulong GetUlong(\n        this JsonElement json,\n        string propertyName,\n        ulong defaultValue = default)\n    {\n        if (!json.IsNull() &&\n            json.TryGetProperty(propertyName, out JsonElement element) &&\n            !element.IsNull() &&\n            element.TryGetUInt64(out ulong value))\n            return value;\n\n        return defaultValue;\n    }\n\n    public static long GetLong(\n        this JsonElement json,\n        string propertyName,\n        long defaultValue = default)\n    {\n        if (!json.IsNull() &&\n            json.TryGetProperty(propertyName, out JsonElement element) &&\n            !element.IsNull() &&\n            element.TryGetInt64(out long value))\n            return value;\n\n        return defaultValue;\n    }\n\n    public static bool GetBool(\n        this JsonElement json,\n        string propertyName,\n        bool defaultValue = default)\n    {\n        if (!json.IsNull() &&\n            json.TryGetProperty(propertyName, out JsonElement element) &&\n            !element.IsNull())\n            return element.GetBoolean();\n\n        return defaultValue;\n    }\n\n    public static double GetDouble(\n        this string val,\n        double defaultValue = default)\n    {\n        return string.IsNullOrWhiteSpace(val) ||\n            !double.TryParse(val, out double result)\n                ? defaultValue\n                : result;\n    }\n\n    public static double GetDouble(\n        this JsonElement json,\n        string propertyName,\n        double defaultValue = default)\n    {\n        if (!json.IsNull() &&\n            json.TryGetProperty(propertyName, out JsonElement element) &&\n            !element.IsNull() &&\n            element.TryGetDouble(out double value))\n            return value;\n\n        return defaultValue;\n    }\n\n    public static decimal GetDecimal(\n        this JsonElement json,\n        string propertyName,\n        decimal defaultValue = default)\n    {\n        if (!json.IsNull() &&\n            json.TryGetProperty(propertyName, out JsonElement element) &&\n            !element.IsNull() &&\n            element.TryGetDecimal(out decimal value))\n            return value;\n\n        return defaultValue;\n    }\n\n    public static TEnum GetEnum<TEnum>\n        (this JsonElement json,\n        string propertyName,\n        TEnum defaultValue = default)\n        where TEnum: struct\n    {\n        if (!json.IsNull() &&\n            json.TryGetProperty(propertyName, out JsonElement element) &&\n            !element.IsNull())\n        {\n            string enumString = element.GetString();\n\n            if (enumString != null &&\n                Enum.TryParse(enumString, out TEnum num))\n                return num;\n        }\n\n        return defaultValue;\n    }\n}\n```", "```cs\nstatic void Main()\n{\n    string poJson =\n        new PurchaseOrderService()\n            .Get(poID: 123);\n\n    JsonElement elm = JsonDocument.Parse(poJson).RootElement;\n\n    JsonElement additional = elm.GetProperty(\"additional_info\");\n    JsonElement items = elm.GetProperty(\"items\");\n\n    if (additional.IsNull() || items.IsNull())\n        throw new ArgumentException(\"incomplete PO\");\n\n    var po = new PurchaseOrder\n    {\n        Address = elm.GetString(\"address\", \"none\"),\n        CompanyName = elm.GetString(\"company_name\", string.Empty),\n        Phone = elm.GetString(\"phone\", string.Empty),\n        Status = elm.GetEnum(\"status\", PurchaseOrderStatus.Received),\n        Terms = additional.GetString(\"terms\", string.Empty),\n        POC = additional.GetString(\"poc\", string.Empty),\n        AdditionalInfo =\n            (from jElem in additional.EnumerateObject()\n             select jElem)\n            .ToDictionary(\n                key => key.Name,\n                val => val.Value.GetString()),\n        Items =\n            (from jElem in items.EnumerateArray()\n             select new PurchaseItem\n             {\n                 Description = jElem.GetString(\"description\"),\n                 Price = jElem.GetDecimal(\"price\"),\n                 Quantity = jElem.GetDouble(\"quantity\"),\n                 SerialNumber = jElem.GetString(\"serial_number\")\n             })\n            .ToList()\n    };\n\n    Console.WriteLine($\"{po.CompanyName}\");\n    Console.WriteLine($\"{po.Terms}\");\n    Console.WriteLine($\"{po.AdditionalInfo[\"terms\"]}\");\n    Console.WriteLine($\"{po.Items[0].Description}\");\n}\n```", "```cs\npublic enum PurchaseOrderStatus\n{\n    Received,\n    Processing,\n    Fulfilled\n}\n\npublic class PurchaseItem\n{\n    public string SerialNumber { get; set; }\n\n    public string Description { get; set; }\n\n    public float Quantity { get; set; }\n\n    public decimal Price { get; set; }\n}\n\npublic class PurchaseOrder\n{\n    public string CompanyName { get; set; }\n    public string Address { get; set; }\n    public string Phone { get; set; }\n\n    public PurchaseOrderStatus Status { get; set; }\n\n    public Dictionary<string, string> AdditionalInfo { get; set; }\n\n    public List<PurchaseItem> Items { get; set; }\n}\n```", "```cs\nstatic string GetXml()\n{\n    return @\"\n<PurchaseOrder \">\n <Address>123 4th St.</Address>\n <CompanyName>Acme, Inc.</CompanyName>\n <Phone>555-835-7609</Phone>\n <Status>Received</Status>\n <AdditionalInfo>\n <Terms>Net 30</Terms>\n <POC>J. Smith</POC>\n </AdditionalInfo>\n <Items>\n <PurchaseItem SerialNumber=\"\"123\"\">\n <Description>Widget</Description>\n <Price>13.95</Price>\n <Quantity>5</Quantity>\n </PurchaseItem>\n </Items>\n</PurchaseOrder>\";\n}\n```", "```cs\nstatic void Main(string[] args)\n{\n    XNamespace or = \"https://www.oreilly.com\";\n\n    XName address = or + nameof(PurchaseOrder.Address);\n    XName company = or + nameof(PurchaseOrder.CompanyName);\n    XName phone = or + nameof(PurchaseOrder.Phone);\n    XName status = or + nameof(PurchaseOrder.Status);\n    XName info = or + nameof(PurchaseOrder.AdditionalInfo);\n    XName poItems = or + nameof(PurchaseOrder.Items);\n    XName purchaseItem = or + nameof(PurchaseItem);\n    XName description = or + nameof(PurchaseItem.Description);\n    XName price = or + nameof(PurchaseItem.Price);\n    XName quantity = or + nameof(PurchaseItem.Quantity);\n    XName serialNum = nameof(PurchaseItem.SerialNumber);\n\n    string poXml = GetXml();\n\n    XElement poElmt = XElement.Parse(poXml);\n\n    PurchaseOrder po =\n        new PurchaseOrder\n        {\n            Address = (string)poElmt.Element(address),\n            CompanyName = (string)poElmt.Element(company),\n            Phone = (string)poElmt.Element(phone),\n            Status =\n                Enum.TryParse(\n                    (string)poElmt.Element(nameof(po.Status)),\n                    out PurchaseOrderStatus poStatus)\n                ? poStatus\n                : PurchaseOrderStatus.Received,\n            AdditionalInfo =\n                (from addInfo in poElmt.Element(info).Descendants()\n                 select addInfo)\n                .ToDictionary(\n                    key => key.Name.LocalName,\n                    val => val.Value),\n            Items =\n                (from item in poElmt\n                                .Element(poItems)\n                                .Descendants(purchaseItem)\n                 select new PurchaseItem\n                 {\n                     Description = (string)item.Element(description),\n                     Price =\n                        decimal.TryParse(\n                            (string)item.Element(price),\n                            out decimal itemPrice)\n                        ? itemPrice\n                        : 0m,\n                     Quantity =\n                        float.TryParse(\n                            (string)item.Element(quantity),\n                            out float qty)\n                        ? qty\n                        : 0f,\n                     SerialNumber = (string)item.Attribute(serialNum)\n                 })\n                .ToList()\n        };\n\n    Console.WriteLine($\"{po.CompanyName}\");\n    Console.WriteLine($\"{po.AdditionalInfo[\"Terms\"]}\");\n    Console.WriteLine($\"{po.Items[0].Description}\");\n    Console.WriteLine($\"{po.Items[0].SerialNumber}\");\n}\n```", "```cs\npublic enum PurchaseOrderStatus\n{\n    Received,\n    Processing,\n    Fulfilled\n}\n\npublic class PurchaseItem\n{\n    public string SerialNumber { get; set; }\n\n    public string Description { get; set; }\n\n    public float Quantity { get; set; }\n\n    public decimal Price { get; set; }\n}\n\npublic class PurchaseOrder\n{\n    public string CompanyName { get; set; }\n    public string Address { get; set; }\n    public string Phone { get; set; }\n\n    public PurchaseOrderStatus Status { get; set; }\n\n    public Dictionary<string, string> AdditionalInfo { get; set; }\n\n    public List<PurchaseItem> Items { get; set; }\n}\n```", "```cs\nstatic PurchaseOrder GetPurchaseOrder()\n{\n    return new PurchaseOrder\n    {\n        CompanyName = \"Acme, Inc.\",\n        Address = \"123 4th St.\",\n        Phone = \"555-835-7609\",\n        AdditionalInfo = new Dictionary<string, string>\n        {\n            { \"Terms\", \"Net 30\" },\n            { \"POC\", \"J. Smith\" }\n        },\n        Items = new List<PurchaseItem>\n        {\n            new PurchaseItem\n            {\n                Description = \"Widget\",\n                Price = 13.95m,\n                Quantity = 5,\n                SerialNumber = \"123\"\n            }\n        }\n    };\n}\n```", "```cs\nstatic void Main(string[] args)\n{\n    PurchaseOrder po = GetPurchaseOrder();\n\n    XNamespace or = \"https://www.oreilly.com\";\n\n    XElement poXml =\n        new XElement(or + nameof(PurchaseOrder),\n            new XElement(\n                or + nameof(PurchaseOrder.Address),\n                po.Address),\n            new XElement(\n                or + nameof(PurchaseOrder.CompanyName),\n                po.CompanyName),\n            new XElement(\n                or + nameof(PurchaseOrder.Phone),\n                po.Phone),\n            new XElement(\n                or + nameof(PurchaseOrder.Status),\n                po.Status),\n            new XElement(\n                or + nameof(PurchaseOrder.AdditionalInfo),\n                (from info in po.AdditionalInfo\n                 select\n                     new XElement(\n                         or + info.Key,\n                         info.Value))\n                .ToList()),\n            new XElement(\n                or + nameof(PurchaseOrder.Items),\n                (from item in po.Items\n                 select new XElement(\n                     or + nameof(PurchaseItem),\n                     new XAttribute(\n                         nameof(PurchaseItem.SerialNumber),\n                         item.SerialNumber),\n                     new XElement(\n                         or + nameof(PurchaseItem.Description),\n                         item.Description),\n                     new XElement(\n                         or + nameof(PurchaseItem.Price),\n                         item.Price),\n                     new XElement(\n                         or + nameof(PurchaseItem.Quantity),\n                         item.Quantity)))\n                .ToList()));\n\n    Console.WriteLine(poXml);\n}\n```", "```cs\n<PurchaseOrder xmlns=\"https://www.oreilly.com\">\n  <Address>123 4th St.</Address>\n  <CompanyName>Acme, Inc.</CompanyName>\n  <Phone>555-835-7609</Phone>\n  <Status>Received</Status>\n  <AdditionalInfo>\n    <Terms>Net 30</Terms>\n    <POC>J. Smith</POC>\n  </AdditionalInfo>\n  <Items>\n    <PurchaseItem SerialNumber=\"123\">\n      <Description>Widget</Description>\n      <Price>13.95</Price>\n      <Quantity>5</Quantity>\n    </PurchaseItem>\n  </Items>\n</PurchaseOrder>\n```", "```cs\npublic class Url\n{\n    /// <summary>\n    /// Implements Percent Encoding according to RFC 3986\n    /// </summary>\n    /// <param name=\"value\">string to be encoded</param>\n    /// <returns>Encoded string</returns>\n    public static string PercentEncode(\n        string? value, bool isParam = true)\n    {\n        const string IsParamReservedChars = @\"`!@#$^&*+=,:;'?/|\\[] \";\n        const string NoParamReservedChars = @\"`!@#$^&*()+=,:;'?/|\\[] \";\n\n        var result = new StringBuilder();\n\n        if (string.IsNullOrWhiteSpace(value))\n            return string.Empty;\n\n        var escapedValue = EncodeDataString(value);\n\n        var reservedChars =\n            isParam ? IsParamReservedChars : NoParamReservedChars;\n\n        foreach (char symbol in escapedValue)\n        {\n            if (reservedChars.IndexOf(symbol) != -1)\n                result.Append(\n                    '%' +\n                    string.Format(\"{0:X2}\", (int)symbol).ToUpper());\n            else\n                result.Append(symbol);\n        }\n\n        return result.ToString();\n    }\n\n    /// <summary>\n    /// URL-encode a string of any length.\n    /// </summary>\n    static string EncodeDataString(string data)\n    {\n        // the max length in .NET 4.5+ is 65520\n        const int maxLength = 65519;\n\n        if (data.Length <= maxLength)\n            return Uri.EscapeDataString(data);\n\n        var totalChunks = data.Length / maxLength;\n\n        var builder = new StringBuilder();\n        for (var i = 0; i <= totalChunks; i++)\n        {\n            string? chunk =\n                i < totalChunks ?\n                    data[(maxLength * i)..maxLength] :\n                    data[(maxLength * i)..];\n\n            builder.Append(Uri.EscapeDataString(chunk));\n        }\n        return builder.ToString();\n    }\n}\n```", "```cs\nstatic string EscapeUrlParams(string originalUrl)\n{\n    const int Base = 0;\n    const int Parms = 1;\n    const int Key = 0;\n    const int Val = 1;\n    string[] parts = originalUrl.Split('?');\n    string[] pairs = parts[Parms].Split('&');\n\n    string escapedParms =\n        string.Join('&',\n            (from pair in pairs\n             let keyVal = pair.Split('=')\n             let encodedVal = Url.PercentEncode(keyVal[Val])\n             select $\"{keyVal[Key]}={encodedVal}\")\n            .ToList());\n\n    return $\"{parts[Base]}?{escapedParms}\";\n}\n```", "```cs\nstatic void Main()\n{\n    const string OriginalUrl =\n        \"https://myco.com/po/search?company=computers+\";\n    Console.WriteLine($\"Original:    '{OriginalUrl}'\");\n\n    string escapedUri = Uri.EscapeUriString(OriginalUrl);\n    Console.WriteLine($\"Escape URI:  '{escapedUri}'\");\n\n    string escapedData = Uri.EscapeDataString(OriginalUrl);\n    Console.WriteLine($\"Escape Data: '{escapedData}'\");\n\n    string escapedUrl = EscapeUrlParams(OriginalUrl);\n    Console.WriteLine($\"Escaped URL: '{escapedUrl}'\");\n}\n```", "```cs\nOriginal:    'https://myco.com/po/search?company=computers+'\nEscape URI:  'https://myco.com/po/search?company=computers+'\nEscape Data: 'https%3A%2F%2Fmyco.com%2Fpo%2Fsearch%3Fcompany\n%3Dcomputers%2B'\nEscaped URL: 'https://myco.com/po/search?company=computers%2B'\n```", "```cs\npublic static class StringExtensions\n{\n    static readonly string[] dateFormats =\n    {\n        \"ddd MMM dd HH:mm:ss %zzzz yyyy\",\n        \"yyyy-MM-dd\\\\THH:mm:ss.000Z\",\n        \"yyyy-MM-dd\\\\THH:mm:ss\\\\Z\",\n        \"yyyy-MM-dd HH:mm:ss\",\n        \"yyyy-MM-dd HH:mm\"\n    };\n\n    public static DateTime GetDate(\n        this string date,\n        DateTime defaultValue)\n    {\n        return string.IsNullOrWhiteSpace(date) ||\n            !DateTime.TryParseExact(\n                    date,\n                    dateFormats,\n                    CultureInfo.InvariantCulture,\n                    DateTimeStyles.AssumeUniversal |\n                    DateTimeStyles.AdjustToUniversal,\n                    out DateTime result)\n                ? defaultValue\n                : result;\n    }\n\n    public static DateTime GetDate(\n        this JsonElement json,\n        string propertyName,\n        DateTime defaultValue = default)\n    {\n        string? date = json.GetString(propertyName);\n        return date?.GetDate(defaultValue) ?? defaultValue;\n    }\n\n    public static string? GetString(\n        this JsonElement json,\n        string propertyName,\n        string? defaultValue = default)\n    {\n        if (!json.IsNull() &&\n            json.TryGetProperty(propertyName, out JsonElement element))\n            return element.GetString() ?? defaultValue;\n\n        return defaultValue;\n    }\n\n    public static bool IsNull(this JsonElement json)\n    {\n        return\n            json.ValueKind == JsonValueKind.Undefined ||\n            json.ValueKind == JsonValueKind.Null;\n    }\n}\n```", "```cs\nstatic void Main()\n{\n    const string TweetID = \"1305895383260782593\";\n    const string CreatedDate = \"created_at\";\n\n    string tweetJson = GetTweet(TweetID);\n\n    JsonElement tweetElem = JsonDocument.Parse(tweetJson).RootElement;\n\n    DateTime created = tweetElem.GetDate(CreatedDate);\n\n    Console.WriteLine($\"Created Date: {created}\");\n}\n\nstatic string GetTweet(string tweetID)\n{\n    return @\"{\n \"\"text\"\": \"\"Thanks @github for approving sponsorship for\n LINQ to Twitter: https://t.co/jWeDEN07HN\"\",\n \"\"id\"\": \"\"1305895383260782593\"\",\n \"\"author_id\"\": \"\"15411837\"\",\n \"\"created_at\"\": \"\"2020-09-15T15:44:56.000Z\"\"\n }\";\n}\n```"]