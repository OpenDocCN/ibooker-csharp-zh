- en: Chapter 2\. AWS Core Services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章 AWS核心服务
- en: The most popular raw materials to build a house include steel, brick, stone,
    and wood. These raw materials each have unique properties that enable a home builder
    to construct a house. Similarly, AWS Core Services are the foundational materials
    necessary to build complex systems. From a high level, these services include
    computing and storage.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 构建房屋最流行的原材料包括钢铁、砖块、石头和木材。这些原材料各具独特的属性，使得建筑师能够建造房屋。类似地，AWS核心服务是构建复杂系统所需的基础材料。从高层次来看，这些服务包括计算和存储。
- en: When home builders construct a home, they follow comprehensive building codes,
    typically pulled from an international standard known as the [I-Codes](https://oreil.ly/MLp72).
    According to the International Code Council, these modern safety codes aim to
    help ensure the engineering of “safe, sustainable, affordable and resilient structures.”
    Similarly, the [AWS Well-Architected Framework](https://oreil.ly/Nxhnd) provides
    “guidance to help customers apply best practices in design, delivery, and maintenance
    of AWS environments,” according to AWS.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当房屋建造者建造房屋时，他们遵循全面的建筑规范，通常从一种被称为[I-Codes](https://oreil.ly/MLp72)的国际标准中获取。根据国际代码理事会，这些现代安全规范旨在帮助确保“安全、可持续、经济实惠和弹性结构”的工程。类似地，[AWS
    Well-Architected Framework](https://oreil.ly/Nxhnd)根据AWS的说法提供“指导，帮助客户在设计、交付和维护AWS环境中应用最佳实践”。
- en: 'These [general design principles](https://oreil.ly/IVCQk) are critical in understanding
    how to use AWS Core Services effectively. Let’s briefly discuss them:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这些[通用设计原则](https://oreil.ly/IVCQk)在有效使用AWS核心服务方面至关重要。让我们简要讨论它们：
- en: Stop guessing your capacity needs
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 停止猜测您的容量需求
- en: In a nutshell, it is a poor strategy to guess capacity. Instead, a system should
    incorporate the ability to add or remove resources dynamically.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，猜测容量是一种不良策略。相反，系统应该具备动态添加或移除资源的能力。
- en: Test systems at production scale
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产规模上测试系统
- en: The cloud allows for fully automated provisioning of resources; this allows
    a developer to test an application in an identical environment to production.
    The ability to replicate a production environment solves the “it works on my machine”
    problem endemic to the software engineering industry.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 云允许资源的完全自动化配置；这使得开发人员能够在与生产环境完全相同的环境中测试应用程序。能够复制生产环境解决了软件工程行业普遍存在的“在我的机器上可行”的问题。
- en: Automate to make architectural experimentation easier
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化以简化架构实验
- en: Automation results in less work over the long term, allowing the developer to
    audit, track changes, and revert them if needed.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化会在长期内减少工作量，使开发人员能够审计、跟踪变更并在需要时回滚。
- en: Allow for evolutionary architectures
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 允许演进式架构
- en: The core idea is to design a system you expect to change. When designing software,
    we should consider dynamic natural systems such as trees and rivers versus static
    systems such as bridges or roads.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 核心思想是设计一个预期会变化的系统。在设计软件时，我们应该考虑动态的自然系统，例如树木和河流，而不是静态的系统，例如桥梁或道路。
- en: Drive architectures using data
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 利用数据驱动架构
- en: Data science is a popular discipline, but it doesn’t confine itself only to
    business problems. Software systems need to use data science to identify the changes
    necessary to keep the system performing as designed.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 数据科学是一门流行的学科，但它不仅仅局限于业务问题。软件系统需要利用数据科学来识别必要的变化，以保持系统按设计性能运行。
- en: Improve through game days
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 通过游戏日不断改进
- en: An adequately architected system needs to have a complete simulation run regularly;
    it may be impossible to test all scenarios thoroughly without this.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一个充分架构的系统需要定期进行完整的模拟运行；没有这样做可能无法彻底测试所有情景。
- en: Keep these principles in mind as we move through the chapter. Next, let’s discuss
    AWS storage in more detail.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续本章之前，请记住这些原则。接下来，让我们更详细地讨论AWS存储。
- en: AWS Storage
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS存储
- en: Storage is an excellent example of a topic that, on the surface, is simple but
    can quickly explode into complexity. At the core of storage for AWS is Amazon
    Simple Storage Service, also known as [AWS S3](https://docs.aws.amazon.com/s3/index.xhtml).
    It launched in 2006 as one of the first services available to the public from
    AWS. As of 2021, there are 100 trillion objects stored in S3.^([1](ch02.xhtml#idm45599658074352))
    If you want an example of “big data,” this is as good as it gets.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 存储是一个简单表面上看起来简单但可以迅速复杂化的示例。在AWS存储的核心是Amazon简单存储服务，也称为[AWS S3](https://docs.aws.amazon.com/s3/index.xhtml)。它于2006年推出，是AWS向公众提供的第一个服务之一。截至2021年，存储在S3中的对象数量为100万亿。^([1](ch02.xhtml#idm45599658074352))如果你想要一个“大数据”的例子，这就是最好的。
- en: 'While S3 is the first storage solution launched by AWS, there are many other
    options. Using a .NET developer-centric view, one way to begin is to divide storage
    into two broad categories: core storage and database.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然S3是AWS推出的第一个存储解决方案，但还有许多其他选择。以.NET开发者为中心的观点，开始的一种方式是将存储分为两大类：核心存储和数据库。
- en: Let’s break down both briefly.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要地分解这两者。
- en: Core storage
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 核心存储
- en: Core storage refers to the low-level storage components used by all services
    on AWS, and examples include both object-storage Amazon S3 and Amazon Elastic
    Block Store (EBS). AWS core storage options include object-storage Amazon S3,
    [Amazon Elastic Block Store (EBS)](https://aws.amazon.com/ebs), fully managed
    network file storage such as [Amazon File System (EFS)](https://aws.amazon.com/efs),
    and [Amazon FSx for Windows File Server](https://aws.amazon.com/fsx/windows) (an
    example of one type of FSx option) and finally, utility storage services which
    include [AWS Backup and Storage Gateway](https://oreil.ly/3Zz6U).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 核心存储指的是AWS所有服务使用的低级存储组件，包括对象存储 Amazon S3 和 Amazon Elastic Block Store (EBS)。AWS核心存储选项包括对象存储
    Amazon S3，[Amazon Elastic Block Store (EBS)](https://aws.amazon.com/ebs)，完全托管的网络文件存储，如
    [Amazon File System (EFS)](https://aws.amazon.com/efs)，以及 [Amazon FSx for Windows
    File Server](https://aws.amazon.com/fsx/windows)（FSx选项的一个示例），最后还包括[AWS备份和存储网关](https://oreil.ly/3Zz6U)等实用存储服务。
- en: Database
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库
- en: At a high level, a database is an organized collection of data accessed from
    a computer system. Database storage options include relational databases, including
    [Amazon RDS](https://aws.amazon.com/rds), key-value databases, [Amazon DynamoDB](https://aws.amazon.com/dynamodb),
    and special-purpose databases like [Amazon Neptune](https://oreil.ly/XdkCw) (to
    query graph-based data).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 从高层次来看，数据库是从计算机系统访问的组织数据集合。数据库存储选项包括关系数据库，包括 [Amazon RDS](https://aws.amazon.com/rds)，键值数据库
    [Amazon DynamoDB](https://aws.amazon.com/dynamodb)，以及类似 [Amazon Neptune](https://oreil.ly/XdkCw)（用于查询基于图形的数据）的特殊用途数据库。
- en: With this breakdown out of the way, let’s dive deeper into developing with S3
    storage. S3 storage is critical to master since it offers various cost-effective
    tiers for dealing with object data.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们深入了解如何使用S3存储。掌握S3存储是至关重要的，因为它提供了多种成本效益的层次来处理对象数据。
- en: Developing with S3 Storage
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 S3 存储开发
- en: 'One way to look at S3 is as a high-level service that stores and retrieves
    objects at scale. For a developer, this perspective allows you to focus on developing
    the business logic for an application versus managing a high-performance object
    storage system. Let’s first identify the key benefits of Amazon S3:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一种看待 S3 的方式是作为一个高级服务，以规模存储和检索对象。对于开发者来说，这个视角使你可以专注于开发应用程序的业务逻辑，而不是管理高性能对象存储系统。让我们首先确定
    Amazon S3 的关键优势：
- en: Durability
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 耐久性
- en: '*Durability* refers to the concept of ensuring data is not lost. S3 Standard
    storage tier provides 99.999999999% (or eleven 9s) of [durability](https://aws.amazon.com/s3/faqs).'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*耐久性* 是指确保数据不丢失的概念。S3标准存储层提供了99.999999999%（即十一个9）的[耐久性](https://aws.amazon.com/s3/faqs)。'
- en: Availability
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 可用性
- en: '*Availability* refers to the concept of accessing your data when you need it.
    The S3 Standard storage tier has 99.99% (or four 9s) of availability.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*可用性* 是指在需要时访问数据的概念。S3标准存储层具有99.99%（即四个9）的可用性。'
- en: Scalability
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 可扩展性
- en: '*Scalability* is the ability to increase capacity to meet demand. S3 offers
    near-infinite capacity in disk I/O and storage as a managed service. It can store
    single objects of 5 TB or less.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*可扩展性* 是增加容量以满足需求的能力。S3作为托管服务，在磁盘I/O和存储方面提供几乎无限的容量。它可以存储大小不超过5TB的单个对象。'
- en: Security
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性
- en: S3 has both fine-grained access control and encryption in transit and rest.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: S3具有细粒度的访问控制以及在传输和静态状态下的加密。
- en: Performance
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 性能
- en: The performance of the S3 filesystem supports many different access patterns,
    including streaming, large files, machine learning, and big data.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: S3 文件系统的性能支持许多不同的访问模式，包括流式传输、大文件、机器学习和大数据。
- en: There are a few different ways to interact with S3 as a developer. The first
    option is through the .NET SDK. The example in [Chapter 1](ch01.xhtml#Chapter1)
    that lists the buckets in S3 is an excellent example of that process. You can
    also interact with S3 indirectly by using managed services that use S3\. Examples
    of these managed services that use S3 include AWS Athena^([2](ch02.xhtml#idm45599658047392))
    and AWS SageMaker. With [Athena](https://aws.amazon.com/athena), you can query
    all of S3 via serverless SQL queries but don’t need to worry about the logistics
    of dealing with servers. Likewise, Amazon SageMaker,^([3](ch02.xhtml#idm45599658045184))
    a fully managed machine learning service, heavily uses S3 to train machine learning
    models and store the model artifacts. A key reason for that is that S3 is serverless
    and scales without needing management by the user.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者与 S3 交互有几种不同的方式。第一种选项是通过 .NET SDK。在 [第一章](ch01.xhtml#Chapter1) 中列出 S3 存储桶的示例是这一过程的一个很好的例子。您还可以通过使用使用
    S3 的托管服务间接与 S3 交互。使用 S3 的这些托管服务的示例包括 AWS Athena^([2](ch02.xhtml#idm45599658047392))
    和 AWS SageMaker。通过 [Athena](https://aws.amazon.com/athena)，您可以通过无服务器 SQL 查询查询所有
    S3，但无需担心处理服务器的物流。同样，Amazon SageMaker^([3](ch02.xhtml#idm45599658045184))，一个完全托管的机器学习服务，大量使用
    S3 来训练机器学习模型和存储模型工件。其中一个关键原因是 S3 是无服务器的，并且无需用户管理即可扩展。
- en: Another way to use S3 is by tapping into the [S3 Lifecycle configuration](https://oreil.ly/g0lpM).
    The Lifecycle configuration allows sophisticated automated workflows to migrate
    data to different storage tiers and archive data. Let’s look at these storage
    classes.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种使用 S3 的方式是利用 [S3 生命周期配置](https://oreil.ly/g0lpM)。生命周期配置允许复杂的自动化工作流将数据迁移到不同的存储层级和归档数据。让我们看看这些存储类别。
- en: S3 Standard
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: S3 标准
- en: Ideal for frequently accessed data and helpful for various use cases, including
    cloud native applications, content, gaming, and big data.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 针对频繁访问的数据非常理想，并且对包括云原生应用、内容、游戏和大数据在内的各种用例都非常有帮助。
- en: S3 Standard IA (infrequent access)
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: S3 标准 IA（不经常访问）
- en: This storage class has the same benefits as S3 Standard but offers a different
    cost model, making it ideal for items like older log files since retrieval is
    a higher cost.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这种存储类别与 S3 标准具有相同的好处，但提供了不同的成本模型，使其非常适合诸如旧日志文件之类的项目，因为检索成本较高。
- en: S3 One Zone-IA
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: S3 单区域-IA
- en: The One-Zone ([storing data in a single availability zone](https://oreil.ly/suFRM))
    option is helpful for scenarios where the lowest cost possible is the goal. An
    example use case is a secondary backup because it is cost-effective as a secondary
    copy of data to protect against permanent loss due to the malfunction of the primary
    backup system.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 单区域 ([存储数据在单个可用区](https://oreil.ly/suFRM)) 选项对于希望最低成本的情况非常有帮助。一个示例用例是次要备份，因为它作为数据的次要副本在主要备份系统故障时保护数据免受永久丢失的影响而具有成本效益。
- en: Amazon S3 Glacier Deep Archive
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊 S3 冰川深度归档
- en: Glacier is a secure, durable, and low-cost option ideal for data archival. It
    works well with S3 Lifecycles as the end delivery point.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Glacier 是一个安全、耐用且成本低廉的选项，非常适合数据归档。它与 S3 生命周期配合良好，作为最终交付点。
- en: In [Figure 2-1](#Figure-2-0-1-s3-central), you can see how Amazon S3 plays a
    unique role as the hub of data activity beyond just storing media assets or HTML
    files. A challenging constraint in building global scale platforms or machine
    learning systems is storage capacity and disk I/O. AWS provides a core service,
    S3, that eliminates those constraints. As a result, the elastic nature of S3 with
    the near-infinite storage and disk I/O creates a new type of workflow where AWS-managed
    services build on top of this core service, for example, [AWS SageMaker](https://oreil.ly/x5n5M)
    or [AWS Glue](https://oreil.ly/XYwNg).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [图 2-1](#Figure-2-0-1-s3-central) 中，你可以看到亚马逊 S3 如何在数据活动的中心起到独特作用，不仅仅是存储媒体资产或
    HTML 文件。在构建全球规模平台或机器学习系统时的一个挑战性约束是存储容量和磁盘 I/O。AWS 提供了核心服务 S3，消除了这些约束。因此，S3 的弹性特性与近乎无限的存储和磁盘
    I/O 创造了一种新型工作流程，AWS 管理的服务建立在这个核心服务之上，例如 [AWS SageMaker](https://oreil.ly/x5n5M)
    或 [AWS Glue](https://oreil.ly/XYwNg)。
- en: '![doac 0201](assets/doac_0201.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0201](assets/doac_0201.png)'
- en: Figure 2-1\. S3 object storage as a central hub
  id: totrans-50
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-1\. S3 对象存储作为中心枢纽
- en: Note
  id: totrans-51
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注
- en: One of Noah’s favorite use cases for Amazon S3 is to host static websites. In
    the O’Reilly book *Python for DevOps*, he covers a [complete walk-through](https://learning.oreilly.com/library/view/python-for-devops/9781492057680/ch06.xhtml#idm46114712215640)
    of how to build a [Hugo](https://gohugo.io) website that uses [AWS CodePipeline](https://aws.amazon.com/codepipeline),
    Amazon S3, and [Amazon CloudFront CDN](https://aws.amazon.com/cloudfront). You
    can also view a walk-through of the steps necessary to deploy a Hugo S3 site on
    AWS on [YouTube](https://oreil.ly/3pLIJ) and [O’Reilly](https://oreil.ly/qRzVl).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 诺亚最喜欢的 Amazon S3 使用案例之一是托管静态网站。在 O’Reilly 的书籍 *Python for DevOps* 中，他详细介绍了如何构建一个使用
    [Hugo](https://gohugo.io) 网站，该网站使用 [AWS CodePipeline](https://aws.amazon.com/codepipeline)、Amazon
    S3 和 [Amazon CloudFront CDN](https://aws.amazon.com/cloudfront)。您还可以在 [YouTube](https://oreil.ly/3pLIJ)
    和 [O’Reilly](https://oreil.ly/qRzVl) 上查看部署 Hugo S3 网站到 AWS 所需步骤的详细演示。
- en: Another standout example of AWS building on top of S3 is the use of S3 for log
    files queried by [Athena](https://oreil.ly/3R0zl).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 利用 S3 的另一个突出例子是通过 [Athena](https://oreil.ly/3R0zl) 查询日志文件。
- en: Now that you understand the different storage classes for S3 object storage,
    let’s discuss Elastic Block Store (EBS) storage.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您了解了 S3 对象存储的不同存储类别，让我们讨论 Elastic Block Store（EBS）存储。
- en: Developing with EBS Storage
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 EBS 存储进行开发
- en: EBS is high-performance, network-attached storage. [EBS storage](https://aws.amazon.com/ebs)
    works by mounting block storage to an individual EC2 instance. EBS volumes act
    like raw, [unformatted block devices](https://oreil.ly/DiuJq) (physical hard drives)
    but are virtualized and available as a service. Finally, EBS is block-level storage
    attached to an EC2 instance as opposed to S3, which stands on its own, holds data
    as objects, and is accessible from many instances.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: EBS 是高性能的网络附加存储。[EBS 存储](https://aws.amazon.com/ebs) 通过将块存储挂载到单个 EC2 实例来工作。EBS
    卷类似于原始的 [未格式化的块设备](https://oreil.ly/DiuJq)（物理硬盘），但被虚拟化并作为服务提供。最后，EBS 是与 EC2 实例附加的块级存储，与
    S3 不同，后者独立存在，将数据存储为对象，并可从多个实例访问。
- en: Let’s discuss the key benefits and use cases of EBS.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论 EBS 的关键优势和使用场景。
- en: Benefits
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 优势
- en: EBS storage for data needs to be quickly accessed yet has long-term persistence.
    This storage type provides a dedicated high-performance network connection and
    the ability to provision dedicated disk I/O. Other key features include creating
    a snapshot for both backups to S3 or creating custom Amazon Machine Images (AMIs).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: EBS 存储用于数据需要快速访问但具有长期持久性。这种存储类型提供了专用的高性能网络连接和分配磁盘 I/O 的能力。其他关键功能包括为备份创建快照到 S3
    或创建自定义 Amazon Machine Images（AMIs）。
- en: Use cases
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用案例
- en: EBS storage is ideal for web applications and database storage. High-performance
    dedicated disk I/O also comes in handy for building high-performance file servers
    that share data via Server Message Block (SMB) or Network File System (NFS) protocol.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: EBS 存储非常适合 Web 应用程序和数据库存储。高性能的专用磁盘 I/O 也非常适合构建通过 Server Message Block（SMB）或
    Network File System（NFS）协议共享数据的高性能文件服务器。
- en: One notable use of EBS is that through [io2 Block Express](https://oreil.ly/K7hok)
    high-performance provisioned input/output operations per second (IOPs) allows
    for the creation of a “SAN in the Cloud” as shown in [Figure 2-2](#Figure-2-3-1-ebs-iops).
    Notice how EBS storage provisioned in this manner creates a high-performance Microsoft
    SQL server instance that serves as the focal point of a business intelligence
    (BI) system.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: EBS 的一个显著用途是通过 [io2 Block Express](https://oreil.ly/K7hok) 提供高性能的每秒 IOPS（输入/输出操作）创建“云中的
    SAN”，如 [Figure 2-2](#Figure-2-3-1-ebs-iops) 所示。注意，以这种方式配置的 EBS 存储能够创建一个高性能的 Microsoft
    SQL Server 实例，作为商业智能（BI）系统的核心。
- en: This BI web service could feature an ASP .NET web service provisioned through
    Elastic Beanstalk, thus allowing for rapid autoscaling as data-intensive queries
    peak during heavy usage. Other use cases of the “SAN in the cloud” concept include
    deploying high-performance NoSQL servers or specialized analytics platforms like
    SAP HANA or SAS Analytics.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 此 BI Web 服务可以通过 Elastic Beanstalk 提供 ASP .NET Web 服务，从而在数据密集型查询在高峰期间达到峰值时实现快速自动扩展。“云中的
    SAN” 概念的其他使用案例包括部署高性能 NoSQL 服务器或专业分析平台，如 SAP HANA 或 SAS Analytics。
- en: '![doac 0202](assets/doac_0202.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0202](assets/doac_0202.png)'
- en: Figure 2-2\. EBS SAN in the cloud with SQL server
  id: totrans-65
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-2\. 云中带有 SQL Server 的 EBS SAN
- en: Note
  id: totrans-66
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Another type of storage is [instance storage](https://oreil.ly/tHqaY). This
    storage type is temporary block storage for instances and is ideal for buffers,
    caches, or scratch partitions. A key difference with instance storage is that
    you cannot detach an instance store volume from one instance and attach it to
    a different instance. Unlike EBS storage, instance storage terminates when the
    instance stops, hibernates, terminates, or fails the underlying disk drive.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种存储类型是[实例存储](https://oreil.ly/tHqaY)。这种存储类型是实例的临时块存储，非常适合缓冲区、缓存或临时分区。与实例存储的一个关键区别是，您不能将实例存储卷从一个实例分离并附加到另一个实例上。与EBS存储不同，实例存储在实例停止、休眠、终止或磁盘驱动器失败时终止。
- en: 'There’s one use case that EBS does not address: if you have multiple instances
    that need to use the same storage, you need a new solution. In this case, you
    could use both Amazon EFS and Amazon FSx for Windows File Server. Let’s discuss
    this topic next.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个EBS无法解决的使用案例：如果您有多个需要使用同一存储的实例，您需要一个新的解决方案。在这种情况下，您可以同时使用Amazon EFS和Amazon
    FSx for Windows File Server。我们接下来讨论这个话题。
- en: 'Using Network Storage: EFS and FSx'
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用网络存储：EFS和FSx
- en: In the early internet era of the late 1990s and early 2000s, network storage
    was a large part of how large-scale Unix computer networks worked at universities
    and commercial organizations. NFS, or the Network File System, is a protocol developed
    by Sun Microsystems in 1984 and became ubiquitous in that early internet era.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在20世纪90年代末和21世纪初的早期互联网时代，网络存储是大规模Unix计算机网络在大学和商业组织中运行的重要组成部分。NFS或网络文件系统是Sun
    Microsystems在1984年开发的协议，在那个早期互联网时代变得无处不在。
- en: One key issue NFS storage solved early on is the ability to create a portable
    home directory. This capability meant that users could create a terminal-based
    connection from any workstation and their shell configuration files and data were
    available. The downside of NFS storage-based systems is that the NFS file server
    is the central hub; as a result, it often causes a bottleneck in workflows as
    the system is overwhelmed with requests.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: NFS存储早期解决的一个关键问题是能够创建可移动的个人主目录。这种能力意味着用户可以从任何工作站创建基于终端的连接，并且他们的shell配置文件和数据是可用的。基于NFS存储的系统的缺点是NFS文件服务器是中心枢纽；因此，它经常在工作流程中造成瓶颈，因为系统被请求压倒。
- en: When the cloud era arrived in the early 2000s, many organizations moved to the
    cloud and built systems that didn’t utilize centralized network storage anymore.
    Instead, they moved to block storage mounted on one machine or object stored mounted
    via a distributed filesystem like Hadoop. With the availability of [EFS](https://aws.amazon.com/efs)
    (managed NFS) and [FSx](https://aws.amazon.com/fsx/windows) (managed Windows network
    storage), the advantages of a centralized network mount point are back without
    the drawback of bottlenecks from the poor performance of centralized file servers.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 早在21世纪初的云计算时代到来时，许多组织转向了云端，并建立了不再使用集中式网络存储的系统。相反，他们转向了挂载在一台机器上的块存储，或者通过像Hadoop这样的分布式文件系统挂载的对象存储。随着[EFS](https://aws.amazon.com/efs)（托管NFS）和[FSx](https://aws.amazon.com/fsx/windows)（托管Windows网络存储）的可用性，集中式网络挂载点的优势回归，而没有了集中式文件服务器性能不佳的缺点。
- en: A great example of NFSOps is shown in [Figure 2-3](#Figure-2-0-2-nfsops). NFSOps
    describes using a network file system as a method of deploying software and configuration.
    Changes to the source code in GitHub trigger a build process through a [Jenkins](https://www.jenkins.io)
    deployment server. This deployment server has an EFS mount point associated with
    it. As a result, the build server can use Rsync to deploy the script changes to
    the network mount point in a few milliseconds.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: NFSOps的一个很好的示例显示在[Figure 2-3](#Figure-2-0-2-nfsops)中。NFSOps描述了使用网络文件系统作为部署软件和配置的方法。在GitHub中对源代码的更改触发了通过[Jenkins](https://www.jenkins.io)部署服务器的构建过程。这个部署服务器有一个与之关联的EFS挂载点。因此，构建服务器可以使用Rsync将脚本更改部署到网络挂载点，仅需几毫秒的时间。
- en: With the deployment process solved, this diagram shows a real-world solution
    used in a computer vision system. Because this particular workload uses access
    to centralized storage, this workflow mounts EFS as the “source of truth,” allowing
    thousands of spot instances to use, read, and write data simultaneously. Further,
    the source code that performs the read and writes operations is stored on the
    EFS volume, dramatically simplifying configuration and deployment.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 部署过程解决后，此图显示了在计算机视觉系统中使用的真实解决方案。由于这个特定的工作负载使用对集中式存储的访问，所以这个工作流程将EFS挂载为“真相的来源”，允许成千上万的spot实例同时使用、读取和写入数据。此外，执行读写操作的源代码存储在EFS卷上，极大地简化了配置和部署。
- en: '![doac 0203](assets/doac_0203.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0203](assets/doac_0203.png)'
- en: 'Figure 2-3\. NFSOPs: using NFS storage to enhance operations'
  id: totrans-76
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-3\. NFSOPs：使用NFS存储增强操作
- en: For .NET developers, there are also many exciting new workflows opened up by
    FSx for Windows. An excellent example in [Figure 2-4](#Figure-2-3-2-media-content)
    shows an FSx mount point that communicates with multiple instances of an Elastic
    Beanstalk–hosted .NET web service.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于.NET开发人员来说，FSx for Windows也开启了许多令人兴奋的新工作流程。在[图 2-4](#Figure-2-3-2-media-content)中的一个出色示例展示了一个FSx挂载点，该挂载点与托管在Elastic
    Beanstalk上的多个.NET Web服务实例通信。
- en: Another standard workflow for FSx is to develop feature films by mounting the
    storage endpoint for each editing workstation. In this [AWS blog post](https://oreil.ly/9pwQk),
    you can read about how a film company used the editing software package DaVinci
    Resolve on AWS to create a feature film from home editing suites. Using FSx as
    a central file system in an animated film pipeline for major motion pictures is
    becoming a popular option for media companies. Because the web service can mount
    the file system, it can track the location of the assets as part of an asset management
    workflow. When an animator needs to render the entire file sequence, they send
    the work to ECS for batch processing. Since ECS also has access to the [same file
    system](https://oreil.ly/Kf1q4), it allows for fast and seamless integration to
    the workflow for animators.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个FSx的标准工作流程是通过挂载存储端点为每个编辑工作站开发特色电影。在这篇[AWS博客文章](https://oreil.ly/9pwQk)中，你可以了解到一个影视公司如何利用AWS上的DaVinci
    Resolve编辑软件包在家庭编辑套件上创建一部特色电影。在主要电影制作流水线中使用FSx作为中央文件系统，已成为媒体公司的一种流行选项。因为Web服务可以挂载文件系统，所以它可以作为资产管理工作流程的一部分跟踪资产的位置。当动画师需要渲染整个文件序列时，他们将工作发送到ECS进行批处理处理。由于ECS还可以访问[同一文件系统](https://oreil.ly/Kf1q4)，这使得动画师的工作流程集成快速而无缝。
- en: '![doac 0204](assets/doac_0204.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0204](assets/doac_0204.png)'
- en: Figure 2-4\. FSx for Windows in media workflow
  id: totrans-80
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-4\. 媒体工作流程中的FSx for Windows
- en: Note
  id: totrans-81
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The media industry has a long history of high-performance file servers coupled
    with high-performance computing (HPC) clusters. An excellent example of a modern
    cloud-based version is [this blog post on virtual production](https://oreil.ly/si1VM)
    with Epic Games using FSx.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体行业长期以来一直使用高性能文件服务器和高性能计算（HPC）集群。现代基于云的版本的一个优秀例子是[Epic Games使用FSx的虚拟制作的博客文章](https://oreil.ly/si1VM)。
- en: Using either EFS or FSx for Windows opens up new cloud-native architectures
    and is worth investigating further using the example tutorial on the [AWS documentation
    website](https://oreil.ly/NZMNd). Next, let’s discuss compute options available
    on AWS.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用EFS或FSx for Windows都可以开启新的云原生架构，值得进一步研究，可以使用[AWS文档网站上的示例教程](https://oreil.ly/NZMNd)进行深入探讨。接下来，让我们讨论AWS上可用的计算选项。
- en: Using AWS Compute Core Services
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AWS计算核心服务
- en: Amazon EC2 provides resizable compute capacity with several essential details,
    including the ability to provision servers in minutes, automatically scale instances
    up or down, and only pay for the capacity you need. A necessary aspect of this
    service is that elasticity is built into the foundation of both the service and
    the integration with other AWS services.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon EC2提供可调整的计算能力，包括在几分钟内配置服务器、自动扩展实例，以及只支付所需容量的能力。这项服务的一个必要方面是弹性内置于服务的基础及其与其他AWS服务的集成中。
- en: Use cases for EC2 instances include servers ranging from web to database, where
    a developer wants more fine-grained control of the deployment process. While managed
    services like AWS App Runner offer a huge convenience over managing servers yourself,
    there are scenarios where a developer needs lower-level access to the EC2 instances.
    This service also allows complete control of the computing resources, meaning
    you can spin up a Linux and a Microsoft Windows instance. Further, you can optimize
    costs by using different pricing plans.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: EC2 实例的使用案例包括从 Web 到数据库的服务器，其中开发人员希望更精细地控制部署过程。虽然像 AWS App Runner 这样的托管服务比自行管理服务器方便得多，但在开发人员需要对
    EC2 实例进行较低级别访问的情况下，也存在一些场景。此服务还允许完全控制计算资源，这意味着您可以启动 Linux 和 Microsoft Windows
    实例。此外，您还可以通过使用不同的定价计划来优化成本。
- en: Next, let’s explore these different compute options in finer-grained detail.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们更详细地探讨这些不同的计算选项。
- en: Comparison of AWS Compute Core Services
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS 计算核心服务比较
- en: 'Another way to think about AWS EC2 is to look at how the official documentation
    [compares AWS compute resources](https://aws.amazon.com/products/compute) in a
    more granular manner than discussed earlier in the chapter. In their official
    [“Overview of Amazon Web Services” whitepaper](https://oreil.ly/3HihF), AWS breaks
    down computing into several categories:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种理解 AWS EC2 的方式是查看官方文档 [比较 AWS 计算资源](https://aws.amazon.com/products/compute)
    的更细粒度方式，这比本章早些时候讨论的要详细。在他们的官方 [“Amazon Web Services 概述” 白皮书](https://oreil.ly/3HihF)
    中，AWS 将计算划分为几个类别：
- en: Instances (virtual machines)
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 实例（虚拟机）
- en: Secure, resizable compute capacity in the cloud. EC2 instances and AWS Batch
    (fully managed batch processing at any scale) are two examples.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在云中提供安全可调整的计算能力。EC2 实例和 AWS Batch（任意规模的完全托管批处理处理）是其中的两个例子。
- en: Containers
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 容器
- en: Containers provide a standard way to package your application into a single
    image. According to the AWS documentation, running containers on AWS “provides
    developers and admins a highly reliable, low-cost way to build, ship, and run
    distributed applications at any scale.” Examples include AWS App Runner^([4](ch02.xhtml#idm45599657961904))
    and Amazon Elastic Container Service (ECS).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 容器提供了一种将应用程序打包成单一镜像的标准方式。根据 AWS 文档，将容器在 AWS 上运行“为开发人员和管理员提供了一种高度可靠且低成本的方式来构建、发布和运行分布式应用程序”。例子包括
    AWS App Runner^([4](ch02.xhtml#idm45599657961904)) 和 Amazon 弹性容器服务（ECS）。
- en: Serverless
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器
- en: This computing service allows running code without provisioning or managing
    infrastructure and responding to events at any scale. AWS Lambda is an example
    of serverless technology.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这种计算服务允许在不需要预配或管理基础设施的情况下运行代码，并响应任意规模的事件。AWS Lambda 是无服务器技术的一个例子。
- en: Edge and hybrid
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 边缘和混合
- en: Edge services process data close to where the data resides versus processing
    in a data center. This service delivers a consistent AWS experience wherever you
    need it by providing the ability to use the cloud, on-premise, or at the edge.
    AWS Snow Family is an example.^([5](ch02.xhtml#idm45599657958272))
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 边缘服务在数据所在地附近处理数据，而不是在数据中心处理。这种服务通过提供在云端、本地或边缘使用的能力，为您提供了一致的 AWS 使用体验。AWS Snow
    Family 就是一个例子。^([5](ch02.xhtml#idm45599657958272))
- en: Cost and capacity management
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 成本和容量管理
- en: AWS helps you determine cost and capacity management by providing services and
    tools. It is up to the customer to test workloads against the recommended instance
    types to fine-tune price performance. Elastic Beanstalk is an example of one of
    the services in this category.^([6](ch02.xhtml#idm45599657955440))
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 通过提供服务和工具来帮助您确定成本和容量管理。客户可以根据推荐的实例类型测试工作负载，以优化价格性能。弹性 Beanstalk 就是这一类别中的一个服务的例子。^([6](ch02.xhtml#idm45599657955440))
- en: Another way to reason about these choices is represented in [Figure 2-5](#Figure-2-0-compute-choices).
    Note that there is an inverse relationship between higher infrastructure control
    and faster application deployment. Fully managed services that also include additional
    production features like AWS Lambda and Fargate are at the far extreme, allowing
    for the quickest application development and deployment. This relationship is
    not a perfect rule in all situations, and exceptions exist, perhaps in a condition
    where developing an AWS Lambda microservice is harder to build and deploy than
    an AWS App Runner microservice for a particular domain.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种推理这些选择的方式在[图 2-5](#Figure-2-0-compute-choices)中表示。请注意，高级基础设施控制和快速应用部署之间存在反向关系。完全托管的服务还包括AWS
    Lambda和Fargate等额外的生产特性，允许最快的应用程序开发和部署。在某些情况下，这种关系并不是绝对规则，存在例外，也许在某个特定领域，开发AWS
    Lambda微服务比开发AWS App Runner微服务更难建立和部署。
- en: '![doac 0205](assets/doac_0205.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0205](assets/doac_0205.png)'
- en: Figure 2-5\. AWS compute choices
  id: totrans-102
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-5\. AWS计算选择
- en: With our knowledge of EC2 core services, let’s talk about getting started with
    EC2.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 通过我们对EC2核心服务的了解，让我们谈谈如何开始使用EC2。
- en: Using EC2
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用EC2
- en: 'At the surface level, EC2 “just works” by allowing you to launch a compute
    instance and use it for tasks. At a deeper level, EC2 has a [vast collection of
    features](https://oreil.ly/AiRbJ). From a developer’s perspective, let’s dive
    into key parts of EC2 worth noting:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 表面上看，EC2通过允许您启动计算实例并用于任务来“只是工作”。在更深层次上，EC2具有[广泛的功能集合](https://oreil.ly/AiRbJ)。从开发者的角度来看，让我们深入探讨EC2的关键部分：
- en: Amazon Machine Images (AMIs)
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon机器映像（AMIs）
- en: AMIs are preconfigured templates that conveniently install the software necessary
    for a server instance. There are AWS-recommended AMIs for Linux, [Windows](https://oreil.ly/7ymoo),
    and even macOS. Notice in [Figure 2-6](#Figure-2-1-ami) that the AMI Catalog is
    accessible by navigating inside the AWS console to the EC2 dashboard and selecting
    images. The quickstart AMIs are the commonly used AMIs, including Amazon Linux
    2 and Windows. The “My AMIs” section is where custom AMIs appear. Finally, there
    is both a marketplace and a community of AMIs available.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: AMI是预配置的模板，方便地安装服务器实例所需的软件。有适用于Linux的AWS推荐的AMI，[Windows](https://oreil.ly/7ymoo)，甚至是macOS的AMI。请注意，在[图 2-6](#Figure-2-1-ami)中，AMI目录可通过在AWS控制台内导航到EC2仪表板并选择镜像来访问。快速入门AMI是常用的AMI，包括Amazon
    Linux 2和Windows。 “我的AMI”部分显示自定义AMI。最后，市场和社区均提供了AMI。
- en: '![doac 0206](assets/doac_0206.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0206](assets/doac_0206.png)'
- en: Figure 2-6\. AMI Catalog
  id: totrans-109
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-6\. AMI目录
- en: Instance types
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 实例类型
- en: In total, hundreds of [instance types](https://aws.amazon.com/ec2/instance-types),
    arranged by category, including Compute Optimized, Memory Optimized, Accelerated
    Computing (hardware accelerators), and Storage Optimized. A best practice is to
    assess the needs of your application and perform load testing to ensure it meets
    the cost and performance requirements you expect.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 总共有数百种[实例类型](https://aws.amazon.com/ec2/instance-types)，按类别排列，包括计算优化、内存优化、加速计算（硬件加速器）和存储优化。一个最佳实践是评估您的应用程序的需求，并进行负载测试，以确保它满足您期望的成本和性能要求。
- en: Firewall
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 防火墙
- en: EC2 has a firewall called [security groups](https://oreil.ly/05rcL) that enables
    granular configuration of protocols, ports, and IP ranges for inbound and outbound
    access to instances.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: EC2具有名为[安全组](https://oreil.ly/05rcL)的防火墙，可用于对实例的入站和出站访问进行协议、端口和IP范围的精细配置。
- en: Metadata
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 元数据
- en: You can create and use tags to enable resource tracking and automation of EC2
    instances.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以创建和使用标签来启用EC2实例的资源跟踪和自动化。
- en: Elastic IP addresses
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 弹性IP地址
- en: Static IPv4 addresses can be dynamically assigned to EC2 instances, thus enhancing
    elasticity and automation.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 静态IPv4地址可以动态分配给EC2实例，从而增强了弹性和自动化。
- en: Virtual Private Clouds (VPC)
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟私有云（VPC）
- en: While VPC is a separate service, it has [deep integration](https://oreil.ly/7rcng)
    with EC2\. Virtual networks create an isolated environment with precise controls
    for connecting to other resources in AWS.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然VPC是一个独立的服务，但它与EC2有[深度集成](https://oreil.ly/7rcng)。虚拟网络创建了一个与其他AWS资源精确控制连接的隔离环境。
- en: With the basics out of the way, let’s look at what is involved in provisioning
    an EC2 instance in [Figure 2-7](#Figure-2-1-2-provisioning-ec2). Notice how the
    instance launch can also use “User data” to assign custom commands at launch or
    select between EBS or instance storage. Other critical decisions include setting
    up a security group that opens up ports necessary for networking between services.
    Other configurable options include selecting the appropriate IAM role and giving
    the EC2 instance the ability to communicate with Amazon S3.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 基础知识介绍完毕，让我们来看看在[图2-7](#Figure-2-1-2-provisioning-ec2)中如何配置EC2实例。请注意，实例启动还可以使用“用户数据”在启动时分配自定义命令或在EBS和实例存储之间进行选择。其他关键决策包括设置开放必要服务之间网络通信所需端口的安全组。其他可配置选项包括选择适当的IAM角色，并为EC2实例赋予与Amazon
    S3通信的能力。
- en: '![doac 0207](assets/doac_0207.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0207](assets/doac_0207.png)'
- en: Figure 2-7\. Provisioning an EC2 instance
  id: totrans-122
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2-7\. 配置EC2实例
- en: Note
  id: totrans-123
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You can view an entire walk-through of how to provision EC2 instances from AWS
    CloudShell or the AWS Console in the following [YouTube Video](https://oreil.ly/4FvEP)
    or on [O’Reilly](https://oreil.ly/rltV3).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下[YouTube视频](https://oreil.ly/4FvEP)或在[O’Reilly](https://oreil.ly/rltV3)上查看如何从AWS
    CloudShell或AWS控制台配置EC2实例的完整演练。
- en: 'It is essential to mention that a regular Bash terminal works well for automating
    EC2\. Notice the following commands that launch an instance, describe it, then
    terminate it:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，普通的Bash终端非常适合自动化EC2。请注意以下命令，启动一个实例，描述它，然后终止它：
- en: '[PRE0]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-127
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: A recommended resource for doing a deep dive on EC2 instance types is the AWS
    Knowledge Center document [“How do I choose the appropriate EC2 instance type
    for my workload?”](https://oreil.ly/Lop74)
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 建议深入研究EC2实例类型的资源是AWS Knowledge Center文档[“如何为我的工作负载选择合适的EC2实例类型？”](https://oreil.ly/Lop74)
- en: Now that you know how to use EC2 in more detail, let’s discuss networking with
    EC2.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经更详细地了解如何使用EC2，让我们讨论与EC2的网络连接。
- en: Networking
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络
- en: AWS networking consists of a global infrastructure that enables EC2 instances
    to work globally and is reliable and distributed. Notice in [Figure 2-8](#Figure-2-2-regions)
    that each region is distinct geographically and has multiple availability zones.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: AWS网络由全球基础设施组成，使EC2实例能够在全球范围内工作，并且是可靠且分布式的。请注意在[图2-8](#Figure-2-2-regions)中，每个地区在地理上都是独特的，并且有多个可用区。
- en: '![doac 0208](assets/doac_0208.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0208](assets/doac_0208.png)'
- en: Figure 2-8\. AWS regions and zones
  id: totrans-133
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2-8\. AWS地区和区域
- en: 'There are more than 25 regions globally and more than 85 availability zones.
    This data means each region has at least 3 availability zones on average. Fortunately,
    it is easy to use AWS CloudShell and PowerShell to get your region’s exact number
    of availability zones. Launch an instance of AWS CloudShell as a user with privileges
    to query EC2 via an IAM role. Next, import `AWSPowerShell.NetCore` and then query
    the available zones available in your AWS CloudShell’s region:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 全球有超过25个地区和超过85个可用区。这些数据意味着每个地区平均至少有3个可用区。幸运的是，可以使用AWS CloudShell和PowerShell轻松获取您地区确切的可用区数。作为具有查询EC2权限的用户，在AWS
    CloudShell中启动一个实例。接下来，导入`AWSPowerShell.NetCore`，然后查询AWS CloudShell所在地区的可用区：
- en: '[PRE1]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-136
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Under the region level, the AZs interconnect with high-bandwidth, low-latency
    networking, which is also encrypted. The network performance is sufficient to
    accomplish synchronous replication between AZs. The AZs are physically separated
    to achieve a real disaster recovery solution.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在地区级别下，AZ通过高带宽、低延迟的加密网络互联。网络性能足以在AZ之间实现同步复制。这些AZ在物理上分开，以实现真正的灾难恢复解决方案。
- en: 'You can get more fine-grained control by assigning the output to a PowerShell
    variable `$zones` and then using `$zones.count` to count the exact number of availability
    zones in your region in the status “available”:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过将输出分配给PowerShell变量`$zones`，然后使用`$zones.count`来计算状态“available”中您地区的可用区确切数量：
- en: '[PRE2]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output shows that with only a couple of lines of code, it is straightforward
    to script EC2 from PowerShell using the convenient AWS CloudShell as the development
    environment:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示，只需几行代码，就可以使用便捷的AWS CloudShell作为开发环境在PowerShell中轻松脚本化EC2：
- en: '[PRE3]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-142
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You can check out the [PowerShell documentation](https://oreil.ly/LNsQJ) to
    see all of the flags available. There is also a demo walk-through of this process
    on [YouTube](https://youtu.be/MeeZ3fnJsqM) and [O’Reilly](https://oreil.ly/e75S2).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以查看[PowerShell 文档](https://oreil.ly/LNsQJ)来查看所有可用的标志。还可以在[YouTube](https://youtu.be/MeeZ3fnJsqM)和[O’Reilly](https://oreil.ly/e75S2)上看到这个过程的演示。
- en: Now that you understand EC2 networking in more detail, let’s talk about EC2
    pricing options.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您对 EC2 的网络更详细了解，让我们谈谈 EC2 的定价选项。
- en: Using EC2 Pricing Options
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 EC2 定价选项
- en: 'While purchasing options may not be top of mind to many developers, it is an
    important consideration. One of the five pillars of the AWS Well-Architected Framework
    is [cost optimization](https://oreil.ly/C170R). In particular, this framework
    recommends that you “adopt a consumption model,” i.e., pay only for the computing
    resources you require. Let’s break down the different pricing options available
    for EC2:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然购买选项可能不是许多开发者的首要考虑，但这是一个重要的考虑因素。AWS Well-Architected Framework 的五大支柱之一是[成本优化](https://oreil.ly/C170R)。具体而言，该框架建议您“采用消费模型”，即仅支付您所需的计算资源。让我们详细了解一下
    EC2 的不同定价选项：
- en: On-demand instances
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 按需实例
- en: These instances are ideal for spiky workloads or prototyping. You pay for computing
    in increments as granular as a second, and there is no long-term commitment.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这些实例非常适合尖峰工作负载或原型设计。您可以按秒计算的计算，没有长期承诺。
- en: Reserved instances
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 预留实例
- en: These instances are noteworthy for committed, steady-state workloads. For example,
    once a company has a good idea of the configuration and load of its architecture
    in the cloud, it will know how many instances to reserve. There are options for
    both one-year or three-year commitments, leading to a significant discount from
    on-demand instances.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这些实例非常适合承诺的稳态工作负载。例如，一旦公司对其云架构的配置和负载有了清晰的了解，就会知道需要预留多少实例。有一年或三年的承诺选项，可以从按需实例中获得显著的折扣。
- en: Savings plans
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 储蓄计划
- en: This plan is suited to Amazon EC2 and AWS Fargate, as well as AWS Lambda workloads
    because it lets you reserve an hourly spend commitment. The discounts are the
    same as reserved instances with the added flexibility in exchange for a dedicated
    hourly spend commitment.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 此计划适用于 Amazon EC2 和 AWS Fargate，以及 AWS Lambda 工作负载，因为它允许您预留每小时的支出承诺。与预留实例相同的折扣，但为灵活性增加了每小时的专用支出承诺。
- en: Spot instances
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Spot 实例
- en: These are ideal for fault-tolerant workloads that can be both flexible and stateless.
    A good example would be doing a batch job that can run during the day, say, transcoding
    video. These instances are available at up to 90% off on-demand pricing.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这些适合容错工作负载，可以灵活和无状态。一个很好的例子是可以在白天运行的批处理作业，比如视频转码。这些实例可以享受高达按需定价90%的折扣。
- en: Dedicated hosts
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 专用主机
- en: Another option for workloads requiring single tenancy or software licenses is
    to use a dedicated physical server.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 对于需要单租户或软件许可证的工作负载，另一个选择是使用专用物理服务器。
- en: It is helpful to understand the options for pricing on AWS because they can
    make or break the effectiveness of moving to the cloud. With that information
    covered, let’s move on to security best practices for AWS.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 了解 AWS 的定价选项对于云迁移的有效性非常重要。有了这些信息，让我们继续讨论 AWS 的安全最佳实践。
- en: Security Best Practices for AWS
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS 的安全最佳实践
- en: Security isn’t optional for software engineering; it is a core requirement for
    any project. What may be surprising to newcomers to cloud computing is that moving
    to the cloud increases the security profile of projects. One way to explain this
    concept is through the unique AWS concept called the [“shared responsibility model”](https://oreil.ly/6q23h)
    shown in [Figure 2-9](#Figure-2-4-shared-model).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 对于软件工程来说，安全不是可选的，而是任何项目的核心要求。对于云计算的新手来说，可能令人惊讶的是，迁移到云端增加了项目的安全性。解释这一概念的一种方式是通过
    AWS 的独特概念“共享责任模型”，如[“共享责任模型”](https://oreil.ly/6q23h)所示，详见[图 2-9](#Figure-2-4-shared-model)。
- en: '![doac 0209](assets/doac_0209.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0209](assets/doac_0209.png)'
- en: Figure 2-9\. AWS shared responsibility model
  id: totrans-161
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-9\. AWS 共享责任模型
- en: Notice that AWS is responsible for the entire global infrastructure, including
    the physical security requirements. The customer then builds on top of that secure
    foundation and is responsible for items like customer data or firewall configuration.^([7](ch02.xhtml#idm45599657709504))
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，AWS 负责整个全球基础设施，包括物理安全要求。然后客户在这个安全基础之上构建，负责像客户数据或防火墙配置这样的项目。^([7](ch02.xhtml#idm45599657709504))
- en: 'A great place to start designing a secure system on AWS is by following the
    guidelines available from the [AWS Well-Architected Framework website](https://oreil.ly/uaGGU).
    There are seven design principles. Let’s take a look:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 设计一个安全系统在AWS上的好方法是遵循[AWS Well-Architected Framework website](https://oreil.ly/uaGGU)提供的指南。有七个设计原则。我们来看看：
- en: Implement a strong identity foundation
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 实施坚实的身份验证基础
- en: Use the principle of least privilege (PLP) to assign just enough access to resources
    for a user to accomplish their assigned tasks. Use the identity and access management
    (IAM) system to control users, groups, and access policies while eliminating static
    credentials.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 使用最小权限原则（PLP）为用户分配足够的资源访问权限以完成其分配的任务。使用身份和访问管理（IAM）系统来控制用户、组和访问策略，同时消除静态凭证。
- en: Enable traceability
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 启用可追溯性
- en: It is critical to enable real-time monitoring, alerting, and auditing of changes
    to a production environment. This capability works through a comprehensive logging
    and metric collection system that allows actionability.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 启用实时监控、警报和审核生产环境变更至关重要。这种能力通过全面的日志和度量收集系统来实现，从而实现可操作性。
- en: Apply security at all layers
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有层面应用安全措施
- en: The best defense is a layered approach where every component of cloud computing,
    from computing to storage to networking, adds security hardening.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳防御是采用分层方法，云计算的每个组件，从计算到存储再到网络，都增强了安全性。
- en: Automate security best practices
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化安全最佳实践
- en: Automating security best practices as code allows for an efficient and idempotent
    way to minimize organizational risk.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 将安全最佳实践自动化为代码，可以高效且幂等地减少组织风险。
- en: Protect data in transit and at rest
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 保护数据在传输和静止时
- en: Data needs protecting both in its location and when it moves. This best practice
    happens through combined encryption, tokenization, and access controls.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 数据需要在其位置和移动时进行保护。这一最佳实践通过综合加密、令牌化和访问控制来实现。
- en: Keep people away from data
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 远离数据的人员
- en: Manual data processing is an antipattern to avoid as it introduces humans into
    the loop, which can inflict intentional and unintentional security holes.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 手动数据处理是要避免的反模式，因为它将人为因素引入环节，可能导致有意或无意的安全漏洞。
- en: Prepare for security events
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 准备安全事件
- en: A consistent theme at Amazon is “design for failure.” Similarly, it is essential
    to have a plan for dealing with security incidents and processes that aligns with
    organizational needs with security.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在亚马逊公司，一个一贯的主题是“为失败设计”。同样，对于安全事件的处理和与组织需求对齐的流程，拥有计划至关重要。
- en: One of the big takeaways for AWS security is how critical automation is to implementing
    security. DevOps is at the heart of cloud-native automation, which is the focus
    of [Chapter 6](ch06.xhtml#Chapter6). With the foundational best practices of security
    out of the way, let’s discuss the AWS best-practice encryption.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: AWS安全的一个重要要点是自动化在实施安全性方面的关键性。DevOps是云原生自动化的核心，重点在[第6章](ch06.xhtml#Chapter6)。随着基础安全最佳实践的推进，让我们讨论AWS最佳实践加密。
- en: Encryption at Rest and Transit
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 静止和传输中的加密
- en: Encryption is a method of transforming data that makes it unreadable without
    access to a secret encryption key.^([8](ch02.xhtml#idm45599657691056)) At the
    center of the encryption strategy in transit and rest is that data becomes exposed
    in an unencrypted form at no point.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 加密是一种转换数据的方法，使其在没有访问秘密加密密钥的情况下无法阅读。^([8](ch02.xhtml#idm45599657691056)) 在传输和静止的加密策略的中心是数据在任何时候都不以未加密形式暴露。
- en: Note
  id: totrans-181
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: “Transit” refers to sending data from one location to another, such as from
    a user’s mobile phone to a banking website. *Rest* refers to the storage of the
    data; for example, data that resides in a database is at rest.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: “传输”指的是将数据从一个位置发送到另一个位置，比如从用户的手机到银行网站。*静止* 指的是数据的存储；例如，存储在数据库中的数据处于静止状态。
- en: A good analogy would be to consider the concept of sealing perishable foods
    by vacuum packing the product. Vacuum packing removes oxygen, thus extending the
    product’s shelf life and preserving it. As soon as the seal breaks, the food item
    instantly degrades. Similarly, data exposed in an unencrypted form exposes itself
    to instant risk and breaks down best practices in storing and managing data. AWS
    solves this problem by providing services that allow you to encrypt your data
    comprehensively throughout the lifecycle of data operations on the platform.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的类比是考虑通过真空包装密封易腐食品的概念。真空包装去除氧气，从而延长产品的保质期并保持其新鲜。一旦密封破裂，食品会立即变质。类似地，以未加密形式暴露的数据立即面临风险并违反了存储和管理数据的最佳实践。AWS通过提供的服务解决了这个问题，允许您在平台上数据操作的整个生命周期中全面加密您的数据。
- en: Note
  id: totrans-184
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: One essential item to consider is that for encryption to work, there is an [encryption
    key](https://oreil.ly/QJzoP). Privileged users can access data only if they have
    that key.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 要考虑的一个重要问题是，为了使加密工作，需要有一个[加密密钥](https://oreil.ly/QJzoP)。只有特权用户拥有该密钥才能访问数据。
- en: Now that we have covered encryption, let’s continue to drill down into security
    concepts on AWS by next covering the principle of least privilege.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经涵盖了加密，让我们继续深入探讨AWS上的安全概念，接下来将详细讲解最小特权原则。
- en: PLP (Principle of Least Privilege)
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PLP（最小特权原则）
- en: The mail delivery person does not have a key to your house because of the principle
    of least privilege (PLP). It is a security best practice for non-IT people and
    IT people alike that says to never give more access to resources than necessary.
    You can see this principle in action in [Figure 2-10](#Figure-2-5-plp). The mail
    delivery person has access to the mailbox but not the house. Similarly, the family
    has access to the house, but only the parents can access the safe. This concept
    means with AWS, you give users the least amount of access and responsibility necessary
    to complete their tasks.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 邮递员没有您家的钥匙，这是最小特权原则（PLP）的安全最佳实践。无论是非IT人员还是IT人员，都应该遵循这一原则，即永远不要给资源更多的访问权限。您可以在[图2-10](#Figure-2-5-plp)中看到这一原则在实际中的应用。邮递员可以访问邮箱但不能进入房屋。同样地，家人可以进入房屋，但只有父母可以进入保险柜。这个概念意味着在AWS中，您只给用户完成任务所需的最少访问权限和责任。
- en: '![doac 0210](assets/doac_0210.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0210](assets/doac_0210.png)'
- en: Figure 2-10\. Principle of least privilege example
  id: totrans-190
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2-10 最小特权原则示例
- en: 'PLP protects both the resource as well as the recipient of the privilege. Consider
    the case of the safe-in-the-house scenario. There may be something in the safe
    that is dangerous to the children, and it protects both the safe and the child
    from not having access. With AWS, this design principle is in effect: only assign
    IAM policies with the least privileges to get the task completed.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 最小特权原则保护资源和特权的接收者。考虑一下家中的保险柜场景。保险柜中可能有对孩子有危险的物品，它保护了保险柜和孩子，使其无法访问。在AWS中，这一设计原则是有效的：仅分配最少特权的IAM策略来完成任务。
- en: This approach works in a real-world microservice architecture like the one shown
    in [Figure 2-11](#Figure-2-0-4-lambda-plp). Notice how an AWS Lambda microservice
    is listening to AWS S3\. When a user uploads a new profile picture, the AWS Lambda
    function uses an “S3 Read Only” policy since this service only needs to accept
    the event payload from S3, which includes the name of the image uploaded and the
    S3 URI, which contains the full path to the image. The AWS Lambda microservice
    then writes that metadata to the DynamoDB table using a role that includes the
    ability to access that particular table and update it.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法在像[图2-11](#Figure-2-0-4-lambda-plp)中展示的真实世界微服务架构中同样适用。请注意，AWS Lambda微服务正在监听AWS
    S3。当用户上传新的个人资料图片时，AWS Lambda函数使用“S3只读”策略，因为此服务只需接受来自S3的事件有效负载，其中包括上传的图像名称和S3 URI，其中包含图像的完整路径。然后，AWS
    Lambda微服务使用具有访问特定表并更新该表的权限的角色将元数据写入DynamoDB表。
- en: '![doac 0211](assets/doac_0211.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0211](assets/doac_0211.png)'
- en: Figure 2-11\. Serverless profile picture profile updater microservice
  id: totrans-194
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2-11 无服务器个人资料图片更新微服务
- en: This PLP workflow prevents both security holes as well as developer errors.
    Limiting the scope of what a microservice does strictly by what it needs to perform
    its task diminishes organizational risk. This risk may not be apparent to systems
    developed without PLP, but it doesn’t mean the risk doesn’t exist.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这种PLP工作流程既防止了安全漏洞，也避免了开发人员的错误。严格限制微服务仅能执行其任务所需的操作范围，可以降低组织风险。这种风险在没有PLP的系统中可能并不明显，但这并不意味着风险不存在。
- en: With a deeper understanding of implementing security, let’s discuss a central
    component in any securely designed system on AWS, AWS Identity and Access Management.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入了解如何实施安全性之后，让我们讨论AWS身份和访问管理在任何安全设计系统中的中心组件。
- en: Using AWS Identity and Access Management (IAM)
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用AWS身份和访问管理（IAM）
- en: At the center of securely controlling access to AWS services is [IAM](https://oreil.ly/xaPQq).
    With AWS IAM, you can specify who or what can access services and resources in
    AWS, centrally manage fine-grained permissions, and analyze access to refine permissions
    across AWS, as you can see in [Figure 2-12](#Figure-2-0-15-iam-how-it-works-diagram).
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 安全地控制访问AWS服务的核心是[IAM](https://oreil.ly/xaPQq)。通过AWS IAM，您可以指定谁或什么可以访问AWS中的服务和资源，集中管理细粒度权限，并分析访问以优化AWS中的权限，正如您在[图 2-12](#Figure-2-0-15-iam-how-it-works-diagram)中所见。
- en: '![doac 0212](assets/doac_0212.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0212](assets/doac_0212.png)'
- en: Figure 2-12\. IAM high-level breakdown
  id: totrans-200
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-12\. IAM高级别分解
- en: To understand how IAM works in more detail, [Figure 2-13](#Figure-2-0-16-IAM-works)
    shows how a principal is a person or application that can request an AWS resource
    by authenticating. Next, a user (Account ID 0123*) must be authorized to create
    a request, where policies determine whether to allow or deny the request. These
    rules are identity-based policies, other policies, and resource-based policies
    that control authorization.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 要更详细地了解IAM的工作原理，[图 2-13](#Figure-2-0-16-IAM-works)展示了主体是指可以通过认证请求AWS资源的人或应用程序。接下来，用户（账户ID
    0123*）必须获得授权才能创建请求，其中策略确定是否允许或拒绝请求。这些规则包括基于身份的策略、其他策略和基于资源的策略来控制授权。
- en: After the request approval, the actions available come from the service itself,
    i.e., `CreateDatabase`, `CreateUser`, or whatever the service supports. Finally,
    after the approval of the operations in the request for the service, they are
    performed on the resource. An example of a resource is an EC2 instance or an Amazon
    S3 bucket.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在请求获得批准后，可用的操作来自服务本身，例如，`CreateDatabase`、`CreateUser`或服务支持的任何操作。最终，在服务请求的操作获得批准后，它们将在资源上执行。资源的示例包括EC2实例或Amazon
    S3存储桶。
- en: 'You can read a very detailed overview of this process by reading the [Understanding
    How IAM Works User Guide](https://oreil.ly/GkiUm). The IAM service has five critical
    components: IAM users, IAM groups, IAM roles, and IAM permissions and policies
    (bundled together for brevity). Let’s discuss each one:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过阅读[理解IAM工作方式用户指南](https://oreil.ly/GkiUm)来详细了解此过程。IAM服务具有五个关键组件：IAM用户、IAM组、IAM角色以及IAM权限和策略（为简洁起见，这些组件被捆绑在一起）。让我们讨论每一个：
- en: IAM users
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: IAM用户
- en: A user is an entity you create in AWS to represent either a person or an application.
    [A user](https://oreil.ly/etisJ) in AWS can have programmatic access via an access
    key, AWS Management Console access via a password, or both. An access key enables
    access to the SDK, CLI commands, and API.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: AWS中的一个用户是您在AWS中创建的实体，用于代表人或应用程序。[一个用户](https://oreil.ly/etisJ)在AWS中可以通过访问密钥进行程序化访问，通过密码访问AWS管理控制台，或两者兼有。访问密钥使得可以访问SDK、CLI命令和API。
- en: IAM groups
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: IAM组
- en: An [IAM user group](https://oreil.ly/hawd3) is a collection of IAM users. Using
    groups allows you to specify permissions for multiple users.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '[IAM用户组](https://oreil.ly/hawd3)是IAM用户的集合。使用组允许您为多个用户指定权限。'
- en: IAM roles
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: IAM角色
- en: An [IAM role](https://oreil.ly/hQyBG) is an IAM identity with specific permissions.
    A typical scenario is for a service like EC2 to have a role assigned with special
    permissions to call the AWS API, say, download data from S3 without needing to
    keep API keys on the EC2 instance.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '[IAM角色](https://oreil.ly/hQyBG)是具有特定权限的IAM身份。一个典型的场景是，像EC2这样的服务被分配了一个具有特殊权限的角色，以调用AWS
    API，比如从S3下载数据，而不需要在EC2实例上保留API密钥。'
- en: IAM permissions and policies
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: IAM权限和策略
- en: You [manage access](https://oreil.ly/oi6u2) to AWS by creating or using default
    policies and attaching them to IAM identities like users, groups, and roles. The
    permissions in these policies then set what is allowed or denied.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 通过创建或使用默认策略并将其附加到IAM身份（如用户、组和角色），您可以[管理访问](https://oreil.ly/oi6u2)到AWS。这些策略中的权限确定了允许或拒绝的操作。
- en: '![doac 0213](assets/doac_0213.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0213](assets/doac_0213.png)'
- en: Figure 2-13\. How IAM works
  id: totrans-213
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2-13\. IAM的工作原理
- en: With a deeper understanding of identity and access management on AWS out of
    the way, let’s switch topics to building NoSQL solutions on AWS with DynamoDB.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 通过深入理解AWS上的身份和访问管理，让我们转向在AWS上使用DynamoDB构建NoSQL解决方案。
- en: Developing NoSQL Solutions with DynamoDB
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用DynamoDB开发NoSQL解决方案
- en: The CTO of Amazon, Werner Vogel, [points out](https://oreil.ly/qSNzq) that a
    “one size database doesn’t fit anyone.” This problem is illustrated in [Figure 2-14](#Figure-2-6-pydo_1504),
    which shows that each type of database has a specific purpose. Picking the correct
    storage solutions, including which databases to use, is crucial for a .NET architect
    to ensure that a system works optimally. An excellent resource for comparing AWS
    Cloud databases is found on the [AWS products page](https://oreil.ly/qK0no).
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊的CTO Werner Vogel [指出](https://oreil.ly/qSNzq)，“一种数据库不适合所有人”。这个问题在[图2-14](#Figure-2-6-pydo_1504)中有所体现，显示出每种类型的数据库都有特定的用途。选择正确的存储解决方案，包括使用哪些数据库，对于.NET架构师来说是至关重要的，以确保系统能够以最佳性能运行。在[AWS产品页面](https://oreil.ly/qK0no)上可以找到一个比较AWS云数据库的优秀资源。
- en: '![doac 0214](assets/doac_0214.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0214](assets/doac_0214.png)'
- en: Figure 2-14\. Each type of database has a purpose
  id: totrans-218
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2-14\. 每种类型的数据库都有其特定用途
- en: Maintenance is a consideration in designing a fully automated and efficient
    system. Suppose a particular technology choice is being abused, such as using
    a relational database for a highly available messaging queue. In that case, maintenance
    costs could explode, creating more automation work. So another component to consider
    is how much automation work it takes to maintain a solution.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计一个完全自动化和高效的系统时，需要考虑维护问题。例如，如果某种技术选择被滥用，比如将关系型数据库用于高可用性消息队列，维护成本可能会激增，从而增加更多的自动化工作。因此，需要考虑的另一个组成部分是维护解决方案所需的自动化工作量。
- en: At the core of [DynamoDB](https://aws.amazon.com/dynamodb) is the concept of
    a distributed database that is eventually consistent.^([9](ch02.xhtml#idm45599657635728))
    In practice, the database can automatically scale up from [zero to millions of
    requests per second](https://oreil.ly/ZRZvt) while maintaining low latency.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '[DynamoDB](https://aws.amazon.com/dynamodb)的核心概念是一个分布式数据库，具有最终一致性。^([9](ch02.xhtml#idm45599657635728))
    在实践中，该数据库可以自动从[零扩展到数百万次请求每秒](https://oreil.ly/ZRZvt)，同时保持低延迟。'
- en: 'Let’s break down the critical DynamoDB concepts via characteristics, use cases,
    and key features:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过特征、用例和主要特点来详细解析关键的DynamoDB概念：
- en: Characteristics
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 特征
- en: DynamoDB is a fully managed nonrelational key-value and document database that
    performs at any scale. It is also serverless and ideal for event-driven programming.
    Enterprise features of DynamoDB include encryption and backups.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: DynamoDB是一个完全托管的非关系型键值和文档数据库，可以在任何规模下运行。它也是无服务器的，非常适合事件驱动的编程。DynamoDB的企业特性包括加密和备份。
- en: Use cases
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 用例
- en: This service works well for simple high-volume data that must scale quickly
    and doesn’t require complex joins. It also is ideal for solutions that require
    high throughput and low latency.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 该服务非常适合需要快速扩展且不需要复杂连接的简单高容量数据，也非常适合需要高吞吐量和低延迟的解决方案。
- en: Key features
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 主要特点
- en: Some key features include NoSQL tables and the ability to have items with different
    attributes. DynamoDB also supports caching and peaks of 20M+ requests per second.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 一些关键特点包括NoSQL表和具有不同属性的项目。DynamoDB还支持缓存和高达20M+请求每秒的峰值。
- en: We have covered the basics of DynamoDB; next, let’s build a simple application
    using DynamoDB.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经介绍了DynamoDB的基础知识；接下来，让我们使用DynamoDB构建一个简单的应用程序。
- en: Build a Sample C# DynamoDB Console App
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个示例C# DynamoDB控制台应用程序
- en: Let’s build a simple DynamoDB application in C# that reads data from a table.
    There are many ways to create a table manually, including [Figure 2-15](#Figure-2-6-1-create-table),
    in which you first navigate to the DynamoDB interface and then select “Create
    table.”
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在C#中构建一个简单的DynamoDB应用程序，从表中读取数据。有许多手动创建表的方法，包括[图2-15](#Figure-2-6-1-create-table)，首先导航到DynamoDB界面，然后选择“创建表”。
- en: '![doac 0215](assets/doac_0215.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0215](assets/doac_0215.png)'
- en: Figure 2-15\. Create a DynamoDB table in Amazon Console
  id: totrans-232
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2-15\. 在Amazon控制台中创建DynamoDB表
- en: Another way to create a table and populate it with values is by using Visual
    Studio AWS Explorer, as shown in [Figure 2-16](#Figure-2-6-2-create-table-aws-explorer).
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种创建表格并填充值的方法是使用 Visual Studio AWS Explorer，如 [图 2-16](#Figure-2-6-2-create-table-aws-explorer)
    所示。
- en: '![doac 0216](assets/doac_0216.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0216](assets/doac_0216.png)'
- en: Figure 2-16\. Create a DynamoDB table in Visual Studio Explorer
  id: totrans-235
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-16\. 在 Visual Studio Explorer 中创建 DynamoDB 表格
- en: Yet again, we populate the table with fruit. We can do it via the .NET SDK or
    the console if we want to query it, as shown in [Figure 2-17](#Figure-2-6-3-query-dynamo).
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们用水果填充表格。如果要查询，我们可以通过 .NET SDK 或控制台进行，如 [图 2-17](#Figure-2-6-3-query-dynamo)
    所示。
- en: '![doac 0217](assets/doac_0217.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0217](assets/doac_0217.png)'
- en: Figure 2-17\. Query table
  id: totrans-238
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-17\. 查询表格
- en: To create an application to query DynamoDB, open up Visual Studio and create
    a new Console Application, then install the [DynamoDB NuGet package](https://oreil.ly/BChf7)
    as shown in [Figure 2-18](#Figure-2-6-4-install-dynamodb).
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个查询 DynamoDB 的应用程序，请打开 Visual Studio 并创建一个新的控制台应用程序，然后按照 [DynamoDB NuGet
    包](https://oreil.ly/BChf7) 的安装步骤安装，如 [图 2-18](#Figure-2-6-4-install-dynamodb)
    所示。
- en: '![doac 0218](assets/doac_0218.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0218](assets/doac_0218.png)'
- en: Figure 2-18\. Install DynamoDB
  id: totrans-241
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-18\. 安装 DynamoDB
- en: 'With the installation out of the way, the process to query the table, print
    out the entire table, and pick a random fruit is addressed in the following C#
    code example:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，查询表格、打印整个表格并随机选择一个水果的过程在以下 C# 代码示例中已解决：
- en: '[PRE4]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[![1](assets/1.png)](#co_aws_core_services_1)'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_aws_core_services_1)'
- en: First, create a client.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个客户端。
- en: '[![2](assets/2.png)](#co_aws_core_services_2)'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_aws_core_services_2)'
- en: Next, scan the table.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，扫描表格。
- en: '[![3](assets/3.png)](#co_aws_core_services_3)'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_aws_core_services_3)'
- en: Then, make a list to hold the results.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，创建一个列表来保存结果。
- en: '[![4](assets/4.png)](#co_aws_core_services_4)'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_aws_core_services_4)'
- en: Finally, loop through the table results, put them in the list, and randomly
    pick a fruit to print.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，循环遍历表格结果，将它们放入列表中，并随机选择一个水果进行打印。
- en: The results of the Console Application in [Figure 2-19](#Figure-6-5-table-scan)
    show a successful table scan and selection of random fruit.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台应用程序的结果在 [图 2-19](#Figure-6-5-table-scan) 中显示了成功的表扫描和随机水果选择。
- en: '![doac 0219](assets/doac_0219.png)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0219](assets/doac_0219.png)'
- en: Figure 2-19\. Table scan Console App
  id: totrans-254
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-19\. 表扫描控制台应用程序
- en: Check out the [AWS docs GitHub repo](https://oreil.ly/gol15) for more ideas
    on building applications. It is an excellent resource for ideas on building solutions
    with DynamoDB.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [AWS 文档 GitHub 仓库](https://oreil.ly/gol15) 获取更多构建应用程序的想法。这是一个关于使用 DynamoDB
    构建解决方案想法的优秀资源。
- en: Note
  id: totrans-256
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: A CRUD application creates, reads, updates, and deletes items from a database.
    This [CRUD example](https://oreil.ly/1SdtM) for DynamoDB is a great resource to
    refer to when building this style of application on DynamoDB.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: CRUD 应用程序从数据库中创建、读取、更新和删除项目。这个 [CRUD 示例](https://oreil.ly/1SdtM) 用于 DynamoDB
    是构建这种类型应用程序时的良好参考资源。
- en: 'Now that you know how to build solutions with DynamoDB let’s discuss a complementary
    service: the Amazon Relational Database Service (RDS).'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解如何使用 DynamoDB 构建解决方案，让我们讨论一个互补服务：亚马逊关系数据库服务（RDS）。
- en: Amazon Relational Database Service
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 亚马逊关系数据库服务
- en: RDS is a service that lets you point and click to set up an enterprise database
    in the cloud. The times before RDS were dark days for developers who have experienced
    running their own SQL database. The list of tasks necessary to properly administer
    a database is quite staggering. As a result, many positions called DBAs or database
    administrators filled the role of helping keep SQL systems alive like Microsoft
    SQL Server, MySQL, and Postgres. Now many of those tasks are features in RDS.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: RDS 是一个允许您在云中点按设置企业数据库的服务。RDS 之前的时代对于那些曾经运行自己的 SQL 数据库的开发者来说是黑暗的日子。正确管理数据库所需的任务列表相当可怕。因此，许多职位称为
    DBA 或数据库管理员，帮助保持 SQL 系统的运行，如 Microsoft SQL Server、MySQL 和 Postgres。现在，许多这些任务都成为了
    RDS 的特性。
- en: 'The features synthesize into a uniform solution that creates agility for .NET
    projects. The critical win of RDS is that it allows a developer to focus on building
    business logic, not fighting the database. This win occurs because RDS alleviates
    the pain of managing the database and will enable developers to focus on building
    the application. Let’s look at a select list of the core features that highlight
    the power of RDS:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 这些特性综合成一个统一的解决方案，为 .NET 项目带来了灵活性。RDS 的关键优势在于它允许开发人员专注于构建业务逻辑，而不是处理数据库。这一优势的出现是因为
    RDS 解除了管理数据库的痛苦，使开发人员能够专注于应用程序的构建。让我们看一下几个核心特性的选择列表，以突出 RDS 的强大功能：
- en: Core features
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 核心特性
- en: RDS is easy to use. It also has automatic software patching, which reduces security
    risks. Best practice recommendations are baked into the product and include access
    to SSD storage, dramatically increasing the service’s scalability.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: RDS 易于使用。它还具有自动软件修补功能，可以降低安全风险。产品中内置了最佳实践建议，包括使用 SSD 存储，显著提高了服务的可扩展性。
- en: Reliability
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 可靠性
- en: The service includes the ability to create automated backups and build database
    snapshots. Finally, a best practice of multi-AZ deployments allows for a robust
    recovery option in an availability zone outage.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 该服务包括创建自动备份和构建数据库快照的能力。最终，通过多可用区部署的最佳实践，为可用区故障提供了强大的恢复选项。
- en: Security and operations
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性和运营
- en: RDS includes significant encryption capabilities, including using this in both
    rest and transit. Further network isolation allows for increased operational security
    and fine-grained resource-level permissions. Also, there is extensive monitoring
    via CloudWatch, which increases the cost-effectiveness of the service.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: RDS 包括重要的加密能力，包括在静止和传输中使用。进一步的网络隔离提高了操作安全性和精细化的资源级权限。此外，通过 CloudWatch 进行广泛的监控，提高了服务的成本效益。
- en: With the core features of RDS out of the way, let’s discuss a fully managed
    serverless solution next.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 了解了 RDS 的核心特性之后，接下来让我们讨论一个完全托管的无服务器解决方案。
- en: Fully Managed Databases with Amazon Aurora Serverless v2
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与 Amazon Aurora 无服务器 v2 的完全托管数据库
- en: The cloud native world of serverless is addictive to develop solutions with
    because of the straight line between your thoughts and their implementation as
    business logic. With the addition of [Amazon Aurora Serverless v2](https://oreil.ly/E5QJZ),
    the ability to execute quickly on business logic as code is enhanced further.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 由于无服务器云原生世界能够直接将思想转化为业务逻辑的实现，因此开发解决方案具有成瘾性。随着 [Amazon Aurora 无服务器 v2](https://oreil.ly/E5QJZ)
    的增加，执行业务逻辑作为代码的能力进一步增强。
- en: 'Here is a subset of the benefits of the Amazon Aurora Serverless v2:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 Amazon Aurora 无服务器 v2 的一部分好处的子集：
- en: Highly scalable
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 高度可扩展
- en: Instances can scale to hundreds of thousands of transactions in a fraction of
    a second.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 实例可以在几秒钟内扩展到数十万个交易。
- en: Simple
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的
- en: Aurora removes the complexity of provisioning and managing database capacity.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: Aurora 消除了预留和管理数据库容量的复杂性。
- en: Durable
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 可靠的
- en: Aurora storage is self-healing via six-way replication.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '[Aurora 存储](https://oreil.ly/E5QJZ)通过六向复制实现自我修复。'
- en: 'The critical use cases include the following:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 这些关键用例包括以下内容：
- en: Variable workloads
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 可变工作负载
- en: Running an infrequently used application that peaks 30 minutes a few times a
    day is a sweet spot for this service.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 运行使用频率不高的应用程序，每天几次高峰达到 30 分钟，是这项服务的一个甜蜜点。
- en: Unpredictable workloads
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 不可预测的工作负载
- en: A content-heavy site that experiences heavy traffic can count on the database
    automatically scaling capacity and then scaling back down.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 一个内容密集的站点，经常访问的情况下，可以依赖数据库自动扩展容量，然后缩减容量。
- en: Enterprise database fleet management
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 企业数据库集群管理
- en: Enterprises with thousands of databases can automatically scale database capacity
    by each application demand without managing the fleet individually.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有数千个数据库的企业可以根据每个应用程序的需求自动扩展数据库容量，无需单独管理每个数据库。
- en: Software as a service (SaaS) applications
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 软件即服务（SaaS）应用程序
- en: SaaS vendors that operate thousands of Aurora databases can provision Aurora
    database clusters for each customer without needing to provision capacity. It
    automatically shuts down the database when not in use to reduce costs.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 运营数千个 Aurora 数据库的 SaaS 供应商可以为每个客户提供 Aurora 数据库集群，而无需预留容量。它在不使用时会自动关闭数据库以降低成本。
- en: Scaled-out databases split across multiple servers
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 分布在多台服务器上的分布式数据库
- en: It is common to break high write or read requirements to numerous databases.
    Aurora Serverless v2’s capacity is met instantly and managed automatically, simplifying
    the deployment.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 高写入或读取需求常常需要分布到多个数据库中。Aurora Serverless v2的容量可以立即满足，并且自动管理，简化了部署过程。
- en: Putting all this together, a SaaS company could build an architecture as shown
    in [Figure 2-20](#Figure-2-0-4-aurora-serverless) where each client has one dedicated
    serverless pipeline of AWS Step Functions that orchestrate via AWS Lamba payload
    that proceed to Aurora Serverless v2.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有内容整合起来，一个SaaS公司可以构建如[图2-20](#Figure-2-0-4-aurora-serverless)所示的架构，其中每个客户都有一个专用的AWS
    Step Functions无服务器流水线，通过AWS Lambda负载进行编排，然后进入Aurora Serverless v2。
- en: '![doac 0220](assets/doac_0220.png)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![doac 0220](assets/doac_0220.png)'
- en: Figure 2-20\. SaaS company architecture with Aurora Serverless
  id: totrans-291
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2-20. 使用Aurora Serverless的SaaS公司架构
- en: The benefit of this architecture is that it is easy to debug the pipeline for
    each paying customer. Additionally, the complexity of managing server load for
    each client is alleviated since the entire pipeline uses autoscale serverless
    components.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 这种架构的好处在于很容易调试每个付费客户的流水线。此外，由于整个流水线使用自动缩放的无服务器组件，管理每个客户端的服务器负载复杂性也得到了缓解。
- en: Note
  id: totrans-293
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注
- en: One notable example of developing a .NET Web API using Aurora Serverless is
    at this [blog post by AWS](https://oreil.ly/WUmb9).
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Aurora Serverless开发.NET Web API的一个显著例子可以在这篇[AWS博客文章](https://oreil.ly/WUmb9)中找到。
- en: This chapter covered a wide variety of essential topics for mastering AWS. Let’s
    wrap up the highlights.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了掌握AWS所必需的各种重要主题。让我们总结一下重点。
- en: Conclusion
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: AWS Core Services are the foundation that allows a developer to build sophisticated
    solutions. In this chapter, we covered the core services of computing and storage.
    This coverage included recommendations on using service options for services like
    EC2 and S3 and managed services.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: AWS核心服务是允许开发人员构建复杂解决方案的基础。在本章中，我们涵盖了计算和存储的核心服务。这些涵盖内容包括建议如何使用EC2和S3等服务的服务选项以及托管服务。
- en: It is important to note that for both EC2 and S3, there is an extensive selection
    of pricing options. The appropriate pricing option for a given architecture is
    critical in building a well-architected AWS system. Fortunately, AWS provides
    detailed monitoring and instrumentation on pricing and valuable tools in the [AWS
    Cost Management Console](https://oreil.ly/8EZtn).
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，无论是EC2还是S3，都有大量的定价选项。在构建良好架构的AWS系统中，选择适当的定价选项至关重要。幸运的是，AWS在[AWS成本管理控制台](https://oreil.ly/8EZtn)中提供了详细的定价监控和工具。
- en: The chapter covered both traditional and NoSQL databases, including an example
    of using DynamoDB to build a simple Console Application. Take a look at the critical
    thinking questions and exercises to challenge yourself to apply this material
    to your scenarios. The next chapter covers migrating a legacy .NET application
    to AWS.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了传统和NoSQL数据库，包括使用DynamoDB构建简单控制台应用程序的示例。查看批判性思维问题和练习，挑战自己将这些材料应用到您的场景中。下一章将涵盖将传统.NET应用程序迁移到AWS。
- en: Critical Thinking Discussion Questions
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 批判性思维讨论问题
- en: What are new workflows for architecting software made available by network filesystems
    like Amazon EFS and Amazon FSx?
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络文件系统如Amazon EFS和Amazon FSx提供的新软件架构工作流是什么？
- en: What are the advantages of prototyping solutions with AWS EC2 spot instances?
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用AWS EC2 Spot实例原型化解决方案的优势是什么？
- en: What compute and database services should a small startup of one to three developers
    gravitate toward for building SaaS APIs?
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一到三名开发人员的小型初创公司在构建SaaS API时应倾向于使用哪些计算和数据库服务？
- en: What compute services should a company with a large data center moving to the
    cloud consider?
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个大型数据中心转移到云上的公司应考虑哪些计算服务？
- en: How could your organization translate the spirit of the blog post [“A One Size
    Fits All Database Doesn’t Fit Anyone”](https://oreil.ly/W4H4a) into a plan for
    how to use the correct types of databases for the problems it faces?
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的组织如何将博客文章["一种数据库不适合所有人"](https://oreil.ly/W4H4a)的精神转化为如何为所面对的问题使用正确类型数据库的计划？
- en: Exercises
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: Build a CRUD (create, read, update, delete) C# Console App for AWS S3.
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为AWS S3构建一个CRUD（创建、读取、更新、删除）C#控制台应用程序。
- en: Build a CRUD (create, read, update, delete) C# Console App for AWS DynamoDB.
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为AWS DynamoDB构建一个CRUD（创建、读取、更新、删除）C#控制台应用程序。
- en: Build a CRUD (create, read, update, delete) C# Console App for AWS RDS for Aurora
    Serverless v2.
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为AWS RDS for Aurora Serverless v2构建一个CRUD（创建、读取、更新、删除）C#控制台应用程序。
- en: Change the DynamoDB example to select a fruit without needing to scan the table
    randomly.
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改DynamoDB示例以选择表中的水果而无需随机扫描表格。
- en: Launch a Windows EC2 instance, install a custom tool or library on it, [convert
    it to an AMI](https://oreil.ly/fgPD9), and launch an EC2 instance with your [custom
    AMI](https://oreil.ly/zkG9o).
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动Windows EC2实例，在其上安装自定义工具或库，[将其转换为AMI](https://oreil.ly/fgPD9)，并使用您的[自定义AMI](https://oreil.ly/zkG9o)启动EC2实例。
- en: ^([1](ch02.xhtml#idm45599658074352-marker)) AWS S3 also regularly gets [“peaks
    of tens of millions of requests per second”](https://oreil.ly/x1fhi).
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch02.xhtml#idm45599658074352-marker)) AWS S3还定期达到[“每秒数千万次请求的高峰”](https://oreil.ly/x1fhi)。
- en: ^([2](ch02.xhtml#idm45599658047392-marker)) AWS Athena is an “interactive query
    service” that allows for easy analysis of data in S3 via SQL. You can read more
    about it in the [getting started guide](https://oreil.ly/N5lV8).
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch02.xhtml#idm45599658047392-marker)) AWS Athena是一种“交互式查询服务”，允许通过SQL轻松分析S3中的数据。你可以在[入门指南](https://oreil.ly/N5lV8)中详细了解它。
- en: ^([3](ch02.xhtml#idm45599658045184-marker)) You can read more about the managed
    service SageMaker in the [official docs](https://oreil.ly/FwqXr).
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch02.xhtml#idm45599658045184-marker)) 您可以通过[官方文档](https://oreil.ly/FwqXr)详细了解托管服务SageMaker。
- en: ^([4](ch02.xhtml#idm45599657961904-marker)) AWS App Runner lets you package
    a container into a microservice that continuously deploys. You will see an example
    of this service in the container chapter.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](ch02.xhtml#idm45599657961904-marker)) AWS App Runner允许您将容器打包成一个持续部署的微服务。您将在容器章节中看到此服务的示例。
- en: ^([5](ch02.xhtml#idm45599657958272-marker)) The [Snow Family](https://aws.amazon.com/snow)
    is a set of “Highly-secure, portable devices to collect and process data at the
    edge, and migrate data into and out of AWS.”
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: ^([5](ch02.xhtml#idm45599657958272-marker)) [Snow Family](https://aws.amazon.com/snow)是一组“高度安全的便携设备，用于在边缘收集和处理数据，并在AWS中迁移数据。”
- en: ^([6](ch02.xhtml#idm45599657955440-marker)) According to AWS, [AWS Elastic Beanstalk](https://aws.amazon.com/elasticbeanstalk)
    “is an easy-to-use service for deploying and scaling web applications and services.”
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: ^([6](ch02.xhtml#idm45599657955440-marker)) 根据AWS，[AWS Elastic Beanstalk](https://aws.amazon.com/elasticbeanstalk)“是一个易于使用的服务，用于部署和扩展Web应用程序和服务。”
- en: ^([7](ch02.xhtml#idm45599657709504-marker)) Further, you can find detailed information
    about security by visiting the [Security Pillar](https://oreil.ly/BJtas) section
    of the AWS Well-Architected Framework site.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: ^([7](ch02.xhtml#idm45599657709504-marker)) 进一步的安全信息可以访问AWS Well-Architected
    Framework网站的[安全支柱](https://oreil.ly/BJtas)部分获取。
- en: ^([8](ch02.xhtml#idm45599657691056-marker)) You can read more about this topic
    via the [AWS whitepaper “Logical Separation on AWS”](https://oreil.ly/9wDGf).
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: ^([8](ch02.xhtml#idm45599657691056-marker)) 您可以通过[AWS白皮书“AWS上的逻辑分离”](https://oreil.ly/9wDGf)进一步了解此主题。
- en: ^([9](ch02.xhtml#idm45599657635728-marker)) A foundational theorem in theoretical
    computer science is the [CAP theorem](https://oreil.ly/aM06S), which states that
    there is a trade-off between consistency, availability, and partition tolerance.
    In practice, this means that many NoSQL databases, including DynamoDB, are “eventually
    consistent,” meaning they eventually converge the new writes to different nodes
    to create a consistent view of the data.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: ^([9](ch02.xhtml#idm45599657635728-marker)) 在理论计算机科学中的一个基础定理是[CAP定理](https://oreil.ly/aM06S)，指出在一致性、可用性和分区容错之间存在折衷。实际上，这意味着许多NoSQL数据库（包括DynamoDB）都是“最终一致性”，意味着它们最终会将新写入的数据汇总到不同节点以创建数据的一致视图。
