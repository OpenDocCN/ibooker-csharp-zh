["```cs\npublic class CheckoutService\n{\n    public async Task<string> StartAsync()\n    {\n        await ValidateAddressAsync();\n        await ValidateCreditAsync();\n        await GetShoppingCartAsync();\n        await FinalizeCheckoutAsync();\n\n        return \"Checkout Complete\";\n    }\n\n    async Task ValidateAddressAsync()\n    {\n        // perform address validation\n    }\n\n    async Task ValidateCreditAsync()\n    {\n        // ensure credit is good\n    }\n\n    async Task GetShoppingCartAsync()\n    {\n        // get contents of shopping cart\n    }\n\n    async Task FinalizeCheckoutAsync()\n    {\n        // complete checkout transaction\n    }\n}\n```", "```cs\nclass Program\n{\n    static void Main(string[] args)\n    {\n        var checkoutSvc = new CheckoutService();\n        string result = string.Empty;\n\n        Task<string> startedTask = checkoutSvc.StartAsync();\n        startedTask.Wait();\n        result = startedTask.Result;\n\n        Console.WriteLine($\"Result: {result}\");\n    }\n}\n```", "```cs\nstatic async Task Main()\n{\n    var checkoutSvc = new CheckoutService();\n\n    string result = await checkoutSvc.StartAsync();\n\n    Console.WriteLine($\"Result: {result}\");\n}\n```", "```cs\npublic class CheckoutService\n{\n    public async ValueTask<string> StartAsync()\n    {\n        await ValidateAddressAsync();\n        await ValidateCreditAsync();\n        await GetShoppingCartAsync();\n        await FinalizeCheckoutAsync();\n\n        return \"Checkout Complete\";\n    }\n\n    async ValueTask ValidateAddressAsync()\n    {\n        // perform address validation\n    }\n\n    async ValueTask ValidateCreditAsync()\n    {\n        // ensure credit is good\n    }\n\n    async ValueTask GetShoppingCartAsync()\n    {\n        // get contents of shopping cart\n    }\n\n    async ValueTask FinalizeCheckoutAsync()\n    {\n        // complete checkout transaction\n    }\n}\n```", "```cs\nclass Program\n{\n    static async Task Main()\n    {\n        var checkoutSvc = new CheckoutService();\n\n        string result = await checkoutSvc.StartAsync();\n\n        Console.WriteLine($\"Result: {result}\");\n    }\n}\n```", "```cs\npublic class CheckoutRequest\n{\n    public Guid ShoppingCartID { get; set; }\n\n    public string Name { get; set; }\n\n    public string Card { get; set; }\n\n    public string Address { get; set; }\n}\n```", "```cs\npublic class CheckoutService\n{\n    public async ValueTask<string> StartAsync(CheckoutRequest request)\n    {\n        return\n            $\"Checkout Complete for Shopping \" +\n            $\"Basket: {request.ShoppingCartID}\";\n    }\n}\n```", "```cs\npublic class CheckoutStream\n{\n    public async IAsyncEnumerable<CheckoutRequest> GetRequestsAsync()\n    {\n        while (true)\n        {\n            IEnumerable<CheckoutRequest> requests =\n                await GetNextBatchAsync();\n\n            foreach (var request in requests)\n                yield return request;\n\n            await Task.Delay(1000);\n        }\n    }\n\n    async Task<IEnumerable<CheckoutRequest>> GetNextBatchAsync()\n    {\n        return new List<CheckoutRequest>\n        {\n            new CheckoutRequest\n            {\n                ShoppingCartID = Guid.NewGuid(),\n                Address = \"123 4th St\",\n                Card = \"1234 5678 9012 3456\",\n                Name = \"First Card Name\"\n            },\n            new CheckoutRequest\n            {\n                ShoppingCartID = Guid.NewGuid(),\n                Address = \"789 1st Ave\",\n                Card = \"2345 6789 0123 4567\",\n                Name = \"Second Card Name\"\n            },\n            new CheckoutRequest\n            {\n                ShoppingCartID = Guid.NewGuid(),\n                Address = \"123 4th St\",\n                Card = \"1234 5678 9012 3456\",\n                Name = \"First Card Name\"\n            },\n        };\n    }\n}\n```", "```cs\nstatic async Task Main()\n{\n    var checkoutSvc = new CheckoutService();\n    var checkoutStrm = new CheckoutStream();\n\n    await foreach (var request in checkoutStrm.GetRequestsAsync())\n    {\n        string result = await checkoutSvc.StartAsync(request);\n\n        Console.WriteLine($\"Result: {result}\");\n    }\n}\n```", "```cs\npublic class CheckoutService\n{\n    public async Task<string> StartAsync()\n    {\n        await ValidateAddressAsync().ConfigureAwait(false);\n        await ValidateCreditAsync().ConfigureAwait(false);\n        await GetShoppingCartAsync().ConfigureAwait(false);\n        await FinalizeCheckoutAsync().ConfigureAwait(false);\n\n        return \"Checkout Complete\";\n    }\n\n    async Task ValidateAddressAsync()\n    {\n        // perform address validation\n    }\n\n    async Task ValidateCreditAsync()\n    {\n        // ensure credit is good\n    }\n\n    async Task GetShoppingCartAsync()\n    {\n        // get contents of shopping cart\n    }\n\n    async Task FinalizeCheckoutAsync()\n    {\n        // complete checkout transaction\n    }\n}\n```", "```cs\nstatic async Task Main()\n{\n    var checkoutSvc = new CheckoutService();\n\n    string result = await checkoutSvc.StartAsync();\n\n    Console.WriteLine($\"Result: {result}\");\n}\n```", "```cs\nSystem.InvalidOperationException:\n     'The calling thread cannot access this object\n     because a different thread owns it.'\n```", "```cs\npublic class CheckoutRequestProgress\n{\n    public int Total { get; set; }\n\n    public string Message { get; set; }\n}\n```", "```cs\npublic async IAsyncEnumerable<CheckoutRequest>\n    GetRequestsAsync(IProgress<CheckoutRequestProgress> progress)\n{\n    int total = 0;\n\n    while (true)\n    {\n        List<CheckoutRequest> requests =\n            await GetNextBatchAsync().ConfigureAwait(false);\n\n        total += requests.Count;\n\n        foreach (var request in requests)\n            yield return request;\n\n        progress.Report(\n            new CheckoutRequestProgress\n            {\n                Total = total,\n                Message = \"New Batch of Checkout Requests\"\n            });\n\n        await Task.Delay(1000).ConfigureAwait(false);\n    }\n}\n```", "```cs\nstatic async Task Main()\n{\n    var checkoutSvc = new CheckoutService();\n    var checkoutStrm = new CheckoutStream();\n\n    IProgress<CheckoutRequestProgress> progress =\n        new Progress<CheckoutRequestProgress>(p =>\n        {\n            Console.WriteLine(\n                $\"\\n\" +\n                $\"Total: {p.Total}, \" +\n                $\"{p.Message}\" +\n                $\"\\n\");\n        });\n\n    await foreach (var request in\n        checkoutStrm.GetRequestsAsync(progress))\n    {\n        string result = await checkoutSvc.StartAsync(request);\n\n        Console.WriteLine($\"Result: {result}\");\n    }\n}\n```", "```cs\npublic class CheckoutService\n{\n    public async Task<string> StartAsync()\n    {\n        await ValidateAddressAsync().ConfigureAwait(false);\n        await ValidateCreditAsync().ConfigureAwait(false);\n        await GetShoppingCartAsync().ConfigureAwait(false);\n        await FinalizeCheckoutAsync().ConfigureAwait(false);\n\n        return \"Checkout Complete\";\n    }\n\n    async Task<bool> ValidateAddressAsync()\n    {\n        bool result = true;\n        return await Task.FromResult(result);\n    }\n\n    async Task<bool> ValidateCreditAsync()\n    {\n        bool result = true;\n        return await Task.FromResult(result);\n    }\n\n    async Task<bool> GetShoppingCartAsync()\n    {\n        bool result = true;\n        return await Task.FromResult(result);\n    }\n\n    async Task FinalizeCheckoutAsync()\n    {\n        await Task.CompletedTask;\n    }\n}\n```", "```cs\nstatic async Task Main()\n{\n    var checkoutSvc = new CheckoutService();\n\n    string result = await checkoutSvc.StartAsync();\n\n    Console.WriteLine($\"Result: {result}\");\n}\n```", "```cs\nCS1998: This async method lacks 'await' operators\nand will run synchronously.\nConsider using the 'await' operator to await non-blocking API calls,\nor 'await Task.Run(...)' to do CPU-bound work on a background thread.\n```", "```cs\npublic class CheckoutService\n{\n    class WhenAllResult\n    {\n        public bool IsValidAddress { get; set; }\n        public bool IsValidCredit { get; set; }\n        public bool HasShoppingCart { get; set; }\n    }\n\n    public async Task<string> StartAsync()\n    {\n        var checkoutTasks =\n            new List<Task<(string, bool)>>\n            {\n                ValidateAddressAsync(),\n                ValidateCreditAsync(),\n                GetShoppingCartAsync()\n            };\n\n        Task<(string method, bool result)[]> allTasks =\n            Task.WhenAll(checkoutTasks);\n\n        if (allTasks.IsCompletedSuccessfully)\n        {\n            WhenAllResult whenAllResult = GetResultsAsync(allTasks);\n\n            await FinalizeCheckoutAsync(whenAllResult);\n\n            return \"Checkout Complete\";\n        }\n        else\n        {\n            throw allTasks.Exception;\n        }\n    }\n\n    WhenAllResult GetResultsAsync(\n        Task<(string method, bool result)[]> allTasks)\n    {\n        var whenAllResult = new WhenAllResult();\n\n        foreach (var (method, result) in allTasks.Result)\n            switch (method)\n            {\n                case nameof(ValidateAddressAsync):\n                    whenAllResult.IsValidAddress = result;\n                    break;\n                case nameof(ValidateCreditAsync):\n                    whenAllResult.IsValidCredit = result;\n                    break;\n                case nameof(GetShoppingCartAsync):\n                    whenAllResult.HasShoppingCart = result;\n                    break;\n            }\n\n        return whenAllResult;\n    }\n\n    async Task<(string, bool)> ValidateAddressAsync()\n    {\n        //throw new ArgumentException(\"Testing!\");\n\n        return await Task.FromResult(\n            (nameof(ValidateAddressAsync), true));\n    }\n\n    async Task<(string, bool)> ValidateCreditAsync()\n    {\n        return await Task.FromResult(\n            (nameof(ValidateCreditAsync), true));\n    }\n\n    async Task<(string, bool)> GetShoppingCartAsync()\n    {\n        return await Task.FromResult(\n            (nameof(GetShoppingCartAsync), true));\n    }\n\n    async Task<bool> FinalizeCheckoutAsync(WhenAllResult result)\n    {\n        Console.WriteLine(\n            $\"{nameof(WhenAllResult.IsValidAddress)}: \" +\n            $\"{result.IsValidAddress}\");\n        Console.WriteLine(\n            $\"{nameof(WhenAllResult.IsValidCredit)}: \" +\n            $\"{result.IsValidCredit}\");\n        Console.WriteLine(\n            $\"{nameof(WhenAllResult.HasShoppingCart)}: \" +\n            $\"{result.HasShoppingCart}\");\n\n        bool success = true;\n        return await Task.FromResult(success);\n    }\n}\n```", "```cs\nstatic async Task Main()\n{\n    try\n    {\n        var checkoutSvc = new CheckoutService();\n\n        string result = await checkoutSvc.StartAsync();\n\n        Console.WriteLine($\"Result: {result}\");\n    }\n    catch (AggregateException aEx)\n    {\n        foreach (var ex in aEx.InnerExceptions)\n            Console.WriteLine($\"Unable to complete: {ex}\");\n    }\n}\n```", "```cs\npublic async Task<string> StartBigONAsync()\n{\n    (_, bool addressResult) = await ValidateAddressAsync();\n    (_, bool creditResult) = await ValidateCreditAsync();\n    (_, bool cartResult) = await GetShoppingCartAsync();\n\n    await FinalizeCheckoutAsync(\n        new AllTasksResult\n        {\n            IsValidAddress = addressResult,\n            IsValidCredit = creditResult,\n            HasShoppingCart = cartResult\n        });\n\n    return \"Checkout Complete\";\n}\n```", "```cs\npublic async Task<string> StartBigO1Async()\n{\n    var checkoutTasks =\n        new List<Task<(string, bool)>>\n        {\n            ValidateAddressAsync(),\n            ValidateCreditAsync(),\n            GetShoppingCartAsync()\n        };\n\n    Task<(string method, bool result)[]> allTasks =\n        Task.WhenAll(checkoutTasks);\n\n    if (allTasks.IsCompletedSuccessfully)\n    {\n        AllTasksResult allResult = GetResults(allTasks);\n\n        await FinalizeCheckoutAsync(allResult);\n\n        return \"Checkout Complete\";\n    }\n    else\n    {\n        throw allTasks.Exception;\n    }\n}\n```", "```cs\npublic async Task<string> StartBigONSquaredAsync()\n{\n    var checkoutTasks =\n        new List<Task<(string, bool)>>\n        {\n            ValidateAddressAsync(),\n            ValidateCreditAsync(),\n            GetShoppingCartAsync()\n        };\n\n    var allResult = new AllTasksResult();\n\n    while (checkoutTasks.Any())\n    {\n        Task<(string, bool)> task = await Task.WhenAny(checkoutTasks);\n        checkoutTasks.Remove(task);\n\n        GetResult(task, allResult);\n    }\n\n    await FinalizeCheckoutAsync(allResult);\n\n    return \"Checkout Complete\";\n}\n```", "```cs\nasync Task<(string method, bool result)> ValidateCreditAsync()\n{\n    var checkoutTasks =\n        new List<Task<(string, bool)>>\n        {\n            CheckInternalCreditAsync(),\n            CheckAgency1CreditAsync(),\n            CheckAgency2CreditAsync()\n        };\n\n    Task<(string, bool)> task = await Task.WhenAny(checkoutTasks);\n\n    (_, bool result) = task.Result;\n\n    return await Task.FromResult(\n        (nameof(ValidateCreditAsync), result));\n}\n```", "```cs\nstatic async Task Main()\n{\n    try\n    {\n        var checkoutSvc = new CheckoutService();\n\n        string result = await checkoutSvc.StartBigO1Async();\n        //string result = await checkoutSvc.StartBigONAsync();\n        //string result = await checkoutSvc.StartBigONSquaredAsync();\n\n        Console.WriteLine($\"Result: {result}\");\n    }\n    catch (AggregateException aEx)\n    {\n        foreach (var ex in aEx.InnerExceptions)\n            Console.WriteLine($\"Unable to complete: {ex}\");\n    }\n}\n```", "```cs\npublic class CheckoutStream\n{\n    CancellationToken cancelToken;\n\n    public CheckoutStream(CancellationToken cancelToken)\n    {\n        this.cancelToken = cancelToken;\n    }\n\n    public async IAsyncEnumerable<CheckoutRequest> GetRequestsAsync(\n        IProgress<CheckoutRequestProgress> progress)\n    {\n        int total = 0;\n\n        while (true)\n        {\n            var requests = new List<CheckoutRequest>();\n\n            try\n            {\n                requests = await GetNextBatchAsync();\n            }\n            catch (OperationCanceledException)\n            {\n                break;\n            }\n\n            total += requests.Count;\n\n            foreach (var request in requests)\n            {\n                if (cancelToken.IsCancellationRequested)\n                    break;\n\n                yield return request;\n            }\n\n            progress.Report(\n                new CheckoutRequestProgress\n                {\n                    Total = total,\n                    Message = \"New Batch of Checkout Requests\"\n                });\n\n            if (cancelToken.IsCancellationRequested)\n                break;\n\n            await Task.Delay(1000);\n        }\n\n        if (cancelToken.IsCancellationRequested)\n            progress.Report(\n                new CheckoutRequestProgress\n                {\n                    Total = total,\n                    Message = \"Process Cancelled!\"\n                });\n    }\n\n    async Task<List<CheckoutRequest>> GetNextBatchAsync()\n    {\n        if (cancelToken.IsCancellationRequested)\n            throw new OperationCanceledException();\n\n        var requests = new List<CheckoutRequest>\n        {\n            new CheckoutRequest\n            {\n                ShoppingCartID = Guid.NewGuid(),\n                Address = \"123 4th St\",\n                Card = \"1234 5678 9012 3456\",\n                Name = \"First Card Name\"\n            },\n            new CheckoutRequest\n            {\n                ShoppingCartID = Guid.NewGuid(),\n                Address = \"789 1st Ave\",\n                Card = \"2345 6789 0123 4567\",\n                Name = \"Second Card Name\"\n            },\n            new CheckoutRequest\n            {\n                ShoppingCartID = Guid.NewGuid(),\n                Address = \"123 4th St\",\n                Card = \"1234 5678 9012 3456\",\n                Name = \"First Card Name\"\n            },\n        };\n\n        return await Task.FromResult(requests);\n    }\n}\n```", "```cs\nstatic async Task Main()\n{\n    var cancelSource = new CancellationTokenSource();\n    var checkoutStrm = new CheckoutStream(cancelSource.Token);\n    var checkoutSvc = new CheckoutService();\n\n    IProgress<CheckoutRequestProgress> progress =\n        new Progress<CheckoutRequestProgress>(p =>\n        {\n            Console.WriteLine(\n                $\"\\n\" +\n                $\"Total: {p.Total}, \" +\n                $\"{p.Message}\" +\n                $\"\\n\");\n        });\n\n    int count = 1;\n\n    await foreach (var request in\n        checkoutStrm.GetRequestsAsync(progress))\n    {\n        string result = await checkoutSvc.StartAsync(request);\n\n        Console.WriteLine($\"Result: {result}\");\n\n        if (count++ >= 10)\n            break;\n\n        if (count >= 5)\n            cancelSource.Cancel();\n    }\n}\n```", "```cs\npublic class CheckoutStream : IAsyncDisposable, IDisposable\n{\n    CancellationTokenSource cancelSource = new CancellationTokenSource();\n    CancellationToken cancelToken;\n    ILogger log = new ConsoleLogger();\n\n    FileStream asyncDisposeObj = new FileStream(\n        \"MyFile.txt\", FileMode.OpenOrCreate, FileAccess.Write);\n    HttpClient syncDisposeObj = new HttpClient();\n\n    public CheckoutStream()\n    {\n        this.cancelToken = cancelSource.Token;\n    }\n\n    public async IAsyncEnumerable<CheckoutRequest> GetRequestsAsync(\n        IProgress<CheckoutRequestProgress> progress)\n    {\n        int total = 0;\n\n        while (true)\n        {\n            var requests = new List<CheckoutRequest>();\n\n            try\n            {\n                requests = await GetNextBatchAsync();\n            }\n            catch (OperationCanceledException)\n            {\n                break;\n            }\n\n            total += requests.Count;\n\n            foreach (var request in requests)\n            {\n                if (cancelToken.IsCancellationRequested)\n                    break;\n\n                yield return request;\n            }\n\n            progress.Report(\n                new CheckoutRequestProgress\n                {\n                    Total = total,\n                    Message = \"New Batch of Checkout Requests\"\n                });\n\n            if (cancelToken.IsCancellationRequested)\n                break;\n\n            await Task.Delay(1000);\n        }\n    }\n\n    async Task<List<CheckoutRequest>> GetNextBatchAsync()\n    {\n        if (cancelToken.IsCancellationRequested)\n            throw new OperationCanceledException();\n\n        var requests = new List<CheckoutRequest>\n        {\n            new CheckoutRequest\n            {\n                ShoppingCartID = Guid.NewGuid(),\n                Address = \"123 4th St\",\n                Card = \"1234 5678 9012 3456\",\n                Name = \"First Card Name\"\n            },\n            new CheckoutRequest\n            {\n                ShoppingCartID = Guid.NewGuid(),\n                Address = \"789 1st Ave\",\n                Card = \"2345 6789 0123 4567\",\n                Name = \"Second Card Name\"\n            },\n            new CheckoutRequest\n            {\n                ShoppingCartID = Guid.NewGuid(),\n                Address = \"123 4th St\",\n                Card = \"1234 5678 9012 3456\",\n                Name = \"First Card Name\"\n            },\n        };\n\n        return await Task.FromResult(requests);\n    }\n\n    public async ValueTask DisposeAsync()\n    {\n        await DisposeAsyncCore();\n\n        Dispose(disposing: false);\n        GC.SuppressFinalize(this);\n    }\n\n    public void Dispose()\n    {\n        Dispose(disposing: true);\n        GC.SuppressFinalize(this);\n    }\n\n    protected virtual void Dispose(bool disposing)\n    {\n        if (disposing)\n        {\n            syncDisposeObj?.Dispose();\n            (asyncDisposeObj as IDisposable)?.Dispose();\n        }\n\n        DisposeThisObject();\n    }\n\n    protected virtual async ValueTask DisposeAsyncCore()\n    {\n        if (asyncDisposeObj is not null)\n        {\n            await asyncDisposeObj.DisposeAsync().ConfigureAwait(false);\n        }\n\n        if (syncDisposeObj is IAsyncDisposable disposable)\n        {\n            await disposable.DisposeAsync().ConfigureAwait(false);\n        }\n        else\n        {\n            syncDisposeObj.Dispose();\n        }\n\n        DisposeThisObject();\n\n        await log.WriteAsync(\"\\n\\nDisposed!\");\n    }\n\n    void DisposeThisObject()\n    {\n        cancelSource.Cancel();\n\n        asyncDisposeObj = null;\n        syncDisposeObj = null;\n    }\n}\n```", "```cs\nstatic async Task Main()\n{\n    await using var checkoutStrm = new CheckoutStream();\n\n    var checkoutSvc = new CheckoutService();\n\n    IProgress<CheckoutRequestProgress> progress =\n        new Progress<CheckoutRequestProgress>(p =>\n        {\n            Console.WriteLine(\n                $\"\\n\" +\n                $\"Total: {p.Total}, \" +\n                $\"{p.Message}\" +\n                $\"\\n\");\n        });\n\n    int count = 1;\n\n    await foreach (var request in\n        checkoutStrm.GetRequestsAsync(progress))\n    {\n        string result = await checkoutSvc.StartAsync(request);\n\n        Console.WriteLine($\"Result: {result}\");\n\n        if (count++ >= 10)\n            break;\n    }\n}\n```"]