["```cs\n// Given parameters 10 and 20, this would output the following string:\n// \"10 + 20 = 30\"\npublic string ComposeMessage(int a, int b)\n{\n return a + \" + \" + b + \" = \" + (a + b);\n}\n\npublic void LogMessage(string a)\n{\n this.Logger.LogInfo(\"message received: \" + a);\n}\n```", "```cs\nFunc<int, int, string> ComposeMessage =\n (a, b) => a + \" + \" + b + \" = \" + (a + b);\n\nAction<string> LogMessage = a =>\n this.Logger.LogInfo($\"message received: {x}\");\n```", "```cs\nvar message = ComposeMessage(10, 20);\nLogMessage(message);\n```", "```cs\nconst int exp1 = 6;\nconst int exp2 = 6 * 10;\n```", "```cs\npublic int AddTen(int x) => x + 10;\n```", "```cs\npublic bool IsTen(int x) => x == 10;\n```", "```cs\nvar randomNumber = this._rnd.Generate();\nvar message = randomNumber == 10\n ? \"It was ten\"\n : \"it wasn't ten\";\n```", "```cs\nthis._thingDoer.GoDoSomething();\n```", "```cs\npublic decimal CalculateHypotenuse(decimal b, decimal c)\n{\n var bSquared = b * b;\n var cSquared = c * c;\n var aSquared = bSquared + cSquared;\n var a = Math.Sqrt(aSquared);\n return a;\n}\n```", "```cs\npublic decimal CalculateHypotenuse(decimal b, decimal c)\n{\n var returnValue = b * b;\n returnValue += c * c;\n returnValue = Math.Sqrt(returnValue);\n return returnValue;\n}\n```", "```cs\nvar addTen = (int x) => x + 10;\nvar twenty = addTen(10);\n```", "```cs\npublic int Add(int a, int b) => a + b;\n\npublic string SayHello(string name) => \"Hello \" +\n (string.IsNullOrWhitespace(name)\n  ? \"I don't believe we've met.  Would you like a Jelly Baby?\"\n  : name);\n```", "```cs\npublic void Add(int a) => this.total += a; // Alters state\n\npublic string SayHello() => \"Hello \" + this.Name;\n// Reads from state instead of a parameter value\n```", "```cs\npublic string SayHello() => \"Hello \" + this.GetName();\n\npublic string SayHello2(Customer c)\n{\n c.SaidHelloTo = true;\n return \"Hello \" + (c?.Name ?? \"Unknown Person\");\n}\n\npublic string SayHello3(string name) =>\n DateTime.Now + \" - Hello \" + (name ?? \"Unknown Person\");\n```", "```cs\npublic int AddUntil(int startValue, int endValue)\n{\n\tif (startValue >= endValue)\n\t\treturn startValue;\n\telse\n\t\treturn AddUntil(startValue + 1, endValue);\n}\n```", "```cs\npublic int NumberOfDays(int month, bool isLeapYear)\n{\n if(month == 2)\n {\n  if(isLeapYear)\n   return 29;\n  else\n   return 28;\n }\n if(month == 1 || month == 3 || month == 5 || month == 7 ||\n  month == 8 || month == 10 || month == 12)\n   return 31;\n  else\n   return 30;\n}\n```", "```cs\npublic int NumberOfDays(int month, bool isLeapYear) =>\n\t(month, isLeapYear) switch\n\t{\n\t\t{ month: 2, isLeapYear: true } => 29,\n\t\t{ month: 2 } => 28,\n\t\t{ month: 1 or 3 or 5 or 7 or 8 or 10 or 12 } => 31,\n\t\t_ => 31\n\t};\n```", "```cs\npublic class DoctorWho\n{\n\tpublic int NumberOfStories { get; set; }\n\tpublic int CurrentDoctor { get; set; }\n\tpublic string CurrentDoctorActor { get; set; }\n\tpublic int SeasonNumber { get; set; }\n}\n\npublic class DoctorWhoRepository\n{\n\tprivate DoctorWho State;\n\n\tpublic DoctorWhoRepository(DoctorWho initialState)\n\t{\n\t\tthis.State = initialState;\n\t}\n\n\tpublic void AddNewSeason(int storiesInSeason)\n\t{\n\t\tthis.State.NumberOfStories += storiesInSeason;\n\t\tthis.State.SeasonNumber++;\n\t}\n\n\tpublic void RegenerateDoctor(string newActorName)\n\t{\n\t\tthis.State.CurrentDoctor++;\n\t\tthis.State.CurrentDoctorActor = newActorName;\n\t}\n}\n```", "```cs\n  public DoctorWho RegenerateDoctor(DoctorWho oldState, string newActorName)\n  {\n    return new DoctorWho\n    {\n      NumberOfStories = oldState.NumberOfStories,\n      CurrentDoctor = oldState.CurrentDoctor + 1,\n      CurrentDoctorActor = newActorName,\n      SeasonNumber = oldState.SeasonNumber\n    };\n  }\n```", "```cs\nOven.SetTemperatureInCentigrade(180);\nfor(int i=0; i < 3; i++)\n{\n\tbowl.AddEgg();\n\tbool isEggBeaten = false;\n\twhile(!isEggBeaten)\n\t{\n\t\tBowl.BeatContents();\n\t\tisEggBeaten = Bowl.IsStirred();\n\t}\n}\nfor(int i == 0; i < 12; i++)\n{\n\tOvenTray.Add(paperCase[i]);\n\tOvenTray.AddToCase(bowl.TakeSpoonfullOfContents());\n}\nOven.Add(OvenTray);\nThread.PauseMinutes(25);\nOven.ExtractAll();\n```", "```cs\n  Oven.SetTemperatureInCentigrade(180);\n  var cakeBatter = EggBox.Take(3)\n    .Each(e => Bowl.Add(e)\n                   .Then(b =>\n                       b.While(x => !x.IsStirred, x.BeatContents())\n                     )\n                   )\n          .DivideInto(12)\n      .Each(cb =>\n        OvenTray.Add(PaperCaseBox.Take(1).Add(cb))\n      );\n```"]