["```cs\npublic class SalesPerson\n{\n    public int ID { get; set; }\n\n    public string Name { get; set; }\n\n    public string Address { get; set; }\n\n    public string City { get; set; }\n\n    public string PostalCode { get; set; }\n\n    public string Region { get; set; }\n\n    public string ProductType { get; set; }\n}\n```", "```cs\npublic class InMemoryContext\n{\n    List<SalesPerson> salesPeople =\n        new List<SalesPerson>\n        {\n            new SalesPerson\n            {\n                ID = 1,\n                Address = \"123 1st Street\",\n                City = \"First City\",\n                Name = \"First Person\",\n                PostalCode = \"45678\",\n                Region = \"Region #1\"\n            },\n            new SalesPerson\n            {\n                ID = 2,\n                Address = \"234 2nd Street\",\n                City = \"Second City\",\n                Name = \"Second Person\",\n                PostalCode = \"56789\",\n                Region = \"Region #2\"\n            },\n            new SalesPerson\n            {\n                ID = 3,\n                Address = \"345 3rd Street\",\n                City = \"Third City\",\n                Name = \"Third Person\",\n                PostalCode = \"67890\",\n                Region = \"Region #3\"\n            },\n        };\n\n    public List<SalesPerson> SalesPeople => salesPeople;\n}\n```", "```cs\nclass Program\n{\n    static void Main()\n    {\n        var context = new InMemoryContext();\n\n        var salesPersonLookup =\n            (from person in context.SalesPeople\n             select (person.ID, person.Name))\n            .ToList();\n\n        Console.WriteLine(\"Sales People\\n\");\n\n        salesPersonLookup.ForEach(person =>\n            Console.WriteLine($\"{person.ID}. {person.Name}\"));\n    }\n}\n```", "```cs\npublic class Product\n{\n    public int ID { get; set; }\n\n    public string Name { get; set; }\n\n    public string Type { get; set; }\n\n    public decimal Price { get; set; }\n\n    public string Region { get; set; }\n}\n\npublic class SalesPerson\n{\n    public int ID { get; set; }\n\n    public string Name { get; set; }\n\n    public string Address { get; set; }\n\n    public string City { get; set; }\n\n    public string PostalCode { get; set; }\n\n    public string Region { get; set; }\n\n    public string ProductType { get; set; }\n}\n```", "```cs\npublic class InMemoryContext\n{\n    List<SalesPerson> salesPeople =\n        new List<SalesPerson>\n        {\n            new SalesPerson\n            {\n                ID = 1,\n                Address = \"123 1st Street\",\n                City = \"First City\",\n                Name = \"First Person\",\n                PostalCode = \"45678\",\n                Region = \"Region #1\",\n                ProductType = \"Type 2\"\n            },\n            new SalesPerson\n            {\n                ID = 2,\n                Address = \"234 2nd Street\",\n                City = \"Second City\",\n                Name = \"Second Person\",\n                PostalCode = \"56789\",\n                Region = \"Region #2\",\n                ProductType = \"Type 3\"\n            },\n            new SalesPerson\n            {\n                ID = 3,\n                Address = \"345 3rd Street\",\n                City = \"Third City\",\n                Name = \"Third Person\",\n                PostalCode = \"67890\",\n                Region = \"Region #3\",\n                ProductType = \"Type 1\"\n            },\n            new SalesPerson\n            {\n                ID = 4,\n                Address = \"678 9th Street\",\n                City = \"Fourth City\",\n                Name = \"Fourth Person\",\n                PostalCode = \"90123\",\n                Region = \"Region #1\",\n                ProductType = \"Type 2\"\n            },\n        };\n\n    List<Product> products =\n        new List<Product>\n        {\n            new Product\n            {\n                ID = 1,\n                Name = \"Product 1\",\n                Price = 123.45m,\n                Type = \"Type 2\",\n                Region = \"Region #1\",\n            },\n            new Product\n            {\n                ID = 2,\n                Name = \"Product 2\",\n                Price = 456.78m,\n                Type = \"Type 2\",\n                Region = \"Region #2\",\n            },\n            new Product\n            {\n                ID = 3,\n                Name = \"Product 3\",\n                Price = 789.10m,\n                Type = \"Type 3\",\n                Region = \"Region #1\",\n            },\n            new Product\n            {\n                ID = 4,\n                Name = \"Product 4\",\n                Price = 234.56m,\n                Type = \"Type 2\",\n                Region = \"Region #1\",\n            },\n        };\n\n    public List<SalesPerson> SalesPeople => salesPeople;\n\n    public List<Product> Products => products;\n}\n```", "```cs\nclass Program\n{\n    static void Main()\n    {\n        var context = new InMemoryContext();\n\n        var salesProducts =\n            (from person in context.SalesPeople\n             join product in context.Products on\n             (person.Region, person.ProductType)\n             equals\n             (product.Region, product.Type)\n             select new\n             {\n                Person = person.Name,\n                Product = product.Name,\n                product.Region,\n                product.Type\n             })\n            .ToList();\n\n        Console.WriteLine(\"Sales People\\n\");\n\n        salesProducts.ForEach(salesProd =>\n            Console.WriteLine(\n                $\"Person: {salesProd.Person}\\n\" +\n                $\"Product: {salesProd.Product}\\n\" +\n                $\"Region: {salesProd.Region}\\n\" +\n                $\"Type: {salesProd.Type}\\n\"));\n    }\n}\n```", "```cs\npublic class Product\n{\n    public int ID { get; set; }\n\n    public string Name { get; set; }\n\n    public string Type { get; set; }\n\n    public decimal Price { get; set; }\n\n    public string Region { get; set; }\n}\n\npublic class SalesPerson\n{\n    public int ID { get; set; }\n\n    public string Name { get; set; }\n\n    public string Address { get; set; }\n\n    public string City { get; set; }\n\n    public string PostalCode { get; set; }\n\n    public string Region { get; set; }\n\n    public string ProductType { get; set; }\n}\n```", "```cs\npublic class InMemoryContext\n{\n    List<SalesPerson> salesPeople =\n        new List<SalesPerson>\n        {\n            new SalesPerson\n            {\n                ID = 1,\n                Address = \"123 1st Street\",\n                City = \"First City\",\n                Name = \"First Person\",\n                PostalCode = \"45678\",\n                Region = \"Region #1\",\n                ProductType = \"Type 2\"\n            },\n            new SalesPerson\n            {\n                ID = 2,\n                Address = \"234 2nd Street\",\n                City = \"Second City\",\n                Name = \"Second Person\",\n                PostalCode = \"56789\",\n                Region = \"Region #2\",\n                ProductType = \"Type 3\"\n            },\n            new SalesPerson\n            {\n                ID = 3,\n                Address = \"345 3rd Street\",\n                City = \"Third City\",\n                Name = \"Third Person\",\n                PostalCode = \"67890\",\n                Region = \"Region #3\",\n                ProductType = \"Type 1\"\n            },\n            new SalesPerson\n            {\n                ID = 3,\n                Address = \"678 9th Street\",\n                City = \"Fourth City\",\n                Name = \"Fourth Person\",\n                PostalCode = \"90123\",\n                Region = \"Region #1\",\n                ProductType = \"Type 2\"\n            },\n        };\n\n    List<Product> products =\n        new List<Product>\n        {\n            new Product\n            {\n                ID = 1,\n                Name = \"Product 1\",\n                Price = 123.45m,\n                Type = \"Type 2\",\n                Region = \"Region #1\",\n            },\n            new Product\n            {\n                ID = 2,\n                Name = \"Product 2\",\n                Price = 456.78m,\n                Type = \"Type 2\",\n                Region = \"Region #2\",\n            },\n            new Product\n            {\n                ID = 3,\n                Name = \"Product 3\",\n                Price = 789.10m,\n                Type = \"Type 3\",\n                Region = \"Region #1\",\n            },\n            new Product\n            {\n                ID = 4,\n                Name = \"Product 4\",\n                Price = 234.56m,\n                Type = \"Type 2\",\n                Region = \"Region #1\",\n            },\n        };\n\n    public List<SalesPerson> SalesPeople => salesPeople;\n\n    public List<Product> Products => products;\n}\n```", "```cs\nclass Program\n{\n    static void Main()\n    {\n        var context = new InMemoryContext();\n\n        var salesProducts =\n            (from product in context.Products\n             join person in context.SalesPeople on\n             (product.Region, product.Type)\n             equals\n             (person.Region, person.ProductType)\n             into prodPersonTemp\n             from prodPerson in prodPersonTemp.DefaultIfEmpty()\n             select new\n             {\n                Person = prodPerson?.Name ?? \"(none)\",\n                Product = product.Name,\n                product.Region,\n                product.Type\n             })\n            .ToList();\n\n        Console.WriteLine(\"Sales People\\n\");\n\n        salesProducts.ForEach(salesProd =>\n            Console.WriteLine(\n                $\"Person: {salesProd.Person}\\n\" +\n                $\"Product: {salesProd.Product}\\n\" +\n                $\"Region: {salesProd.Region}\\n\" +\n                $\"Type: {salesProd.Type}\\n\"));\n    }\n}\n```", "```cs\nSales People\n\nPerson: First Person\nProduct: Product 1\nRegion: Region #1\nType: Type 2\n\nPerson: Fourth Person\nProduct: Product 1\nRegion: Region #1\nType: Type 2\n\nPerson: (none)\nProduct: Product 2\nRegion: Region #2\nType: Type 2\n\nPerson: (none)\nProduct: Product 3\nRegion: Region #1\nType: Type 3\n\nPerson: First Person\nProduct: Product 4\nRegion: Region #1\nType: Type 2\n\nPerson: Fourth Person\nProduct: Product 4\nRegion: Region #1\nType: Type 2\n```", "```cs\npublic class SalesPerson\n{\n    public int ID { get; set; }\n\n    public string Name { get; set; }\n\n    public string Address { get; set; }\n\n    public string City { get; set; }\n\n    public string PostalCode { get; set; }\n\n    public string Region { get; set; }\n\n    public string ProductType { get; set; }\n}\n```", "```cs\npublic class InMemoryContext\n{\n    List<SalesPerson> salesPeople =\n        new List<SalesPerson>\n        {\n            new SalesPerson\n            {\n                ID = 1,\n                Address = \"123 1st Street\",\n                City = \"First City\",\n                Name = \"First Person\",\n                PostalCode = \"45678\",\n                Region = \"Region #1\"\n            },\n            new SalesPerson\n            {\n                ID = 2,\n                Address = \"234 2nd Street\",\n                City = \"Second City\",\n                Name = \"Second Person\",\n                PostalCode = \"56789\",\n                Region = \"Region #2\"\n            },\n            new SalesPerson\n            {\n                ID = 3,\n                Address = \"345 3rd Street\",\n                City = \"Third City\",\n                Name = \"Third Person\",\n                PostalCode = \"67890\",\n                Region = \"Region #3\"\n            },\n            new SalesPerson\n            {\n                ID = 4,\n                Address = \"678 9th Street\",\n                City = \"Second City\",\n                Name = \"Fourth Person\",\n                PostalCode = \"56788\",\n                Region = \"Region #2\"\n            },\n        };\n\n    public List<SalesPerson> SalesPeople => salesPeople;\n}\n```", "```cs\nclass Program\n{\n    static void Main()\n    {\n        var context = new InMemoryContext();\n\n        var salesPeopleByRegion =\n            (from person in context.SalesPeople\n             group person by person.Region\n             into personGroup\n             select personGroup)\n            .ToList();\n\n        Console.WriteLine(\"Sales People by Region\");\n\n        foreach (var region in salesPeopleByRegion)\n        {\n            Console.WriteLine($\"\\nRegion: {region.Key}\");\n\n            foreach (var person in region)\n                Console.WriteLine($\"  {person.Name}\");\n        }\n    }\n}\n```", "```cs\nKey (Region):\n    Items (IEnumerable<SalesPerson>)\n```", "```cs\npublic class SalesPerson\n{\n    public int ID { get; set; }\n\n    public string Name { get; set; }\n\n    public string Address { get; set; }\n\n    public string City { get; set; }\n\n    public string PostalCode { get; set; }\n\n    public string Region { get; set; }\n\n    public string ProductType { get; set; }\n}\n```", "```cs\npublic class InMemoryContext\n{\n    List<SalesPerson> salesPeople =\n        new List<SalesPerson>\n        {\n            new SalesPerson\n            {\n                ID = 1,\n                Address = \"123 1st Street\",\n                City = \"First City\",\n                Name = \"First Person\",\n                PostalCode = \"45678\",\n                Region = \"Region #1\",\n                ProductType = \"Type 2\"\n            },\n            new SalesPerson\n            {\n                ID = 2,\n                Address = \"234 2nd Street\",\n                City = \"Second City\",\n                Name = \"Second Person\",\n                PostalCode = \"56789\",\n                Region = \"Region #2\",\n                ProductType = \"Type 3\"\n            },\n            new SalesPerson\n            {\n                ID = 3,\n                Address = \"345 3rd Street\",\n                City = \"Third City\",\n                Name = \"Third Person\",\n                PostalCode = \"67890\",\n                Region = \"Region #3\",\n                ProductType = \"Type 1\"\n            },\n            new SalesPerson\n            {\n                ID = 4,\n                Address = \"678 9th Street\",\n                City = \"Fourth City\",\n                Name = \"Fourth Person\",\n                PostalCode = \"90123\",\n                Region = \"Region #1\",\n                ProductType = \"Type 2\"\n            },\n        };\n\n    public List<SalesPerson> SalesPeople => salesPeople;\n}\n```", "```cs\nclass Program\n{\n    static void Main()\n    {\n        SalesPerson searchCriteria = GetCriteriaFromUser();\n\n        List<SalesPerson> salesPeople = QuerySalesPeople(searchCriteria);\n\n        PrintResults(salesPeople);\n    }\n\n    static SalesPerson GetCriteriaFromUser()\n    {\n        var person = new SalesPerson();\n\n        Console.WriteLine(\"Sales Person Search\");\n        Console.WriteLine(\"(press Enter to skip an entry)\\n\");\n\n        Console.Write($\"{nameof(SalesPerson.Address)}: \");\n        person.Address = Console.ReadLine();\n\n        Console.Write($\"{nameof(SalesPerson.City)}: \");\n        person.City = Console.ReadLine();\n\n        Console.Write($\"{nameof(SalesPerson.Name)}: \");\n        person.Name = Console.ReadLine();\n\n        Console.Write($\"{nameof(SalesPerson.PostalCode)}: \");\n        person.PostalCode = Console.ReadLine();\n\n        Console.Write($\"{nameof(SalesPerson.ProductType)}: \");\n        person.ProductType = Console.ReadLine();\n\n        Console.Write($\"{nameof(SalesPerson.Region)}: \");\n        person.Region = Console.ReadLine();\n\n        return person;\n    }\n\n    static List<SalesPerson> QuerySalesPeople(SalesPerson criteria)\n    {\n        var ctx = new InMemoryContext();\n\n        IEnumerable<SalesPerson> salesPeopleQuery =\n            from people in ctx.SalesPeople\n            select people;\n\n        if (!string.IsNullOrWhiteSpace(criteria.Address))\n            salesPeopleQuery = salesPeopleQuery.Where(\n                person => person.Address == criteria.Address);\n\n        if (!string.IsNullOrWhiteSpace(criteria.City))\n            salesPeopleQuery = salesPeopleQuery.Where(\n                person => person.City == criteria.City);\n\n        if (!string.IsNullOrWhiteSpace(criteria.Name))\n            salesPeopleQuery = salesPeopleQuery.Where(\n                person => person.Name == criteria.Name);\n\n        if (!string.IsNullOrWhiteSpace(criteria.PostalCode))\n            salesPeopleQuery = salesPeopleQuery.Where(\n                person => person.PostalCode == criteria.PostalCode);\n\n        if (!string.IsNullOrWhiteSpace(criteria.ProductType))\n            salesPeopleQuery = salesPeopleQuery.Where(\n                person => person.ProductType == criteria.ProductType);\n\n        if (!string.IsNullOrWhiteSpace(criteria.Region))\n            salesPeopleQuery = salesPeopleQuery.Where(\n                person => person.Region == criteria.Region);\n\n        List<SalesPerson> salesPeople = salesPeopleQuery.ToList();\n\n        return salesPeople;\n    }\n\n    static void PrintResults(List<SalesPerson> salesPeople)\n    {\n        Console.WriteLine(\"\\nSales People\\n\");\n\n        salesPeople.ForEach(person =>\n            Console.WriteLine($\"{person.ID}. {person.Name}\"));\n    }\n}\n```", "```cs\npublic class SalesPerson\n{\n    public int ID { get; set; }\n\n    public string Name { get; set; }\n\n    public string Address { get; set; }\n\n    public string City { get; set; }\n\n    public string PostalCode { get; set; }\n\n    public string Region { get; set; }\n\n    public string ProductType { get; set; }\n}\n```", "```cs\npublic class SalesPersonComparer : IEqualityComparer<SalesPerson>\n{\n    public bool Equals(SalesPerson x, SalesPerson y)\n    {\n        return x.ID == y.ID;\n    }\n\n    public int GetHashCode(SalesPerson obj)\n    {\n        return obj.GetHashCode();\n    }\n}\n\npublic class SalesPerson\n{\n    public int ID { get; set; }\n\n    public string Name { get; set; }\n\n    public string Address { get; set; }\n\n    public string City { get; set; }\n\n    public string PostalCode { get; set; }\n\n    public string Region { get; set; }\n\n    public string ProductType { get; set; }\n}\n```", "```cs\npublic class InMemoryContext\n{\n    List<SalesPerson> salesPeople =\n        new List<SalesPerson>\n        {\n            new SalesPerson\n            {\n                ID = 1,\n                Address = \"123 1st Street\",\n                City = \"First City\",\n                Name = \"First Person\",\n                PostalCode = \"45678\",\n                Region = \"Region #1\",\n                ProductType = \"Type 2\"\n            },\n            new SalesPerson\n            {\n                ID = 2,\n                Address = \"234 2nd Street\",\n                City = \"Second City\",\n                Name = \"Second Person\",\n                PostalCode = \"56789\",\n                Region = \"Region #2\",\n                ProductType = \"Type 3\"\n            },\n            new SalesPerson\n            {\n                ID = 3,\n                Address = \"345 3rd Street\",\n                City = \"Third City\",\n                Name = \"Third Person\",\n                PostalCode = \"67890\",\n                Region = \"Region #3\",\n                ProductType = \"Type 1\"\n            },\n            new SalesPerson\n            {\n                ID = 4,\n                Address = \"678 9th Street\",\n                City = \"Fourth City\",\n                Name = \"Fourth Person\",\n                PostalCode = \"90123\",\n                Region = \"Region #1\",\n                ProductType = \"Type 2\"\n            },\n            new SalesPerson\n            {\n                ID = 4,\n                Address = \"678 9th Street\",\n                City = \"Fourth City\",\n                Name = \"Fourth Person\",\n                PostalCode = \"90123\",\n                Region = \"Region #1\",\n                ProductType = \"Type 2\"\n            },\n        };\n\n    public List<SalesPerson> SalesPeople => salesPeople;\n}\n```", "```cs\nclass Program\n{\n    static void Main(string[] args)\n    {\n        var salesPeopleWithoutComparer =\n            (from person in new InMemoryContext().SalesPeople\n             select person)\n            .Distinct()\n            .ToList();\n\n        PrintResults(salesPeopleWithoutComparer, \"Without Comparer\");\n\n        var salesPeopleWithComparer =\n            (from person in new InMemoryContext().SalesPeople\n             select person)\n            .Distinct(new SalesPersonComparer())\n            .ToList();\n\n        PrintResults(salesPeopleWithComparer, \"With Comparer\");\n    }\n\n    static void PrintResults(List<SalesPerson> salesPeople, string title)\n    {\n        Console.WriteLine($\"\\n{title}\\n\");\n\n        salesPeople.ForEach(person =>\n            Console.WriteLine($\"{person.ID}. {person.Name}\"));\n    }\n}\n```", "```cs\npublic class SalesPerson\n{\n    public int ID { get; set; }\n\n    public string Name { get; set; }\n\n    public string Address { get; set; }\n\n    public string City { get; set; }\n\n    public string PostalCode { get; set; }\n\n    public string Region { get; set; }\n\n    public string ProductType { get; set; }\n\n    public string TotalSales { get; set; }\n}\n```", "```cs\npublic class InMemoryContext\n{\n    List<SalesPerson> salesPeople =\n        new List<SalesPerson>\n        {\n            new SalesPerson\n            {\n                ID = 1,\n                Address = \"123 1st Street\",\n                City = \"First City\",\n                Name = \"First Person\",\n                PostalCode = \"45678\",\n                Region = \"Region #1\",\n                ProductType = \"Type 2\",\n                TotalSales = \"654.32\"\n            },\n            new SalesPerson\n            {\n                ID = 2,\n                Address = \"234 2nd Street\",\n                City = \"Second City\",\n                Name = \"Second Person\",\n                PostalCode = \"56789\",\n                Region = \"Region #2\",\n                ProductType = \"Type 3\",\n                TotalSales = \"765.43\"\n            },\n            new SalesPerson\n            {\n                ID = 3,\n                Address = \"345 3rd Street\",\n                City = \"Third City\",\n                Name = \"Third Person\",\n                PostalCode = \"67890\",\n                Region = \"Region #3\",\n                ProductType = \"Type 1\",\n                TotalSales = \"876.54\"\n            },\n            new SalesPerson\n            {\n                ID = 4,\n                Address = \"678 9th Street\",\n                City = \"Fourth City\",\n                Name = \"Fourth Person\",\n                PostalCode = \"90123\",\n                Region = \"Region #1\",\n                ProductType = \"Type 2\",\n                TotalSales = \"987.65\"\n            },\n            new SalesPerson\n            {\n                ID = 4,\n                Address = \"678 9th Street\",\n                City = \"Fourth City\",\n                Name = \"Fourth Person\",\n                PostalCode = \"90123\",\n                Region = \"Region #1\",\n                ProductType = \"Type 2\",\n                TotalSales = \"109.87\"\n            },\n        };\n\n    public List<SalesPerson> SalesPeople => salesPeople;\n}\n```", "```cs\nclass Program\n{\n    static void Main(string[] args)\n    {\n        decimal TotalSales = 0;\n\n        var salesPeopleWithAddresses =\n            (from person in new InMemoryContext().SalesPeople\n             let FullAddress =\n             $\"{person.Address}\\n\" +\n             $\"{person.City}, {person.PostalCode}\"\n             let salesOkay =\n                 decimal.TryParse(person.TotalSales, out TotalSales)\n             select new\n             {\n                person.ID,\n                person.Name,\n                FullAddress,\n                TotalSales\n             })\n            .ToList();\n\n        Console.WriteLine($\"\\nSales People and Addresses\\n\");\n\n        salesPeopleWithAddresses.ForEach(person =>\n            Console.WriteLine(\n                $\"{person.ID}. {person.Name}: {person.TotalSales:C}\\n\" +\n                $\"{person.FullAddress}\\n\"));\n    }\n}\n```", "```cs\npublic class SalesPerson : IEqualityComparer<SalesPerson>\n{\n    public int ID { get; set; }\n\n    public string Name { get; set; }\n\n    public string Address { get; set; }\n\n    public string City { get; set; }\n\n    public string PostalCode { get; set; }\n\n    public string Region { get; set; }\n\n    public string ProductType { get; set; }\n\n    public bool Equals(SalesPerson x, SalesPerson y)\n    {\n        return x.ID == y.ID;\n    }\n\n    public int GetHashCode(SalesPerson obj)\n    {\n        return ID.GetHashCode();\n    }\n}\n```", "```cs\npublic class InMemoryContext\n{\n    List<SalesPerson> salesPeople =\n        new List<SalesPerson>\n        {\n            new SalesPerson\n            {\n                ID = 1,\n                Address = \"123 1st Street\",\n                City = \"First City\",\n                Name = \"First Person\",\n                PostalCode = \"45678\",\n                Region = \"Region #1\",\n                ProductType = \"Type 2\"\n            },\n            new SalesPerson\n            {\n                ID = 2,\n                Address = \"234 2nd Street\",\n                City = \"Second City\",\n                Name = \"Second Person\",\n                PostalCode = \"56789\",\n                Region = \"Region #2\",\n                ProductType = \"Type 3\"\n            },\n            new SalesPerson\n            {\n                ID = 3,\n                Address = \"345 3rd Street\",\n                City = \"Third City\",\n                Name = \"Third Person\",\n                PostalCode = \"67890\",\n                Region = \"Region #3\",\n                ProductType = \"Type 1\"\n            },\n            new SalesPerson\n            {\n                ID = 4,\n                Address = \"678 9th Street\",\n                City = \"Fourth City\",\n                Name = \"Fourth Person\",\n                PostalCode = \"90123\",\n                Region = \"Region #1\",\n                ProductType = \"Type 2\"\n            },\n        };\n\n    public List<SalesPerson> SalesPeople => salesPeople;\n}\n```", "```cs\nclass Program\n{\n    static InMemoryContext ctx = new InMemoryContext();\n\n    static void Main()\n    {\n        System.Console.WriteLine(\"\\nLINQ Set Operations\");\n\n        DoUnion();\n        DoExcept();\n        DoIntersection();\n\n        System.Console.WriteLine(\"\\nComplete.\\n\");\n    }\n\n    static void DoUnion()\n    {\n        var dataSource1 =\n            (from person in ctx.SalesPeople\n             where person.ID < 3\n             select person)\n            .ToList();\n\n        var dataSource2 =\n            (from person in ctx.SalesPeople\n             where person.ID > 2\n             select person)\n            .ToList();\n\n        List<SalesPerson> union =\n            dataSource1\n                .Union(dataSource2, new SalesPerson())\n                .ToList();\n\n        PrintResults(union, \"Union Results\");\n    }\n\n    static void DoExcept()\n    {\n        var dataSource1 =\n            (from person in ctx.SalesPeople\n             select person)\n            .ToList();\n\n        var dataSource2 =\n            (from person in ctx.SalesPeople\n             where person.ID == 4\n             select person)\n            .ToList();\n\n        List<SalesPerson> union =\n            dataSource1\n                .Except(dataSource2, new SalesPerson())\n                .ToList();\n\n        PrintResults(union, \"Except Results\");\n    }\n\n    static void DoIntersection()\n    {\n        var dataSource1 =\n            (from person in ctx.SalesPeople\n             where person.ID < 4\n             select person)\n            .ToList();\n\n        var dataSource2 =\n            (from person in ctx.SalesPeople\n             where person.ID > 2\n             select person)\n            .ToList();\n\n        List<SalesPerson> union =\n            dataSource1\n                .Intersect(dataSource2, new SalesPerson())\n                .ToList();\n\n        PrintResults(union, \"Intersect Results\");\n    }\n\n    static void PrintResults(List<SalesPerson> salesPeople, string title)\n    {\n        Console.WriteLine($\"\\n{title}\\n\");\n\n        salesPeople.ForEach(person =>\n            Console.WriteLine($\"{person.ID}. {person.Name}\"));\n    }\n}\n```", "```cs\npublic class SalesPerson\n{\n    public int ID { get; set; }\n\n    public string Name { get; set; }\n\n    public string Address { get; set; }\n\n    public string City { get; set; }\n\n    public string PostalCode { get; set; }\n\n    public string Region { get; set; }\n\n    public string ProductType { get; set; }\n}\n```", "```cs\npublic class InMemoryContext\n{\n    List<SalesPerson> salesPeople =\n        new List<SalesPerson>\n        {\n            new SalesPerson\n            {\n                ID = 1,\n                Address = \"123 1st Street\",\n                City = \"First City\",\n                Name = \"First Person\",\n                PostalCode = \"45678\",\n                Region = \"Region #1\",\n                ProductType = \"Type 2\"\n            },\n            new SalesPerson\n            {\n                ID = 2,\n                Address = \"234 2nd Street\",\n                City = \"Second City\",\n                Name = \"Second Person\",\n                PostalCode = \"56789\",\n                Region = \"Region #2\",\n                ProductType = \"Type 3\"\n            },\n            new SalesPerson\n            {\n                ID = 3,\n                Address = \"345 3rd Street\",\n                City = \"Third City\",\n                Name = \"Third Person\",\n                PostalCode = \"67890\",\n                Region = \"Region #3\",\n                ProductType = \"Type 1\"\n            },\n            new SalesPerson\n            {\n                ID = 4,\n                Address = \"678 9th Street\",\n                City = \"Fourth City\",\n                Name = \"Fourth Person\",\n                PostalCode = \"90123\",\n                Region = \"Region #1\",\n                ProductType = \"Type 2\"\n            },\n        };\n\n    public List<SalesPerson> SalesPeople => salesPeople;\n}\n```", "```cs\npublic static class CookbookExtensions\n{\n    public static IEnumerable<TParameter> WhereOr<TParameter>(\n        this IEnumerable<TParameter> query,\n        Dictionary<string, string> criteria)\n    {\n        const string ParamName = \"person\";\n\n        ParameterExpression paramExpr =\n            Expression.Parameter(typeof(TParameter), ParamName);\n\n        Expression accumulatorExpr = null;\n\n        foreach (var criterion in criteria)\n        {\n            MemberExpression paramMbr =\n                LambdaExpression.PropertyOrField(\n                    paramExpr, criterion.Key);\n\n            MemberExpression leftExpr =\n                Expression.Property(\n                    paramExpr,\n                    typeof(TParameter).GetProperty(criterion.Key));\n            Expression rightExpr =\n                Expression.Constant(criterion.Value, typeof(string));\n            Expression equalExpr =\n                Expression.Equal(leftExpr, rightExpr);\n\n            accumulatorExpr = accumulatorExpr == null\n                ? equalExpr\n                : Expression.Or(accumulatorExpr, equalExpr);\n        }\n\n        Expression<Func<TParameter, bool>> allClauses =\n            Expression.Lambda<Func<TParameter, bool>>(\n                accumulatorExpr, paramExpr);\n\n        Func<TParameter, bool> compiledClause = allClauses.Compile();\n\n        return query.Where(compiledClause);\n    }\n}\n```", "```cs\nclass Program\n{\n    static void Main()\n    {\n        SalesPerson searchCriteria = GetCriteriaFromUser();\n\n        List<SalesPerson> salesPeople = QuerySalesPeople(searchCriteria);\n\n        PrintResults(salesPeople);\n    }\n\n    static SalesPerson GetCriteriaFromUser()\n    {\n        var person = new SalesPerson();\n\n        Console.WriteLine(\"Sales Person Search\");\n        Console.WriteLine(\"(press Enter to skip an entry)\\n\");\n\n        Console.Write($\"{nameof(SalesPerson.Address)}: \");\n        person.Address = Console.ReadLine();\n\n        Console.Write($\"{nameof(SalesPerson.City)}: \");\n        person.City = Console.ReadLine();\n\n        Console.Write($\"{nameof(SalesPerson.Name)}: \");\n        person.Name = Console.ReadLine();\n\n        Console.Write($\"{nameof(SalesPerson.PostalCode)}: \");\n        person.PostalCode = Console.ReadLine();\n\n        Console.Write($\"{nameof(SalesPerson.ProductType)}: \");\n        person.ProductType = Console.ReadLine();\n\n        Console.Write($\"{nameof(SalesPerson.Region)}: \");\n        person.Region = Console.ReadLine();\n\n        return person;\n    }\n\n    static List<SalesPerson> QuerySalesPeople(SalesPerson criteria)\n    {\n        var ctx = new InMemoryContext();\n\n        var filters = new Dictionary<string, string>();\n\n        IEnumerable<SalesPerson> salesPeopleQuery =\n            from people in ctx.SalesPeople\n            select people;\n\n        if (!string.IsNullOrWhiteSpace(criteria.Address))\n            filters[nameof(criteria.Address)] = criteria.Address;\n\n        if (!string.IsNullOrWhiteSpace(criteria.City))\n            filters[nameof(criteria.City)] = criteria.City;\n\n        if (!string.IsNullOrWhiteSpace(criteria.Name))\n            filters[nameof(criteria.Name)] = criteria.Name;\n\n        if (!string.IsNullOrWhiteSpace(criteria.PostalCode))\n            filters[nameof(criteria.PostalCode)] = criteria.PostalCode;\n\n        if (!string.IsNullOrWhiteSpace(criteria.ProductType))\n            filters[nameof(criteria.ProductType)] = criteria.ProductType;\n\n        if (!string.IsNullOrWhiteSpace(criteria.Region))\n            filters[nameof(criteria.Region)] = criteria.Region;\n\n        salesPeopleQuery =\n            salesPeopleQuery.WhereOr<SalesPerson>(filters);\n\n        List<SalesPerson> salesPeople = salesPeopleQuery.ToList();\n\n        return salesPeople;\n    }\n\n    static void PrintResults(List<SalesPerson> salesPeople)\n    {\n        Console.WriteLine(\"\\nSales People\\n\");\n\n        salesPeople.ForEach(person =>\n            Console.WriteLine($\"{person.ID}. {person.Name}\"));\n    }\n}\n```", "```cs\nperson => person.Field1 == \"val1\" || ... || person.FieldN == \"valN\"\n```", "```cs\nCity == 'MyCity' || Name == 'Joe'\n```", "```cs\nCity == 'MyCity' || Name == 'Joe' || ProductType == 'Widgets' || Region == 'West'\n```", "```cs\npublic class SalesPerson\n{\n    public int ID { get; set; }\n\n    public string Name { get; set; }\n\n    public string Address { get; set; }\n\n    public string City { get; set; }\n\n    public string PostalCode { get; set; }\n\n    public string Region { get; set; }\n\n    public string ProductType { get; set; }\n}\n```", "```cs\npublic class InMemoryContext\n{\n    List<SalesPerson> salesPeople =\n        new List<SalesPerson>\n        {\n            new SalesPerson\n            {\n                ID = 1,\n                Address = \"123 1st Street\",\n                City = \"First City\",\n                Name = \"First Person\",\n                PostalCode = \"45678\",\n                Region = \"Region #1\",\n                ProductType = \"Type 2\"\n            },\n            new SalesPerson\n            {\n                ID = 2,\n                Address = \"234 2nd Street\",\n                City = \"Second City\",\n                Name = \"Second Person\",\n                PostalCode = \"56789\",\n                Region = \"Region #2\",\n                ProductType = \"Type 3\"\n            },\n            new SalesPerson\n            {\n                ID = 3,\n                Address = \"345 3rd Street\",\n                City = \"Third City\",\n                Name = \"Third Person\",\n                PostalCode = \"67890\",\n                Region = \"Region #3\",\n                ProductType = \"Type 1\"\n            },\n            new SalesPerson\n            {\n                ID = 4,\n                Address = \"678 9th Street\",\n                City = \"Fourth City\",\n                Name = \"Fourth Person\",\n                PostalCode = \"90123\",\n                Region = \"Region #1\",\n                ProductType = \"Type 2\"\n            },\n            new SalesPerson\n            {\n                ID = 5,\n                Address = \"678 9th Street\",\n                City = \"Fifth City\",\n                Name = \"Fifth Person\",\n                PostalCode = \"90123\",\n                Region = \"Region #1\",\n                ProductType = \"Type 2\"\n            },\n        };\n\n    public List<SalesPerson> SalesPeople => salesPeople;\n}\n```", "```cs\nclass Program\n{\n    static void Main()\n    {\n        List<SalesPerson> salesPeople = new InMemoryContext().SalesPeople;\n        var result =\n            (from person in salesPeople.AsParallel()\n             select ProcessPerson(person))\n            .ToList();\n    }\n\n    static SalesPerson ProcessPerson(SalesPerson person)\n    {\n        Console.WriteLine(\n            $\"Starting sales person \" +\n            $\"#{person.ID}. {person.Name}\");\n\n        // complex in-memory processing\n        Thread.Sleep(500);\n\n        Console.WriteLine(\n            $\"Completed sales person \" +\n            $\"#{person.ID}. {person.Name}\");\n\n        return person;\n    }\n}\n```"]