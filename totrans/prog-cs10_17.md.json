["```cs\n// Note: as you'll see later, async methods usually should not be void private async void FetchAndShowHeaders(string url, IHttpClientFactory cf)\n{\n    using (HttpClient w = cf.CreateClient())\n    {\n        var req = new HttpRequestMessage(HttpMethod.Head, url);\n        HttpResponseMessage response =\n            `await` `w``.``SendAsync``(``req``,` `HttpCompletionOption``.``ResponseHeadersRead``)``;`\n\n        headerListTextBox.Text = response.Headers.ToString();\n    }\n}\n```", "```cs\nprivate void fetchHeadersButton_Click(object sender, RoutedEventArgs e)\n{\n    FetchAndShowHeaders(\"https://endjin.com/\", this.clientFactory);\n    Debug.WriteLine(\"Method returned\");\n}\n```", "```cs\nprivate void OldSchoolFetchHeaders(string url, IHttpClientFactory cf)\n{\n    HttpClient w = cf.CreateClient();\n    var req = new HttpRequestMessage(HttpMethod.Head, url);\n\n    var uiScheduler = TaskScheduler.FromCurrentSynchronizationContext();\n    w.SendAsync(req, HttpCompletionOption.ResponseHeadersRead)\n        .ContinueWith(sendTask =>\n        {\n            try\n            {\n                HttpResponseMessage response = sendTask.Result;\n                headerListTextBox.Text = response.Headers.ToString();\n            }\n            finally\n            {\n                w.Dispose();\n            }\n        },\n        uiScheduler);\n}\n```", "```cs\nprivate async void OnFetchButtonClick(object sender, RoutedEventArgs e)\n{\n    using (HttpClient w = this.clientFactory.CreateClient())\n    using (Stream f = File.Create(fileTextBox.Text))\n    {\n        Task<Stream> getStreamTask = w.GetStreamAsync(urlTextBox.Text);\n        `Stream` `getStream` `=` `await` `getStreamTask``.``ConfigureAwait``(``false``)``;`\n\n        Task copyTask = getStream.CopyToAsync(f);\n        `await` `copyTask``.``ConfigureAwait``(``false``)``;`\n    }\n}\n\n```", "```cs\nprivate async void FetchAndShowBody(string url, IHttpClientFactory cf)\n{\n    using (HttpClient w = cf.CreateClient())\n    {\n        `Stream` `body` `=` `await` `w``.``GetStreamAsync``(``url``)``;`\n        using (var bodyTextReader = new StreamReader(body))\n        {\n            while (!bodyTextReader.EndOfStream)\n            {\n                `string?` `line` `=` `await` `bodyTextReader``.``ReadLineAsync``(``)``;`\n                bodyTextBox.AppendText(line);\n                bodyTextBox.AppendText(Environment.NewLine);\n                `await` `Task``.``Delay``(``TimeSpan``.``FromMilliseconds``(``10``)``)``;`\n            }\n        }\n    }\n}\n```", "```cs\nprivate void IncompleteOldSchoolFetchAndShowBody(\n    string url, IHttpClientFactory cf)\n{\n    HttpClient w = cf.CreateClient();\n    var uiScheduler = TaskScheduler.FromCurrentSynchronizationContext();\n    w.GetStreamAsync(url).ContinueWith(getStreamTask =>\n    {\n        Stream body = getStreamTask.Result;\n        var bodyTextReader = new StreamReader(body);\n\n        StartNextIteration();\n\n        void StartNextIteration()\n        {\n            if (!bodyTextReader.EndOfStream)\n            {\n                bodyTextReader.ReadLineAsync().ContinueWith(readLineTask =>\n                    {\n                        string? line = readLineTask.Result;\n\n                        bodyTextBox.AppendText(line);\n                        bodyTextBox.AppendText(Environment.NewLine);\n\n                        Task.Delay(TimeSpan.FromMilliseconds(10))\n                            .ContinueWith(\n                                _ => StartNextIteration(), uiScheduler);\n                    },\n                uiScheduler);\n            }\n        };\n    },\n        uiScheduler);\n}\n```", "```cs\nbool MoveNext();\n```", "```cs\npublic interface IAsyncEnumerable<out T>\n{\n    IAsyncEnumerator<T> GetAsyncEnumerator(\n        CancellationToken cancellationToken = default);\n}\n\npublic interface IAsyncEnumerator<out T> : IAsyncDisposable\n{\n    T Current { get; }\n\n    ValueTask<bool> MoveNextAsync();\n}\n```", "```cs\nawait foreach (string line in ReadLinesAsync(args[0]))\n{\n    Console.WriteLine(line);\n}\n\nstatic async IAsyncEnumerable<string> ReadLinesAsync(string path)\n{\n    using (var bodyTextReader = new StreamReader(path))\n    {\n        while (!bodyTextReader.EndOfStream)\n        {\n            string? line = await bodyTextReader.ReadLineAsync();\n            if (line is not null) { yield return line; }\n        }\n    }\n}\n```", "```cs\nawait using (DiagnosticWriter w = new(@\"c:\\temp\\log.txt\"))\n{\n    await w.LogAsync(\"Test\");\n}\n\nclass DiagnosticWriter : IAsyncDisposable\n{\n    private StreamWriter? _sw;\n\n    public DiagnosticWriter(string path)\n    {\n        _sw = new StreamWriter(path);\n    }\n\n    public Task LogAsync(string message)\n    {\n        if (_sw is null)\n        { throw new ObjectDisposedException(nameof(DiagnosticWriter)); }\n        return _sw.WriteLineAsync(message);\n    }\n\n    public async ValueTask DisposeAsync()\n    {\n        if (_sw != null)\n        {\n            await LogAsync(\"Done\");\n            await _sw.DisposeAsync();\n            _sw = null;\n        }\n    }\n}\n```", "```cs\nprivate async Task FetchAndShowBody(string url, IHttpClientFactory cf)\n// ...as before\n```", "```cs\npublic static async Task<string?> GetServerHeader(\n    string url, IHttpClientFactory cf)\n{\n    using (HttpClient w = cf.CreateClient())\n    {\n        var request = new HttpRequestMessage(HttpMethod.Head, url);\n        HttpResponseMessage response = await w.SendAsync(\n            request, HttpCompletionOption.ResponseHeadersRead);\n\n        string? result = null;\n        IEnumerable<string>? values;\n        if (response.Headers.TryGetValues(\"Server\", out values))\n        {\n            result = values.FirstOrDefault();\n        }\n        `return` `result``;`\n    }\n}\n```", "```cs\nokButton.Click += async (s, e) =>\n{\n    using (HttpClient w = this.clientFactory.CreateClient())\n    {\n        infoTextBlock.Text = await w.GetStringAsync(uriTextBox.Text);\n    }\n};\n```", "```cs\nstatic async Task UseCustomAsync()\n{\n    string result = await CustomAsync();\n    Console.WriteLine(result);\n}\n\npublic static MyAwaitableType CustomAsync()\n{\n    return new MyAwaitableType();\n}\n```", "```cs\npublic class MyAwaitableType\n{\n    public MinimalAwaiter GetAwaiter()\n    {\n        return new MinimalAwaiter();\n    }\n\n    public class MinimalAwaiter : INotifyCompletion\n    {\n        public bool IsCompleted => true;\n\n        public string GetResult() => \"This is a result\";\n\n        public void OnCompleted(Action continuation)\n        {\n            throw new NotImplementedException();\n        }\n    }\n}\n```", "```cs\nstatic void ManualUseCustomAsync()\n{\n    var awaiter = CustomAsync().GetAwaiter();\n    if (awaiter.IsCompleted)\n    {\n        TheRest(awaiter);\n    }\n    else\n    {\n        awaiter.OnCompleted(() => TheRest(awaiter));\n    }\n}\n\nprivate static void TheRest(MyAwaitableType.MinimalAwaiter awaiter)\n{\n    string result = awaiter.GetResult();\n    Console.WriteLine(result);\n}\n```", "```cs\nprivate class ManualUseCustomAsyncState\n{\n    private int state;\n    private MyAwaitableType.MinimalAwaiter? awaiter;\n\n    public void MoveNext()\n    {\n        if (state == 0)\n        {\n            awaiter = CustomAsync().GetAwaiter();\n            if (!awaiter.IsCompleted)\n            {\n                state = 1;\n                awaiter.OnCompleted(MoveNext);\n                return;\n            }\n        }\n        string result = awaiter!.GetResult();\n        Console.WriteLine(result);\n    }\n}\n\nstatic void ManualUseCustomAsync()\n{\n    var s = new ManualUseCustomAsyncState();\n    s.MoveNext();\n}\n```", "```cs\nprivate static async Task<string> FindLongestLineAsync(\n    string url, IHttpClientFactory cf)\n{\n    using (HttpClient w = cf.CreateClient())\n    {\n        Stream body = await w.GetStreamAsync(url);\n        using (var bodyTextReader = new StreamReader(body))\n        {\n            string longestLine = string.Empty;\n            while (!bodyTextReader.EndOfStream)\n            {\n                string? line = await bodyTextReader.ReadLineAsync();\n                if (line is not null && longestLine.Length > line.Length)\n                {\n                    longestLine = line;\n                }\n            }\n            return longestLine;\n        }\n    }\n}\n```", "```cs\ntry\n{\n    string longest = await FindLongestLineAsync(\n        \"http://192.168.22.1/\", this.clientFactory);\n    Console.WriteLine(\"Longest line: \" + longest);\n}\ncatch (HttpRequestException x)\n{\n    Console.WriteLine(\"Error fetching page: \" + x.Message);\n}\n```", "```cs\npublic async Task<string> FindLongestLineAsync(string url)\n{\n    ArgumentNullException.ThrowIfNull(url);\n    ...\n```", "```cs\npublic static Task<string> FindLongestLineAsync(string url)\n{\n    ArgumentNullException.ThrowIfNull(url);\n    return FindLongestLineCore(url);\n\n    static async Task<string> FindLongestLineCore(string url)\n    {\n        ...\n    }\n}\n```", "```cs\nstatic async Task CatchAll(Task[] ts)\n{\n    try\n    {\n        var t = Task.WhenAll(ts);\n        await t.ContinueWith(\n                    x => {},\n                    TaskContinuationOptions.ExecuteSynchronously);\n        t.Wait();\n    }\n    catch (AggregateException all)\n    {\n        Console.WriteLine(all);\n    }\n}\n```", "```cs\nstatic async Task CatchAll(Task[] ts)\n{\n    Task? t = null;\n    try\n    {\n        t = Task.WhenAll(ts);\n        await t;\n    }\n    catch (Exception first)\n    {\n        Console.WriteLine(first);\n\n        if (t?.Exception?.InnerExceptions.Count > 1)\n        {\n            Console.WriteLine(\"I've found some more:\");\n            Console.WriteLine(t.Exception);\n        }\n    }\n}\n```", "```cs\nstatic async Task GetSeveral(IHttpClientFactory cf)\n{\n    using (HttpClient w = cf.CreateClient())\n    {\n        w.MaxResponseContentBufferSize = 2_000_000;\n\n        Task<string> g1 = w.GetStringAsync(\"https://endjin.com/\");\n        Task<string> g2 = w.GetStringAsync(\"https://oreilly.com\");\n\n        // BAD!\n        Console.WriteLine((await g1).Length);\n        Console.WriteLine((await g2).Length);\n    }\n}\n```"]