["```cs\n[default]\naws_access_key_id = <your-access-key>\naws_secret_access_key = <your-secret-key>\n```", "```cs\nvar s3Client = new AmazonS3Client(Amazon.RegionEndpoint.USEast1);\n\nawait s3Client.CopyObjectAsync(\n        sourceBucket,\n        sourceKey,\n        destinationBucket,\n        destinationKey\n);\n```", "```cs\naws s3api copy-object --copy-source <source-bucket> --key <key> --bucket <dest>\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddControllers();\n\n// Add a dependency to the DI container\nbuilder.Services.AddScoped<IMyDependency, MyDependency>();\n```", "```cs\nvar awsOptions = builder.Configuration.GetAWSOptions();\n\nbuilder.Services.AddDefaultAWSOptions(awsOptions);\n```", "```cs\npublic class Startup\n{\n    public Startup(IConfiguration configuration)\n    {\n        Configuration = configuration;\n    }\n\n    public IConfiguration Configuration { get; }\n\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddControllers();\n\n        var awsOptions = Configuration.GetAWSOptions();\n\n        services.AddDefaultAWSOptions(awsOptions); ![1](assets/1.png)\n    }\n\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        // ...\n    }\n}\n```", "```cs\n{\n  \"AWS\": {\n    \"Region\": \"us-east-1\",\n    \"Profile\": \"my-profile-name\"\n  },\n  \"MyKey\": \"My appsettings.json Value\"\n}\n```", "```cs\nvar awsOptions = builder.Configuration.GetAWSOptions();\n\nbuilder.Services.AddDefaultAWSOptions(awsOptions);\n\nservices.AddAWSService<IAmazonLambda>(); ![1](assets/1.png)\n```", "```cs\n[Route(\"api/[controller]\")]\npublic class ExampleController : ControllerBase\n{\n    private readonly IAmazonLambda _lambdaClient;\n\n    public ExampleController(IAmazonLambda lambdaClient)\n    {\n        _lambdaClient = lambdaClient;\n    }\n\n    public async Task DoSomething()\n    {\n        await _lambdaClient.InvokeAsync(new Amazon.Lambda.Model.InvokeRequest\n        {\n            FunctionName = \"MyLambdaFunction\",\n            InvocationType = InvocationType.Event\n        });\n    }\n}\n```", "```cs\n[default]\nretry_mode = Adaptive\n[profile profile-name]\nregion = eu-west-2\n```", "```cs\nvar awsOptions = builder.Configuration.GetAWSOptions();\n\n// Default retry mode and max error setting for all service clients\nvar retryMode = awsOptions.DefaultClientConfig.RetryMode;\nvar maxErrorRetry = awsOptions.DefaultClientConfig.MaxErrorRetry;\n\nbuilder.Services.AddDefaultAWSOptions(awsOptions);\n\nservices.AddAWSService<IAmazonLambda>();\n```", "```cs\npublic static async IAsyncEnumerable<string>\n        GetAllPaginatedKeys(this IAmazonS3 s3Client, string bucketName)\n{\n    string? continuationToken = null;\n    do\n    {\n        var response = await s3Client.ListObjectsV2Async(\n            new ListObjectsV2Request\n            {\n                BucketName = bucketName,\n                ContinuationToken = continuationToken\n            });\n\n        foreach (var responseObject in response.S3Objects)\n        {\n            yield return responseObject.Key;\n        }\n        continuationToken = response.NextContinuationToken;\n    }\n    while (continuationToken != null);\n}\n```", "```cs\npublic static async IAsyncEnumerable<string>\n        GetAllPaginatedKeys(this IAmazonS3 s3Client, string bucketName)\n{\n    var listObjectsV2Paginator = s3Client.Paginators.ListObjectsV2(\n        new ListObjectsV2Request\n        {\n            BucketName = bucketName\n        });\n\n    await foreach (var s3Object in listObjectsV2Paginator.S3Objects)\n    {\n        yield return s3Object.Key;\n    }\n}\n```", "```cs\naws comprehend detect-sentiment \\\n    --language-code \"en\" \\\n    --text \"I love C#.\"\n```", "```cs\n    sudo yum install lynx\n    ```", "```cs\n    lynx -dump https://en.wikipedia.org/wiki/Albert_Einstein | less\n    ```", "```cs\n    lynx -dump https://en.wikipedia.org/wiki/Albert_Einstein | wc -l\n    ```", "```cs\n    lynx -dump https://en.wikipedia.org/wiki/Albert_Einstein | wc \\\n     --bytes\n    ```", "```cs\n    432232\n    ```", "```cs\nTEXT=`lynx -dump https://en.wikipedia.org/wiki/Albert_Einstein | head -c 5000`\n```", "```cs\naws comprehend detect-sentiment --language-code \"en\" --text \"$TEXT\"\n{\n    \"Sentiment\": \"NEUTRAL\",\n    \"SentimentScore\": {\n        \"Positive\": 0.3402811586856842,\n        \"Negative\": 0.0033634265419095755,\n        \"Neutral\": 0.6556956768035889,\n        \"Mixed\": 0.0006596834864467382\n    }\n}\n```", "```cs\naws comprehend detect-entities \\\n    --language-code \"en\" \\\n    --text \"$TEXT\" \\\n    --output text | head\n```", "```cs\nENTITIES    20     29     0.632317066192627     Wikipedia          ORGANIZATION\nENTITIES    126    141    0.9918091297149658    Albert Einstein    PERSON\nENTITIES    151    160    0.7205400466918945    Wikipedia          ORGANIZATION\nENTITIES    230    236    0.9783479571342468    German             OTHER\nENTITIES    256    264    0.9940117001533508    Einstein           PERSON\nENTITIES    305    313    0.9899683594703674    Einstein           PERSON\nENTITIES    341    356    0.9821130633354187    Albert Einstein    PERSON\nENTITIES    379    394    0.990595817565918     Albert Einstein    PERSON\nENTITIES    401    409    0.814979076385498     Einstein           PERSON\nENTITIES    410    414    0.9937220215797424    1921               DATE\n```", "```cs\naws comprehend detect-entities \\\n    --language-code \"en\" \\\n    --text \"$TEXT\" \\\n    --output text \\\n    | cut -f 5 \\\n    | tr -cd \"[:alpha:][:space:]\" \\\n    | tr ' [:upper:]' '\\n[:lower:]' \\\n    | tr -s '\\n' \\\n    | sort \\\n    | uniq -c \\\n    | sort -nr -k 1 \\\n    | head\n```", "```cs\n     12 einstein\n      9 of\n      6 university\n      4 german\n      4 empire\n      4 Albert\n      3 kingdom\n      2 Zurich\n      2 wrttemberg\n      2 Wikipedia\n```", "```cs\nusing Amazon;\nusing Amazon.Comprehend;\nusing Amazon.Comprehend.Model;\n\n// Display title\nConsole.WriteLine(\"AWS AI API Sentiment Detector\" + Environment.NewLine);\n\n// Ask for phrase\nConsole.WriteLine(\"Type in phrase for analysis\" + Environment.NewLine);\nvar phrase = Console.ReadLine();\n\n// Detect Sentiment\nvar comprehendClient = new AmazonComprehendClient(RegionEndpoint.EUWest1);\nConsole.WriteLine(\"Calling DetectSentiment\");\n\nvar detectSentimentResponse = await\ncomprehendClient.DetectSentimentAsync(\nnew DetectSentimentRequest()\n{\n    Text = phrase,\n    LanguageCode = \"en\"\n});\nConsole.WriteLine(detectSentimentResponse.Sentiment);\nConsole.WriteLine(\"Done\");\n```", "```cs\nusing Amazon.Rekognition;\nusing Amazon.Rekognition.Model;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace AwsRekognitionExample.Controllers;\n\n[Route(\"api/[controller]\")]\npublic class ImageController\n{\n    private readonly IAmazonRekognition _rekognition;\n\n    public ImageController(IAmazonRekognition rekognition)\n    {\n        _rekognition = rekognition;\n    }\n\n [HttpGet]\n    public async Task<string> GetFirstLabel()\n    {\n        var response = await _rekognition.DetectLabelsAsync(\n            new DetectLabelsRequest\n            {\n                Image = new Image()\n                {\n                    S3Object = new S3Object()\n                    {\n                        Name = \"cat.jpg\",\n                        Bucket = \"photos-bucket\",\n                    },\n                },\n                MaxLabels = 10,\n                MinConfidence = 75F,\n            });\n\n        return response.Labels.FirstOrDefault()?.Name ?? \"None\";\n    }\n}\n```"]