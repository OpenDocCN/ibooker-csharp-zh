["```cs\ninterface IMyAsyncInterface\n{\n  Task<int> CountBytesAsync(HttpClient client, string url);\n}\n\nclass MyAsyncClass : IMyAsyncInterface\n{\n  public async Task<int> CountBytesAsync(HttpClient client, string url)\n  {\n    var bytes = await client.GetByteArrayAsync(url);\n    return bytes.Length;\n  }\n}\n\nasync Task UseMyInterfaceAsync(HttpClient client, IMyAsyncInterface service)\n{\n  var result = await service.CountBytesAsync(client, \"http://www.example.com\");\n  Trace.WriteLine(result);\n}\n```", "```cs\nclass MyAsyncClassStub : IMyAsyncInterface\n{\n  public Task<int> CountBytesAsync(HttpClient client, string url)\n  {\n    return Task.FromResult(13);\n  }\n}\n```", "```cs\nvar instance = new MyAsyncClass();\nawait instance.InitializeAsync();\n```", "```cs\nclass MyAsyncClass\n{\n  private MyAsyncClass()\n  {\n  }\n\n  private async Task<MyAsyncClass> InitializeAsync()\n  {\n    await Task.Delay(TimeSpan.FromSeconds(1));\n    return this;\n  }\n\n  public static Task<MyAsyncClass> CreateAsync()\n  {\n    var result = new MyAsyncClass();\n    return result.InitializeAsync();\n  }\n}\n```", "```cs\nMyAsyncClass instance = await MyAsyncClass.CreateAsync();\n```", "```cs\nclass MyAsyncClass\n{\n  public MyAsyncClass()\n  {\n    InitializeAsync();\n  }\n\n  // BAD CODE!!\n  private async void InitializeAsync()\n  {\n    await Task.Delay(TimeSpan.FromSeconds(1));\n  }\n}\n```", "```cs\nTask Initialization { get; }\n```", "```cs\n/// <summary>\n/// Marks a type as requiring asynchronous initialization\n/// and provides the result of that initialization.\n/// </summary>\npublic interface IAsyncInitialization\n{\n  /// <summary>\n  /// The result of the asynchronous initialization of this instance.\n  /// </summary>\n  Task Initialization { get; }\n}\n```", "```cs\nclass MyFundamentalType : IMyFundamentalType, IAsyncInitialization\n{\n  public MyFundamentalType()\n  {\n    Initialization = InitializeAsync();\n  }\n\n  public Task Initialization { get; private set; }\n\n  private async Task InitializeAsync()\n  {\n    // Asynchronously initialize this instance.\n    await Task.Delay(TimeSpan.FromSeconds(1));\n  }\n}\n```", "```cs\nIMyFundamentalType instance = UltimateDIFactory.Create<IMyFundamentalType>();\nvar instanceAsyncInit = instance as IAsyncInitialization;\nif (instanceAsyncInit != null)\n  await instanceAsyncInit.Initialization;\n```", "```cs\nclass MyComposedType : IMyComposedType, IAsyncInitialization\n{\n  private readonly IMyFundamentalType _fundamental;\n\n  public MyComposedType(IMyFundamentalType fundamental)\n  {\n    _fundamental = fundamental;\n    Initialization = InitializeAsync();\n  }\n\n  public Task Initialization { get; private set; }\n\n  private async Task InitializeAsync()\n  {\n    // Asynchronously wait for the fundamental instance to initialize,\n    //  if necessary.\n    var fundamentalAsyncInit = _fundamental as IAsyncInitialization;\n    if (fundamentalAsyncInit != null)\n      await fundamentalAsyncInit.Initialization;\n\n    // Do our own initialization (synchronous or asynchronous).\n    ...\n  }\n}\n```", "```cs\npublic static class AsyncInitialization\n{\n  public static Task WhenAllInitializedAsync(params object[] instances)\n  {\n    return Task.WhenAll(instances\n        .OfType<IAsyncInitialization>()\n        .Select(x => x.Initialization));\n  }\n}\n```", "```cs\nprivate async Task InitializeAsync()\n{\n // Asynchronously wait for all 3 instances to initialize, if necessary.\n await AsyncInitialization.WhenAllInitializedAsync(_fundamental,\n     _anotherType, _yetAnother);\n\n // Do our own initialization (synchronous or asynchronous).\n ...\n}\n```", "```cs\n// What we think we want (does not compile).\npublic int Data\n{\n  async get\n  {\n    await Task.Delay(TimeSpan.FromSeconds(1));\n    return 13;\n  }\n}\n```", "```cs\n// As an asynchronous method.\npublic async Task<int> GetDataAsync()\n{\n  await Task.Delay(TimeSpan.FromSeconds(1));\n  return 13;\n}\n```", "```cs\n// This \"async property\" is an asynchronous method.\n// This \"async property\" is a Task-returning property.\npublic Task<int> Data\n{\n  get { return GetDataAsync(); }\n}\n\nprivate async Task<int> GetDataAsync()\n{\n  await Task.Delay(TimeSpan.FromSeconds(1));\n  return 13;\n}\n```", "```cs\n// As a cached value\npublic AsyncLazy<int> Data\n{\n  get { return _data; }\n}\n\nprivate readonly AsyncLazy<int> _data =\n    new AsyncLazy<int>(async () =>\n    {\n      await Task.Delay(TimeSpan.FromSeconds(1));\n      return 13;\n    });\n```", "```cs\nint value = await instance.Data;\n```", "```cs\nprivate async Task<int> GetDataAsync()\n{\n  await Task.Delay(TimeSpan.FromSeconds(1));\n  return 13;\n}\n\npublic int Data\n{\n  // BAD CODE!!\n  get { return GetDataAsync().Result; }\n}\n```", "```cs\npublic class MyEventArgs : EventArgs, IDeferralSource\n{\n  private readonly DeferralManager _deferrals = new DeferralManager();\n\n  ... // Your own constructors and properties\n\n  public IDisposable GetDeferral()\n  {\n    return _deferrals.DeferralSource.GetDeferral();\n  }\n\n  internal Task WaitForDeferralsAsync()\n  {\n    return _deferrals.WaitForDeferralsAsync();\n  }\n}\n```", "```cs\npublic event EventHandler<MyEventArgs> MyEvent;\n\nprivate async Task RaiseMyEventAsync()\n{\n  EventHandler<MyEventArgs> handler = MyEvent;\n  if (handler == null)\n    return;\n\n  var args = new MyEventArgs(...);\n  handler(this, args);\n  await args.WaitForDeferralsAsync();\n}\n```", "```cs\nasync void AsyncHandler(object sender, MyEventArgs args)\n{\n  using IDisposable deferral = args.GetDeferral();\n  await Task.Delay(TimeSpan.FromSeconds(2));\n}\n```", "```cs\nclass MyClass : IDisposable\n{\n  private readonly CancellationTokenSource _disposeCts =\n      new CancellationTokenSource();\n\n  public async Task<int> CalculateValueAsync()\n  {\n    await Task.Delay(TimeSpan.FromSeconds(2), _disposeCts.Token);\n    return 13;\n  }\n\n  public void Dispose()\n  {\n    _disposeCts.Cancel();\n  }\n}\n```", "```cs\npublic async Task<int> CalculateValueAsync(CancellationToken cancellationToken)\n{\n  using CancellationTokenSource combinedCts = CancellationTokenSource\n      .CreateLinkedTokenSource(cancellationToken, _disposeCts.Token);\n  await Task.Delay(TimeSpan.FromSeconds(2), combinedCts.Token);\n  return 13;\n}\n```", "```cs\nasync Task UseMyClassAsync()\n{\n  Task<int> task;\n  using (var resource = new MyClass())\n  {\n    task = resource.CalculateValueAsync(default);\n  }\n\n  // Throws OperationCanceledException.\n  var result = await task;\n}\n```", "```cs\nclass MyClass : IAsyncDisposable\n{\n  public async ValueTask DisposeAsync()\n  {\n    await Task.Delay(TimeSpan.FromSeconds(2));\n  }\n}\n```", "```cs\nawait using (var myClass = new MyClass())\n{\n  ...\n} // DisposeAsync is invoked (and awaited) here.\n```", "```cs\nvar myClass = new MyClass();\nawait using (myClass.ConfigureAwait(false))\n{\n  ...\n} // DisposeAsync is invoked (and awaited) here with ConfigureAwait(false).\n```"]