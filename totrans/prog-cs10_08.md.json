["```cs\nstatic void Main(string[] args)\n{\n    using (var r = new StreamReader(@\"C:\\Temp\\File.txt\"))\n    {\n        while (!r.EndOfStream)\n        {\n            Console.WriteLine(r.ReadLine());\n        }\n    }\n}\n```", "```cs\nUnhandled exception. System.IO.FileNotFoundException: Could not find file 'C:\\Te\nmp\\File.txt'.\nFile name: 'C:\\Temp\\File.txt'\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.CreateFile(String fullPath, Fil\neMode mode, FileAccess access, FileShare share, FileOptions options)\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String fullPath, FileMode\nmode, FileAccess access, FileShare share, FileOptions options, Int64 preallocati\nonSize)\n   at System.IO.Strategies.OSFileStreamStrategy..ctor(String path, FileMode mode\n, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSi\nze)\n   at System.IO.Strategies.FileStreamHelpers.ChooseStrategyCore(String path, Fil\neMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preal\nocationSize)\n   at System.IO.Strategies.FileStreamHelpers.ChooseStrategy(FileStream fileStrea\nm, String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferS\nize, FileOptions options, Int64 preallocationSize)\n   at System.IO.StreamReader.ValidateArgsAndOpenPath(String path, Encoding encod\ning, Int32 bufferSize)\n   at System.IO.StreamReader..ctor(String path)\n   at Exceptional.Program.Main(String[] args) in c:\\Examples\\Ch08\\Example1\\Progr\nam.cs:line 10\n```", "```cs\nstatic int Divide(int x, int y)\n{\n    return x / y;\n}\n```", "```cs\ntry\n{\n    using (var r = new StreamReader(@\"C:\\Temp\\File.txt\"))\n    {\n        while (!r.EndOfStream)\n        {\n            Console.WriteLine(r.ReadLine());\n        }\n    }\n}\ncatch (FileNotFoundException)\n{\n    Console.WriteLine(\"Couldn't find the file\");\n}\n```", "```cs\ntry\n{\n    // ...same code as Example 8-3...\n}\ncatch (FileNotFoundException x)\n{\n    Console.WriteLine($\"File '{x.FileName}' is missing\");\n}\n```", "```cs\ntry\n{\n    using (var r = new StreamReader(@\"C:\\Temp\\File.txt\"))\n    {\n        while (!r.EndOfStream)\n        {\n            Console.WriteLine(r.ReadLine());\n        }\n    }\n}\ncatch (FileNotFoundException x)\n{\n    Console.WriteLine($\"File '{x.FileName}' is missing\");\n}\ncatch (DirectoryNotFoundException)\n{\n    Console.WriteLine($\"The containing directory does not exist.\");\n}\ncatch (IOException x)\n{\n    Console.WriteLine($\"IO error: '{x.Message}'\");\n}\n```", "```cs\nerror CS0160: A previous catch clause already catches all exceptions of this or\nof a super type ('IOException')\n```", "```cs\npublic static bool InsertIfDoesNotExist(MyEntity item, TableClient table)\n{\n    try\n    {\n        table.AddEntity(item);\n        return true;\n    }\n    catch (RequestFailedException x)\n    `when` `(``x``.``Status` `=``=` `409``)`\n    {\n        return false;\n    }\n}\n```", "```cs\nstatic void Main(string[] args)\n{\n    try\n    {\n        ShowFirstLineLength(@\"C:\\Temp\\File.txt\");\n    }\n    catch (NullReferenceException)\n    {\n        Console.WriteLine(\"NullReferenceException\");\n    }\n}\n\nstatic void ShowFirstLineLength(string fileName)\n{\n    try\n    {\n        using (var r = new StreamReader(fileName))\n        {\n            try\n            {\n                Console.WriteLine(r.ReadLine()!.Length);\n            }\n            catch (IOException x)\n            {\n                Console.WriteLine(\"Error while reading file: {0}\",\n                    x.Message);\n            }\n        }\n    }\n    catch (FileNotFoundException x)\n    {\n        Console.WriteLine(\"Couldn't find the file '{0}'\", x.FileName);\n    }\n}\n```", "```cs\nusing Microsoft.Office.Interop.PowerPoint;\n\n...\n\n[STAThread]\nstatic void Main(string[] args)\n{\n    var pptApp = new Application();\n    Presentation pres = pptApp.Presentations.Open(args[0]);\n    try\n    {\n        ProcessSlides(pres);\n    }\n    finally\n    {\n        pres.Close();\n    }\n}\n```", "```cs\npublic static string GetCommaSeparatedEntry(string text, int position)\n{\n    string[] parts = text.Split(',');\n    if (position < 0 || position >= parts.Length)\n    {\n        `throw` `new` `ArgumentOutOfRangeException``(``nameof``(``position``)``)``;`\n    }\n    return parts[position];\n}\n```", "```cs\npublic static int CountCommas(string text)\n{\n    `ArgumentNullException``.``ThrowIfNull``(``text``)``;`\n    return text.Count(ch => ch == ',');\n}\n\n```", "```cs\ntry\n{\n    DoSomething();\n}\ncatch (IOException x)\n{\n    LogIOError(x);\n    // This next line is BAD!\n    throw x;  // Do not do this\n}\n```", "```cs\ntry\n{\n    DoSomething();\n}\ncatch (IOException x)\n{\n    LogIOError(x);\n    `throw``;`\n}\n```", "```cs\npublic class DeviceNotReadyException : InvalidOperationException\n{\n    public DeviceNotReadyException(DeviceStatus status)\n        : this(\"Device status must be Ready\", status)\n    {\n    }\n\n    public DeviceNotReadyException(string message, DeviceStatus status)\n        : base(message)\n    {\n        Status = status;\n    }\n\n    public DeviceNotReadyException(string message, DeviceStatus status,\n                                   Exception innerException)\n        : base(message, innerException)\n    {\n        Status = status;\n    }\n\n    public DeviceStatus Status { get; }\n}\n\npublic enum DeviceStatus\n{\n    Disconnected,\n    Initializing,\n    Failed,\n    Ready\n}\n```", "```cs\npublic override void GetObjectData(SerializationInfo info,\n                                   StreamingContext context)\n{\n    base.GetObjectData(info, context);\n    info.AddValue(\"Status\", Status);\n}\n\nprotected DeviceNotReadyException(SerializationInfo info,\n                               StreamingContext context)\n    : base(info, context)\n{\n    Status = (DeviceStatus) info.GetValue(\"Status\", typeof(DeviceStatus))!;\n}\n```", "```cs\nstatic void Main(string[] args)\n{\n    AppDomain.CurrentDomain.UnhandledException += OnUnhandledException;\n\n    // Crash deliberately to illustrate the UnhandledException event\n    throw new InvalidOperationException();\n}\n\nprivate static void OnUnhandledException(object sender,\n    UnhandledExceptionEventArgs e)\n{\n    Console.WriteLine($\"An exception went unhandled: {e.ExceptionObject}\");\n}\n```"]