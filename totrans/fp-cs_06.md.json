["```cs\npublic class Holiday\n{\n public int Id { get; set; }\n public Location Destination { get; set; }\n public Location DepartureAirport { get; set; }\n public DateTime StartDate { get; set; }\n public int DurationOfStay { get; set; }\n}\n\npublic class HolidayWithMeals : Holiday\n{\n public int NumberOfMeals { get; set; }\n}\n```", "```cs\npublic string formatHoliday(Holiday h) =>\n \"From: \" + h.DepartureAirport.Name + Environment.NewLine +\n \"To: \" + h.Destination.Name + Environment.NewLine +\n \"Duration: \" + h.DurationOfStay + \" Day(s)\" +\n (\n  h is HolidayWithMeals hm\n   ? Environment.NewLine + \"Number of Meals: \" + hm.NumberOfMeals\n   : string.Empty\n );\n```", "```cs\npublic class DayTrip\n{\n public int Id { get; set; }\n public DateTime DateOfTrip { get; set; }\n public Location Attraction { get; set; }\n public bool CoachTripRequired { get; set; }\n}\n```", "```cs\npublic class CustomerOffering\n{\n  public int Id { get; set; }\n  public Location Destination { get; set; }\n  public Location DepartureAirport { get; set; }\n  public DateTime StartDate { get; set; }\n  public int DurationOfStay { get; set; }\n  public bool CoachTripRequired { get; set; }\n  public bool IsDayTrip { get; set; }\n}\n```", "```cs\ntype CustomerOffering =\n | Holiday\n | HolidayWithMeals\n | DayTrip\n```", "```cs\npublic abstract class CustomerOffering\n{\n public int Id { Get; set; }\n}\n\npublic class Holiday : CustomerOffering\n{\n public Location Destination { get; set; }\n public Location DepartureAirport { get; set; }\n public DateTime StartDate { get; set; }\n public int DurationOfStay { get; set; }\n}\n\npublic class HolidayWithMeals : Holiday\n{\n public int NumberOfMeals { get; set; }\n}\n\npublic class DayTrip : CustomerOffering\n{\n public DateTime DateOfTrip { get; set; }\n public Location Attraction { get; set; }\n public bool CoachTripRequired { get; set; }\n}\n```", "```cs\npublic string formatCustomerOffering(CustomerOffering c) =>\n c switch\n {\n  HolidayWithMeals hm => this.formatHolidayWithMeal(hm),\n  Holiday h => this.formatHoliday(h),\n  DayTrip dt => this.formatDayTrip(tp)\n };\n```", "```cs\npublic abstract class SchrödingersCat { }\n\npublic class AliveCat : SchrödingersCat { }\n\npublic class DeadCat : SchrödingersCat { }\n```", "```cs\npublic class BritishName\n{\n public string FirstName { get; set; }\n public IEnumerable<string> MiddleNames { get; set; }\n public string LastName { get; set; }\n public string Honorific { get; set; }\n}\n\nvar simonsName = new BritishName\n{\n Honorific = \"Mr.\",\n FirstName = \"Simon\",\n MiddleNames = new [] { \"John\" },\n LastName = \"Painter\n};\n```", "```cs\npublic string formatName(BritishName bn) =>\n bn.Honorific + \" \" bn.FirstName + \" \" + string.Join(\" \", bn.MiddleNames) +\n \" \" + bn.LastName;\n// Results in \"Mr Simon John Painter\"\n```", "```cs\nvar jackie = new BritishName\n{\n Honorific = \"Xiānsheng\", // equivalent of \"Mr.\"\n FirstName = \"Fang\",\n LastName = \"Shilong\"\n}\n// results in \"xiānsheng Fang Shilong\"\n```", "```cs\npublic abstract class Name { }\n\npublic class BritishName : Name\n{\n public string FirstName { get; set; }\n public IEnumerable<string> MiddleNames { get; set; }\n public string LastName { get; set; }\n public string Honorific { get; set; }\n}\n\npublic class ChineseName : Name\n{\n public string FamilyName { get; set; }\n public string GivenName { get; set; }\n public string Honorific { get; set; }\n public string CourtesyName { get; set; }\n}\n```", "```cs\nvar names = new Name[]\n{\n new BritishName\n {\n  Honorific = \"Mr.\",\n  FirstName = \"Simon\",\n  MiddleNames = new [] { \"John\" },\n  LastName = \"Painter\"\n },\n new ChineseName\n {\n  Honorific = \"Xiānsheng\",\n  FamilyName = \"Fang\",\n  GivenName = \"Shilong\",\n  CourtestyName = \"Jackie\"\n }\n}\n```", "```cs\npublic string formatName(Name n) =>\n n switch\n {\n  BritishName bn => bn.Honorific + \" \" bn.FirstName + \" \"\n     + string.Join(\" \", bn.MiddleNames) + \" \" + bn.LastName,\n  ChineseName cn => cn.FamilyName + \" \" + cn.GivenName + \" \" +\n     cn.Honorific + \" \\\"\" + cn.CourtesyName + \"\\\"\"\n };\n\nvar output = string.Join(Environment.NewLine, names);\n// output =\n// Mr. Simon John Painter\n// Fang Shilong Xiānsheng \"Jackie\"\n```", "```cs\npublic Person  GetPerson(int id)\n{\n // Fill in some code here.  Whatever data\n // store you want to use.  Except mini-disc.\n}\n```", "```cs\npublic abstract class PersonLookupResult\n{\n public int Id { get; set; }\n}\n\npublic class PersonFound : PersonLookupResult\n{\n public Person Person { get; set; }\n}\n\npublic class PersonNotFound : PersonLookupResult\n{\n\n}\n\npublic class ErrorWhileSearchingPerson : PersonLookupResult\n{\n public Exception Error { get; set; }\n}\n```", "```cs\npublic PersonLookupResult  GetPerson(int id)\n{\n try\n {\n  var personFromDb = this.Db.Person.Lookup(id);\n  return personFromDb == null\n   ? new PersonNotFound { Id = id }\n   : new PersonFound\n    {\n     Person = personFromDb,\n     Id = id\n    };\n }\n catch(Exception e)\n {\n  return new ErrorWhileSearchingPerson\n  {\n   Id = id,\n   Error = e\n  }\n }\n}\n```", "```cs\npublic string DescribePerson(int id)\n{\n var p = this.PersonRepository.GetPerson(id);\n return p switch\n {\n  PersonFound pf => \"Their name is \" + pf.Name,\n  PersonNotFound _ => \"Person not found\",\n  ErrorWhileSearchingPerson e => \"An error occurred\" + e.Error.Message\n };\n}\n```", "```cs\npublic abstract class EmailSendResult\n{\n\n}\n\npublic class EmailSuccess : EmailSendResult\n{\n\n}\n\npublic class EmailFailure : EmailSendResult\n{\n pubic Exception Error { get; set; }\n}\n```", "```cs\npublic EmailSendResult SendEmail(string recipient, string message)\n{\n try\n {\n  this.AzureEmailUtility.SendEmail(recipient, message);\n  return new EmailSuccess();\n }\n catch(Exception e)\n {\n  return new EmailFailure\n  {\n   Error = e\n  };\n }\n}\n```", "```cs\nvar result = this.EmailTool.SendEmail(\"Season's Greetings\", \"Hi, Uncle John.  How's it going?\");\n\nvar messageToWriteToConsole = result switch\n{\n EmailFailure ef => \"An error occurred sending the email: \" + ef.Error.Message,\n EmailSuccess _ => \"Email send successful\",\n _ => \"Unknow Response\"\n};\n\nthis.Console.WriteLine(messageToWriteToConsole);\n```", "```cs\npublic abstract class UserInput\n{\n\n}\n\npublic class TextInput : UserInput\n{\n public string Input { get; set; }\n}\n\npublic class IntegerInput : UserInput\n{\n public int Input { get; set; }\n}\n\npublic class NoInput : UserInput\n{\n}\n\npublic class ErrorFromConsole : UserInput\n{\n public Exception Error { get; set; }\n}\n```", "```cs\npublic interface IConsole\n{\n UserInput ReadInput(string userPromptMessage);\n}\n\npublic class ConsoleShim : IConsole\n{\n public UserInput ReadInput(string userPromptMessage)\n {\n  try\n  {\n   Console.WriteLine(userPromptMessage);\n   var input = Console.ReadLine();\n   return new TextInput\n   {\n    Input = input\n   };\n  }\n  catch(Exception e)\n  {\n   return new ErrorFromConsole\n   {\n    Error = e\n   };\n  }\n }\n}\n```", "```cs\npublic class UserInteraction\n{\n private readonly IConsole _console;\n public UserInteraction(IConsole console)\n {\n  this._console = console;\n }\n\npublic UserInput GetInputFromUser(string message)\n{\n\tvar input = this._console.ReadInput(message);\n\tvar returnValue = input switch\n\t{\n\t\tTextInput x when string.IsNullOrWhiteSpace(x.Input) =>\n\t\t new NoInput(),\n\t\tTextInput x when int.TryParse(x.Input, out var _)=>\n\t\t new IntegerInput\n\t\t {\n\t\t\t Input = int.Parse(x.Input)\n\t\t },\n\t\tTextInput x => new TextInput\n\t\t{\n\t\t\tInput = x.Input\n\t\t}\n\t};\n\n\treturn returnValue;\n}\n}\n```", "```cs\npublic int GetPlayerSpendOnOxen()\n{\n var input = this.UserInteraction.GetInputFromUser(\"How much do you want to spend on Oxen?\");\n var returnValue = input switch\n {\n  IntegerInput ii => ii.Input,\n  _ => {\n   this.UserInteraction.WriteMessage(\"Try again\");\n   return GetPlayerSpendOnOxen();\n  }\n };\n\n return returnValue;\n}\n```", "```cs\npublic abstract class Maybe<T>\n{\n}\n\npublic class Something<T> : Maybe<T>\n{\n public Something(T value)\n {\n  this.Value = value;\n }\n\n public T Value { get; init; }\n}\n\npublic class Nothing<T> : Maybe<T>\n{\n\n}\n```", "```cs\npublic Maybe<DoctorWho> GetDoctor(int doctorNumber)\n{\n try\n {\n   using var conn = this._connectionFactory.Make();\n  // Dapper query to the db\n  var data = conn.QuerySingleOrDefault<Doctor>(\n   \"SELECT * FROM [dbo].[Doctors] WHERE DocNum = @docNum\",\n   new { docNum = doctorNumber });\n   return data == null\n    ? new Nothing<DoctorWho>();\n    : new Something<DoctorWho>(data);\n }\ncatch(Exception e)\n{\n this.logger.LogError(e, \"An error occurred getting doctor \" + doctorNumber);\n return new Nothing<DoctorWho>();\n}\n\n}\n```", "```cs\n// William Hartnell.  He's the best!\nvar doc = this.DoctorRepository.GetDoctor(1);\nvar message = doc switch\n{\n Something<DoctorWho> s => \"Played by \" + s.Value.ActorName,\n Nothing<DoctorWho> _ => \"Unknown Doctor\"\n};\n```", "```cs\npublic abstract class Result<T>\n{\n}\n\npublic class Success : Result<T>\n{\n public Success<T>(T value)\n {\n  this.Value = value;\n }\n\n public T Value { get; init; }\n}\n\npublic class Failure<T> : Result<T>\n{\n public Failure(Exception e)\n {\n  this.Error = e;\n }\n\n public Exception Error { get; init; }\n}\n```", "```cs\npublic Result<DoctorWho> GetDoctor(int doctorNumber)\n{\n try\n {\n   using var conn = this._connectionFactory.Make();\n  // Dapper query to the db\n  var data = conn.QuerySingleOrDefault<Doctor>(\n   \"SELECT * FROM [dbo].[Doctors] WHERE DocNum = @docNum\",\n   new { docNum = doctorNumber });\n   return new Success<DoctorWho>(data);\n }\ncatch(Exception e)\n{\n this.logger.LogError(e, \"An error occurred getting doctor \" + doctorNumber);\n return new Failure<DoctorWho>(e);\n}\n\n}\n```", "```cs\n// Sylvester McCoy.  He's the best too!\nvar doc = this.DoctorRepository.GetDoctor(7);\nvar message = doc switch\n{\n Success<DoctorWho> s when s.Value == null => \"Unknown Doctor!\",\n Success<DoctorWho> s2 => \"Played by \" + s2.Value.ActorName,\n Failure<DoctorWho> e => \"An error occurred: \" e.Error.Message\n};\n```", "```cs\npublic abstract class Maybe<T>\n{\n}\n\npublic class Something<T> : Maybe<T>\n{\n public Something(T value)\n {\n  this.Value = value;\n }\n\n public T Value { get; init; }\n}\n\npublic class Nothing<T> : Maybe<T>\n{\n\n}\n\npublic class Error<T> : Maybe<T>\n{\n public Error(Exception e)\n {\n  this.CapturedError = e;\n }\n\n public Exception CapturedError { get; init; }\n}\n```", "```cs\npublic Maybe<DoctorWho> GetDoctor(int doctorNumber)\n{\n try\n {\n   using var conn = this._connectionFactory.Make();\n  // Dapper query to the db\n  var data = conn.QuerySingleOrDefault<Doctor>(\n   \"SELECT * FROM [dbo].[Doctors] WHERE DocNum = @docNum\",\n   new { docNum = doctorNumber });\n   return data == null\n    ? new Nothing<DoctorWho>();\n    : new Something<DoctorWho>(data);\n }\ncatch(Exception e)\n{\n this.logger.LogError(e, \"An error occurred getting doctor \" + doctorNumber);\n return new Error<DoctorWho>(e);\n}\n\n}\n```", "```cs\n// Peter Capaldi.  The other, other best Doctor!\nvar doc = this.DoctorRepository.GetDoctor(12);\nvar message = doc switch\n{\n Nothing<DoctorWho> _ => \"Unknown Doctor!\",\n Something<DoctorWho> s => \"Played by \" + s.Value.ActorName,\n Error<DoctorWho> e => \"An error occurred: \" e.Error.Message\n};\n```", "```cs\npublic Maybe<IEnumerable<DoctorWho>> GetAllDoctors()\n{\n try\n {\n   using var conn = this._connectionFactory.Make();\n  // Dapper query to the db\n  var data = conn.Query<Doctor>(\n   \"SELECT * FROM [dbo].[Doctors]\");\n   return data == null || !data.Any()\n    ? new Nothing<IEnumerable<DoctorWho>>();\n    : new Something<IEnumerable<DoctorWho>>(data);\n }\ncatch(Exception e)\n{\n this.logger.LogError(e, \"An error occurred getting doctor \" + doctorNumber);\n return new Error<IEnumerable<DoctorWho>>(e);\n}\n\n}\n```", "```cs\n// Great chaps.  All of them!\nvar doc = this.DoctorRepository.GetAllDoctors();\nvar message = doc switch\n{\n Nothing<IEnumerable<DoctorWho>> _ => \"No Doctors found!\",\n Something<IEnumerable<DoctorWho>> s => \"The Doctors were played by: \" +\n  string.Join(Environment.NewLine, s.Value.Select(x => x.ActorName),\n Error<IEnumerable<DoctorWho>> e => \"An error occurred: \" e.Error.Message\n};\n```", "```cs\npublic abstract class Either<T1, T2>\n{\n\n}\n\npublic class Left<T1, T2> : Either<T1, T2>\n{\n public Left(T1 value)\n {\n  Value = value;\n }\n\n public T1 Value { get; init; }\n}\n\npublic class Right<T1, T2> : Either<T1, T2>\n{\n public Right(T2 value)\n {\n  Value = value;\n }\n\n public T2 Value { get; init; }\n}\n```", "```cs\npublic Either<string, int> QuestionOrAnswer() =>\n new Random().Next(1, 6) >= 4\n  ? new Left<string, int>(\"What do you get if you mulitply 6 by 9?\")\n  : new Right<string, int>(42);\n\nvar data = QuestionOrAnswer();\nvar output = data switch\n{\n Left<string, int> l => \"The ultimate question was: \" + l.Value,\n Right<string, int> r => \"The ultimate answer was: \" + r.Value.ToString()\n};\n```"]