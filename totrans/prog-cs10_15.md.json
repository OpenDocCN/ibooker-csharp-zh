["```cs\npublic abstract int Read(byte[] buffer, int offset, int count);\npublic abstract void Write(byte[] buffer, int offset, int count);\npublic abstract long Position { get; set; }\n```", "```cs\nstatic int ReadAll(Stream s, byte[] buffer, int offset, int length)\n{\n    if ((offset + length) > buffer.Length)\n    {\n        throw new ArgumentException(\"Buffer too small to hold requested data\");\n    }\n\n    int bytesReadSoFar = 0;\n    while (bytesReadSoFar < length)\n    {\n        int bytes = s.Read(\n            buffer, offset + bytesReadSoFar, length - bytesReadSoFar);\n        if (bytes == 0)\n        {\n            break;\n        }\n        bytesReadSoFar += bytes;\n    }\n\n    return bytesReadSoFar;\n}\n```", "```cs\npublic abstract long Seek(long offset, SeekOrigin origin);\n```", "```cs\nstatic void ReadAll(SafeFileHandle fh, Span<byte> buffer, long offset)\n{\n    int soFar = 0;\n    do\n    {\n        int read = RandomAccess.Read(fh, buffer[soFar..], offset + soFar);\n        if (read == 0)\n        {\n            throw new InvalidOperationException(\n                \"Reached end of file before filling buffer\");\n        }\n        soFar += read;\n    } while (soFar < buffer.Length);\n}\n\nvar stubSignature = new byte[2];\nReadAll(fh, stubSignature, 0);\nif (stubSignature[0] != (byte)'M' || stubSignature[1] != (byte)'Z')\n{\n    Console.WriteLine(\"No 'MZ' at start of file - not an EXE file\");\n}\n```", "```cs\npublic virtual int Read(char[] buffer, int index, int count) {...}\npublic virtual int ReadBlock(char[] buffer, int index, int count) {...}\n```", "```cs\nusing (var fw = new StreamWriter(@\"c:\\temp\\out.txt\"))\n{\n    fw.WriteLine($\"Writing to a file at {DateTime.Now}\");\n}\n```", "```cs\nstring xmlContent =\n    \"<message><text>Hello</text><recipient>world</recipient></message>\";\n`var` `xmlReader` `=` `XmlReader``.``Create``(``new` `StringReader``(``xmlContent``)``)``;`\nwhile (xmlReader.Read())\n{\n    if (xmlReader.NodeType == XmlNodeType.Text)\n    {\n        Console.WriteLine(xmlReader.Value);\n    }\n}\n```", "```cs\nusing (var sw = new StreamWriter(\"Text.txt\", false,\n                                 Encoding.GetEncoding(1252)))\n{\n    sw.Write(\"Â£100\");\n}\n```", "```cs\npublic FileStream(string path, FileMode mode)\npublic FileStream(string path, FileMode mode, FileAccess access)\npublic FileStream(string path, FileMode mode, FileAccess access,\n                  FileShare share)\npublic FileStream(string path, FileMode mode, FileAccess access,\n                  FileShare share, int bufferSize)\npublic FileStream(string path, FileMode mode, FileAccess access,\n                  FileShare share, int bufferSize, bool useAsync)\npublic FileStream(string path, FileMode mode, FileAccess access,\n                  FileShare share, int bufferSize, FileOptions options)\n```", "```cs\nusing (FileStream fs = File.Create(\"foo.bar\"))\n{\n   ...\n}\n\n// Equivalent code without using File class\nusing (var fs = new FileStream(\"foo.bar\", FileMode.Create,\n                               FileAccess.ReadWrite, FileShare.None))\n{\n    ...\n}\n```", "```cs\nstatic void Log(string message)\n{\n    using (var sw = new StreamWriter(@\"c:\\temp\\log.txt\", true))\n    {\n        sw.WriteLine(message);\n    }\n}\n```", "```cs\nstatic void Log(string message)\n{\n    using (StreamWriter sw = File.AppendText(@\"c:\\temp\\log.txt\"))\n    {\n        sw.WriteLine(message);\n    }\n}\n```", "```cs\nstatic void Log(string message)\n{\n    File.AppendAllText(@\"c:\\temp\\log.txt\", message);\n}\n```", "```cs\nstatic void Log(string message)\n{\n    File.AppendAllLines(@\"c:\\temp\\log.txt\", new[] { message });\n}\n```", "```cs\nforeach (string file in Directory.GetFiles(@\"c:\\users\\ian\\Pictures\",\n                                           \"*.jpg\",\n                                           SearchOption.AllDirectories))\n{\n    Console.WriteLine(file);\n}\n```", "```cs\nvar fi = new FileInfo(@\"c:\\temp\\log.txt\");\nConsole.WriteLine(\n    $\"{fi.FullName} ({fi.Length} bytes) last modified on {fi.LastWriteTime}\");\n```", "```cs\nstring appSettingsRoot =\n    Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);\nstring myAppSettingsFolder =\n    Path.Combine(appSettingsRoot, @\"Endjin\\FrobnicatorPro\");\n```", "```cs\npublic class SimpleData\n{\n    public int Id { get; set; }\n    public IList<string>? Names { get; set; }\n    public NestedData? Location { get; set; }\n    public IDictionary<string, int>? Map { get; set; }\n}\n\npublic class NestedData\n{\n    public string? LocationName { get; set; }\n    public double Latitude { get; set; }\n    public double Longitude { get; set; }\n}\n```", "```cs\nvar model = new SimpleData\n{\n    Id = 42,\n    Names = new[] { \"Bell\", \"Stacey\", \"her\", \"Jane\" },\n    Location = new NestedData\n    {\n        LocationName = \"London\",\n        Latitude = 51.503209,\n        Longitude = -0.119145\n    },\n    Map = new Dictionary<string, int>\n    {\n        { \"Answer\", 42 },\n        { \"FirstPrime\", 2 }\n    }\n};\n\nstring json = JsonSerializer.Serialize(\n    model,\n    new JsonSerializerOptions { WriteIndented = true });\nConsole.WriteLine(json);\n```", "```cs\n{\n  \"Id\": 42,\n  \"Names\": [\n    \"Bell\",\n    \"Stacey\",\n    \"her\",\n    \"Jane\"\n  ],\n  \"Location\": {\n    \"LocationName\": \"London\",\n    \"Latitude\": 51.503209,\n    \"Longitude\": -0.119145\n  },\n  \"Map\": {\n    \"Answer\": 42,\n    \"FirstPrime\": 2\n  }\n}\n```", "```cs\nvar deserialized = JsonSerializer.Deserialize<SimpleData>(json);\n```", "```cs\npublic class NestedData\n{\n [JsonPropertyName(\"locationName\")]\n    public string? LocationName { get; set; }\n\n [JsonPropertyName(\"latitude\")]\n    public double Latitude { get; set; }\n\n [JsonPropertyName(\"longitude\")]\n    public double Longitude { get; set; }\n}\n```", "```cs\nvar options = new JsonSerializerOptions(JsonSerializerDefaults.Web)\n{\n    WriteIndented = true\n};\nstring json = JsonSerializer.Serialize(\n    model,\n    options);\n```", "```cs\npublic class SelfRef\n{\n    public string? Name { get; set; }\n    public SelfRef? Next { get; set; }\n}\n```", "```cs\nvar options = new JsonSerializerOptions(JsonSerializerDefaults.Web)\n{\n    WriteIndented = true,\n    ReferenceHandler = ReferenceHandler.Preserve\n};\nvar circle = new SelfRef\n{\n    Name = \"Top\",\n    Next = new SelfRef\n    {\n        Name = \"Bottom\",\n    }\n};\ncircle.Next.Next = circle;\nstring json = JsonSerializer.Serialize(circle, options);\n```", "```cs\n{\n  \"$id\": \"1\",\n  \"name\": \"Top\",\n  \"next\": {\n    \"$id\": \"2\",\n    \"name\": \"Bottom\",\n    \"next\": {\n      \"$ref\": \"1\"\n    }\n  }\n}\n```", "```cs\nusing (JsonDocument document = JsonDocument.Parse(json))\n{\n    foreach (JsonProperty property in document.RootElement.EnumerateObject())\n    {\n        Console.WriteLine($\"Property: {property.Name} ({property.Value.ValueKind})\");\n    }\n}\n```", "```cs\nProperty: id (Number)\nProperty: names (Array)\nProperty: location (Object)\nProperty: map (Object)\n```", "```cs\nJsonElement namesElement = document.RootElement.GetProperty(\"names\");\nforeach (JsonElement name in namesElement.EnumerateArray())\n{\n    Console.WriteLine($\"Name: {name.GetString()}\");\n}\n```", "```cs\nif (root.TryGetProperty(\"location\", out JsonElement locationElement))\n{\n    JsonElement nameElement = locationElement.GetProperty(\"locationName\");\n    JsonElement latitudeElement = locationElement.GetProperty(\"latitude\");\n    JsonElement longitudeElement = locationElement.GetProperty(\"longitude\");\n    string locationName = nameElement.GetString()!;\n    double latitude = latitudeElement.GetDouble();\n    double longitude = longitudeElement.GetDouble();\n    Console.WriteLine($\"Location: {locationName}: {latitude},{longitude}\");\n}\n```", "```cs\nJsonNode rootNode = JsonNode.Parse(json)!;\nJsonNode mapNode = rootNode[\"map\"]!;\nmapNode[\"iceCream\"] = 99;\n```"]