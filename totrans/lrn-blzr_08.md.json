["```cs\ninterface Storage {\n\n    readonly length: number;\n\n    clear(): void;\n    getItem(key: string): string | null;\n    key(index: number): string | null;\n    removeItem(key: string): void;\n    setItem(key: string, value: string): void;\n}\n```", "```cs\nnamespace Microsoft.JSInterop;\n\n[JSAutoGenericInterop(\n TypeName = \"Storage\",\n Implementation = \"window.localStorage\",\n Url = \"https://developer.mozilla.org/docs/Web/API/Window/localStorage\",\n GenericMethodDescriptors = new[]\n    {\n        \"getItem\",\n        \"setItem:value\"\n    })]\npublic partial interface ILocalStorageService\n{\n}\n```", "```cs\nusing Blazor.Serialization.Extensions;\nusing System.Text.Json;\n\n#nullable enable\nnamespace Microsoft.JSInterop;\n\n/// <summary> /// Source generated interface definition of the <c>Storage</c> type. /// </summary> public partial interface ILocalStorageService\n{\n    /// <summary>\n    /// Source generated implementation of\n    /// <c>window.localStorage.length</c>.\n    /// <a href=\n    /// \"https://developer.mozilla.org/docs/Web/API/Storage/length\"></a>\n    /// </summary>\n    double Length { get; } ![1](assets/1.png)\n\n    /// <summary>\n    /// Source generated implementation of\n    /// <c>window.localStorage.clear</c>.\n    /// <a href=\n    /// \"https://developer.mozilla.org/docs/Web/API/Storage/clear\"></a>\n    /// </summary>\n    void Clear(); ![2](assets/2.png)\n\n    /// <summary>\n    /// Source generated implementation of\n    /// <c>window.localStorage.getItem</c>.\n    /// <a href=\n    /// \"https://developer.mozilla.org/docs/Web/API/Storage/getItem\"></a>\n    /// </summary> ![3](assets/3.png)\n    TValue? GetItem<TValue>(\n        string key,\n        JsonSerializerOptions? options = null);\n\n    /// <summary>\n    /// Source generated implementation of\n    /// <c>window.localStorage.key</c>.\n    /// <a href=\n    /// \"https://developer.mozilla.org/docs/Web/API/Storage/key\"></a>\n    /// </summary> ![4](assets/4.png)\n    string? Key(double index);\n\n    /// <summary>\n    /// Source generated implementation of\n    /// <c>window.localStorage.removeItem</c>.\n    /// <a href=\n    /// \"https://developer.mozilla.org/docs/Web/API/Storage/removeItem\"></a>\n    /// </summary> ![5](assets/5.png)\n    void RemoveItem(string key);\n\n    /// <summary>\n    /// Source generated implementation of\n    /// <c>window.localStorage.setItem</c>.\n    /// <a href=\n    /// \"https://developer.mozilla.org/docs/Web/API/Storage/setItem\"></a>\n    /// </summary> ![6](assets/6.png)\n    void SetItem<TValue>(\n        string key,\n        TValue value,\n        JsonSerializerOptions? options = null);\n}\n```", "```cs\n#nullable enable\n\nusing Blazor.Serialization.Extensions;\nusing Microsoft.JSInterop;\nusing System.Text.Json;\n\nnamespace Microsoft.JSInterop;\n\n/// <inheritdoc /> internal sealed class LocalStorageService : ILocalStorageService\n{\n    private readonly IJSInProcessRuntime _javaScript = null;\n\n    /// <inheritdoc />\n    double ILocalStorageService.Length => ![1](assets/1.png)\n        _javaScript.Invoke<double>(\n            \"eval\",\n            new object[1]\n            {\n                \"window.localStorage.length\"\n            });\n\n    public LocalStorageService(IJSInProcessRuntime javaScript) ![2](assets/2.png)\n    {\n        _javaScript = javaScript;\n    }\n\n    /// <inheritdoc />\n    void ILocalStorageService.Clear() ![3](assets/3.png)\n    {\n        _javaScript.InvokeVoid(\n            \"window.localStorage.clear\");\n    }\n\n    /// <inheritdoc />\n    TValue? ILocalStorageService.GetItem<TValue>( ![4](assets/4.png)\n        string key,\n        JsonSerializerOptions? options)\n    {\n        return _javaScript.Invoke<string>(\n            \"window.localStorage.getItem\",\n            new object[1]\n            {\n                key\n            })\n            .FromJson<TValue>(options);\n    }\n\n    /// <inheritdoc />\n    string? ILocalStorageService.Key(double index) ![5](assets/5.png)\n    {\n        return _javaScript.Invoke<string>(\n            \"window.localStorage.key\",\n            new object[1]\n            {\n                index\n            });\n    }\n\n    /// <inheritdoc />\n    void ILocalStorageService.RemoveItem(string key) ![6](assets/6.png)\n    {\n        _javaScript.InvokeVoid(\n            \"window.localStorage.removeItem\",\n            key);\n    }\n\n    /// <inheritdoc />\n    void ILocalStorageService.SetItem<TValue>( ![7](assets/7.png)\n        string key,\n        TValue value,\n        JsonSerializerOptions? options)\n    {\n        _javaScript.InvokeVoid(\n            \"window.localStorage.setItem\",\n            key,\n            value.ToJson<TValue>(options));\n    }\n}\n```", "```cs\nusing Microsoft.JSInterop;\n\nnamespace Microsoft.Extensions.DependencyInjection;\n\n/// <summary></summary> public static class LocalStorageServiceCollectionExtensions\n{\n    /// <summary>\n    /// Adds the <see cref=\"ILocalStorageService\" /> service to\n    /// the service collection.\n    /// </summary>\n    public static IServiceCollection AddLocalStorageServices( ![1](assets/1.png)\n        this IServiceCollection services) =>\n        services.AddSingleton<IJSInProcessRuntime>(serviceProvider =>\n            (IJSInProcessRuntime)serviceProvider.\n            GetRequiredService<IJSRuntime>())\n            .AddSingleton<ILocalStorageService, LocalStorageService>(); ![2](assets/2.png)\n}\n```", "```cs\ninterface Geolocation {\n    clearWatch(watchId: number): void;\n\n    getCurrentPosition(\n        successCallback: PositionCallback,\n        errorCallback?: PositionErrorCallback | null,\n        options?: PositionOptions): void;\n\n    watchPosition(\n        successCallback: PositionCallback,\n        errorCallback?: PositionErrorCallback | null,\n        options?: PositionOptions): number;\n}\n```", "```cs\ninterface PositionCallback {\n    (position: GeolocationPosition): void;\n}\n\ninterface PositionErrorCallback {\n    (positionError: GeolocationPositionError): void;\n}\n```", "```cs\ninterface GeolocationPosition {\n    readonly coords: GeolocationCoordinates;\n    readonly timestamp: DOMTimeStamp;\n}\n\ninterface GeolocationPositionError {\n    readonly code: number;\n    readonly message: string;\n    readonly PERMISSION_DENIED: number;\n    readonly POSITION_UNAVAILABLE: number;\n    readonly TIMEOUT: number;\n}\n```", "```cs\ninterface GeolocationCoordinates {\n    readonly accuracy: number;\n    readonly altitude: number | null;\n    readonly altitudeAccuracy: number | null;\n    readonly heading: number | null;\n    readonly latitude: number;\n    readonly longitude: number;\n    readonly speed: number | null;\n}\n```", "```cs\ninterface PositionOptions {\n    enableHighAccuracy?: boolean;\n    maximumAge?: number;\n    timeout?: number;\n}\n```", "```cs\nnamespace Microsoft.JSInterop;\n\n[JSAutoInterop(\n TypeName = \"Geolocation\",\n Implementation = \"window.navigator.geolocation\",\n Url = \"https://developer.mozilla.org/docs/Web/API/Geolocation\")]\npublic partial interface IGeolocationService\n{\n}\n```", "```cs\n#nullable enable\nnamespace Microsoft.JSInterop;\n\n/// <summary> /// Source generated interface definition of the <c>Geolocation</c> type. /// </summary> public partial interface IGeolocationService\n{\n    /// <summary>\n    /// Source generated implementation of\n    /// <c>window.navigator.geolocation.clearWatch</c>.\n    /// <a href=\n    /// \"https://developer.mozilla.org/docs/Web/API/Geolocation/clearWatch\">\n    /// </a>\n    /// </summary>\n    void ClearWatch(double watchId); ![1](assets/1.png)\n\n    /// <summary>\n    /// Source generated implementation of\n    /// <c>window.navigator.geolocation.getCurrentPosition</c>.\n    /// </summary>\n    /// <param name=\"component\">\n    /// The calling Razor (or Blazor) component.\n    /// </param>\n    /// <param name=\"onSuccessCallbackMethodName\">\n    /// Expects the name of a <c>\"JSInvokableAttribute\"</c> C# method\n    /// with the following <c>System.Action{GeolocationPosition}\"</c>.\n    /// </param>\n    /// <param name=\"onErrorCallbackMethodName\">\n    /// Expects the name of a <c>\"JSInvokableAttribute\"</c> C# method\n    /// with the following <c>System.Action{GeolocationPositionError}\"</c>.\n    /// </param>\n    /// <param name=\"options\">The <c>PositionOptions</c> value.</param>\n    void GetCurrentPosition<TComponent>( ![2](assets/2.png)\n        TComponent component,\n        string onSuccessCallbackMethodName,\n        string? onErrorCallbackMethodName = null,\n        PositionOptions? options = null)\n        where TComponent : class;\n\n    /// <summary>\n    /// Source generated implementation of\n    /// <c>window.navigator.geolocation.watchPosition</c>.\n    /// </summary>\n    /// <param name=\"component\">\n    /// The calling Razor (or Blazor) component.\n    /// </param>\n    /// <param name=\"onSuccessCallbackMethodName\">\n    /// Expects the name of a <c>\"JSInvokableAttribute\"</c> C# method\n    /// with the following <c>System.Action{GeolocationPosition}\"</c>.\n    /// </param>\n    /// <param name=\"onErrorCallbackMethodName\">\n    /// Expects the name of a <c>\"JSInvokableAttribute\"</c> C# method\n    /// with the following <c>System.Action{GeolocationPositionError}\"</c>.\n    /// </param>\n    /// <param name=\"options\">The <c>PositionOptions</c> value.\n    /// </param>\n    double WatchPosition<TComponent>( ![3](assets/3.png)\n        TComponent component,\n        string onSuccessCallbackMethodName,\n        string? onErrorCallbackMethodName = null,\n        PositionOptions? options = null)\n        where TComponent : class;\n}\n```", "```cs\nnamespace Microsoft.JSInterop;\n\n/// <inheritdoc /> internal sealed class GeolocationService : IGeolocationService\n{\n    private readonly IJSInProcessRuntime _javaScript = null;\n\n    public GeolocationService(IJSInProcessRuntime javaScript)\n    {\n        _javaScript = javaScript; ![1](assets/1.png)\n    }\n\n    /// <inheritdoc />\n    void IGeolocationService.ClearWatch(double watchId) ![2](assets/2.png)\n    {\n        _javaScript.InvokeVoid(\n            \"window.navigator.geolocation.clearWatch\",\n            watchId);\n    }\n\n    /// <inheritdoc />\n    void IGeolocationService.GetCurrentPosition<TComponent>( ![3](assets/3.png)\n        TComponent component,\n        string onSuccessCallbackMethodName,\n        string? onErrorCallbackMethodName,\n        PositionOptions? options)\n    {\n        _javaScript.InvokeVoid(\n            \"blazorators.getCurrentPosition\",\n            DotNetObjectReference.Create<TComponent>(component),\n            onSuccessCallbackMethodName,\n            onErrorCallbackMethodName,\n            options);\n    }\n\n    /// <inheritdoc />\n    double IGeolocationService.WatchPosition<TComponent>( ![4](assets/4.png)\n        TComponent component,\n        string onSuccessCallbackMethodName,\n        string? onErrorCallbackMethodName,\n        PositionOptions? options)\n    {\n        return _javaScript.Invoke<double>(\n            \"blazorators.watchPosition\",\n            new object[4]\n            {\n                DotNetObjectReference.Create<TComponent>(component),\n                onSuccessCallbackMethodName,\n                onErrorCallbackMethodName,\n                options\n            });\n    }\n}\n```", "```cs\nconst onSuccess = (dotnetObj, successMethodName, position) => { ![1](assets/1.png)\n    const result = {\n        Timestamp: position.timestamp,\n        Coords: {\n            Accuracy: position.coords.accuracy,\n            Altitude: position.coords.altitude,\n            AltitudeAccuracy: position.coords.altitudeAccuracy,\n            Heading: position.coords.heading,\n            Latitude: position.coords.latitude,\n            Longitude: position.coords.longitude,\n            Speed: position.coords.speed\n        }\n    };\n    dotnetObj.invokeMethod(successMethodName, result);\n    dotnetObj.dispose();\n};\n\nconst onError = (dotnetObj, errorMethodName, error) => { ![2](assets/2.png)\n    const result = {\n        Code: error.code,\n        Message: error.message,\n        PERMISSION_DENIED: error.PERMISSION_DENIED,\n        POSITION_UNAVAILABLE: error.POSITION_UNAVAILABLE,\n        TIMEOUT: error.TIMEOUT\n    };\n    dotnetObj.invokeMethod(errorMethodName, result);\n    dotnetObj.dispose();\n};\n\nconst getCurrentPosition = ( ![3](assets/3.png)\n    dotnetObj,\n    successMethodName,\n    errorMethodName,\n    options) => {\n    navigator.geolocation.getCurrentPosition(\n        position => onSuccess(dotnetObj, successMethodName, position),\n        error => onError(dotnetObj, errorMethodName, error),\n        options);\n}\n\nconst watchPosition = ( ![4](assets/4.png)\n    dotnetObj,\n    successMethodName,\n    errorMethodName,\n    options) => {\n    return navigator.geolocation.watchPosition(\n        position => onSuccess(dotnetObj, successMethodName, position),\n        error => onError(dotnetObj, errorMethodName, error),\n        options);\n}\n\nwindow.blazorators = { ![5](assets/5.png)\n    getCurrentPosition,\n    watchPosition\n};\n```", "```cs\npublic record class ClientVoicePreference(\n [property: JsonPropertyName(\"voice\")] string Voice,\n [property: JsonPropertyName(\"voiceSpeed\")] double VoiceSpeed);\n```", "```cs\n{\n    \"voice\": \"Microsoft Zira - English (United States)\",\n    \"voiceSpeed\": 1.5\n}\n```", "```cs\nnamespace Learning.Blazor.Services;\n\npublic sealed class AppInMemoryState\n{\n    private readonly ILocalStorageService _localStorage;\n    private ClientVoicePreference? _clientVoicePreference;\n    // Omitted for brevity... \n    public AppInMemoryState(ILocalStorageService localStorage) => ![1](assets/1.png)\n        _localStorage = localStorage;\n\n    public ClientVoicePreference ClientVoicePreference\n    {\n        get => _clientVoicePreference ??= ![2](assets/2.png)\n            _localStorage.GetItem<ClientVoicePreference>(\n                StorageKeys.ClientVoice) ?? new(\"Auto\", 1);\n        set\n        {\n            _localStorage.SetItem(\n                StorageKeys.ClientVoice,\n                _clientVoicePreference = value ?? new(\"Auto\", 1));\n\n            AppStateChanged();\n        }\n    }\n\n    // Omitted for brevity... }\n```", "```cs\nnamespace Learning.Blazor.Components\n{\n    public sealed partial class AudioDescriptionComponent\n    {\n        private readonly IList<double> _voiceSpeeds = ![1](assets/1.png)\n            Enumerable.Range(0, 12).Select(i => (i + 1) * .25).ToList();\n\n        private IList<SpeechSynthesisVoice> _voices = null!;\n        private string _voice = \"Auto\";\n        private double _voiceSpeed = 1;\n        private ModalComponent _modal = null!;\n\n        protected override async Task OnAfterRenderAsync(bool firstRender)\n        {\n            if (firstRender)\n            {\n                (_voice, _voiceSpeed) = ![2](assets/2.png)\n                    AppState.ClientVoicePreference;\n\n                _details = new AudioDescriptionDetails(\n                    AppState,\n                    _voiceSpeeds,\n                    _voices,\n                    _voice,\n                    _voiceSpeed);\n\n                await UpdateClientVoices(\n                    await JavaScript.GetClientVoicesAsync(\n                        this, nameof(UpdateClientVoices)));\n            }\n        }\n [JSInvokable]\n        public Task UpdateClientVoices(string voicesJson) =>\n            InvokeAsync(() =>\n            {\n                var voices =\n                    voicesJson.FromJson<List<SpeechSynthesisVoice>>(); ![3](assets/3.png)\n                if (voices is { Count: > 0 })\n                {\n                    _voices = voices;\n\n                    StateHasChanged();\n                }\n            });\n\n        private async Task ShowAsync() => await _modal.ShowAsync();\n\n        private void OnDetailsSaved(AudioDescriptionDetails details)\n        {\n            // Clone\n            _details = details with { };\n\n            AppState.ClientVoicePreference = ![4](assets/4.png)\n                new ClientVoicePreference(_details.Voice, _details.VoiceSpeed);\n\n            Logger.LogInformation(\n                \"There are {Length} item in localStorage.\", LocalStorage.Length);\n        }\n    }\n\n    public readonly record struct AudioDescriptionDetails( ![5](assets/5.png)\n        AppInMemoryState AppState,\n        IList<double> VoiceSpeeds,\n        IList<SpeechSynthesisVoice> Voices,\n        string Voice,\n        double VoiceSpeed);\n}\n```", "```cs\n@inherits LocalizableComponentBase<AudioDescriptionComponent> ![1](assets/1.png)\n\n<span class=\"navbar-item\">\n    <button class=\"button is-info is-rounded level-item\"\n        title=@Localizer[\"Audio\"] @onclick=ShowAsync> ![2](assets/2.png)\n        <span class=\"icon\">\n            <i class=\"fas fa-lg fa-audio-description\"></i>\n        </span>\n    </button>\n</span>\n\n<AudioDescriptionModalComponent ![3](assets/3.png)\n    @ref=\"_modal\"\n    Title=@Localizer[\"Settings\"]\n    Details=@_details\n    OnDetailsSaved=@OnDetailsSaved/>\n```", "```cs\nnamespace Learning.Blazor.Components\n{\n    public sealed partial class AudioDescriptionModalComponent\n    {\n [Parameter, EditorRequired]\n        public AudioDescriptionDetails Details { get; set; } ![1](assets/1.png)\n [Parameter, EditorRequired]\n        public string Title { get; set; } = null!;\n [Parameter, EditorRequired]\n        public EventCallback<AudioDescriptionDetails> OnDetailsSaved ![2](assets/2.png)\n        {\n            get;\n            set;\n        }\n\n        private string _voice = null!;\n        private ModalComponent _modal = null!;\n\n        protected override void OnParametersSet() => _voice = Details.Voice; ![3](assets/3.png)\n\n        private void OnVoiceSpeedChange(ChangeEventArgs args) => ![4](assets/4.png)\n            Details = Details with\n            {\n                VoiceSpeed = double.TryParse(\n                    args?.Value?.ToString() ?? \"1\", out var speed) ? speed : 1\n            };\n\n        internal async Task ShowAsync() => await _modal.ShowAsync();\n\n        internal async Task ConfirmAsync() ![5](assets/5.png)\n        {\n            if (OnDetailsSaved.HasDelegate)\n            {\n                await OnDetailsSaved.InvokeAsync(\n                    Details = Details with { Voice = _voice });\n            }\n\n            await _modal.ConfirmAsync();\n        }\n    }\n}\n```", "```cs\n@inherits LocalizableComponentBase<AudioDescriptionModalComponent>\n\n<ModalComponent @ref=\"_modal\"> ![1](assets/1.png)\n    <TitleContent>\n        <span class=\"icon pr-2\">\n            <i class=\"fas fa-cogs\"></i>\n        </span>\n        <span>@Title</span>\n    </TitleContent>\n\n    <BodyContent>\n        <form> ![2](assets/2.png)\n            <div class=\"field\">\n                <label for=\"range\"> Voice speed: @Details.VoiceSpeed </label>\n                <input type=\"range\" ![3](assets/3.png)\n                       min=\"@Details.VoiceSpeeds.Min()\"\n                       max=\"@Details.VoiceSpeeds.Max()\"\n                       step=\".25\" class=\"slider is-fullwidth is-info\"\n                       id=\"range\" list=\"speeds\"\n                       value=\"@Details.VoiceSpeed\"\n                       @onchange=@OnVoiceSpeedChange>\n                <datalist id=\"speeds\"> @foreach (var speed in Details.VoiceSpeeds) ![4](assets/4.png) { <option value=\"@speed\">speed</option> } </datalist>\n            </div>\n            <div class=\"field\">\n                <p class=\"control has-icons-left\">\n                    <span class=\"select is-medium is-fullwidth\">\n                        <select id=\"voices\" class=\"has-dotnet-scrollbar\"\n                            @bind=_voice> ![5](assets/5.png)\n                        <option selected>@Localizer[\"Auto\"]</option> @if (Details.Voices is { Count: > 0 })\n                        {\n                            @foreach (var voice in Details.Voices) ![6](assets/6.png) { <option selected=\"@voice.Default\"\n                                    value=\"@voice.Name\"> @voice.Name </option> }\n                        } </select>\n                    </span>\n                    <span class=\"icon is-small is-left\">\n                        <i class=\"fas fa-globe\"></i>\n                    </span>\n                </p>\n            </div>\n        </form>\n    </BodyContent>\n\n    <ButtonContent>\n        <button class=\"button is-success is-large\"\n            @onclick=ConfirmAsync> ![7](assets/7.png)\n            <span class=\"icon\">\n                <i class=\"fas fa-check\"></i>\n            </span>\n            <span>@Localizer[\"Okay\"]</span>\n        </button>\n    </ButtonContent>\n</ModalComponent>\n```"]