["```cs\nvar uri = new Uri(\"http://example.com/books/1323?edition=6&format=pdf\");\nConsole.WriteLine(uri.Scheme);\nConsole.WriteLine(uri.Host);\nConsole.WriteLine(uri.AbsolutePath);\nConsole.WriteLine(uri.Query);\n```", "```cs\nhttp\nexample.com\n/books/1323\n?edition=6&format=pdf\n```", "```cs\nstring uriString = \"http://example.com/books/1323?edition=6&format=pdf\";\nint id = int.Parse(uriString.Substring(25, 4));\n```", "```cs\nstatic int SumSpan(ReadOnlySpan<int> span)\n{\n    int sum = 0;\n    for (int i = 0; i < span.Length; ++i)\n    {\n        sum += span[i];\n    }\n    return sum;\n}\n```", "```cs\nConsole.WriteLine(SumSpan(new int[] { 1, 2, 3 }));\n```", "```cs\nSpan<int> numbers = stackalloc int[] { 1, 2, 3 };\nConsole.WriteLine(SumSpan(numbers));\n```", "```cs\nstring uriString = \"http://example.com/books/1323?edition=6&format=pdf\";\nint id = int.Parse(uriString.AsSpan(25, 4));\n```", "```cs\n{\"property1\":\"value1\",\"prope\n```", "```cs\nrty2\":42}\n```", "```cs\n[HttpPost]\n[Route(\"/jobs/create\")]\npublic void CreateJob([FromBody] JobDescription requestBody)\n{\n    switch (requestBody.JobCategory)\n    {\n        case \"arduous\":\n            CreateArduousJob(requestBody.DepartmentId);\n            break;\n\n        case \"tedious\":\n            CreateTediousJob(requestBody.DepartmentId);\n            break;\n    }\n}\n\npublic record JobDescription(int DepartmentId, string JobCategory);\n```", "```cs\nprivate static readonly byte[] Utf8TextJobCategory =\n    Encoding.UTF8.GetBytes(\"JobCategory\");\nprivate static readonly byte[] Utf8TextDepartmentId =\n    Encoding.UTF8.GetBytes(\"DepartmentId\");\nprivate static readonly byte[] Utf8TextArduous = Encoding.UTF8.GetBytes(\"arduous\");\nprivate static readonly byte[] Utf8TextTedious = Encoding.UTF8.GetBytes(\"tedious\");\n\n[HttpPost]\n[Route(\"/jobs/create\")]\npublic async ValueTask CreateJobFrugalAsync()\n{\n    bool inDepartmentIdProperty = false;\n    bool inJobCategoryProperty = false;\n    int? departmentId = null;\n    bool? isArduous = null;\n\n    PipeReader reader = this.Request.BodyReader;\n    JsonReaderState jsonState = default;\n    while (true)\n    {\n        ReadResult result = await reader.ReadAsync().ConfigureAwait(false);\n        jsonState = ProcessBuffer(\n            result,\n            jsonState,\n            out SequencePosition position);\n\n        if (departmentId.HasValue && isArduous.HasValue)\n        {\n            if (isArduous.Value)\n            {\n                CreateArduousJob(departmentId.Value);\n            }\n            else\n            {\n                CreateTediousJob(departmentId.Value);\n            }\n\n            return;\n        }\n\n        reader.AdvanceTo(position);\n\n        if (result.IsCompleted)\n        {\n            break;\n        }\n    }\n\n    JsonReaderState ProcessBuffer(\n        in ReadResult result,\n        in JsonReaderState jsonState,\n        out SequencePosition position)\n    {\n        // This is a ref struct, so this has no GC overhead\n        var r = new Utf8JsonReader(result.Buffer, result.IsCompleted, jsonState);\n\n        while (r.Read())\n        {\n            if (inDepartmentIdProperty)\n            {\n                if (r.TokenType == JsonTokenType.Number)\n                {\n                    if (r.TryGetInt32(out int v))\n                    {\n                        departmentId = v;\n                    }\n                }\n            }\n            else if (inJobCategoryProperty)\n            {\n                if (r.TokenType == JsonTokenType.String)\n                {\n                    if (r.ValueSpan.SequenceEqual(Utf8TextArduous))\n                    {\n                        isArduous = true;\n                    }\n                    else if (r.ValueSpan.SequenceEqual(Utf8TextTedious))\n                    {\n                        isArduous = false;\n                    }\n                }\n            }\n\n            inDepartmentIdProperty = false;\n            inJobCategoryProperty = false;\n\n            if (r.TokenType == JsonTokenType.PropertyName)\n            {\n                if (r.ValueSpan.SequenceEqual(Utf8TextJobCategory))\n                {\n                    inJobCategoryProperty = true;\n                }\n                else if (r.ValueSpan.SequenceEqual(Utf8TextDepartmentId))\n                {\n                    inDepartmentIdProperty = true;\n                }\n            }\n        }\n\n        position = r.Position;\n        return r.CurrentState;\n    }\n}\n```"]