["```cs\nchar[] vowels = {'a','e','i','o','u'};\n```", "```cs\nchar[] vowels = ['a','e','i','o','u'];\n```", "```cs\nList<char> list         = ['a','e','i','o','u'];\nHashSet<char> set       = ['a','e','i','o','u'];\nReadOnlySpan<char> span = ['a','e','i','o','u'];\n```", "```cs\nFoo (['a','e','i','o','u']);\n\nvoid Foo (char[] letters) { ... }\n```", "```cs\nclass Person (string firstName, string lastName)\n{\n  public void Print() => Console.WriteLine (firstName + \" \" + lastName);\n}\n```", "```cs\nPerson p = new Person (\"Alice\", \"Jones\");\np.Print();    // Alice Jones\n```", "```cs\nclass Person (string firstName, string lastName)\n{\n  public string FirstName { get; set; } = firstName;\n  public string LastName { get; set; } = lastName;\n}\n```", "```cs\nvoid Print (string message = \"\") => Console.WriteLine (message);\n```", "```cs\nvar print = (string message = \"\") => Console.WriteLine (message);\n\nprint (\"Hello\");\nprint ();\n```", "```cs\nusing ListOfInt = System.Collections.Generic.List<int>;\n\nvar list = new ListOfInt();\n```", "```cs\nusing NumberList = double[];\nusing Point = (int X, int Y);\n\nNumberList numbers = { 2.5, 3.5 };\nPoint p = (3, 4);\n```", "```cs\nstring raw = \"\"\"<file path=\"c:\\temp\\test.txt\"></file>\"\"\";\n```", "```cs\nstring multiLineRaw = $\"\"\"\n  Line 1\n  Line 2\n  The date and time is {DateTime.Now}\n  \"\"\";\n```", "```cs\nConsole.WriteLine ($$\"\"\"{ \"TimeStamp\": \"{{DateTime.Now}}\" }\"\"\");\n// Output: *{ \"TimeStamp\": \"01/01/2024 12:13:25 PM\" }*\n```", "```cs\nReadOnlySpan<byte> utf8 = \"abâ†’cd\"u8;  // Arrow symbol consumes 3 bytes\nConsole.WriteLine (utf8.Length);      // 7\n```", "```cs\nint[] numbers = { 0, 1, 2, 3, 4 };\nConsole.WriteLine (numbers is [0, 1, 2, 3, 4]);   // True\n```", "```cs\nConsole.WriteLine (numbers is [_, 1, .., 4]);     // True\n```", "```cs\nAsset a1 = new Asset { Name = \"House\" };  // OK\nAsset a2 = new Asset();                   // Error: will not compile!\n\nclass Asset { public required string Name; }\n```", "```cs\npublic interface IParsable<TSelf>\n{\n   static abstract TSelf Parse (string s);\n}\n```", "```cs\nT ParseAny<T> (string s) where T : IParsable<T> => T.Parse (s);\n```", "```cs\nT Sum<T> (T[] numbers) where T : INumber<T>\n{\n  T total = T.Zero;\n  foreach (T n in numbers)\n    total += n;      // Invokes addition operator for any numeric type\n  return total;\n}\n\nint intSum = Sum (3, 5, 7);\ndouble doubleSum = Sum (3.2, 5.3, 7.1);\ndecimal decimalSum = Sum (3.2m, 5.3m, 7.1m);\n```", "```cs\nstatic abstract TResult operator + (TSelf left, TOther right);\n```", "```cs\nfile class Foo { ... }\n```", "```cs\nnamespace MyNamespace;  // Applies to everything that follows in the file.\n\nclass Class1 {}         // inside MyNamespace\nclass Class2 {}         // inside MyNamespace\n```", "```cs\nglobal using System;\nglobal using System.Collection.Generic;\n```", "```cs\nvar a1 = new { A = 1, B = 2, C = 3, D = 4, E = 5 };\nvar a2 = a1 with { E = 10 }; \nConsole.WriteLine (a2);      // { A = 1, B = 2, C = 3, D = 4, E = 10 }\n```", "```cs\nvar point = (3, 4);\ndouble x = 0;\n(x, double y) = point;\n```", "```cs\nrecord struct Point (int X, int Y);\n```", "```cs\nvar greeter = () => \"Hello, world\";\n```", "```cs\nvar square = (int x) => x * x;\n```", "```cs\nvar sqr = int (int x) => x;\n```", "```cs\nM1 (() => \"test\");   // Implicitly typed to Func<string>\nM2 (() => \"test\");   // Implicitly typed to Func<string>\nM3 (() => \"test\");   // Implicitly typed to Expression<Func<string>>\n\nvoid M1 (object x) {}\nvoid M2 (Delegate x) {}\nvoid M3 (Expression x) {}\n```", "```cs\nAction a = [Description(\"test\")] () => { };\n```", "```cs\nvar obj = new Uri (\"https://www.linqpad.net\");\nif (obj is Uri { Scheme.Length: 5 }) ...\n```", "```cs\nif (obj is Uri { Scheme: { Length: 5 }}) ...\n```", "```cs\nPrint (Math.PI * 2);\n\nvoid Print (double number,\n           [CallerArgumentExpression(\"number\")] string expr = null)\n  => Console.WriteLine (expr);\n\n// Output: Math.PI * 2\n```", "```cs\nif (foo?.TryParse (\"123\", out var number) ?? false)\n  Console.WriteLine (number);\n```", "```cs\nusing System;\nConsole.WriteLine (\"Hello, world\");\n```", "```cs\nclass Foo { public int ID { get; init; } }\n```", "```cs\nvar foo = new Foo { ID = 123 };\n```", "```cs\nPoint p1 = new Point (2, 3);\nPoint p2 = p1 with { Y = 4 };   // p2 is a copy of p1, but with Y set to 4\nConsole.WriteLine (p2);         // Point { X = 2, Y = 4 }\n\nrecord Point\n{\n  public Point (double x, double y) => (X, Y) = (x, y);\n\n  public double X { get; init; }\n  public double Y { get; init; }    \n}\n```", "```cs\nrecord Point (double X, double Y);\n```", "```cs\nstring GetWeightCategory (decimal bmi) => bmi switch {\n  < 18.5m => \"underweight\",\n  < 25m => \"normal\",\n  < 30m => \"overweight\",\n  _ => \"obese\" };\n```", "```cs\nbool IsVowel (char c) => c is 'a' or 'e' or 'i' or 'o' or 'u';\n\nbool IsLetter (char c) => c is >= 'a' and <= 'z'\n                            or >= 'A' and <= 'Z';\n```", "```cs\nif (obj is not string) ...\n```", "```cs\nSystem.Text.StringBuilder sb1 = new();\nSystem.Text.StringBuilder sb2 = new (\"Test\");\n```", "```cs\nclass Foo\n{\n  System.Text.StringBuilder sb;\n  public Foo (string initialValue) => sb = new (initialValue);\n}\n```", "```cs\nMyMethod (new (\"test\"));\nvoid MyMethod (System.Text.StringBuilder sb) { ... }\n```", "```cs\nchar[] vowels = new char[] {'a','e','i','o','u'};\nchar lastElement  = vowels [^1];   // 'u'\nchar secondToLast = vowels [^2];   // 'o'\n```", "```cs\nchar[] firstTwo =  vowels [..2];    // 'a', 'e'\nchar[] lastThree = vowels [2..];    // 'i', 'o', 'u'\nchar[] middleOne = vowels [2..3]    // 'i'\nchar[] lastTwo =   vowels [^2..];   // 'o', 'u'\n```", "```cs\nIndex last = ^1;\nRange firstTwoRange = 0..2;\nchar[] firstTwo = vowels [firstTwoRange];   // 'a', 'e'\n```", "```cs\nclass Sentence\n{\n  string[] words = \"The quick brown fox\".Split();\n\n  public string this   [Index index] => words [index];\n  public string[] this [Range range] => words [range];\n}\n```", "```cs\nif (s == null) s = \"Hello, world\";\n```", "```cs\ns ??= \"Hello, world\";\n```", "```cs\nif (File.Exists (\"file.txt\"))\n{\n  using var reader = File.OpenText (\"file.txt\");\n  Console.WriteLine (reader.ReadLine());\n  ...\n}\n```", "```cs\nstruct Point\n{\n  public int X, Y;\n  public readonly void ResetX() => X = 0;  // Error!\n}\n```", "```cs\ninterface ILogger\n{\n  void Log (string text) => Console.WriteLine (text);\n}\n```", "```cs\n((ILogger)new Logger()).Log (\"message\");\n```", "```cs\ninterface ILogger\n{\n  void Log (string text) => Console.WriteLine (Prefix + text);\n  static string Prefix = \"\"; \n}\n```", "```cs\nILogger.Prefix = \"File log: \";\n```", "```cs\nstring cardName = cardNumber switch    // assuming cardNumber is an int\n{\n  13 => \"King\",\n  12 => \"Queen\",\n  11 => \"Jack\",\n  _ => \"Pip card\"   // equivalent to 'default'\n};\n```", "```cs\nint cardNumber = 12; string suite = \"spades\";\nstring cardName = (cardNumber, suite) switch\n{\n  (13, \"spades\") => \"King of spades\",\n  (13, \"clubs\") => \"King of clubs\",\n  ...\n};\n```", "```cs\nif (obj is string { Length:4 }) ...\n```", "```cs\n#nullable enable    // Enable nullable reference types from this point on\n\nstring s1 = null;   // Generates a compiler warning! (s1 is non-nullable)\nstring? s2 = null;  // OK: s2 is *nullable reference type*\n```", "```cs\nvoid Foo (string? s) => Console.Write (s.Length);  // Warning (.Length)\n```", "```cs\nvoid Foo (string? s) => Console.Write (s!.Length);\n```", "```cs\nasync IAsyncEnumerable<int> RangeAsync (\n  int start, int count, int delay)\n{\n  for (int i = start; i < start + count; i++)\n  {\n    await Task.Delay (delay);\n    yield return i;\n  }\n}\n```", "```cs\nawait foreach (var number in RangeAsync (0, 10, 100))\n  Console.WriteLine (number);\n```", "```cs\n[field:NonSerialized]\npublic int MyProperty { get; set; }\n```", "```cs\nint* pointer  = stackalloc int[] {1, 2, 3};\nSpan<int> arr = stackalloc []    {1, 2, 3};\n```", "```cs\nreadonly struct Point\n{\n  public readonly int X, Y;   // X and Y must be readonly\n}\n```", "```cs\ndecimal number = default;   // number is decimal\n```", "```cs\nvar now = DateTime.Now;\nvar tuple = (now.Hour, now.Minute, now.Second);\n```", "```cs\nint million = 1_000_000;\n```", "```cs\nvar b = 0b1010_1011_1100_1101_1110_1111;\n```", "```cs\nbool successful = int.TryParse (\"123\", out int result);\nConsole.WriteLine (result);\n```", "```cs\nSomeBigMethod (out _, out _, out _, out int x, out _, out _, out _);\nConsole.WriteLine (x);\n```", "```cs\nvoid Foo (object x)\n{\n  if (x is string s)\n    Console.WriteLine (s.Length);\n}\n```", "```cs\nswitch (x)\n{\n  case int i:\n    Console.WriteLine (\"It's an int!\");\n    break;\n  case string s:\n    Console.WriteLine (s.Length);    // We can use the s variable\n    break;\n  case bool b when b == true:        // Matches only when b is true\n    Console.WriteLine (\"True\");\n    break;\n  case null:\n    Console.WriteLine (\"Nothing\");\n    break;\n}\n```", "```cs\nvoid WriteCubes()\n{\n  Console.WriteLine (Cube (3));\n  Console.WriteLine (Cube (4));\n  Console.WriteLine (Cube (5));\n\n  int Cube (int value) => value * value * value;\n}\n```", "```cs\npublic class Person\n{\n  string name;\n\n  public Person (string name) => Name = name;\n\n  public string Name\n  {\n    get => name;\n    set => name = value ?? \"\";\n  }\n\n  ~Person () => Console.WriteLine (\"finalize\");\n}\n```", "```cs\npublic void Deconstruct (out string firstName, out string lastName)\n{\n  int spacePos = name.IndexOf (' ');\n  firstName = name.Substring (0, spacePos);\n  lastName = name.Substring (spacePos + 1);\n}\n```", "```cs\nvar joe = new Person (\"Joe Bloggs\");\nvar (first, last) = joe;          // Deconstruction\nConsole.WriteLine (first);        // Joe\nConsole.WriteLine (last);         // Bloggs\n```", "```cs\nvar bob = (\"Bob\", 23);\nConsole.WriteLine (bob.Item1);   // Bob\nConsole.WriteLine (bob.Item2);   // 23\n```", "```cs\nvar tuple = (name:\"Bob\", age:23);\nConsole.WriteLine (tuple.name);     // Bob\nConsole.WriteLine (tuple.age);      // 23\n```", "```cs\nstatic (int row, int column) GetFilePosition() => (3, 10);\n\nstatic void Main()\n{\n  var pos = GetFilePosition();\n  Console.WriteLine (pos.row);      // 3\n  Console.WriteLine (pos.column);   // 10\n}\n```", "```cs\nstatic void Main()\n{\n  (int row, int column) = GetFilePosition();   // Creates 2 local variables\n  Console.WriteLine (row);      // 3 \n  Console.WriteLine (column);   // 10\n}\n```", "```cs\npublic string Foo() => throw new NotImplementedException();\n```", "```cs\nstring Capitalize (string value) =>\n  value == null ? throw new ArgumentException (\"value\") :\n  value == \"\" ? \"\" :\n  char.ToUpper (value[0]) + value.Substring (1);\n```", "```cs\nSystem.Text.StringBuilder sb = null;\nstring result = sb?.ToString();      // result is null\n```", "```cs\npublic int TimesTwo (int x) => x * 2;\npublic string SomeProperty => \"Property value\";\n```", "```cs\npublic DateTime TimeCreated { get; set; } = DateTime.Now;\n```", "```cs\npublic DateTime TimeCreated { get; } = DateTime.Now;\n```", "```cs\nvar dict = new Dictionary<int,string>()\n{\n  [3] = \"three\",\n  [10] = \"ten\"\n};\n```", "```cs\nstring s = $\"It is {DateTime.Now.DayOfWeek} today\";\n```", "```cs\nstring html;\ntry\n{\n  html = await new HttpClient().GetStringAsync (\"http://asef\");\n}\ncatch (WebException ex) when (ex.Status == WebExceptionStatus.Timeout)\n{\n  ...\n}\n```", "```cs\nusing static System.Console;\n...\nWriteLine (\"Hello, world\");  // WriteLine instead of Console.WriteLine\n```", "```cs\nint capacity = 123;\nstring x = nameof (capacity);   // x is \"capacity\"\nstring y = nameof (Uri.Host);   // y is \"Host\"\n```"]