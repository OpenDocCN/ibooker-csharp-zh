["```cs\ndelegate int Transformer (int x);\n```", "```cs\nint Square (int x) { return x * x; }\n```", "```cs\nint Square (int x) => x * x;\n```", "```cs\nTransformer t = Square;\n```", "```cs\nint answer = t(3);    // answer is 9\n```", "```cs\nTransformer t = Square;          // Create delegate instance\nint result = t(3);               // Invoke delegate\nConsole.WriteLine (result);      // 9\n\nint Square (int x) => x * x;\n\ndelegate int Transformer (int x);   // Delegate type declaration\n```", "```cs\nTransformer t = Square;\n```", "```cs\nTransformer t = new Transformer (Square);\n```", "```cs\nt(3)\n```", "```cs\nt.Invoke(3)\n```", "```cs\nint[] values = { 1, 2, 3 };\nTransform (values, Square);      // Hook in the Square method\n\nforeach (int i in values)\n  Console.Write (i + \"  \");      // 1   4   9\n\nvoid Transform (int[] values, Transformer t)\n{\n  for (int i = 0; i < values.Length; i++)\n    values[i] = t (values[i]);\n}\n\nint Square (int x) => x * x;\nint Cube (int x) => x * x * x;\n\ndelegate int Transformer (int x);\n```", "```cs\nTransformer t = Test.Square;\nConsole.WriteLine (t(10));      // 100\n\nclass Test { public static int Square (int x) => x * x; }\n\ndelegate int Transformer (int x);\n```", "```cs\nTest test = new Test();\nTransformer t = test.Square;\nConsole.WriteLine (t(10));      // 100\n\nclass Test { public int Square (int x) => x * x; }\n\ndelegate int Transformer (int x);\n```", "```cs\nMyReporter r = new MyReporter();\nr.Prefix = \"%Complete: \";\nProgressReporter p = r.ReportProgress;\np(99);                                 // %Complete: 99\nConsole.WriteLine (p.Target == r);     // True\nConsole.WriteLine (p.Method);          // Void ReportProgress(Int32)\nr.Prefix = \"\";\np(99);                                 // 99\n\npublic delegate void ProgressReporter (int percentComplete);\n\nclass MyReporter\n{\n  public string Prefix = \"\";\n\n  public void ReportProgress (int percentComplete)\n    => Console.WriteLine (Prefix + percentComplete);\n}\n```", "```cs\nSomeDelegate d = SomeMethod1;\nd += SomeMethod2;\n```", "```cs\nd = d + SomeMethod2;\n```", "```cs\nd -= SomeMethod1;\n```", "```cs\nSomeDelegate d = null;\nd += SomeMethod1;       // Equivalent (when d is null) to d = SomeMethod1;\n```", "```cs\npublic delegate void ProgressReporter (int percentComplete);\n\npublic class Util\n{\n  public static void HardWork (ProgressReporter p)\n  {\n    for (int i = 0; i < 10; i++)\n    {\n      p (i * 10);                           // Invoke delegate\n      System.Threading.Thread.Sleep (100);  // Simulate hard work\n    }\n  }\n}\n```", "```cs\nProgressReporter p = WriteProgressToConsole;\np += WriteProgressToFile;\nUtil.HardWork (p);\n\nvoid WriteProgressToConsole (int percentComplete)\n  => Console.WriteLine (percentComplete);\n\nvoid WriteProgressToFile (int percentComplete)\n  => System.IO.File.WriteAllText (\"progress.txt\",\n                                   percentComplete.ToString());\n```", "```cs\npublic delegate T Transformer<T> (T arg);\n```", "```cs\nint[] values = { 1, 2, 3 };\nUtil.Transform (values, Square);      // Hook in Square\nforeach (int i in values)\n  Console.Write (i + \"  \");           // 1   4   9\n\nint Square (int x) => x * x;\n\npublic class Util\n{\n  public static void Transform<T> (T[] values, Transformer<T> t)\n  {\n    for (int i = 0; i < values.Length; i++)\n      values[i] = t (values[i]);\n  }\n}\n```", "```cs\ndelegate TResult Func <out TResult>                ();\ndelegate TResult Func <in T, out TResult>          (T arg);\ndelegate TResult Func <in T1, in T2, out TResult>  (T1 arg1, T2 arg2);\n*... and so on, up to T16*\n\ndelegate void Action                 ();\ndelegate void Action <in T>          (T arg);\ndelegate void Action <in T1, in T2>  (T1 arg1, T2 arg2);\n*... and so on, up to T16*\n```", "```cs\npublic static void Transform<T> (T[] values, Func<T,T> transformer)\n{\n  for (int i = 0; i < values.Length; i++)\n    values[i] = transformer (values[i]);\n}\n```", "```cs\nint[] values = { 1, 2, 3 };\nUtil.TransformAll (values, new Squarer());\nforeach (int i in values)\n  Console.WriteLine (i);\n\npublic interface ITransformer\n{\n  int Transform (int x);\n}\n\npublic class Util\n{\n public static void TransformAll (int[] values, ITransformer t)\n {\n   for (int i = 0; i < values.Length; i++)\n     values[i] = t.Transform (values[i]);\n }\n}\n\nclass Squarer : ITransformer\n{\n  public int Transform (int x) => x * x;\n}\n```", "```cs\nint[] values = { 1, 2, 3 };\nUtil.TransformAll (values, new Cuber());\nforeach (int i in values)\n  Console.WriteLine (i);\n\nclass Squarer : ITransformer\n{\n  public int Transform (int x) => x * x;\n}\n\nclass Cuber : ITransformer\n{\n  public int Transform (int x) => x * x * x;\n}\n```", "```cs\nD1 d1 = Method1;\nD2 d2 = d1;                           // Compile-time error\n\nvoid Method1() { }\n\ndelegate void D1();\ndelegate void D2();\n```", "```cs\nD2 d2 = new D2 (d1);\n```", "```cs\nD d1 = Method1;\nD d2 = Method1;\nConsole.WriteLine (d1 == d2);         // True\n\nvoid Method1() { }\ndelegate void D();\n```", "```cs\nStringAction sa = new StringAction (ActOnObject);\nsa (\"hello\");\n\nvoid ActOnObject (object o) => Console.WriteLine (o);   // hello\n\ndelegate void StringAction (string s);\n```", "```cs\nObjectRetriever o = new ObjectRetriever (RetrieveString);\nobject result = o();\nConsole.WriteLine (result);      // hello\n\nstring RetrieveString() => \"hello\";\n\ndelegate object ObjectRetriever();\n```", "```cs\ndelegate TResult Func<out TResult>();\n```", "```cs\nFunc<string> x = ...;\nFunc<object> y = x;\n```", "```cs\ndelegate void Action<in T> (T arg);\n```", "```cs\nAction<object> x = ...;\nAction<string> y = x;\n```", "```cs\n// Delegate definition\npublic delegate void PriceChangedHandler (decimal oldPrice,\n                                          decimal newPrice);\npublic class Broadcaster\n{\n  // Event declaration\n  public event PriceChangedHandler PriceChanged;\n}\n```", "```cs\npublic delegate void PriceChangedHandler (decimal oldPrice,\n                                          decimal newPrice);\npublic class Stock\n{\n  string symbol;\n  decimal price;\n\n  public Stock (string symbol) => this.symbol = symbol;\n\n  public event PriceChangedHandler PriceChanged;\n\n  public decimal Price\n  {\n    get => price;\n    set\n    {\n      if (price == value) return;      // Exit if nothing has changed\n      decimal oldPrice = price;\n      price = value;\n      if (PriceChanged != null)           // If invocation list not\n        PriceChanged (oldPrice, price);   // empty, fire event.\n    }\n  }\n}\n```", "```cs\npublic class PriceChangedEventArgs : System.EventArgs\n{\n  public readonly decimal LastPrice;\n  public readonly decimal NewPrice;\n\n  public PriceChangedEventArgs (decimal lastPrice, decimal newPrice)\n  {\n    LastPrice = lastPrice;\n    NewPrice = newPrice;\n  }\n}\n```", "```cs\npublic delegate void EventHandler<TEventArgs> (object source, TEventArgs e)\n```", "```cs\npublic delegate void PriceChangedHandler\n  (object sender, PriceChangedEventArgs e);\n```", "```cs\npublic class Stock\n{\n  ...\n  public event EventHandler<PriceChangedEventArgs> PriceChanged;\n}\n```", "```cs\npublic class Stock\n{\n  ...\n\n  public event EventHandler<PriceChangedEventArgs> PriceChanged;\n\n  protected virtual void OnPriceChanged (PriceChangedEventArgs e)\n  {\n    if (PriceChanged != null) PriceChanged (this, e);\n  }\n}\n```", "```cs\nvar temp = PriceChanged;\nif (temp != null) temp (this, e);\n```", "```cs\nPriceChanged?.Invoke (this, e);\n```", "```cs\nusing System;\n\nStock stock = new Stock (\"THPW\");\nstock.Price = 27.10M;\n// Register with the PriceChanged event\nstock.PriceChanged += stock_PriceChanged;\nstock.Price = 31.59M;\n\nvoid stock_PriceChanged (object sender, PriceChangedEventArgs e)\n{\n  if ((e.NewPrice - e.LastPrice) / e.LastPrice > 0.1M)\n    Console.WriteLine (\"Alert, 10% stock price increase!\");\n}\n\npublic class PriceChangedEventArgs : EventArgs\n{\n  public readonly decimal LastPrice;\n  public readonly decimal NewPrice;\n\n  public PriceChangedEventArgs (decimal lastPrice, decimal newPrice)\n  {\n    LastPrice = lastPrice; NewPrice = newPrice;\n  }\n}\n\npublic class Stock\n{\n  string symbol;\n  decimal price;\n\n  public Stock (string symbol) => this.symbol = symbol;\n\n  public event EventHandler<PriceChangedEventArgs> PriceChanged;\n\n  protected virtual void OnPriceChanged (PriceChangedEventArgs e)\n  {\n    PriceChanged?.Invoke (this, e);\n  }\n\n  public decimal Price\n  {\n    get => price;\n    set\n    {\n      if (price == value) return;\n      decimal oldPrice = price;\n      price = value;\n      OnPriceChanged (new PriceChangedEventArgs (oldPrice, price));\n    }\n  }\n}\n```", "```cs\npublic class Stock\n{\n  string symbol;\n  decimal price;\n\n  public Stock (string symbol) { this.symbol = symbol; }\n\n  public event EventHandler PriceChanged;\n\n  protected virtual void OnPriceChanged (EventArgs e)\n  {\n    PriceChanged?.Invoke (this, e);\n  }\n\n  public decimal Price\n  {\n    get { return price; }\n    set\n    {\n      if (price == value) return;\n      price = value;\n      OnPriceChanged (EventArgs.Empty);\n    }\n  }\n}\n```", "```cs\npublic event EventHandler PriceChanged;\n```", "```cs\nprivate EventHandler priceChanged;         // Declare a private delegate\n\npublic event EventHandler PriceChanged\n{\n  add    { priceChanged += value; }\n  remove { priceChanged -= value; }\n}\n```", "```cs\npublic interface IFoo { event EventHandler Ev; }\n\nclass Foo : IFoo\n{\n  private EventHandler ev;\n\n  event EventHandler IFoo.Ev\n  {\n    add    { ev += value; }\n    remove { ev -= value; }\n  }\n}\n```", "```cs\npublic class Foo\n{\n  public static event EventHandler<EventArgs> StaticEvent;\n  public virtual event EventHandler<EventArgs> VirtualEvent;\n}\n```", "```cs\nTransformer sqr = x => x * x;\nConsole.WriteLine (sqr(3));    // 9\n\ndelegate int Transformer (int i);\n```", "```cs\n(*parameters*) => *expression-or-statement-block*\n```", "```cs\nx => x * x;\n```", "```cs\ndelegate int Transformer (int i);\n```", "```cs\nx => { return x * x; };\n```", "```cs\nFunc<int,int> sqr = x => x * x;\n```", "```cs\nFunc<string,string,int> totalLength = (s1, s2) => s1.Length + s2.Length;\nint total = totalLength (\"hello\", \"world\");   // total is 10;\n```", "```cs\nFunc<string,string,int> totalLength = (_,_) => ...\n```", "```cs\nFunc<string> greeter = () => \"Hello, world\";\n```", "```cs\nvar greeter = () => \"Hello, world\";\n```", "```cs\nvoid Foo<T> (T x)         {}\nvoid Bar<T> (Action<T> a) {}\n```", "```cs\nBar (x => Foo (x));     // What type is x?\n```", "```cs\nBar ((int x) => Foo (x));\n```", "```cs\nBar<int> (x => Foo (x));   // Specify type parameter for Bar\nBar<int> (Foo);            // As above, but with method group\n```", "```cs\nvar sqr = (int x) => x * x;\n```", "```cs\nvar sqr = int (int x) => x;\n```", "```cs\nvoid Print (string message = \"\") => Console.WriteLine (message);\n```", "```cs\nvar print = (string message = \"\") => Console.WriteLine (message);\n\nprint (\"Hello\");\nprint ();\n```", "```cs\nint factor = 2;\nFunc<int, int> multiplier = n => n * factor;\nConsole.WriteLine (multiplier (3));            // 6\n```", "```cs\nint factor = 2;\nFunc<int, int> multiplier = n => n * factor;\nfactor = 10;\nConsole.WriteLine (multiplier (3));           // 30\n```", "```cs\nint seed = 0;\nFunc<int> natural = () => seed++;\nConsole.WriteLine (natural());           // 0\nConsole.WriteLine (natural());           // 1\nConsole.WriteLine (seed);                // 2\n```", "```cs\nstatic Func<int> Natural()\n{\n  int seed = 0;\n  return () => seed++;      // Returns a *closure*\n}\n\nstatic void Main()\n{\n  Func<int> natural = Natural();\n  Console.WriteLine (natural());      // 0\n  Console.WriteLine (natural());      // 1\n}\n```", "```cs\nstatic Func<int> Natural()\n{    \n  return() => { int seed = 0; return seed++; };\n}\n\nstatic void Main()\n{\n  Func<int> natural = Natural();\n  Console.WriteLine (natural());           // 0\n  Console.WriteLine (natural());           // 0\n}\n```", "```cs\nFunc<int, int> multiplier = static n => n * 2;\n```", "```cs\nint factor = 2;\nFunc<int, int> multiplier = static n => n * factor;  // will not compile\n```", "```cs\nvoid Foo()\n{\n  int factor = 123;\n  static int Multiply (int x) => x * 2;   // Local static method\n}\n```", "```cs\nAction[] actions = new Action[3];\n\nfor (int i = 0; i < 3; i++)\n  actions [i] = () => Console.Write (i);\n\nforeach (Action a in actions) a();     // 333\n```", "```cs\nAction[] actions = new Action[3];\nint i = 0;\nactions[0] = () => Console.Write (i);\ni = 1;\nactions[1] = () => Console.Write (i);\ni = 2;\nactions[2] = () => Console.Write (i);\ni = 3;\nforeach (Action a in actions) a();    // 333\n```", "```cs\nAction[] actions = new Action[3];\nfor (int i = 0; i < 3; i++)\n{\n  int loopScopedi = i;\n  actions [i] = () => Console.Write (loopScopedi);\n}\nforeach (Action a in actions) a();     // 012\n```", "```cs\npublic void Foo (Func<int,bool> predicate) { ... }\n```", "```cs\nTransformer sqr = delegate (int x) {return x * x;};\nConsole.WriteLine (sqr(3));                            // 9\n\ndelegate int Transformer (int i);\n```", "```cs\nTransformer sqr =       (int x) => {return x * x;};\n```", "```cs\nTransformer sqr =            x  => x * x;\n```", "```cs\npublic event EventHandler Clicked = delegate { };\n```", "```cs\n// Notice that we omit the parameters:\nClicked += delegate { Console.WriteLine (\"clicked\"); };\n```", "```cs\ntry\n{\n  ... // exception may get thrown within execution of this block\n}\ncatch (ExceptionA ex)\n{\n  ... // handle exception of type ExceptionA\n}\ncatch (ExceptionB ex)\n{\n  ... // handle exception of type ExceptionB\n}\nfinally\n{\n  ... // cleanup code\n}\n```", "```cs\nint y = Calc (0);\nConsole.WriteLine (y);\n\nint Calc (int x) => 10 / x;\n```", "```cs\ntry\n{\n  int y = Calc (0);\n  Console.WriteLine (y);\n}\ncatch (DivideByZeroException ex)\n{\n  Console.WriteLine (\"x cannot be zero\");\n}\nConsole.WriteLine (\"program completed\");\n\nint Calc (int x) => 10 / x;\n```", "```cs\nx cannot be zero\nprogram completed\n```", "```cs\nclass Test\n{\n  static void Main (string[] args)\n  {\n    try\n    {\n      byte b = byte.Parse (args[0]);\n      Console.WriteLine (b);\n    }\n    catch (IndexOutOfRangeException)\n    {\n      Console.WriteLine (\"Please provide at least one argument\");\n    }\n    catch (FormatException)\n    {\n      Console.WriteLine (\"That's not a number!\");\n    }\n    catch (OverflowException)\n    {\n      Console.WriteLine (\"You've given me more than a byte!\");\n    }\n  }\n}\n```", "```cs\ncatch (OverflowException)   // no variable\n{\n  ...\n}\n```", "```cs\ncatch { ... }\n```", "```cs\ncatch (WebException ex) when (ex.Status == WebExceptionStatus.Timeout)\n{\n  ...\n}\n```", "```cs\ncatch (WebException ex) when (ex.Status == WebExceptionStatus.Timeout)\n{ ... }\ncatch (WebException ex) when (ex.Status == WebExceptionStatus.SendFailure)\n{ ... }\n```", "```cs\nvoid ReadFile()\n{\n  StreamReader reader = null;    // In System.IO namespace\n  try\n  {\n    reader = File.OpenText (\"file.txt\");\n    if (reader.EndOfStream) return;\n    Console.WriteLine (reader.ReadToEnd());\n  }\n  finally\n  {\n    if (reader != null) reader.Dispose();\n  }\n}\n```", "```cs\nusing (StreamReader reader = File.OpenText (\"file.txt\"))\n{\n  ...\n}\n```", "```cs\n{\n  StreamReader reader = File.OpenText (\"file.txt\");\n  try\n  {\n    ...\n  }\n  finally\n  {\n    if (reader != null)\n      ((IDisposable)reader).Dispose();\n  }\n}\n```", "```cs\nif (File.Exists (\"file.txt\"))\n{\n  using var reader = File.OpenText (\"file.txt\");\n  Console.WriteLine (reader.ReadLine());\n  ...\n}\n```", "```cs\ntry { Display (null); }\ncatch (ArgumentNullException ex)\n{\n  Console.WriteLine (\"Caught the exception\");\n}\n\nvoid Display (string name)\n{\n  if (name == null)\n    throw new ArgumentNullException (nameof (name));\n\n  Console.WriteLine (name);\n}\n```", "```cs\nvoid Display (string name)\n{\n  ArgumentNullException.ThrowIfNull (name);\n  Console.WriteLine (name);\n}\n```", "```cs\npublic string Foo() => throw new NotImplementedException();\n```", "```cs\nstring ProperCase (string value) =>\n  value == null ? throw new ArgumentException (\"value\") :\n  value == \"\" ? \"\" :\n  char.ToUpper (value[0]) + value.Substring (1);\n```", "```cs\ntry {  ...  }\ncatch (Exception ex)\n{\n  // Log error\n  ...\n  throw;          // Rethrow same exception\n}\n```", "```cs\ntry\n{\n  ... // Parse a DateTime from XML element data\n}\ncatch (FormatException ex)\n{\n  throw new XmlException (\"Invalid DateTime\", ex);\n}\n```", "```cs\nthrow null;\n```", "```cs\npublic int Parse     (string input);\npublic bool TryParse (string input, out int returnValue);\n```", "```cs\npublic *return-type XXX* (*input-type* input)\n{\n  *return-type* returnValue;\n  if (!Try*XXX* (input, out returnValue))\n    throw new *YYY*Exception (...)\n  return returnValue;\n}\n```", "```cs\nclass *Enumerator*   // Typically implements IEnumerator or IEnumerator<T>\n{\n  public *IteratorVariableType* Current { get {...} }\n  public bool MoveNext() {...}\n}\n\nclass *Enumerable*   // Typically implements IEnumerable or IEnumerable<T>\n{\n  public *Enumerator* GetEnumerator() {...}\n}\n```", "```cs\nforeach (char c in \"beer\")\n  Console.WriteLine (c);\n```", "```cs\nusing (var enumerator = \"beer\".GetEnumerator())\n  while (enumerator.MoveNext())\n  {\n    var element = enumerator.Current;\n    Console.WriteLine (element);\n  }\n```", "```cs\nusing System.Collections.Generic;\n\nvar list = new List<int> {1, 2, 3};\n```", "```cs\nusing System.Collections.Generic;\n\nList<int> list = [1, 2, 3];\n```", "```cs\nint[] array = [1, 2, 3];\nSpan<int> span = [1, 2, 3];\n```", "```cs\nFoo ([1, 2, 3]);\n\nvoid Foo (List<int> numbers) { ... }\n```", "```cs\nusing System.Collections.Generic;\n\nList<int> list = new List<int>();\nlist.Add (1);\nlist.Add (2);\nlist.Add (3);\n```", "```cs\nvar dict = new Dictionary<int, string>()\n{\n  { 5, \"five\" },\n  { 10, \"ten\" }\n};\n```", "```cs\nvar dict = new Dictionary<int, string>()\n{\n  [3] = \"three\",\n  [10] = \"ten\"\n};\n```", "```cs\nusing System;\nusing System.Collections.Generic;\n\nforeach (int fib in Fibs(6))\n  Console.Write (fib + \"  \");\n}\n\nIEnumerable<int> Fibs (int fibCount)\n{\n  for (int i = 0, prevFib = 1, curFib = 1; i < fibCount; i++)\n  {\n    yield return prevFib;\n    int newFib = prevFib+curFib;\n    prevFib = curFib;\n    curFib = newFib;\n  }\n}\n\nOUTPUT: 1  1  2  3  5  8\n```", "```cs\n// Enumerable interfaces\nSystem.Collections.IEnumerable\nSystem.Collections.Generic.IEnumerable<T>\n\n// Enumerator interfaces\nSystem.Collections.IEnumerator\nSystem.Collections.Generic.IEnumerator<T>\n```", "```cs\nforeach (string s in Foo())\n  Console.WriteLine(s);         // Prints \"One\",\"Two\",\"Three\"\n\nIEnumerable<string> Foo()\n{\n  yield return \"One\";\n  yield return \"Two\";\n  yield return \"Three\";\n}\n```", "```cs\nIEnumerable<string> Foo (bool breakEarly)\n{\n  yield return \"One\";\n  yield return \"Two\";\n\n  if (breakEarly)\n    yield break;\n\n  yield return \"Three\";\n}\n```", "```cs\nIEnumerable<string> Foo()\n{\n  try { yield return \"One\"; }    // Illegal\n  catch { ... }\n}\n```", "```cs\nIEnumerable<string> Foo()\n{\n  try { yield return \"One\"; }    // OK\n  finally { ... }\n}\n```", "```cs\nstring firstElement = null;\nvar sequence = Foo();\nusing (var enumerator = sequence.GetEnumerator())\n  if (enumerator.MoveNext())\n    firstElement = enumerator.Current;\n```", "```cs\nusing System;\nusing System.Collections.Generic;\n\nforeach (int fib in EvenNumbersOnly (Fibs(6)))\n  Console.WriteLine (fib);\n\nIEnumerable<int> Fibs (int fibCount)\n{\n  for (int i = 0, prevFib = 1, curFib = 1; i < fibCount; i++)\n  {\n    yield return prevFib;\n    int newFib = prevFib+curFib;\n    prevFib = curFib;\n    curFib = newFib;\n  }\n}\n\nIEnumerable<int> EvenNumbersOnly (IEnumerable<int> sequence)\n{\n  foreach (int x in sequence)\n    if ((x % 2) == 0)\n      yield return x;\n}\n```", "```cs\nstring s = null;       // OK, Reference Type\nint i = null;          // Compile Error, Value Type cannot be null\n```", "```cs\nint? i = null;                     // OK, Nullable Type\nConsole.WriteLine (i == null);     // True\n```", "```cs\npublic struct Nullable<T> where T : struct\n{\n  public T Value {get;}\n  public bool HasValue {get;}\n  public T GetValueOrDefault();\n  public T GetValueOrDefault (T defaultValue);\n  ...\n}\n```", "```cs\nint? i = null;\nConsole.WriteLine (i == null);              // True\n```", "```cs\nNullable<int> i = new Nullable<int>();\nConsole.WriteLine (! i.HasValue);           // True\n```", "```cs\nint? x = 5;        // implicit\nint y = (int)x;    // explicit\n```", "```cs\nobject o = \"string\";\nint? x = o as int?;\nConsole.WriteLine (x.HasValue);   // False\n```", "```cs\nint? x = 5;\nint? y = 10;\nbool b = x < y;      // true\n```", "```cs\nbool b = (x.HasValue && y.HasValue) ? (x.Value < y.Value) : false;\n```", "```cs\nint? x = 5;\nint? y = null;\n\n// Equality operator examples\nConsole.WriteLine (x == y);    // False\nConsole.WriteLine (x == null); // False\nConsole.WriteLine (x == 5);    // True\nConsole.WriteLine (y == null); // True\nConsole.WriteLine (y == 5);    // False\nConsole.WriteLine (y != 5);    // True\n\n// Relational operator examples\nConsole.WriteLine (x < 6);     // True\nConsole.WriteLine (y < 6);     // False\nConsole.WriteLine (y > 6);     // False\n\n// All other operator examples\nConsole.WriteLine (x + 5);     // 10\nConsole.WriteLine (x + y);     // *null* (prints empty line)\n```", "```cs\nConsole.WriteLine (       null ==        null);   // True\nConsole.WriteLine ((bool?)null == (bool?)null);   // True\n```", "```cs\nbool b = x < y;    // Translation:\n\nbool b = (x.HasValue && y.HasValue) \n         ? (x.Value < y.Value)\n         : false;\n\n// b is false (assuming x is 5 and y is null)\n```", "```cs\nint? c = x + y;   // Translation:\n\nint? c = (x.HasValue && y.HasValue)\n         ? (int?) (x.Value + y.Value) \n         : null;\n\n// c is null (assuming x is 5 and y is null)\n```", "```cs\nint? a = null;\nint b = 2;\nint? c = a + b;   // c is null - equivalent to a + (int?)b\n```", "```cs\nbool? n = null;\nbool? f = false;\nbool? t = true;\nConsole.WriteLine (n | n);    // *(null)*\nConsole.WriteLine (n | f);    // *(null)*\nConsole.WriteLine (n | t);    // True\nConsole.WriteLine (n & n);    // *(null)*\nConsole.WriteLine (n & f);    // False\nConsole.WriteLine (n & t);    // *(null)*\n```", "```cs\nint? x = null;\nint y = x ?? 5;        // y is 5\n\nint? a = null, b = 1, c = 2;\nConsole.WriteLine (a ?? b ?? c);  // 1 *(first non-null value)*\n```", "```cs\nSystem.Text.StringBuilder sb = null;\nint? length = sb?.ToString().Length;\n```", "```cs\nint length = sb?.ToString().Length ?? 0;  // Evaluates to 0 if sb is null\n```", "```cs\n// Maps to a Customer table in a database\npublic class Customer\n{\n  ...\n  public decimal? AccountBalance;\n}\n```", "```cs\npublic class Row\n{\n  ...\n  Grid parent;\n  Color? color;\n\n  public Color Color\n  {\n    get { return color ?? parent.Color; }\n    set { color = value == parent.Color ? (Color?)null : value; }\n  }\n}\n```", "```cs\nint i = \"Pink\".IndexOf ('b');\nConsole.WriteLine (i);         // −1\n```", "```cs\n// Create an array whose lower bound is 1 instead of 0:\n\nArray a = Array.CreateInstance (typeof (string),\n                                new int[] {2}, new int[] {1});\na.SetValue (\"a\", 1);\na.SetValue (\"b\", 2);\nConsole.WriteLine (Array.IndexOf (a, \"c\"));  // 0\n```", "```cs\n<PropertyGroup>\n  <Nullable>enable</Nullable>\n</PropertyGroup>\n```", "```cs\n#nullable enable   // enables nullable reference types from this point on\n#nullable disable  // disables nullable reference types from this point on\n#nullable restore  // resets nullable reference types to project setting\n```", "```cs\n#nullable enable    // Enable nullable reference types\n\nstring s1 = null;   // Generates a compiler warning!\nstring? s2 = null;  // OK: s2 is *nullable reference type*\n```", "```cs\nclass Foo { string x; }\n```", "```cs\nvoid Foo (string? s) => Console.Write (s.Length);\n```", "```cs\nvoid Foo (string? s) => Console.Write (s!.Length);\n```", "```cs\nvoid Foo (string? s)\n{\n  if (s != null) Console.Write (s.Length);\n}\n```", "```cs\nvar strings = new string[10];\nConsole.WriteLine (strings[0].Length);\n```", "```cs\n#nullable enable annotations    // Enable the annotation context\n// OR:\n#nullable enable warnings       // Enable the warning context\n```", "```cs\n<Nullable>annotations</Nullable>\n<!-- OR -->\n<Nullable>warnings</Nullable>\n```", "```cs\n<PropertyGroup>\n  <Nullable>enable</Nullable>\n  <WarningsAsErrors>CS8600;CS8602;CS8603</WarningsAsErrors>\n</PropertyGroup>\n```", "```cs\npublic static class StringHelper\n{\n  public static bool IsCapitalized (this string s)\n  {\n    if (string.IsNullOrEmpty(s)) return false;\n    return char.IsUpper (s[0]);\n  }\n}\n```", "```cs\nConsole.WriteLine (\"Perth\".IsCapitalized());\n```", "```cs\nConsole.WriteLine (StringHelper.IsCapitalized (\"Perth\"));\n```", "```cs\narg0.Method (arg1, arg2, ...);              // Extension method call\nStaticClass.Method (arg0, arg1, arg2, ...); // Static method call\n```", "```cs\npublic static T First<T> (this IEnumerable<T> sequence)\n{\n  foreach (T element in sequence)\n    return element;\n\n  throw new InvalidOperationException (\"No elements!\");\n}\n...\nConsole.WriteLine (\"Seattle\".First());   // S\n```", "```cs\npublic static class StringHelper\n{\n  public static string Pluralize (this string s) {...}\n  public static string Capitalize (this string s) {...}\n}\n```", "```cs\nstring x = \"sausage\".Pluralize().Capitalize();\nstring y = StringHelper.Capitalize (StringHelper.Pluralize (\"sausage\"));\n```", "```cs\nusing System;\n\nnamespace Utils\n{\n  public static class StringHelper\n  {\n    public static bool IsCapitalized (this string s)\n    {\n      if (string.IsNullOrEmpty(s)) return false;\n      return char.IsUpper (s[0]);\n    }\n  }\n}\n```", "```cs\nnamespace MyApp\n{\n  using Utils;\n\n  class Test\n  {\n    static void Main() => Console.WriteLine (\"Perth\".IsCapitalized());\n  }\n}\n```", "```cs\nclass Test\n{\n  public void Foo (object x) { }    // This method always wins\n}\n\nstatic class Extensions\n{\n  public static void Foo (this Test t, int x) { }\n}\n```", "```cs\nstatic class StringHelper\n{\n  public static bool IsCapitalized (this string s) {...}\n}\nstatic class ObjectHelper\n{\n  public static bool IsCapitalized (this object s) {...}\n}\n```", "```cs\nbool test1 = \"Perth\".IsCapitalized();\n```", "```cs\nvar dude = new { Name = \"Bob\", Age = 23 };\n```", "```cs\ninternal class AnonymousGeneratedTypeName\n{\n  private string name;  // Actual field name is irrelevant\n  private int    age;   // Actual field name is irrelevant\n\n  public AnonymousGeneratedTypeName (string name, int age)\n  {\n    this.name = name; this.age = age;\n  }\n\n  public string  Name => name;\n  public int     Age  => age;\n\n  // The Equals and GetHashCode methods are overridden (see Chapter 6).\n  // The ToString method is also overridden.\n}\n...\n\nvar dude = new AnonymousGeneratedTypeName (\"Bob\", 23);\n```", "```cs\nint Age = 23;\nvar dude = new { Name = \"Bob\", Age, Age.ToString().Length };\n```", "```cs\nvar dude = new { Name = \"Bob\", Age = Age, Length = Age.ToString().Length };\n```", "```cs\nvar a1 = new { X = 2, Y = 4 };\nvar a2 = new { X = 2, Y = 4 };\nConsole.WriteLine (a1.GetType() == a2.GetType());   // True\n```", "```cs\nConsole.WriteLine (a1.Equals (a2));   // True\n```", "```cs\nConsole.WriteLine (a1 == a2);         // False\n```", "```cs\nvar dudes = new[]\n{\n  new { Name = \"Bob\", Age = 30 },\n  new { Name = \"Tom\", Age = 40 }\n};\n```", "```cs\nvar Foo() => new { Name = \"Bob\", Age = 30 };  // Not legal!\n```", "```cs\nvar a1 = new { A = 1, B = 2, C = 3, D = 4, E = 5 };\nvar a2 = a1 with { E = 10 }; \nConsole.WriteLine (a2);      // { A = 1, B = 2, C = 3, D = 4, E = 10 }\n```", "```cs\nvar bob = (\"Bob\", 23);    // Allow compiler to infer the element types\n\nConsole.WriteLine (bob.Item1);   // Bob\nConsole.WriteLine (bob.Item2);   // 23\n```", "```cs\nvar joe = bob;                 // joe is a *copy* of bob\njoe.Item1 = \"Joe\";             // Change joe’s Item1 from Bob to Joe\nConsole.WriteLine (bob);       // (Bob, 23)\nConsole.WriteLine (joe);       // (Joe, 23)\n```", "```cs\n(string,int) bob  = (\"Bob\", 23);\n```", "```cs\n(string,int) person = GetPerson();  // Could use 'var' instead if we want\nConsole.WriteLine (person.Item1);   // Bob\nConsole.WriteLine (person.Item2);   // 23\n\n(string,int) GetPerson() => (\"Bob\", 23);\n```", "```cs\nTask<(string,int)>\nDictionary<(string,int),Uri>\nIEnumerable<(int id, string name)>   // See below for naming elements\n```", "```cs\nvar tuple = (name:\"Bob\", age:23);\n\nConsole.WriteLine (tuple.name);     // Bob\nConsole.WriteLine (tuple.age);      // 23\n```", "```cs\nvar person = GetPerson();\nConsole.WriteLine (person.name);    // Bob\nConsole.WriteLine (person.age);     // 23\n\n(string name, int age) GetPerson() => (\"Bob\", 23);\n```", "```cs\nvar person = GetPerson();\nConsole.WriteLine (person.Name);    // Bob\nConsole.WriteLine (person.Age);     // 23\n\nPerson GetPerson() => new (\"Bob\", 23); \nrecord Person (string Name, int Age);\n```", "```cs\nvar now = DateTime.Now;\nvar tuple = (now.Day, now.Month, now.Year);\nConsole.WriteLine (tuple.Day);               // OK\n```", "```cs\n(string name, int age, char sex)  bob1 = (\"Bob\", 23, 'M');\n(string age,  int sex, char name) bob2 = bob1;   // No error!\n```", "```cs\nConsole.WriteLine (bob2.name);    // M\nConsole.WriteLine (bob2.age);     // Bob\nConsole.WriteLine (bob2.sex);     // 23\n```", "```cs\npublic struct ValueTuple<T1>\npublic struct ValueTuple<T1,T2>\npublic struct ValueTuple<T1,T2,T3>\n...\n```", "```cs\n// Create JSON payload:\nvar json = JsonContent.Create (new { id = 123, name = \"Test\" })\n```", "```cs\nusing Point = (int, int);\nPoint p = (3, 4);\n```", "```cs\nusing Point = (int X, int Y);    // Legal (but not necessarily *good*!)\nPoint p = (3, 4);\n```", "```cs\nPoint p = new (3, 4);\nrecord Point (int X, int Y);\n```", "```cs\nValueTuple<string,int> bob1 = ValueTuple.Create (\"Bob\", 23);\n(string,int)           bob2 = ValueTuple.Create (\"Bob\", 23);\n(string name, int age) bob3 = ValueTuple.Create (\"Bob\", 23);\n```", "```cs\nvar bob = (\"Bob\", 23);\n\nstring name = bob.Item1;\nint age = bob.Item2;\n```", "```cs\nvar bob = (\"Bob\", 23);\n\n(string name, int age) = bob;   // Deconstruct the bob tuple into\n                                // separate variables (name and age).\nConsole.WriteLine (name);\nConsole.WriteLine (age);\n```", "```cs\n(string name, int age)      = bob;   // Deconstructing a tuple\n(string name, int age) bob2 = bob;   // Declaring a new tuple\n```", "```cs\nvar (name, age, sex) = GetBob();\nConsole.WriteLine (name);        // Bob\nConsole.WriteLine (age);         // 23\nConsole.WriteLine (sex);         // M\n\nstring, int, char) GetBob() => ( \"Bob\", 23, 'M');\n```", "```cs\nclass Point\n{\n  public readonly int X, Y;\n  public Point (int x, int y) => (X, Y) = (x, y);\n}\n```", "```cs\nvar t1 = (\"one\", 1);\nvar t2 = (\"one\", 1);\nConsole.WriteLine (t1.Equals (t2));    // True\n```", "```cs\nConsole.WriteLine (t1 == t2);    // True (from C# 7.3)\n```", "```cs\nTuple<string,int> t = Tuple.Create (\"Bob\", 23);  // Factory method \nConsole.WriteLine (t.Item1);       // Bob\nConsole.WriteLine (t.Item2);       // 23\n```", "```cs\nrecord Point { }          // Point is a class\n```", "```cs\nrecord struct Point { }   // Point is a struct\n```", "```cs\nrecord Point\n{\n  public Point (double x, double y) => (X, Y) = (x, y);\n\n  public double X { get; init; }\n  public double Y { get; init; }    \n}\n```", "```cs\n(X, Y) = (x, y);\n```", "```cs\n{ this.X = x; this.Y = y; }\n```", "```cs\nclass Point\n{  \n  public Point (double x, double y) => (X, Y) = (x, y);\n\n  public double X { get; init; }\n  public double Y { get; init; }    \n\n  protected Point (Point original)    // “Copy constructor”\n  {\n    this.X = original.X; this.Y = original.Y\n  }\n\n  // This method has a strange compiler-generated name:\n  public virtual Point <Clone>$() => new Point (this);   // Clone method\n\n  // Additional code to override Equals, ==, !=, GetHashCode, ToString()\n  // ...\n}\n```", "```cs\nnew Foo (123, 234) { Optional2 = 345 };\n\nrecord Foo\n{\n  public Foo (int required1, int required2) { ... }\n\n  public int Required1 { get; init; }\n  public int Required2 { get; init; }\n\n  public int Optional1 { get; init; }\n  public int Optional2 { get; init; }\n}\n```", "```cs\nrecord Point (double X, double Y)\n{\n  // You can optionally define additional class members here...\n}\n```", "```cs\nrecord Point (double X, double Y);\n```", "```cs\n  public Point (double X, double Y)   // “Primary constructor”\n  {\n    this.X = X; this.Y = Y;\n  }\n```", "```cs\n  public void Deconstruct (out double X, out double Y)   // Deconstructor\n  {\n    X = this.X; Y = this.Y;\n  }\n```", "```cs\nrecord Point3D (double X, double Y, double Z) : Point (X, Y);\n```", "```cs\nclass Point3D : Point\n{\n  public double Z { get; init; }\n\n  public Point3D (double X, double Y, double Z) : base (X, Y) \n    => this.Z = Z;\n}\n```", "```cs\nPoint p1 = new Point (3, 3);\nPoint p2 = p1 with { Y = 4 };\nConsole.WriteLine (p2);       // Point { X = 3, Y = 4 }\n\nrecord Point (double X, double Y);\n```", "```cs\nTest t1 = new Test (1, 2, 3, 4, 5, 6, 7, 8);\nTest t2 = t1 with { A = 10, C = 30 };\nConsole.WriteLine (t2);\n\nrecord Test (int A, int B, int C, int D, int E, int F, int G, int H);\n```", "```cs\nTest { A = 10, B = 2, C = 30, D = 4, E = 5, F = 6, G = 7, H = 8 }\n```", "```cs\nTest t2 = t1 with { A = 10, C = 30 };\n```", "```cs\nTest t2 = new Test(t1);  // Use copy constructor to clone t1 field by field\nt2.A = 10;               // Update property A\nt2.C = 30;               // Update property C\n```", "```cs\nprotected Point (Point original)\n{\n  this.X = original.X; this.Y = original.Y;\n}\n```", "```cs\nprotected Point (Point original) : base (original)\n{\n  ...\n}\n```", "```cs\nrecord Point\n{\n  // Notice that we assign x to the X property (and not the _x field):\n  public Point (double x, double y) => (X, Y) = (x, y);\n\n  double _x;\n  public double X\n  { \n    get => _x;\n    init\n    {\n      if (double.IsNaN (value))\n        throw new ArgumentException (\"X Cannot be NaN\");\n      _x = value;\n    }\n  }\n  public double Y { **get; init;** }    \n}\n```", "```cs\nPoint p1 = new Point (2, 3);\nPoint p2 = p1 with { X = double.NaN };   // throws an exception\n```", "```cs\nprotected Point (Point original)\n {\n   _x = original._x; Y = original.Y;\n }\n```", "```cs\nrecord Point (double X, double Y)\n{\n  public double DistanceFromOrigin => Math.Sqrt (X*X + Y*Y);\n}\n```", "```cs\nrecord Point\n{\n  public double X { get; }\n  public double Y { get; }\n  public double DistanceFromOrigin { get; }\n\n  public Point (double x, double y) =>\n    (X, Y, DistanceFromOrigin) = (x, y, Math.Sqrt (x*x + y*y));\n}\n```", "```cs\nrecord Point\n{\n  ...\n\n  double? _distance;\n  public double DistanceFromOrigin\n  {\n    get\n    {\n      if (_distance == null) \n        _distance = Math.Sqrt (X*X + Y*Y);\n\n      return _distance.Value;\n    }\n  }\n}\n```", "```cs\n  public double DistanceFromOrigin => _distance ??= Math.Sqrt (X*X + Y*Y);\n```", "```cs\nrecord Point\n{\n  public Point (double x, double y) => (X, Y) = (x, y);\n\n  double _x, _y;\n  public double X { get => _x; init { _x = value; _distance = null; } }\n  public double Y { get => _y; init { _y = value; _distance = null; } }\n\n  double? _distance;\n  public double DistanceFromOrigin => _distance ??= Math.Sqrt (X*X + Y*Y);\n}\n```", "```cs\nPoint p1 = new Point (2, 3);\nConsole.WriteLine (p1.DistanceFromOrigin);   // 3.605551275463989\nPoint p2 = p1 with { Y = 4 };\nConsole.WriteLine (p2.DistanceFromOrigin);   // 4.47213595499958\n```", "```cs\nrecord Point (double X, double Y)\n{\n  double? _distance;\n  public double DistanceFromOrigin => _distance ??= Math.Sqrt (X*X + Y*Y);\n\n  protected Point (Point other) => (X, Y) = other;\n}\n```", "```cs\nrecord Student (string ID, string LastName, string GivenName)\n{\n  public string ID { get; } = ID;\n}\n```", "```cs\n  public string ID { get; } = ID;\n```", "```cs\nrecord struct Student (string ID)\n{\n  public string ID = ID;\n}\n```", "```cs\nrecord Student (string ID, string LastName, string FirstName)\n{\n  public string ID { get; } = ID;\n  readonly int _enrollmentYear = int.Parse (ID.Substring (0, 4));\n}\n```", "```cs\nrecord Person (string Name)\n{\n  string _name = Name;\n  public string Name\n  {\n    get  => _name;\n    init => _name = value ?? throw new ArgumentNullException (\"Name\");\n  }\n}\n```", "```cs\nvar p = new Person (null);    // Succeeds! (bypasses the null check)\n```", "```cs\nrecord Person\n{\n  public Person (string name) => Name = name;  // Assign to *PROPERTY*\n\n  string _name;\n  public string Name { get => _name; init => ... }\n}\n```", "```cs\nvar p1 = new Point (1, 2);\nvar p2 = new Point (1, 2);\nConsole.WriteLine (p1.Equals (p2));   // True\n\nrecord Point (double X, double Y);\n```", "```cs\nConsole.WriteLine (p1 == p2);         // True\n```", "```cs\nrecord Point (double X, double Y)\n{\n  double _someOtherField;\n  public virtual bool Equals (Point other) =>\n    other != null && X == other.X && Y == other.Y;\n}\n```", "```cs\n  public virtual bool Equals (Point other) => base.Equals (other) && ...\n```", "```cs\nif (obj is string)\n  Console.WriteLine (((string)obj).Length);\n```", "```cs\nif (obj is string s)\n  Console.WriteLine (s.Length);\n```", "```cs\nif (obj is string { Length:4 })\n  Console.WriteLine (\"A string with 4 characters\");\n```", "```cs\nvoid Foo (object obj) \n{\n  if (obj is 3) ...\n}\n```", "```cs\nobj is int && (int)obj == 3\n```", "```cs\nif (3.Equals (obj)) ...\n```", "```cs\nif (x is > 100) Console.WriteLine (\"x is greater than 100\");\n```", "```cs\nstring GetWeightCategory (decimal bmi) => bmi switch\n{\n  < 18.5m => \"underweight\",\n  < 25m => \"normal\",\n  < 30m => \"overweight\",\n  _ => \"obese\"\n};\n```", "```cs\nobject obj = 2m;                  // obj is decimal\nConsole.WriteLine (obj is < 3m);  // True\nConsole.WriteLine (obj is < 3);   // False\n```", "```cs\nbool IsJanetOrJohn (string name) => name.ToUpper() is \"JANET\" or \"JOHN\";\n\nbool IsVowel (char c) => c is 'a' or 'e' or 'i' or 'o' or 'u';\n\nbool Between1And9 (int n) => n is >= 1 and <= 9;\n\nbool IsLetter (char c) => c is >= 'a' and <= 'z'\n                            or >= 'A' and <= 'Z';\n```", "```cs\nif (obj is not string) ...\n```", "```cs\nif (!(obj is string)) ...\n```", "```cs\nbool IsJanetOrJohn (string name) => \n  name.ToUpper() is var upper && (upper == \"JANET\" || upper == \"JOHN\");\n```", "```cs\nbool IsJanetOrJohn (string name)\n{\n  string upper = name.ToUpper();\n  return upper == \"JANET\" || upper == \"JOHN\";\n}\n```", "```cs\nvar p = (2, 3);\nConsole.WriteLine (p is (2, 3));   // True\n```", "```cs\nint AverageCelsiusTemperature (Season season, bool daytime) =>\n  (season, daytime) switch\n  {\n    (Season.Spring, true) => 20,\n    (Season.Spring, false) => 16,\n    (Season.Summer, true) => 27,\n    (Season.Summer, false) => 22,\n    (Season.Fall, true) => 18,\n    (Season.Fall, false) => 12,\n    (Season.Winter, true) => 10,\n    (Season.Winter, false) => -2,\n    _ => throw new Exception (\"Unexpected combination\")\n};\n\nenum Season { Spring, Summer, Fall, Winter };\n```", "```cs\nvar p = new Point (2, 2);\nConsole.WriteLine (p is (2, 2));  // True\n\nrecord Point (int X, int Y);      // Has compiler-generated deconstructor\n```", "```cs\nConsole.WriteLine (p is (var x, var y) && x == y);   // True\n```", "```cs\nstring Print (object obj) => obj switch \n{\n  Point (0, 0)                      => \"Empty point\",\n  Point (var x, var y) when x == y  => \"Diagonal\"\n  ...\n};\n```", "```cs\nif (obj is string { Length:4 }) ...\n```", "```cs\nif (obj is string s && s.Length == 4) ...\n```", "```cs\nbool ShouldAllow (Uri uri) => uri switch\n{\n  { Scheme: \"http\",  Port: 80  } => true,\n  { Scheme: \"https\", Port: 443 } => true,\n  { Scheme: \"ftp\",   Port: 21  } => true,\n  { IsLoopback: true           } => true,\n  _ => false\n};\n```", "```cs\n  { Scheme: { Length: 4 }, Port: 80 } => true,\n```", "```cs\n  { Scheme.Length: 4, Port: 80 } => true,\n```", "```cs\n  { Host: { Length: < 1000 }, Port: > 0 } => true,\n```", "```cs\n  { Scheme: \"http\" } when string.IsNullOrWhiteSpace (uri.Query) => true,\n```", "```cs\nbool ShouldAllow (object uri) => uri switch\n{\n  Uri { Scheme: \"http\",  Port: 80  } => true,\n  Uri { Scheme: \"https\", Port: 443 } => true,\n  ...\n```", "```cs\n  Uri { Scheme: \"http\", Port: 80 } httpUri => httpUri.Host.Length < 1000,\n```", "```cs\n  Uri { Scheme: \"http\", Port: 80 } httpUri \n                                   when httpUri.Host.Length < 1000 => true,\n```", "```cs\n  { Scheme: \"http\", Port: 80, Host: string host } => host.Length < 1000,\n```", "```cs\nbool ShouldAllow (Uri uri) => uri switch\n{\n  { Scheme: \"http\",  Port: 80, Host: var host } => host.Length < 1000,\n  { Scheme: \"https\", Port: 443                } => true,\n  { Scheme: \"ftp\",   Port: 21                 } => true,\n  { IsLoopback: true                          } => true,\n  _ => false\n};\n```", "```cs\n  { Scheme: \"http\", Port: 80 } => uri.Host.Length < 1000 => ...\n```", "```cs\n  { Scheme: \"http\", Port: 80, Host: { Length: < 1000 } } => ...\n```", "```cs\nint[] numbers = { 0, 1, 2, 3, 4 };\nConsole.Write (numbers is [0, 1, 2, 3, 4]);   // True\n```", "```cs\nConsole.Write (numbers is [0, 1, _, _, 4]);   // True\n```", "```cs\nConsole.Write (numbers is [0, 1, var x, 3, 4] && x > 1);   // True\n```", "```cs\nConsole.Write (numbers is [0, .., 4]);    // True\n```", "```cs\nConsole.Write (numbers is [0, .. var mid, 4] && mid.Contains (2)); // True\n```", "```cs\n[ObsoleteAttribute]\npublic class Foo {...}\n```", "```cs\n[Obsolete]\npublic class Foo {...}\n```", "```cs\npublic sealed class ObsoleteAttribute : Attribute {...}\n```", "```cs\n[XmlType (\"Customer\", Namespace=\"http://oreilly.com\")]\npublic class CustomerEntity { ... }\n```", "```cs\n[assembly: AssemblyFileVersion (\"1.2.3.4\")]\n```", "```cs\n[field:NonSerialized]\npublic int MyProperty { get; set; }\n```", "```cs\nAction<int> a = [Description (\"Method\")]\n                [return: Description (\"Return value\")]\n                ([Description (\"Parameter\")]int x) => Console.Write (x);\n```", "```cs\nvar methodAtt = a.GetMethodInfo().GetCustomAttributes();\nvar paramAtt = a.GetMethodInfo().GetParameters()[0].GetCustomAttributes();\nvar returnAtt = a.GetMethodInfo().ReturnParameter.GetCustomAttributes();\n```", "```cs\n[Serializable, Obsolete, CLSCompliant(false)]\npublic class Bar {...}\n\n[Serializable] [Obsolete] [CLSCompliant(false)]\npublic class Bar {...}\n\n[Serializable, Obsolete]\n[CLSCompliant(false)]\npublic class Bar {...}\n```", "```cs\nusing System;\nusing System.Runtime.CompilerServices;\n\nclass Program\n{\n  static void Main() => Foo();\n\n  static void Foo (\n    [CallerMemberName] string memberName = null,\n    [CallerFilePath] string filePath = null,\n    [CallerLineNumber] int lineNumber = 0)\n  {\n    Console.WriteLine (memberName);\n    Console.WriteLine (filePath);\n    Console.WriteLine (lineNumber);\n  }\n}\n```", "```cs\nMain\nc:\\source\\test\\Program.cs\n6\n```", "```cs\nstatic void Main() => Foo (\"Main\", @\"c:\\source\\test\\Program.cs\", 6);\n```", "```cs\npublic interface INotifyPropertyChanged\n{\n  event PropertyChangedEventHandler PropertyChanged;\n}\n\npublic delegate void PropertyChangedEventHandler\n  (object sender, PropertyChangedEventArgs e);\n\npublic class PropertyChangedEventArgs : EventArgs\n{\n  public PropertyChangedEventArgs (string propertyName);\n  public virtual string PropertyName { get; }\n}\n```", "```cs\npublic class Foo : INotifyPropertyChanged\n{\n  public event PropertyChangedEventHandler PropertyChanged = delegate { };\n\n  void RaisePropertyChanged ([CallerMemberName] string propertyName = null)\n    => PropertyChanged (this, new PropertyChangedEventArgs (propertyName));\n\n  string customerName;\n  public string CustomerName\n  {  \n    get => customerName;\n    set  \n    {  \n      if (value == customerName) return;\n      customerName = value;\n      RaisePropertyChanged();\n      // The compiler converts the above line to:\n      // RaisePropertyChanged (\"CustomerName\");\n    } \n  }\n}\n```", "```cs\nPrint (Math.PI * 2);\n\nvoid Print (double number,\n           [CallerArgumentExpression(\"number\")] string expr = null)\n  => Console.WriteLine (expr);\n\n// Output: Math.PI * 2\n```", "```cs\nPrint (Math.PI /*(π)*/ * 2);\n\n// Output:  Math.PI /*(π)*/ * 2\n```", "```cs\nAssert (2 + 2 == 5);\n\nvoid Assert (bool condition,\n            [CallerArgumentExpression (\"condition\")] string message = null)\n{\n  if (!condition) throw new Exception (\"Assertion failed: \" + message);\n}\n```", "```cs\npublic static void ThrowIfNull (object argument,\n  [CallerArgumentExpression(\"argument\")] string paramName = null)\n{\n  if (argument == null)\n    throw new ArgumentNullException (paramName);\n}\n```", "```cs\nvoid Print (string message)\n{\n  ArgumentNullException.ThrowIfNull (message); \n  ...\n}\n```", "```cs\ndynamic d = GetSomeObject();\nd.Quack();\n```", "```cs\nd.Quack();\n```", "```cs\nDuck d = ...\nd.Quack();\n```", "```cs\nobject d = ...\nd.Quack();\n```", "```cs\ndynamic d = ...\nd.Quack();\n```", "```cs\nusing System;\nusing System.Dynamic;\n\ndynamic d = new Duck();\nd.Quack();                  // Quack method was called\nd.Waddle();                 // Waddle method was called\n\npublic class Duck : DynamicObject\n{\n  public override bool TryInvokeMember (\n    InvokeMemberBinder binder, object[] args, out object result)\n  {\n    Console.WriteLine (binder.Name + \" method was called\");\n    result = null;\n    return true;\n  }\n}\n```", "```cs\nint x = 3, y = 4;\nConsole.WriteLine (Mean (x, y));\n\ndynamic Mean (dynamic x, dynamic y) => (x + y) / 2;\n```", "```cs\ndynamic d = 5;\nd.Hello();                  // throws RuntimeBinderException\n```", "```cs\ntypeof (dynamic) == typeof (object)\n```", "```cs\ntypeof (List<dynamic>) == typeof (List<object>)\ntypeof (dynamic[]) == typeof (object[])\n```", "```cs\ndynamic x = \"hello\";\nConsole.WriteLine (x.GetType().Name);  // String\n\nx = 123;  // No error (despite same variable)\nConsole.WriteLine (x.GetType().Name);  // Int32\n```", "```cs\nobject o = new System.Text.StringBuilder();\ndynamic d = o;\nd.Append (\"hello\");\nConsole.WriteLine (o);   // hello\n```", "```cs\npublic class Test\n{\n  public dynamic Foo;\n}\n```", "```cs\npublic class Test\n{\n  [System.Runtime.CompilerServices.DynamicAttribute]\n  public object Foo;\n}\n```", "```cs\nint i = 7;\ndynamic d = i;\nlong j = d;        // No cast required (implicit conversion)\n```", "```cs\nint i = 7;\ndynamic d = i;\nshort j = d;      // throws RuntimeBinderException\n```", "```cs\ndynamic x = \"hello\";  // Static type is dynamic, runtime type is string\nvar y = \"hello\";      // Static type is string, runtime type is string\nint i = x;            // Runtime error      (cannot convert string to int)\nint j = y;            // Compile-time error (cannot convert string to int)\n```", "```cs\ndynamic x = \"hello\";\nvar y = x;            // Static type of y is dynamic\nint z = y;            // Runtime error (cannot convert string to int)\n```", "```cs\ndynamic list = new List<int>();\nvar result = list.Add (5);         // RuntimeBinderException thrown\n```", "```cs\ndynamic x = 2;\nvar y = x * 3;       // Static type of y is dynamic\n```", "```cs\ndynamic x = 2;\nvar y = (int)x;      // Static type of y is int\n```", "```cs\ndynamic capacity = 10;\nvar x = new System.Text.StringBuilder (capacity);\n```", "```cs\ndynamic x = ...;\nx.Foo();          // x is the receiver\n```", "```cs\nclass Program\n{\n  static void Foo (int x)    => Console.WriteLine (\"int\");\n  static void Foo (string x) => Console.WriteLine (\"string\");\n\n  static void Main()\n  {\n    dynamic x = 5;\n    dynamic y = \"watermelon\";\n\n    Foo (x);    // int\n    Foo (y);    // string\n  }\n}\n```", "```cs\nclass Program\n{\n  static void Foo (int x)    => Console.WriteLine (\"int\");\n  static void Foo (string x) => Console.WriteLine (\"string\");\n\n  static void Main()\n  {\n    dynamic x = 5;\n    Foo (x, x);        // Compiler error - wrong number of parameters\n    Fook (x);          // Compiler error - no such method name\n  }\n}\n```", "```cs\nclass Program\n{\n  static void Foo (object x, object y) { Console.WriteLine (\"oo\"); }\n  static void Foo (object x, string y) { Console.WriteLine (\"os\"); }\n  static void Foo (string x, object y) { Console.WriteLine (\"so\"); }\n  static void Foo (string x, string y) { Console.WriteLine (\"ss\"); }\n\n  static void Main()\n  {\n    object o = \"hello\";\n    dynamic d = \"goodbye\";\n    Foo (o, d);               // os\n  }\n}\n```", "```cs\ninterface IFoo   { void Test();        }\nclass Foo : IFoo { void IFoo.Test() {} }\n```", "```cs\nIFoo f = new Foo();   // Implicit cast to interface\nf.Test();\n```", "```cs\nIFoo f = new Foo();\ndynamic d = f;\nd.Test();             // Exception thrown\n```", "```cs\nConsole.WriteLine (f.GetType().Name);    // Foo\n```", "```cs\nIFoo f = new Foo();\ndynamic uf = f.Uncapsulate();\nuf.Test();\n```", "```cs\npublic struct Note\n{\n  int value;\n  public Note (int semitonesFromA) { value = semitonesFromA; }\n  public static Note operator + (Note x, int semitones)\n  {\n    return new Note (x.value + semitones);\n  }\n}\n```", "```cs\nNote B = new Note (2);\nNote CSharp = B + 2;\n```", "```cs\nCSharp += 2;\n```", "```cs\npublic static Note operator + (Note x, int semitones)\n                               => new Note (x.value + semitones);\n```", "```cs\npublic static Note operator + (Note x, int semitones)\n  => new Note (x.value + semitones);\n\npublic static Note operator checked + (Note x, int semitones)\n  => checked (new Note (x.value + semitones));\n```", "```cs\nNote B = new Note (2);\nNote other = checked (B + int.MaxValue);  // throws OverflowException\n```", "```cs\n...\n// Convert to hertz\npublic static implicit operator double (Note x)\n  => 440 * Math.Pow (2, (double) x.value / 12 );\n\n// Convert from hertz (accurate to the nearest semitone)\npublic static explicit operator Note (double x)\n  => new Note ((int) (0.5 + 12 * (Math.Log (x/440) / Math.Log(2) ) ));\n...\n\nNote n = (Note)554.37;  // explicit conversion\ndouble x = n;           // implicit conversion\n```", "```cs\nConsole.WriteLine (554.37 is Note);   // False\nNote n = 554.37 as Note;              // *Error*\n```", "```cs\nSqlBoolean a = SqlBoolean.Null;\nif (a)\n  Console.WriteLine (\"True\");\nelse if (!a)\n  Console.WriteLine (\"False\");\nelse\n  Console.WriteLine (\"Null\");\n\nOUTPUT:\nNull\n```", "```cs\npublic struct SqlBoolean\n{\n  public static bool operator true (SqlBoolean x)\n    => x.m_value == True.m_value;\n\n  public static bool operator false (SqlBoolean x)\n    => x.m_value == False.m_value;  \n\n  public static SqlBoolean operator ! (SqlBoolean x)\n  {\n    if (x.m_value == Null.m_value)  return Null;\n    if (x.m_value == False.m_value) return True;\n    return False;\n  }\n\n  public static readonly SqlBoolean Null =  new SqlBoolean(0);\n  public static readonly SqlBoolean False = new SqlBoolean(1);\n  public static readonly SqlBoolean True =  new SqlBoolean(2);\n\n  private SqlBoolean (byte value) { m_value = value; }\n  private byte m_value;\n}\n```", "```cs\ninterface ICreateRandom<T>\n{\n  static abstract T CreateRandom();  // Create a random instance of T\n}\n```", "```cs\nrecord Point (int X, int Y);\n```", "```cs\nrecord Point (int X, int Y) : ICreateRandom<Point>\n{\n  static Random rnd = new();\n  public static Point CreateRandom() => new Point (rnd.Next(), rnd.Next());\n}\n```", "```cs\nT[] CreateTestData<T> (int count) where T : ICreateRandom<T>\n{\n  T[] result = new T[count];\n  for (int i = 0; i < count; i++)\n    result [i] = T.CreateRandom();\n  return result;\n}\n```", "```cs\nPoint[] testData = CreateTestData<Point>(50);  // Create 50 random Points.\n```", "```cs\ninterface IAddable<T> where T : IAddable<T>\n{\n   abstract static T operator + (T left, T right);\n}\n```", "```cs\nrecord Point (int X, int Y) : IAddable<Point>\n{\n  public static Point operator + (Point left, Point right) =>\n    new Point (left.X + right.X, left.Y + right.Y);\n}\n```", "```cs\nT Sum<T> (params T[] values) where T : IAddable<T>\n{\n  T total = values[0];\n  for (int i = 1; i < values.Length; i++)\n    total += values[i];\n  return total;\n}\n```", "```cs\nint Sum (params int[] numbers)   // Works only with int.\n{                                // Cannot use with double, decimal, etc.\n    int total = 0;\n    foreach (int n in numbers)\n        total += n;\n    return total;\n}\n```", "```cs\nT Sum<T> (params T[] numbers) where T : INumber<T>\n{\n  T total = T.Zero;\n  foreach (T n in numbers)\n    total += n;      // Invokes addition operator for any numeric type\n  return total;\n}\n\nint intSum = Sum (3, 5, 7);\ndouble doubleSum = Sum (3.2, 5.3, 7.1);\ndecimal decimalSum = Sum (3.2m, 5.3m, 7.1m);\n```", "```cs\npublic interface IAdditionOperators<TSelf, TOther, TResult>\n  where TSelf : IAdditionOperators<TSelf, TOther, TResult>?\n{\n  static abstract TResult operator + (TSelf left, TOther right);\n\n  public static virtual TResult operator checked + \n    (TSelf left, TOther right) => left + right;  // Call operator above\n}\n```", "```cs\nT RMS<T> (params T[] values) where T : INumber<T>, IRootFunctions<T>\n{\n  T total = T.Zero;\n  for (int i = 0; i < values.Length; i++)\n    total += values [i] * values [i];\n  // Use T.CreateChecked to convert values.Length (type int) to T.\n  T count = T.CreateChecked (values.Length);\n  return T.RootN (total / count, 2);   // Calculate square root\n}\n```", "```cs\nunsafe void BlueFilter (int[,] bitmap)\n{\n  int length = bitmap.Length;\n  fixed (int* b = bitmap)\n  {\n    int* p = b;\n    for (int i = 0; i < length; i++)\n      *p++ &= 0xFF;\n  }\n}\n```", "```cs\nTest test = new Test();\nunsafe\n{\n  fixed (int* p = &test.X)   // Pins test\n  {\n    *p = 9;\n  }\n  Console.WriteLine (test.X);\n}\n\nclass Test { public int X; }\n```", "```cs\nTest test = new Test();\nunsafe\n{\n  Test* p = &test;\n  p->X = 9;\n  System.Console.WriteLine (test.X);\n}\n\nstruct Test { public int X; }\n```", "```cs\nint* a = stackalloc int [10];\nfor (int i = 0; i < 10; ++i)\n   Console.WriteLine (a[i]);\n```", "```cs\nSpan<int> a = stackalloc int [10];\nfor (int i = 0; i < 10; ++i)\n  Console.WriteLine (a[i]);\n```", "```cs\nnew UnsafeClass (\"Christian Troy\");\n\nunsafe struct UnsafeUnicodeString\n{\n  public short Length;\n  public fixed byte Buffer[30];   // Allocate block of 30 bytes\n}\n\nunsafe class UnsafeClass\n{\n  UnsafeUnicodeString uus;\n\n  public UnsafeClass (string s)\n  {\n    uus.Length = (short)s.Length;\n    fixed (byte* p = uus.Buffer)\n      for (int i = 0; i < s.Length; i++)\n        p[i] = (byte) s[i];\n  }\n}\n```", "```cs\nshort[] a = { 1, 1, 2, 3, 5, 8, 13, 21, 34, 55 };\nunsafe\n{\n  fixed (short* p = a)\n  {\n    //sizeof returns size of value-type in bytes\n    Zap (p, a.Length * sizeof (short));\n  }\n}\nforeach (short x in a)\n  Console.WriteLine (x);   // Prints all zeros\n\nunsafe void Zap (void* memory, int byteCount)\n{\n  byte* b = (byte*)memory;\n  for (int i = 0; i < byteCount; i++)\n    *b++ = 0;\n}\n```", "```cs\nnint x = 123, y = 234;\nchecked\n{\n  nint sum = x + y, product = x * y;\n  Console.WriteLine (product);\n}\n```", "```cs\nunsafe nint AddressDif (char* x, char* y) => (nint)x - (nint)y;\n```", "```cs\nnint x = 123;\nConsole.WriteLine (x * x);   // OK: multiplication supported\n\nIntPtr y = x;\nConsole.WriteLine (y * y);   // Compiler error: operator * not supported\n```", "```cs\ndelegate*<int, char, string, void>   // (void refers to the return type)\n```", "```cs\nvoid SomeFunction (int x, char y, string z)\n```", "```cs\nunsafe\n{\n  delegate*<string, int> functionPointer = &GetLength;\n  int length = functionPointer (\"Hello, world\");\n\n  static int GetLength (string s) => s.Length;\n}\n```", "```cs\nConsole.WriteLine ((IntPtr)functionPointer);\n```", "```cs\nvar pointer2 = (delegate*<string, decimal>) (IntPtr) functionPointer;\nConsole.WriteLine (pointer2 (\"Hello, unsafe world\"));\n```", "```cs\n[SkipLocalsInit]\nvoid Foo() ...\n```", "```cs\n[module: System.Runtime.CompilerServices.SkipLocalsInit]\n```", "```cs\n[SkipLocalsInit]\nunsafe void Foo()\n{\n  int local;\n  int* ptr = &local;\n  Console.WriteLine (*ptr);\n\n  int* a = stackalloc int [100];\n  for (int i = 0; i < 100; ++i) Console.WriteLine (a [i]);\n}\n```", "```cs\n[SkipLocalsInit]\nvoid Foo()\n{\n  Span<int> a = stackalloc int [100];\n  for (int i = 0; i < 100; ++i) Console.WriteLine (a [i]);\n}\n```", "```cs\n#define DEBUG\nclass MyClass\n{\n  int x;\n  void Foo()\n  {\n    #if DEBUG\n    Console.WriteLine (\"Testing: x = {0}\", x);\n    #endif\n  }\n  ...\n}\n```", "```cs\n<PropertyGroup>\n  <DefineConstants>DEBUG;ANOTHERSYMBOL</DefineConstants>\n</PropertyGroup>\n```", "```cs\n#if TESTMODE && !DEBUG\n  ...\n```", "```cs\n// file1.cs\n#define DEBUG\nusing System;\nusing System.Diagnostics;\n[Conditional(\"DEBUG\")]\npublic class TestAttribute : Attribute {}\n\n// file2.cs\n#define DEBUG\n[Test]\nclass Foo\n{\n  [Test]\n  string s;\n}\n```", "```cs\npublic class Foo\n{\n  static void Main() { }\n\n  #pragma warning disable 414\n  static string Message = \"Hello\";\n  #pragma warning restore 414\n}\n```", "```cs\n/// <summary>Cancels a running query.</summary>\npublic void Cancel() { ... }\n```", "```cs\n/// <summary>\n/// Cancels a running query\n/// </summary>\npublic void Cancel() { ... }\n```", "```cs\n/** \n    <summary> Cancels a running query. </summary>\n*/\npublic void Cancel() { ... }\n```", "```cs\n<PropertyGroup>\n  <DocumentationFile>*SomeFile.xml*</DocumentationFile>\n</PropertyGroup>\n```", "```cs\n<summary>*...*</summary>\n```", "```cs\n<remarks>*...*</remarks>\n```", "```cs\n<param name=\"*name*\">*...*</param>\n```", "```cs\n<returns>*...*</returns>\n```", "```cs\n<exception [cref=\"*type*\"]>*...*</exception>\n```", "```cs\n<example>*...*</example>\n```", "```cs\n<c>*...*</c>\n```", "```cs\n<code>*...*</code>\n```", "```cs\n<see cref=\"*member*\">*...*</see>\n```", "```cs\n<seealso cref=\"*member*\">*...*</seealso>\n```", "```cs\n<paramref name=\"*name*\"/>\n```", "```cs\n<list type=[ bullet | number | table ]>\n  <listheader>\n    <term>*...*</term>\n    <description>*...*</description>\n  </listheader>\n  <item>\n    <term>*...*</term>\n    <description>*...*</description>\n  </item>\n</list>\n```", "```cs\n<para>*...*</para>\n```", "```cs\n<include file='*filename*' path='*tagpath*[@name=\"*id*\"]'>*...*</include>\n```", "```cs\n// Namespaces do not have independent signatures\nnamespace NS\n{\n  /// T:NS.MyClass\n  class MyClass\n  {\n    /// F:NS.MyClass.aField\n    string aField;\n\n    /// P:NS.MyClass.aProperty\n    short aProperty {get {...} set {...}}\n\n    /// T:NS.MyClass.NestedType\n    class NestedType {...};\n\n    /// M:NS.MyClass.X()\n    void X() {...}\n\n    /// M:NS.MyClass.Y(System.Int32,System.Double@,System.Decimal@)\n    void Y(int p1, ref double p2, out decimal p3) {...}\n\n    /// M:NS.MyClass.Z(System.Char[ ],System.Single[0:,0:])\n    void Z(char[ ] p1, float[,] p2) {...}\n\n    /// M:NS.MyClass.op_Addition(NS.MyClass,NS.MyClass)\n    public static MyClass operator+(MyClass c1, MyClass c2) {...}\n\n    /// M:NS.MyClass.op_Implicit(NS.MyClass)˜System.Int32\n    public static implicit operator int(MyClass c) {...}\n\n    /// M:NS.MyClass.#ctor\n    MyClass() {...}\n\n    /// M:NS.MyClass.Finalize\n    ˜MyClass() {...}\n\n    /// M:NS.MyClass.#cctor\n    static MyClass() {...}\n  }\n}\n```"]