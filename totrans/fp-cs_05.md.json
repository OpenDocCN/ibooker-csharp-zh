["```cs\nvar liberatorCrew = new []\n{\n \"Roj Blake\",\n \"Kerr Avon\",\n \"Vila Restal\",\n \"Jenna Stannis\",\n \"Cally\",\n \"Olag Gan\",\n \"Zen\"\n};\nvar filteredList = liberatorCrew.Where(x => x.First() > 'M');\n```", "```cs\nfunction bool IsGreaterThanM(char c)\n{\n return c > 'm';\n}\n```", "```cs\npublic Func<int, int> MakeAddFunc(int x) => y => x + y;\n```", "```cs\nvar addTenFunction = MakeAddFunc(10);\nvar answer = addTenFunction(5);\n// answer is 15\n```", "```cs\n public void SendEnemyShipWeaponrySummary()\n {\n  try\n  {\n    var enemyShips = this.DataStore.GetEnemyShips();\n    var summaryNumbers = enemyShips.GroupBy(x => x.Type)\n                                    .Select(x => (Type: x.Key, Count: x.Count()));\n    var report = new Report\n    {\n        Title = \"Enemy Ship Type\",\n        Rows = summaryNumbers.Select(X => new ReportItem\n        {\n            ColumnOne = X.Type,\n            ColumnTwo = X.Count.ToString()\n        })\n    };\n\n    if (!report.Rows.Any())\n        this.CommunicationSystem.SendNoDataWarning();\n    else\n        this.CommunicationSystem.SendReport(report);\n  }\n  catch (Exception e)\n  {\n   this.Logger.LogError(e,\n   $\"An error occurred in {nameof(SendEnemyShipWeaponrySummary)}: {e.Message}\");\n  }\n }\n```", "```cs\n public void GenerateEnemyShipWeaponrySummary()\n {\n  try\n  {\n    var enemyShips = this.DataStore.GetEnemyShips();\n    var summaryNumbers = enemyShips.GroupBy(x => x.WeaponryLevel)\n                                    .Select(x => (Type: x.Key, Count: x.Count()));\n    var report = new Report\n    {\n        Title = \"Enemy Ship Weaponry Level\",\n        Rows = summaryNumbers.Select(X => new ReportItem\n        {\n            ColumnOne = X.Type,\n            ColumnTwo = X.Count.ToString()\n        })\n    };\n\n    if (!report.Rows.Any())\n        this.CommunicationSystem.SendNoDataWarning();\n    else\n        this.CommunicationSystem.SendReport(report);\n  }\n  catch (Exception e)\n  {\n   this.Logger.LogError(e,\n   $\"An error occurred in {nameof(GenerateEnemyShipWeaponrySummary)}: {e.Message}\");\n  }\n }\n```", "```cs\npublic void SendEnemyShipWeaponrySummary() =>\n  GenerateSummary(x => x.Type, \"Enemy Ship Type Summary\");\n\npublic void GenerateEnemyShipWeaponryLevelSummary() =>\n  GenerateSummary(x => x.WeaponryLevel, \"Enemy Ship WeaponryLevel\");\n\nprivate void GenerateSummary(Func<EnemyShip, string> summarySelector, string reportName)\n{\n  try\n  {\n    var enemyShips = this.DataStore.GetEnemyShips();\n    var summaryNumbers = enemyShips.GroupBy(summarySelector)\n                                    .Select(x => (Type: x.Key, Count: x.Count()));\n    var report = new Report\n    {\n      Title = reportName,\n      Rows = summaryNumbers.Select(X => new ReportItem\n      {\n          ColumnOne = X.Type,\n          ColumnTwo = X.Count.ToString()\n      })\n  };\n\n  if (!report.Rows.Any())\n   this.CommunicationSystem.SendNoDataWarning();\n  else\n   this.CommunicationSystem.SendReport(report);\n  }\n  catch (Exception e)\n  {\n    this.Logger.LogError(e,\n    $\"An error occurred in {nameof(GenerateSummary)}, report: {reportName}, message: {e.Message}\");\n  }\n}\n```", "```cs\npublic interface IGenerateReports\n{\n void GenerateSummary(Func<EnemyShip, string> summarySelector, string reportName)\n}\n```", "```cs\npublic string FahrenheitToCelcius(decimal tempInF) =>\n  Math.Round(((tempInF-32) *5 / 9), 2) + \"°C\";\n```", "```cs\nstring FahrenheitToCelcius(decimal tempInF)\n{\n var a = tempInF - 32;\n var b = a * 5;\n var c = b / 9;\n var d = Math.Round(c, 2);\n var returnValue = d + \"°C\";\n return returnValue;\n}\n```", "```cs\npublic string FahrenheitToCelcius(decimal tempInF)  =>\n\ttempInF.Map(x => x - 32)\n\t\t\t.Map(x => x * 5)\n\t\t\t.Map(x => x / 9)\n\t\t\t.Map(x => Math.Round(x, 2))\n\t\t\t.Map(x => x + \"°C\");\n```", "```cs\npublic static class MapExtensionMethods\n{\n\tpublic static TOut Map<TIn, TOut>(this TIn @this, Func<TIn, TOut> f) =>\n\t\tf(@this);\n}\n```", "```cs\npublic static T Map<T>(this T @this, params Func<T,T>[] transformations) =>\n transformations.Aggregate(@this, (agg, x) => x(agg));\n```", "```cs\npublic decimal FahrenheitToCelcius(decimal tempInF)  =>\n\ttempInF.Map(\n\t x => x - 32,\n\t x => x * 5,\n\t x => x / 9\n\t x => Math.Round(x, 2);\n```", "```cs\nvar numbers = new [] { 4, 8, 15, 16, 23, 42 }\nvar average = numbers.Fork(\n x => x.Sum(),\n x => x.Count(),\n (s, c) => s / c\n);\n// average = 18\n```", "```cs\nvar triangle = new Triangle(100, 200);\nvar hypotenuse = triangle.Fork(\n x => Math.Pow(x.A, 2),\n x => Math.Pow(x.B, 2),\n (a2, b2) => Math.Sqrt(a2 + b2)\n);\n```", "```cs\npublic static class ext\n{\n\tpublic static TOut Fork<TIn, T1, T2, TOut>(\n\t  this TIn @this,\n\t  Func<TIn, T1> f1,\n\t  Func<TIn, T2> f2,\n\t  Func<T1,T2,TOut> fout)\n\t{\n\t\tvar p1 = f1(@this);\n\t\tvar p2 = f2(@this);\n\t\tvar result = fout(p1, p2);\n\t\treturn result;\n\t}\n}\n```", "```cs\npublic static class ForkExtensionMethods\n{\n public static TEnd Fork<TStart, TMiddle, TEnd>(\n  this TStart @this,\n  Func<TMiddle, TEnd> joinFunction,\n  params Func<TStart, TMiddle>[] prongs\n )\n{\n var intermediateValues = prongs.Select(x => x(@this));\n var returnValue = joinFunction(intermediateValues);\n return returnValue;\n}\n```", "```cs\nvar personData = this.personRepository.GetPerson(24601);\nvar description = personData.Fork(\n prongs => string.Join(Environment.NewLine, prongs),\n x => \"My name is \" + x.FirstName + \" \" + x.LastName,\n x => \"I am \" + x.Age + \" years old.\",\n x => \"I live in \" + x.Address.Town\n)\n\n// This might, for example, produce:\n//\n// My name is Jean Valjean\n// I am 30 years old\n// I live in Montreuil-sur-mer\n```", "```cs\nvar jamesBond = \"007\"\n .Alt(x => this.hotelService.ScanGuestsForSpies(x),\n x => this.airportService.CheckPassengersForSpies(x),\n x => this.barService.CheckGutterForDrunkSpies(x));\n\n if(jamesBond != null)\n  this.deathTrapService.CauseHorribleDeath(jamesBond);\n```", "```cs\npublic static TOut Alt<TIn, TOut>(this TIn @this, params Func<TIn, TOut>[] args) =>\n\targs.Select(x => x(@this))\n\t.First(x => x != null);\n```", "```cs\nvar input = 100M;\nvar f = (decimal x) => x.Map(x => x - 32)\n  .Map(x => x * 5)\n  .Map(x => x / 9)\n  .Map(x => Math.Round(x, 2))\n  .Map(x => $\"{x} degrees\");\nvar output = f(input);\n// output = \"37.78 degrees\"\n```", "```cs\nvar input = 100M;\nvar fahrenheitToCelcius = (decimal x) => x.Map(x => x - 32)\n  .Map(x => x * 5)\n  .Map(x => x / 9)\n  .Map(x => Math.Round(x, 2))\n  .Map(x => $\"{x} degrees\");\nvar output = fahrenheitToCelcius(input);\nConsole.WriteLine(output);.\n// 37.78 degrees\n\nvar input2 = 37.78M;\nvar celciusToFahrenheit =\t(decimal x) =>\n x.Map(x => x * 9)\n .Map(x => x / 5)\n .Map(x => x + 32)\n .Map(x => Math.Round(x, 2))\n .Map(x => $\"{x} degrees\");\nvar output2 = celciusToFahrenheit(input2);\nConsole.WriteLine(output2);\n// 100.00 degrees\n```", "```cs\nvar formatDecimal = (decimal x) => x\n .Map(x => Math.Round(x, 2))\n .Map(x => $\"{x} degrees\");\n\nvar input = 100M;\nvar celciusToFahrenheit = (decimal x) => x.Map(x => x - 32)\n  .Map(x => x * 5)\n  .Map(x => x / 9);\nvar fToCFormatted = celciusToFahrenheit.Compose(formatDecimal);\nvar output = fToCFormatted(input);\nConsole.WriteLine(output);\n\nvar input2 = 37.78M;\nvar celciusToFahrenheit =\t(decimal x) =>\n x.Map(x => x * 9)\n .Map(x => x / 5)\n .Map(x => x + 32);\nvar cToFFormatted = celciusToFahrenheit.Compose(formatDecimal);\nvar output2 = cToFFormatted(input2);\nConsole.WriteLine(output2);\n```", "```cs\npublic static class ComposeExtensionMethods\n{\n\tpublic static Func<TIn, NewTOut> Compose<TIn, OldTOut, NewTOut>(\n\t this Func<TIn, OldTOut> @this,\n\t Func<OldTOut, NewTOut> f) =>\n\t\tx => f(@this(x));\n}\n```", "```cs\nvar numbers = new [] { 4, 8, 15, 16, 23, 42 };\nvar add5 = (IEnumerable<int> x) => x.Select(y => y + 5);\nvar Add5MultiplyBy10 = add5.Compose(x => x.Select(y => y * 10));\n\nvar numbersGreaterThan100 = Add5MultiplyBy10.Compose(x => x.Where(y => y > 100));\n\nvar composeMessage = numbersGreaterThan100.Compose(x => string.Join(\",\", x));\nConsole.WriteLine(\"Output = \" + composeMessage(numbers));\n// Output = 130,200,210,280,470\n```", "```cs\npublic static TFinalOut Transduce<TIn, TFilterOut, TFinalOut>(\n\tthis IEnumerable<TIn> @this,\n\tFunc<IEnumerable<TIn>, IEnumerable<TFilterOut>> transformer,\n\tFunc<IEnumerable<TFilterOut>, TFinalOut> aggregator) =>\n\t\taggregator(transformer(@this));\n```", "```cs\nvar numbers = new [] { 4, 8, 15, 16, 23, 42 };\n\n// N.B - I could make this a single line with brackets, but\n// I find this more readable, and it's functionally identical due\n// to lazy evaluation of Enumerables\nvar transformer = (IEnumerable<int> x) => x\n\t.Select(y => y + 5)\n\t.Select(y => y * 10)\n\t.Where(y => y > 100);\n\nvar aggregator = (IEnumerable<int> x) => string.Join(\", \", x);\n\nvar output = numbers.Transduce(transformer, aggregator);\nConsole.WriteLine(\"Output = \" + output);\n// Output = 130, 200, 210, 280, 470\n```", "```cs\nvar numbers = new [] { 4, 8, 15, 16, 23, 42 };\nvar transformer = (IEnumerable<int> x) => x\n\t.Select(y => y + 5)\n\t.Select(y => y * 10)\n\t.Where(y => y > 100);\n\nvar aggregator = (IEnumerable<int> x) => string.Join(\", \", x);\n\nvar transducer = transformer.ToTransducer(aggregator);\nvar output2 = transducer(numbers);\nConsole.WriteLine(\"Output = \" + output2);\n```", "```cs\npublic static class TransducerExtensionMethod\n{\n\tpublic static Func<IEnumerable<TIn>, NewTOut> ToTransducer<TIn, OldTOut, NewTOut>(\n\t\tthis Func<IEnumerable<TIn>,\n\t\tIEnumerable<OldTOut>> @this,\n\t\tFunc<IEnumerable<OldTOut>, NewTOut> aggregator) =>\n\t\t\tx => aggregator(@this(x));\n}\n```", "```cs\npublic static class Extensions\n{\n public static T Tap<T>(this T @this, Action<T> action)\n {\n  action(@this);\n  return @this;\n}\n```", "```cs\nvar input = 100M;\nvar fahrenheitToCelcius = (decimal x) => x.Map(x => x - 32)\n  .Map(x => x * 5)\n  .Map(x => x / 9)\n  .Tap(x => this.logger.LogInformation(\"the un-rounded value is \" + x))\n  .Map(x => Math.Round(x, 2))\n  .Map(x => $\"{x} degrees\");\nvar output = fahrenheitToCelcius(input);\nConsole.WriteLine(output);\n// 37.78 degrees\n```", "```cs\npubic IEnumerable<Snack> GetSnackByType(int typeId)\n{\n try\n {\n  var returnValue = this.DataStore.GetSnackByType(typeId);\n  return returnValue;\n }\n catch(Exception e)\n {\n  this.logger.LogError(e, $\"There aren't any pork scratchings left!\");\n  return Enumerable.Empty<Snack>()\n }\n}\n```", "```cs\npubic IEnumerable<Snack> GetSnackByType(int typeId)\n{\n var result = typeId.MapWithTryCatch(this.DataStore.GetSnackByType)\n   ?? Enumerable.Empty<Snack>();\n return result;\n}\n```", "```cs\npublic static class Extensions\n{\n public static TOut MapWithTryCatch<TIn,TOut>(this TIn @this, Func<TIn,TOut> f)\n {\n  try\n  {\n   return f(@this);\n  }\n  catch()\n  {\n   return default;\n  }\n }\n}\n```", "```cs\npublic static class TryCatchExtensionMethods\n{\n public static TOut CreateTryCatch<TIn,TOut>(this TIn @this, ILogger logger)\n {\n  Func<TIn,TOut> f =>\n  {\n   try\n   {\n    return f(@this);\n   }\n   catch(Exception e)\n   {\n    logger.LogError(e, \"An error occurred\");\n    return default;\n   }\n  }\n }\n}\n```", "```cs\npublic IEnumerable<Snack> GetSnackByType(int typeId)\n{\n var tryCatch = typeId.CreateTryCatch(this.logger);\n var result = tryCatch(this.DataStore.GetSnackByType)\n   ?? Enumerable.Empty<Snack>();\n return result;\n}\n```", "```cs\npublic class ExecutionResult<T>\n{\n public T Result { get; init; }\n public Exception Error { get; init; }\n}\n\npublic static class Extensions\n{\n public static ExtensionResult<TOut> MapWithTryCatch<TIn,TOut>(this TIn @this, Func<TIn,TOut> f)\n {\n  try\n  {\n   var result = f(@this);\n   return new ExecutionResult<TOut>\n   {\n    Result = result\n   };\n  }\n  catch(Exception e)\n  {\n   return new ExecutionResult<TOut>\n   {\n    Error = e\n   };\n  }\n }\n}\n```", "```cs\npubic IEnumerable<Snack> GetSnackByType(int typeId)\n{\n var result = typeId.MapWithTryCatch(this.DataStore.GetSnackByType);\n if(result.Value == null)\n {\n  this.Logger.LogException(result.Error, \"We ran out of jammy dodgers!\");\n  return Enumerable.Empty<Snack>();\n }\n\n return result.Result;\n}\n```", "```cs\npublic static T OnError<T>(this ExecutionResult<T> @this, Action<Exception> errorHandler)\n {\nif (@this.Error != null)\nerrorHandler(@this.Error);\nreturn @this.Result;\n }\n```", "```cs\npublic IEnumerable<Snack> GetSnackByTypeId(int typeId) =>\n\ttypeId.MapWithTryCatch(DataStore.GetSnackByType)\n\t\t.OnError(e => this.Logger.LogError(e, \"We ran out of custard creams!\"));\n```", "```cs\npublic void BusinessAsUsual()\n{\n var enemies = this.scanner.FindLifeforms('all');\n foreach(var e in enemies)\n {\n  this.Gun.Blast(e.Coordinates.Longitude, e.Coordinates.Latitude);\n  this.Speech.ScreamAt(e, \"EXTERMINATE\");\n }\n}\n```", "```cs\npublic static class UnlessExtensionMethods\n{\n public void Unless<T>(this T @this, Func<bool> condition, Action<T> f)\n {\n  if(!condition(@this)\n  {\n   f(@this);\n  }\n }\n}\n```", "```cs\npublic void BusinessAsUsual()\n{\n var enemies = this.scanner.FindLifeforms('all');\n\n foreach(var e in enemies)\n {\n  e.unless(\n   x => x.Coordinates == null,\n   x => this.Gun.Blast(e.Coordinates.Longitude, e.Coordinates.Latitude)\n  )\n\n // May as well do this anyway, since we're here.\n  this.Speech.ScreamAt(e, \"EXTERMINATE\");\n }\n}\n```", "```cs\nvar sourceData = new []\n{\n \"Hello\", \"Doctor\", \"Yesterday\", \"Today\", \"Tomorrow\", \"Continue\"\n}\n\nvar updatedData = sourceData.ReplaceAt(1, \"Darkness, my old friend\");\nvar finalString = string.Join(\" \", updatedData);\n// Hello Darkness, my old friend Yesterday Today Tomorrow Continue\n```", "```cs\npublic static class Extensions\n{\n  public static IEnumerable<T> ReplaceAt(this IEnumerable<T> @this,\n    int loc,\n    T replacement) =>\n    @this.Select((x, i) => i == loc ? replacement : x);\n}\n```", "```cs\npublic static class Extensions\n{\n  public static IEnumerable<T> ReplaceAt(this IEnumerable<T> @this,\n    int loc,\n    Func<T, T> replacement) =>\n    @this.Select((x, i) => i == loc ? replacement(x) : x);\n}\n```", "```cs\nvar sourceData = new []\n{\n \"Hello\", \"Doctor\", \"Yesterday\", \"Today\", \"Tomorrow\", \"Continue\"\n}\n\nvar updatedData = sourceData.ReplaceAt(1, x => x + \" Who\");\nvar finalString = string.Join(\" \", updatedData);\n// Hello Doctor Who Yesterday Today Tomorrow Continue\n```", "```cs\nvar sourceData = this.DataStore.GetBoardGames();\n\nvar updatedData = sourceData.ReplaceWhen(\n\t\tx => x.NumberOfPlayersAllowed.Contains(1),\n\t\tx => x with { Tags = x.Tags.Append(\"solo\") });\nthis.DataStore.Save(updatedData);\n```", "```cs\npublic static class ReplaceWhenExtensions\n{\n public static IEnumerable<T> ReplaceWhen<T>(this IEnumerable<T> @this,\n  Func<T, bool> shouldReplace,\n  Func<T, T> replacement) =>\n  @this.Select(x => shouldReplace(x) ? replacement(x) : x);\n}\n```"]