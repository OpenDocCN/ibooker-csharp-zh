["```cs\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\n<customer id=\"123\" status=\"archived\">\n  <firstname>Jim</firstname>\n  <lastname>Bo</lastname>\n</customer>\n```", "```cs\nusing XmlReader reader = XmlReader.Create (\"customer.xml\");\n  ...\n```", "```cs\nusing XmlReader reader = XmlReader.Create (\n  new System.IO.StringReader (myString));\n```", "```cs\nbool IgnoreComments                  // Skip over comment nodes?\nbool IgnoreProcessingInstructions    // Skip over processing instructions?\nbool IgnoreWhitespace                // Skip over whitespace?\n```", "```cs\nXmlReaderSettings settings = new XmlReaderSettings();\nsettings.IgnoreWhitespace = true;\n\nusing XmlReader reader = XmlReader.Create (\"customer.xml\", settings);\n  ...\n```", "```cs\n<firstname>Jim</firstname>\n<lastname>Bo</lastname>\n```", "```cs\nXmlReaderSettings settings = new XmlReaderSettings();\nsettings.IgnoreWhitespace = true;\n\nusing XmlReader reader = XmlReader.Create (\"customer.xml\", settings);\nwhile (reader.Read())\n{\n  Console.Write (new string (' ', reader.Depth * 2));  // Write indentation\n  Console.Write (reader.NodeType.ToString());\n\n  if (reader.NodeType == XmlNodeType.Element ||\n      reader.NodeType == XmlNodeType.EndElement)\n  {\n    Console.Write (\" Name=\" + reader.Name);\n  }\n  else if (reader.NodeType == XmlNodeType.Text)\n  {\n    Console.Write (\" Value=\" + reader.Value);\n  }  \n  Console.WriteLine ();\n}\n```", "```cs\nXmlDeclaration\nElement Name=customer\n  Element Name=firstname\n    Text Value=Jim\n  EndElement Name=firstname\n  Element Name=lastname\n    Text Value=Bo\n  EndElement Name=lastname\nEndElement Name=customer\n```", "```cs\n<firstname>Jim</firstname>\n```", "```cs\nreader.ReadStartElement (\"firstname\");\nConsole.WriteLine (reader.Value);\nreader.Read();\nreader.ReadEndElement();\n```", "```cs\nstring firstName = reader.ReadElementContentAsString (\"firstname\", \"\");\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\n<customer id=\"123\" status=\"archived\">\n  <firstname>Jim</firstname>\n  <lastname>Bo</lastname>\n  <creditlimit>500.00</creditlimit>    <!-- OK, we sneaked this in! -->\n</customer>\n```", "```cs\nXmlReaderSettings settings = new XmlReaderSettings();\nsettings.IgnoreWhitespace = true;\n\nusing XmlReader r = XmlReader.Create (\"customer.xml\", settings);\n\nr.MoveToContent();                // Skip over the XML declaration\nr.ReadStartElement (\"customer\");\nstring firstName    = r.ReadElementContentAsString (\"firstname\", \"\");\nstring lastName     = r.ReadElementContentAsString (\"lastname\", \"\");\ndecimal creditLimit = r.ReadElementContentAsDecimal (\"creditlimit\", \"\");\n\nr.MoveToContent();      // Skip over that pesky comment\nr.ReadEndElement();     // Read the closing customer tag\n```", "```cs\nr.ReadStartElement (\"customer\");\nstring firstName    = r. ReadElementContentAsString (\"firstname\", \"\");\nstring lastName     = r.Name == \"lastname\"\n ? r.ReadElementContentAsString() : null;\ndecimal creditLimit = r.ReadElementContentAsDecimal (\"creditlimit\", \"\");\n```", "```cs\n<customerList></customerList>\n```", "```cs\n<customerList/>\n```", "```cs\nreader.ReadStartElement (\"customerList\");\nreader.ReadEndElement();\n```", "```cs\nbool isEmpty = reader.IsEmptyElement;\nreader.ReadStartElement (\"customerList\");\nif (!isEmpty) reader.ReadEndElement();\n```", "```cs\n<customer id=\"123\" status=\"archived\"/>\n```", "```cs\nConsole.WriteLine (reader [\"id\"]);              // 123\nConsole.WriteLine (reader [\"status\"]);          // archived\nConsole.WriteLine (reader [\"bogus\"] == null);   // True\n```", "```cs\nConsole.WriteLine (reader [0]);            // 123\nConsole.WriteLine (reader [1]);            // archived\n```", "```cs\n<customer id=\"123\" status=\"archived\"/>\n```", "```cs\nreader.MoveToAttribute (\"status\");\nstring status = reader.ReadContentAsString();\n\nreader.MoveToAttribute (\"id\");\nint id = reader.ReadContentAsInt();\n```", "```cs\nif (reader.MoveToFirstAttribute())\n  do { Console.WriteLine (reader.Name + \"=\" + reader.Value);  }\n  while (reader.MoveToNextAttribute());\n\n// OUTPUT:\nid=123\nstatus=archived\n```", "```cs\nreader.ReadStartElement (\"customer\");\n```", "```cs\nreader.ReadStartElement (\"x:customer\");\n```", "```cs\n<customer >\n  <address>\n    <other:city>\n    ...\n```", "```cs\nreader.ReadStartElement (\"customer\", \"DefaultNamespace\");\nreader.ReadStartElement (\"address\",  \"DefaultNamespace\");\nreader.ReadStartElement (\"city\",     \"OtherNamespace\");\n```", "```cs\nXmlWriterSettings settings = new XmlWriterSettings();\nsettings.Indent = true;\n\nusing XmlWriter writer = XmlWriter.Create (\"foo.xml\", settings);\n\nwriter.WriteStartElement (\"customer\");\nwriter.WriteElementString (\"firstname\", \"Jim\");\nwriter.WriteElementString (\"lastname\", \"Bo\");\nwriter.WriteEndElement();\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<customer>\n  <firstname>Jim</firstname>\n  <lastname>Bo</lastname>\n</customer>\n```", "```cs\nwriter.WriteStartElement (\"birthdate\");\nwriter.WriteValue (DateTime.Now);\nwriter.WriteEndElement();\n```", "```cs\nWriteElementString (\"birthdate\", DateTime.Now.ToString());\n```", "```cs\nwriter.WriteStartElement (\"customer\");\nwriter.WriteAttributeString (\"id\", \"1\");\nwriter.WriteAttributeString (\"status\", \"archived\");\n```", "```cs\nWriteBase64       // for binary data\nWriteBinHex       // for binary data\nWriteCData\nWriteComment\nWriteDocType\nWriteEntityRef\nWriteProcessingInstruction\nWriteRaw\nWriteWhitespace\n```", "```cs\nwriter.WriteStartElement (\"o\", \"customer\", \"http://oreilly.com\");\nwriter.WriteElementString (\"o\", \"firstname\", \"http://oreilly.com\", \"Jim\");\nwriter.WriteElementString (\"o\", \"lastname\", \"http://oreilly.com\", \"Bo\");\nwriter.WriteEndElement();\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<o:customer xmlns:o='http://oreilly.com'>\n  <o:firstname>Jim</o:firstname>\n  <o:lastname>Bo</o:lastname>\n</o:customer>\n```", "```cs\npublic class Contacts\n{\n  public IList<Customer> Customers = new List<Customer>();\n  public IList<Supplier> Suppliers = new List<Supplier>();\n}\n\npublic class Customer { public string FirstName, LastName; }\npublic class Supplier { public string Name;                }\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<contacts>\n   <customer id=\"1\">\n      <firstname>Jay</firstname>\n      <lastname>Dee</lastname>\n   </customer>\n   <customer>                     <!-- we'll assume id is optional -->\n      <firstname>Kay</firstname>\n      <lastname>Gee</lastname>\n   </customer>\n   <supplier>\n      <name>X Technologies Ltd</name>\n   </supplier>\n</contacts>\n```", "```cs\npublic class Customer\n{\n  public const string XmlName = \"customer\";\n  public int? ID;\n  public string FirstName, LastName;\n\n  public Customer () { }\n  public Customer (XmlReader r) { ReadXml (r); }\n\n  public void ReadXml (XmlReader r)\n  {\n    if (r.MoveToAttribute (\"id\")) ID = r.ReadContentAsInt();\n r.ReadStartElement();\n    FirstName = r.ReadElementContentAsString (\"firstname\", \"\");\n    LastName = r.ReadElementContentAsString (\"lastname\", \"\");\n r.ReadEndElement();\n  }\n\n  public void WriteXml (XmlWriter w)\n  {\n    if (ID.HasValue) w.WriteAttributeString (\"id\", \"\", ID.ToString());\n    w.WriteElementString (\"firstname\", FirstName);\n    w.WriteElementString (\"lastname\", LastName);\n  }\n}\n```", "```cs\npublic class Supplier\n{\n  public const string XmlName = \"supplier\";\n  public string Name;\n\n  public Supplier () { }\n  public Supplier (XmlReader r) { ReadXml (r); }\n\n  public void ReadXml (XmlReader r)\n  {\n r.ReadStartElement();\n    Name = r.ReadElementContentAsString (\"name\", \"\");\n r.ReadEndElement();\n  }\n\n  public void WriteXml (XmlWriter w) =>\n    w.WriteElementString (\"name\", Name);\n}\n```", "```cs\npublic void ReadXml (XmlReader r)\n{\n  bool isEmpty = r.IsEmptyElement;           // This ensures we don't get\n  r.ReadStartElement();                      // snookered by an empty\n  if (isEmpty) return;                       // <contacts/> element!\n  while (r.NodeType == XmlNodeType.Element)\n  {\n    if (r.Name == Customer.XmlName)      Customers.Add (new Customer (r));\n    else if (r.Name == Supplier.XmlName) Suppliers.Add (new Supplier (r));\n    else\n      throw new XmlException (\"Unexpected node: \" + r.Name);\n  }\n r.ReadEndElement();\n}\n\npublic void WriteXml (XmlWriter w)\n{\n  foreach (Customer c in Customers)\n  {\n w.WriteStartElement (Customer.XmlName);\n    c.WriteXml (w);\n w.WriteEndElement();\n  }\n  foreach (Supplier s in Suppliers)\n  {\n w.WriteStartElement (Supplier.XmlName);\n    s.WriteXml (w);\n w.WriteEndElement();\n  }\n}\n```", "```cs\nvar settings = new XmlWriterSettings();\nsettings.Indent = true;  // To make visual inspection easier\n\nusing XmlWriter writer = XmlWriter.Create (\"contacts.xml\", settings);\n\nvar cts = new Contacts()\n// Add Customers and Suppliers...\n\nwriter.WriteStartElement (\"contacts\");\ncts.WriteXml (writer);\nwriter.WriteEndElement();\n```", "```cs\nvar settings = new XmlReaderSettings();\nsettings.IgnoreWhitespace = true;\nsettings.IgnoreComments = true;\nsettings.IgnoreProcessingInstructions = true;\n\nusing XmlReader reader = XmlReader.Create(\"contacts.xml\", settings);\nreader.MoveToContent();\nvar cts = new Contacts();\ncts.ReadXml(reader);\n```", "```cs\n<log>\n  <logentry id=\"1\">\n    <date>...</date>\n    <source>...</source>\n    ...\n  </logentry>\n  ...\n</log>\n```", "```cs\nXmlReaderSettings settings = new XmlReaderSettings();\nsettings.IgnoreWhitespace = true;\n\nusing XmlReader r = XmlReader.Create (\"logfile.xml\", settings);\n\nr.ReadStartElement (\"log\");\nwhile (r.Name == \"logentry\")\n{\n XElement logEntry = (XElement) XNode.ReadFrom (r);\n  int id = (int) logEntry.Attribute (\"id\");\n  DateTime date = (DateTime) logEntry.Element (\"date\");\n  string source = (string) logEntry.Element (\"source\");\n  ...\n}\nr.ReadEndElement();\n```", "```cs\npublic void ReadXml (XmlReader r)\n{\n XElement x = (XElement) XNode.ReadFrom (r);\n  ID = (int) x.Attribute (\"id\");\n  FirstName = (string) x.Element (\"firstname\");\n  LastName = (string) x.Element (\"lastname\");\n}\n```", "```cs\n<log >\n  <logentry id=\"1\">\n  ...\n```", "```cs\nusing XmlWriter w = XmlWriter.Create (\"logfile.xml\");\n\nw.WriteStartElement (\"log\");\nfor (int i = 0; i < 1000000; i++)\n{\n  XElement e = new XElement (\"logentry\",\n                 new XAttribute (\"id\", i),\n                 new XElement (\"date\", DateTime.Today.AddDays (-1)),\n                 new XElement (\"source\", \"test\"));\n e.WriteTo (w);\n}\nw.WriteEndElement ();\n```", "```cs\n{\n  \"FirstName\":\"Sara\",\n  \"LastName\":\"Wells\",\n  \"Age\":35,\n  \"Friends\":[\"Dylan\",\"Ian\"]\n}\n```", "```cs\nbyte[] data = File.ReadAllBytes (\"people.json\");\nUtf8JsonReader reader = new Utf8JsonReader (data);\nwhile (reader.Read())\n{\n  switch (reader.TokenType)\n  {\n    case JsonTokenType.StartObject:\n      Console.WriteLine ($\"Start of object\");\n      break;\n    case JsonTokenType.EndObject:\n      Console.WriteLine ($\"End of object\");\n      break;\n    case JsonTokenType.StartArray:\n      Console.WriteLine();\n      Console.WriteLine ($\"Start of array\");\n      break;\n    case JsonTokenType.EndArray:\n      Console.WriteLine ($\"End of array\");\n      break;\n    case JsonTokenType.PropertyName:\n      Console.Write ($\"Property: {reader.GetString()}\");\n      break;\n    case JsonTokenType.String:\n      Console.WriteLine ($\" Value: {reader.GetString()}\");\n      break;\n    case JsonTokenType.Number:\n      Console.WriteLine ($\" Value: {reader.GetInt32()}\");\n      break;\n    default:\n      Console.WriteLine ($\"No support for {reader.TokenType}\");\n      break;\n  }\n}\n```", "```cs\nStart of object\nProperty: FirstName Value: Sara\nProperty: LastName Value: Wells\nProperty: Age Value: 35\nProperty: Friends\nStart of array\n Value: Dylan\n Value: Ian\nEnd of array\nEnd of object\n```", "```cs\nvar options = new JsonWriterOptions { Indented = true };\n\nusing (var stream = File.Create (\"MyFile.json\"))\nusing (var writer = new Utf8JsonWriter (stream, options))\n{\n  writer.WriteStartObject();\n  // Property name and value specified in one call\n  writer.WriteString (\"FirstName\", \"Dylan\");\n  writer.WriteString (\"LastName\", \"Lockwood\");\n  // Property name and value specified in separate calls\n  writer.WritePropertyName (\"Age\");\n  writer.WriteNumberValue (46);\n  writer.WriteCommentValue (\"This is a (non-standard) comment\");\n  writer.WriteEndObject();\n}\n```", "```cs\n{\n  \"FirstName\": \"Dylan\",\n  \"LastName\": \"Lockwood\",\n  \"Age\": 46\n  /*This is a (non-standard) comment*/\n}\n```", "```cs\n{\"FirstName\":\"Dylan\",\"LastName\":\"Lockwood\",\"Age\":46...}\n```", "```cs\nusing JsonDocument document = JsonDocument.Parse (jsonString);\n...\n```", "```cs\nusing JsonDocument document = JsonDocument.Parse (\"123\");\nJsonElement root = document.RootElement;\nConsole.WriteLine (root.ValueKind);       // Number\n```", "```cs\nusing JsonDocument document = JsonDocument.Parse (\"123\");\nint number = document.RootElement.GetInt32();\n```", "```cs\nusing JsonDocument document = JsonDocument.Parse (@\"[1, 2, 3, 4, 5]\");\nint length = document.RootElement.GetArrayLength();   // 5\nint value  = document.RootElement[3].GetInt32();      // 4\n```", "```cs\nusing JsonDocument document = JsonDocument.Parse (@\"{ \"\"Age\"\": 32}\");\nJsonElement root = document.RootElement;\nint age = root.GetProperty (\"Age\").GetInt32();\n```", "```cs\nJsonProperty ageProp = root.EnumerateObject().First();\nstring name = ageProp.Name;             // Age\nJsonElement value = ageProp.Value;\nConsole.WriteLine (value.ValueKind);    // Number\nConsole.WriteLine (value.GetInt32());   // 32\n```", "```cs\n[\n  {\n    \"FirstName\":\"Sara\",\n    \"LastName\":\"Wells\",\n    \"Age\":35,\n    \"Friends\":[\"Ian\"]\n  },\n  {\n    \"FirstName\":\"Ian\",\n    \"LastName\":\"Weems\",\n    \"Age\":42,\n    \"Friends\":[\"Joe\",\"Eric\",\"Li\"]\n  },\n  {\n    \"FirstName\":\"Dylan\",\n    \"LastName\":\"Lockwood\",\n    \"Age\":46,\n    \"Friends\":[\"Sara\",\"Ian\"]\n  }\n]\n```", "```cs\nusing var stream = File.OpenRead (jsonPath);\nusing JsonDocument document = JsonDocument.Parse (json);\n\nvar query =\n  from person in document.RootElement.EnumerateArray()\n  select new\n  {\n    FirstName = person.GetProperty (\"FirstName\").GetString(),\n    Age = person.GetProperty (\"Age\").GetInt32(),\n    Friends = \n      from friend in person.GetProperty (\"Friends\").EnumerateArray()\n      select friend.GetString()\n  };\n```", "```cs\nusing var json = File.OpenRead (jsonPath);\nusing JsonDocument document = JsonDocument.Parse (json);\n\nvar options = new JsonWriterOptions { Indented = true };\n\nusing (var outputStream = File.Create (\"NewFile.json\"))\nusing (var writer = new Utf8JsonWriter (outputStream, options))\n{\n  writer.WriteStartArray();\n  foreach (var person in document.RootElement.EnumerateArray())\n  {\n    int friendCount = person.GetProperty (\"Friends\").GetArrayLength();\n    if (friendCount >= 2)\n      person.WriteTo (writer);\n  }\n}\n```", "```cs\nJsonNode node = JsonNode.Parse (jsonString);\n```", "```cs\nvar node = JsonNode.Parse (\"123\");  // Parses to a JsonValue\nint number = node.AsValue().GetValue<int>();\n// Shortcut for ((JsonValue)node).GetValue<int>();\n```", "```cs\nvar node = JsonNode.Parse (\"123\");\nint number = node.GetValue<int>();\n// Shortcut for node.AsValue().GetValue<int>();\n```", "```cs\nvar node = JsonNode.Parse (\"123\");\nint number = (int) node;\n```", "```cs\nif (node.AsValue().TryGetValue<int> (out var number))\n  Console.WriteLine (number);\n```", "```cs\nJsonElement je = node.GetValue<JsonElement>();\n```", "```cs\nvar node = JsonNode.Parse (@\"[1, 2, 3, 4, 5]\");\nConsole.WriteLine (node.AsArray().Count);       // 5\n\nforeach (JsonNode child in node.AsArray())\n{ ... }\n```", "```cs\nConsole.WriteLine ((int)node[0]);   // 1\n```", "```cs\nint[] values = node.AsArray().GetValues<int>().ToArray();\n```", "```cs\nvar node = JsonNode.Parse (@\"{ \"\"Name\"\":\"\"Alice\"\", \"\"Age\"\": 32}\");\nstring name = (string) node [\"Name\"];   // Alice\nint age = (int) node [\"Age\"];           // 32\n```", "```cs\n// Enumerate over the dictionary’s key/value pairs:\nforeach (KeyValuePair<string,JsonNode> keyValuePair in node.AsObject())\n{\n  string propertyName = keyValuePair.Key;   // \"Name\" (then \"Age\")\n  JsonNode value = keyValuePair.Value; \n}\n```", "```cs\nif (node.AsObject().TryGetPropertyValue (\"Name\", out JsonNode nameNode))\n{ ... }\n```", "```cs\n[\n  {\n    \"FirstName\":\"Sara\",\n    \"LastName\":\"Wells\",\n    \"Age\":35,\n    \"Friends\":[\"Ian\"]\n  },\n  {\n    \"FirstName\":\"Ian\",\n    \"LastName\":\"Weems\",\n    \"Age\":42,\n    \"Friends\":[\"Joe\",\"Eric\",\"Li\"]\n  },\n  {\n    \"FirstName\":\"Dylan\",\n    \"LastName\":\"Lockwood\",\n    \"Age\":46,\n    \"Friends\":[\"Sara\",\"Ian\"]\n  }\n]\n```", "```cs\nstring li = (string) node[1][\"Friends\"][2];\n```", "```cs\nJsonNode node = JsonNode.Parse (File.ReadAllText (jsonPath));\n\nvar query =\n  from person in node.AsArray()\n  select new\n  {\n    FirstName = (string) person [\"FirstName\"],\n    Age = (int) person [\"Age\"],\n    Friends =\n      from friend in person [\"Friends\"].AsArray()\n      select (string) friend\n  };\n```", "```cs\nvar node = JsonNode.Parse (\"{ \\\"Color\\\": \\\"Red\\\" }\");\nnode [\"Color\"] = \"White\";\nnode [\"Valid\"] = true;\nConsole.WriteLine (node.ToJsonString());  // {\"Color\":\"White\",\"Valid\":true}\n```", "```cs\nnode [\"Color\"] = JsonValue.Create (\"White\");\n```", "```cs\nnode.AsObject().Remove (\"Valid\");\n```", "```cs\nvar node = JsonNode.Parse (\"[1, 2, 3]\");\nnode[0] = 10;\n```", "```cs\nvar arrayNode = JsonNode.Parse (\"[1, 2, 3]\");\narrayNode.AsArray().RemoveAt(0);\narrayNode.AsArray().Add (4);\nConsole.WriteLine (arrayNode.ToJsonString());  // [2,3,4]\n```", "```cs\nvar node = JsonNode.Parse (\"{ \\\"Color\\\": \\\"Red\\\" }\");\nvar color = node[\"Color\"];\ncolor.ReplaceWith (\"Blue\");\n```", "```cs\nvar node = new JsonArray \n{\n  new JsonObject {\n    [\"Name\"] = \"Tracy\",\n    [\"Age\"] = 30,\n    [\"Friends\"] = new JsonArray (\"Lisa\", \"Joe\")\n  },\n  new JsonObject {\n    [\"Name\"] = \"Jordyn\",\n    [\"Age\"] = 25,\n    [\"Friends\"] = new JsonArray (\"Tracy\", \"Li\")\n  }\n};\n```", "```cs\n[\n  {\n    \"Name\": \"Tracy\",\n    \"Age\": 30,\n    \"Friends\": [\"Lisa\", \"Joe\"]\n  },\n  {\n    \"Name\": \"Jordyn\",\n    \"Age\": 25,\n    \"Friends\": [\"Tracy\",\"Li\"]\n  }\n]\n```"]