- en: Chapter 8\. Currying and Partial Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。Currying 和 部分应用
- en: Currying and Partial Application are two more functional concepts that come
    straight out of old maths papers. The former has absolutely nothing to do with
    Indian food, delicious though it is^([1](ch08.html#idm45400852781472)) in fact
    it’s named after the pre-eminent American mathematician Haskell Brooks Curry,
    after whom no fewer than three programming languages are named^([2](ch08.html#idm45400852780672)).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Currying 和 部分应用 是从古老数学论文中直接衍生出来的两个更多的函数式概念。前者与印度食物毫不相关（尽管它确实很美味）^([1](ch08.html#idm45400852781472))，事实上，它是以卓越的美国数学家
    Haskell Brooks Curry 命名的，他命名了不少于三种编程语言^([2](ch08.html#idm45400852780672))。
- en: 'Currying came from Haskell Curry’s work on combinatory logic, which served
    as one of the bases for modern functional programming. Rather than give a dry
    formal definition, I’ll explain by example. This is a bit of vaguely C#-like pseudocode
    for an add function:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Currying 源自 Haskell Curry 在组合逻辑上的工作，这为现代函数式编程提供了一个基础之一。我不会给出干燥的正式定义，我会通过例子来解释。这是一个有点像
    C# 伪代码的加法函数示例：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, we’d expect answer to simply be 300 (i.e. 100+200), which is
    indeed what it would be.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们期望 answer 简单地是 300（即 100+200），这确实是它会得到的结果。
- en: 'What if I were only to provide a single parameter, however? Like this:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，如果我只提供一个参数呢？像这样：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this scenario, if this were a hypothetical curried function, what do you
    think you’d have returned to you in *answer*?
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，如果这是一个假设的柯里化函数，你认为 *answer* 会返回什么？
- en: There’s a rule of thumb I’ve devised when working in functional programming
    - if there’s a question, the answer is likely to be “functions”. Which is the
    case here.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数式编程中，我制定了一个经验法则 - 如果有一个问题，答案可能是“函数”。这在这里是适用的情况。
- en: If this were a curried function, then the the *answer* variable would be a function.
    It would be a modified version of the original `Add` function, but with the first
    parameter now set in stone as the value 100 - effectively making it a new function,
    one that adds 100 to whatever you provide.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是一个柯里化函数，那么 *answer* 变量将是一个函数。它将是原始 `Add` 函数的修改版本，但现在第一个参数已经固定为值 100 - 实际上这是一个新函数，它将
    100 加到你提供的任何值上。
- en: 'You might use it like this:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像这样使用它：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: It’s basically a way to start with a function that has a number of parameters,
    and from it, create mutiple, more specific versions of that function. One single
    base function can become many different functions. You *could* compare it to the
    OO concept of inheritance, if you like? In reality it’s *nothing* at all like
    inheritance. There is only actually a single function with any logic behind it
    - the rest are effectively pointers to that base function holding parameters,
    ready to feed into it.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，这是一种从具有多个参数的函数开始，并从中创建多个更具体版本的方法。一个单一的基本函数可以成为许多不同的函数。如果你愿意的话，*可以*将它与 OO
    概念的继承进行比较？但实际上它与继承完全*不*一样。实际上只有一个具有任何逻辑的基本函数 - 其余实际上是指向该基本函数的带参数的指针，准备向其输入。
- en: What exactly is the point of currying, though? How do you use it?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，Currying 究竟有什么用？你怎么使用它？
- en: Let me explain…​
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我解释一下……
- en: Currying and large functions
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Currying 和大型函数
- en: 'In the “Add” example I gave above, we’ve only got a single pair of parameters,
    and so there are only two possibilities for what we could possibly do with them
    when Currying is possible:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面我提供的“添加”示例中，我们只有一对参数，因此在可能进行 Currying 时，我们只有两种可能的处理方式：
- en: Supply the first parameter, get back a function
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供第一个参数，获取一个函数
- en: Supply both parameters and get back a value
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供两个参数并获得一个值
- en: How would currying handle a function with greater than 2 base parameters? For
    this I’ll use an example of a simple CSV parser - i.e. something that takes a
    CSV text file, breaks it into records by line, then uses some delimeter (typically
    a comma) to break it up again into individual properties within the record.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Currying 如何处理具有超过2个基本参数的函数？为此，我将使用一个简单的 CSV 解析器的示例 - 即一个接收 CSV 文本文件，按行分割记录，然后使用一些分隔符（通常是逗号）再次分割记录内的各个属性。
- en: 'Let’s imagine I’d written a parser function to load in a batch of book data:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们想象我写了一个用于加载一批书籍数据的解析器函数：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This is all well and good, except that the next two sets of books have different
    formats. Books2.csv uses pipes instead of commas to separate fields, and Books3.csv
    comes from a Linux environment and has “\n” line endings instead of the Windows
    style “\r\n”.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切看起来都很好，但接下来的两组书籍有不同的格式。Books2.csv 使用管道符号而不是逗号分隔字段，而 Books3.csv 来自 Linux 环境，其行结束符是
    "\n" 而不是 Windows 风格的 "\r\n"。
- en: We could get around this by creating 3 different functions that are near replicas
    of each other. I’m not keen on unnecessary replication though, since it adds too
    many problems for future developers that want to maintain the codebase.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过创建三个几乎相同的函数来解决这个问题。不过，我不喜欢不必要的复制，因为这会给未来想要维护代码库的开发人员带来太多问题。
- en: 'A more reasonable solution is to add in parameters for everything that could
    possibly change. Like this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更合理的解决方案是为可能发生变化的每一项添加参数，就像这样：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, If I wanted to follow the non-functional approach to the use of this function,
    I’d have to fill in every parameter every possible style of CSV file, like this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我想按照非函数化的方法使用这个函数，我将不得不填写每个可能的 CSV 文件风格的所有参数，就像这样：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: What Currying actually means is to supply the parameters one at a time. Any
    calls to a curried function results either in a new function with one fewer parameters,
    or else a concrete value if all parameters for the base function have been supplied.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，柯里化意味着逐个提供参数。对柯里化函数的任何调用都会产生一个新函数，该新函数的参数少一个，或者如果所有基本函数的参数都已提供，则产生一个具体值。
- en: 'The calls with the full set of supplied parameters, from the previous code
    sample, could be replaced like this:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 来自前一个代码示例中已提供参数的调用可以替换成这样：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The point is that Currying turns a function with X parameters, into a sequence
    of X functions, each of which has a single parameter - the last one returning
    the final result.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 关键在于，柯里化将具有 X 个参数的函数转变为 X 个函数的序列，每个函数只有一个参数 - 最后一个函数返回最终结果。
- en: 'You could even write the function calls above like this - if you really, really
    wanted to!:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你真的非常想的话，你甚至可以像上面那样写出这些函数调用！
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The point of the first example of currying is that we’re gradually building
    up a hyper-specific version of the function that only takes a file name as a parameter.
    In addition to that, we’re storing all of the intermediate versions for potential
    re-use in building up other functions.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 函数柯里化的第一个示例的要点是，我们逐步构建一个超特定版本的函数，它只接受文件名作为参数。除此之外，我们还将所有中间版本存储起来，以便在构建其他函数时重复使用。
- en: 'What we’re effectively doing here is building up functions like a wall made
    of lego bricks, where each brick is a function. Or, if you want to think about
    it another way, there’s a family tree of functions, with each choice made at each
    stage causing a branch in the family:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实际上在这里做的是像用乐高积木搭建墙壁一样构建函数，其中每个积木都是一个函数。或者，如果你想从另一个角度来考虑，这是一个函数家族树，每个阶段的选择都导致家族中的一个分支：
- en: '![Images/ch08_001.png](assets/ch08_001.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图像/第08章_001.png](assets/ch08_001.png)'
- en: Figure 8-1\. A The family tree of the parseBooks functions
  id: totrans-37
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-1\. A 解析书籍函数的家族树
- en: 'Another example that might have uses in production is splitting up a logging
    function into multiple, more specific functions:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个可能在实际中有用的例子是将日志函数分割为多个更具体的函数：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'There are a few useful features of this approach:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法有几个有用的特性：
- en: We’ve actually only created one single function at the end of the day, but from
    it, managed to create at least 3 usable variations which can be passed around,
    requiring only a filename to be usable. That’s taking code re-use to an extra
    level!
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事实上，我们最终只创建了一个单一的函数，但是从这个函数中，我们设法创建了至少 3 个可用的变体，这些变体可以传递并且只需一个文件名即可使用。这将代码复用提升到了一个新的水平！
- en: There are also all of the intermediate functions available too. These can either
    be used directly, or as a starting point for creating additional new functions.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还有所有中间函数也是可用的。这些函数可以直接使用，也可以用作创建额外新函数的起点。
- en: There’s another use for currying in C# as well. I’ll discuss that in the next
    section.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在 C# 中，柯里化还有另一个用途。我将在下一节中讨论这个问题。
- en: Currying and Higher-Order functions
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 柯里化和高阶函数
- en: 'What if I wanted to use currying to create a few functions to convert between
    celsius and fahrenheit. What I’d do is start with curried versions of each of
    the basic arithmetic operations, like this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我想用柯里化来创建几个函数来在摄氏度和华氏度之间转换，我会从像这样的柯里化基本算术操作开始：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Using this, along with the map function from a previous chapter, we can create
    a fairly consise set of function definitions:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个方法，再加上前一章的映射函数，我们可以创建一组相当简洁的函数定义：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Whether you find any of this useful if largely dependent on use case - what
    you’re actually trying to achieve and whether currying fits in with it.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 是否发现任何有用的内容很大程度上取决于用例 - 你实际上想要实现什么以及柯里化是否适用于它。
- en: It’s available for you in C# now, as you can see. If, that is, we can find a
    way to implement it in C#…​
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以在 C# 中使用它，就像你看到的那样。只要我们能找到在 C# 中实现它的方法……
- en: Currying in .NET
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 .NET 中进行柯里化
- en: 'So, the big question: More functional-based languages can do this natively
    with **all** functions in your codebase, can we do anything like this in .NET?'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，重要的问题是：更多基于函数式的语言可以在代码库中**所有**函数中本地实现这一点，那么在 .NET 中我们能做类似的事情吗？
- en: The short answer is no-ish.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 简短的答案是差不多吧。
- en: The longer answer is yes, sort of. It’s not as elegant as in a functional language
    (e.g. F#) where this is all available out of the box. We either need to hard-code
    it, create a static class, or else hack around with the language a bit and jump
    through a few hoops.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 更长的答案是是的，有点。虽然不像在函数式语言（例如 F#）中那样优雅，那里这些功能都是开箱即用的。我们需要硬编码、创建静态类，或者在语言中稍微蹒跚并跳过一些
    hoops。
- en: 'The hard-coded method assumes that you will only ever use the function in a
    curried manner, like this:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 硬编码的方法假设你只会以柯里化的方式使用函数，就像这样：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note that there are two sets of arrows in each function, meaning that we’ve
    defined one `Func` delegate that returns another -i.e. the actual type is `Func<decimal,Func<decimal,decimal>>`.
    So long as you’re using C# 10 or later, then you’ll be able to take advantage
    of implicit typing with the `var` keyword, like in the example above. Older versions
    of C# may need to implicity state the type of the delegates in the code sample
    above.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 注意每个函数中有两组箭头，意味着我们定义了一个返回另一个 `Func` 委托的 `Func` 委托 - 即实际类型是 `Func<decimal, Func<decimal,
    decimal>>`。只要你使用的是 C# 10 或更高版本，你就能利用 `var` 关键字隐式地获取类型，就像上面的例子一样。较旧版本的 C# 可能需要在代码示例中显式声明委托的类型。
- en: The second option is to create a static class that can be referenced from anywhere
    in the codebase. You can call it what you’d like, but I’m going with `F` for Functional.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个选项是创建一个静态类，可以在代码库中的任何地方引用。你可以随意命名它，但我选择用 `F` 来表示函数式。
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This effecively places layers of `Func` delegates between calls to the end function
    that’s being curried, and the areas of code that use it that way.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上在调用被柯里化的最终函数和使用它的代码区域之间放置了多层 `Func` 委托。
- en: The down side to this method is that we’ll have to create a curry method for
    every possible number of parameters. My example covers functions with 2, 3 or
    4 parameters. Functions with more than that would need another Curry method constructed,
    based on the same formula.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的缺点是，我们必须为每种可能的参数数量创建一个柯里化方法。我的示例涵盖了具有 2、3 或 4 个参数的函数。具有更多参数的函数需要构建另一个 Curry
    方法，根据相同的公式。
- en: 'The other issue is that Visual Studio is unable to implicitly determine the
    type for the function being passed in, so it’s necessary to define the function
    to be curried within the call to F.Curry, declaring the type of each parameter,
    like this:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个问题是，Visual Studio 无法隐式确定传入的函数的类型，因此有必要在调用 F.Curry 时定义被柯里化的函数，并声明每个参数的类型，就像这样：
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The final option - and my preferred option - is to use extension methods to
    cut down somewhat on the boilerplate code necessary. The definitions would look
    like this for 2, 3 and 4 parameter functions:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个选项 - 也是我更喜欢的选项 - 是使用扩展方法来减少必需的样板代码。对于具有 2、3 和 4 个参数的函数，定义如下：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: That’s a fairly ugly block of code, isn’t it? Good news is you can just shove
    that somewhere deep down at the back of your codebase, and largely forget it exists.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 那是一个相当丑陋的代码块，不是吗？好消息是，你可以把它放在代码库的深处，并且大部分时间都可以忘记它的存在。
- en: 'The usage would be like this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用方式如下：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: So that’s currying. The eagle-eyed among you may have noticed that this chapter
    is called “Currying **and** Partial Application”.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 那就是柯里化。你们中眼尖的可能已经注意到，这一章被称为“柯里化**和**部分应用”。
- en: What on earth is Partial Application? Well…​since you asked so very nicely…​
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是部分应用？嗯……既然你这么客气地问了……
- en: Partial Application
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部分应用
- en: Partial application works along a very similar line to Currying, but there’s
    a subtle difference. The two terms are often even used - incorrectly - in exchange
    for each other.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 部分应用的工作原理与柯里化非常类似，但它们之间有微妙的区别。这两个术语经常被误用，互换使用。
- en: Currying deals **exclusively** with converting a function with a set of parameters
    into a series of successive function calls, each with a single paramater (the
    technical term is a *unary* function).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Currying **专门** 处理将带有一组参数的函数转换为一系列连续的函数调用，每个调用只有一个参数（技术术语是 *一元* 函数）。
- en: Partial appliction on the other hand allows you to apply as many parameters
    in one go as you want. With data emerging if all of the parameters are filled
    in.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 部分应用，另一方面，允许您一次应用尽可能多的参数。有数据出现如果所有的参数都填写完毕。
- en: 'Returning to my earlier example of the parse function, these are the formats
    we’re working with:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到我之前的解析函数示例，这些是我们正在处理的格式：
- en: book1 - windows line endings, header, commas for fields
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: book1 - Windows 行结束，头部，字段用逗号
- en: book2 - Windows line endings, header, pipe for fields
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: book2 - Windows 行结束，头部，字段用管道符号
- en: book3 - Linux ling endings, no header, commas for fields
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: book3 - Linux 行结束，没有头部，字段用逗号
- en: With the currying approach, we’re creating intermediate steps for setting each
    parameter of Book3, even though it’s ultimately the only use of each of those
    parameters. We’re also doing the same for the SkipHeader and Line endings parameters
    for book1 and book2, even thought they’re the same.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用柯里化方法，我们为设置 Book3 的每个参数创建了中间步骤，即使它们最终只用于每个参数的唯一用途。我们还为 book1 和 book2 的 SkipHeader
    和行结束参数做了同样的事情，尽管它们是相同的。
- en: 'It could be done like this to save space:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 可以这样做来节省空间：
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: But it’s much cleaner if we can just use partial application to apply the 2
    parameters neatly.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果我们能够简洁地使用部分应用来应用这 2 个参数，那就更清晰了。
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: I think that’s pretty elegant as a solution, and it still allows us to have
    re-usable intermediate functions where we need them, but still only a single base
    function.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为这是一个相当优雅的解决方案，它仍然允许我们在需要时具有可重用的中间函数，但仍然只有一个基本函数。
- en: In the next section, I’ll show you how to actually implement this.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我将向您展示如何实际实现这一点。
- en: Partial Application in .NET
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: .NET 中的部分应用
- en: This is the bad news. There’s absolutely no way whatsoever to elegantly implement
    Partial Application in C#. What you’re going to have to do is create an extension
    method for each and every combination of the number of parameters going in to
    the number of parameters going out.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这是个坏消息。没有任何一种方式可以优雅地在 C# 中实现部分应用。您需要做的是为每个参数组合创建一个扩展方法。
- en: 'In the example I just gave, I’d need:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在我刚刚给出的示例中，我需要：
- en: 4 parameters to 1 for `parseNoHeaderLinuxCommaDel`
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4 个参数变成 1 个参数，用于 `parseNoHeaderLinuxCommaDel`
- en: 4 paramters to 2 for `parseWindowsHeader`
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4 个参数变成 2 个参数，用于 `parseWindowsHeader`
- en: 2 parameters to 1 for `parseWindowsHeaderComma` and `parseWindowsHeaderPipe`
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2 个参数变成 1 个参数，用于 `parseWindowsHeaderComma` 和 `parseWindowsHeaderPipe`
- en: 'Here’s what each of those examples would look like:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这是每个示例将会是什么样子：
- en: '[PRE18]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If you decide that partial application is a technique you’d like to persue,
    then you could either add Partial methods to your codebase as you feel they’re
    needed, or else put aside a block of time to create as many as you think you’re
    ever likely to need.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您决定部分应用是一种您想要追求的技术，那么您可以根据需要将部分方法添加到代码库中，或者将一段时间留出来创建您可能需要的尽可能多的部分方法。
- en: Conclusion
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Currying and Partial Application are two powerful, related concepts in functional
    programming. Sadly they’re not available natively in C#, and aren’t ever likely
    to be.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Currying 和部分应用是函数式编程中两个强大且相关的概念。不幸的是，它们在 C# 中并不原生支持，并且不太可能会支持。
- en: They can be implemented by the use of static classes or extension methods, which
    add some boilerplate to the codebase - which is ironic, considering that these
    techniques are intended in part to reduce boilerplate.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 它们可以通过使用静态类或扩展方法来实现，这为代码库增加了一些样板代码 - 这有些讽刺，考虑到这些技术部分是为了减少样板。
- en: Given that C# doesn’t support higher-order functions to the same level as F#
    and other functional languages. C# can’t necessarily pass functions around unless
    they’re converted to `Func` delegates.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于 C# 不像 F# 和其他函数式语言那样完全支持高阶函数。C# 不能像转换为 `Func` 委托那样传递函数。
- en: Even if functions are converted over to `Func`then the Roslyn compiler can’t
    always determine parameter types correctly. T
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 即使函数被转换为 `Func`，Roslyn 编译器也不能始终正确确定参数类型。
- en: hese techniques will never be as useful in the C# world as they are in other
    languages. Despite that though, they have their uses in reducing boilerplate,
    and in enabling a greater level of code re-usability than would otherwise be possible.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在C#领域，这些技术可能永远不如其他语言那么有用。尽管如此，它们在减少模板代码和实现比其他方式更高的代码可重用性方面仍然有其用处。
- en: The decision to use them or not is a matter of personal preference. I wouldn’t
    regard them as essential for functional C#, but they may be worth exploring nevertheless.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 是否使用它们是个人偏好的问题。我不认为它们对于功能型C#是必需的，但还是值得探索的。
- en: In our next chapter, we’ll be exploring the deeper mysteries of indefinite loops
    in functional C#, and what on earth Tail Optimised Recursion Calls are.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的下一章中，我们将探索在功能型C#中无限循环的更深层奥秘，以及什么是尾递归调用。
- en: '^([1](ch08.html#idm45400852781472-marker)) food tip: If you’re ever in Mumbai,
    try a Tibb’s Frankie from Shivaji Park, you won’t regret it!'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch08.html#idm45400852781472-marker)) 美食提示：如果你曾经来到孟买，一定要尝试在Shivaji Park的Tibb’s
    Frankie，你不会后悔的！
- en: ^([2](ch08.html#idm45400852780672-marker)) Haskell, obviously, but also Brook
    and Curry, two lesser-known languages
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch08.html#idm45400852780672-marker)) 显然是Haskell，但还有Brook和Curry这两种不那么出名的语言。
