["```cs\nusing System;\n\n// Never do this!\nnamespace System\n{\n    public class String\n    {\n    }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        System.String? s = null;\n        ShowStaticTypeNameAndAssembly(s);\n        string? s2 = null;\n        ShowStaticTypeNameAndAssembly(s2);\n        ShowStaticTypeNameAndAssembly(\"String literal\");\n        ShowStaticTypeNameAndAssembly(Environment.OSVersion.VersionString);\n    }\n\n    static void ShowStaticTypeNameAndAssembly<T>(T item)\n    {\n        Type t = typeof(T);\n        Console.WriteLine(\n            $\"Type: {t.FullName}. Assembly {t.Assembly.FullName}.\");\n    }\n}\n```", "```cs\nType: System.String. Assembly TypeIdentity, Version=1.0.0.0, Culture=neutral,\n PublicKeyToken=null.\nType: System.String. Assembly System.Private.CoreLib, Version=6.0.0.0,\n Culture=neutral, PublicKeyToken=7cec85d7bea7798e.\nType: System.String. Assembly System.Private.CoreLib, Version=6.0.0.0,\n Culture=neutral, PublicKeyToken=7cec85d7bea7798e.\nType: System.String. Assembly System.Private.CoreLib, Version=6.0.0.0,\n Culture=neutral, PublicKeyToken=7cec85d7bea7798e.\n```", "```cs\nstatic IComparer<string> GetComparer(bool useStandardOrdering)\n{\n    if (useStandardOrdering)\n    {\n        return StringComparer.CurrentCulture;\n    }\n    else\n    {\n        return new MyCustomComparer();\n    }\n}\n```", "```cs\ndotnet publish -c Release -r win-x64 --self-contained true\n```", "```cs\nusing System.Reflection;\nusing System.Runtime.Loader;\n\nnamespace HostApp;\n\npublic class PlugInLoadContext : AssemblyLoadContext\n{\n    private readonly AssemblyDependencyResolver _resolver;\n    private readonly ICollection<string> _plugInApiAssemblyNames;\n\n    public PlugInLoadContext(\n        string pluginPath,\n        ICollection<string> plugInApiAssemblies)\n    {\n        _resolver = new AssemblyDependencyResolver(pluginPath);\n        _plugInApiAssemblyNames = plugInApiAssemblies;\n    }\n\n    protected override Assembly Load(AssemblyName assemblyName)\n    {\n        if (!_plugInApiAssemblyNames.Contains(assemblyName.Name!))\n        {\n            string? assemblyPath = _resolver.ResolveAssemblyToPath(assemblyName);\n            if (assemblyPath != null)\n            {\n                return LoadFromAssemblyPath(assemblyPath);\n            }\n        }\n\n        return AssemblyLoadContext.Default.LoadFromAssemblyName(\n            assemblyName);\n    }\n}\n```", "```cs\nAssembly[] plugInApiAssemblies =\n{\n    typeof(IPlugIn).Assembly,\n    typeof(JsonReader).Assembly\n};\nvar plugInAssemblyNames = new HashSet<string>(\n    plugInApiAssemblies.Select(a => a.GetName().Name!));\n\nvar ctx = new PlugInLoadContext(plugInDllPath, plugInAssemblyNames);\nAssembly plugInAssembly = ctx.LoadFromAssemblyPath(plugInDllPath);\n```", "```cs\nmscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\n```", "```cs\n[assembly: System.Reflection.AssemblyVersion(\"1.0.0.0\")]\n```", "```cs\nstring colText = MyResources.ColString;\n```", "```cs\nusing System.Resources;\n\nnamespace ResourceExample;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        `var` `rm` `=` `new` `ResourceManager``(`\n            `\"ResourceExample.MyResources\"``,` `typeof``(``Program``)``.``Assembly``)``;`\n        `string` `colText` `=` `rm``.``GetString``(``\"ColString\"``)``!``;`\n        Console.WriteLine(\"And now in \" + colText);\n    }\n}\n```", "```cs\nThread.CurrentThread.CurrentUICulture =\n    new System.Globalization.CultureInfo(\"en-GB\");\n```", "```cs\nResourceExample.resources, Version=1.0.0.0, Culture=en-GB, PublicKeyToken=null\n```", "```cs\n[assembly: NeutralResourcesLanguage(\"en-US\")]\n```"]