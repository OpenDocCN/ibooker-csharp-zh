["```cs\nConsole.WriteLine(\"Hello, World!\");\n```", "```cs\nusing System;\n\ninternal class MyType\n{\n    private static void SomeMethod()\n    {\n        Console.WriteLine(\"Hello, World!\");\n    }\n}\n```", "```cs\nstring part1 = \"the ultimate question\";\nstring part2 = \"of something\";\nint theAnswer = 42;\nint andAnotherThing;\n```", "```cs\npart2 = \" of life, the universe, and everything\";\nandAnotherThing = 123;\n```", "```cs\ntheAnswer = \"The compiler will reject this\";\n```", "```cs\nvar part1 = \"the ultimate question\";\nvar part2 = \"of something\";\nvar theAnswer = 40 + 2;\n```", "```cs\nvar theAnswer = 42;\ntheAnswer = \"The compiler will reject this\";\n```", "```cs\ndouble a, b = 2.5, c = -3;\n```", "```cs\nstring part1 = \"the ultimate question\";\nstring part2 = \"of something\";\nint theAnswer = 42;\n\npart2 = \"of life, the universe, and everything\";\n\nstring questionText = \"What is the answer to \" + part1 + \", \" + part2 + \"?\";\nstring answerText = \"The answer to \" + part1 + \", \" +\n                       part2 + \", is: \" + theAnswer;\n\nConsole.WriteLine(questionText);\nConsole.WriteLine(answerText);\n```", "```cs\nWhat is the answer to the ultimate question, of life, the universe, and everythi\nng?\nThe answer to the ultimate question, of life, the universe, and everything, is:\n42\n```", "```cs\nint willNotWork;\nConsole.WriteLine(willNotWork);\n```", "```cs\nerror CS0165: Use of unassigned local variable 'willNotWork'\n```", "```cs\nstatic void SomeMethod()\n{\n    int thisWillNotWork = 42;\n}\n\nstatic void AnUncompilableMethod()\n{\n    Console.WriteLine(thisWillNotWork);\n}\n```", "```cs\nint someValue = GetValue();\nif (someValue > 100)\n{\n    Console.WriteLine(someValue);\n}\n```", "```cs\nint someValue = GetValue();\nif (someValue > 100)\n{\n    int willNotWork = someValue - 100;\n}\nConsole.WriteLine(willNotWork);\n```", "```cs\nint someValue = GetValue();\nif (someValue > 100)\n{\n    int anotherValue = someValue - 100;  // Compiler error\n    Console.WriteLine(anotherValue);\n}\n\nint anotherValue = 123;\n```", "```cs\nerror CS0136: A local or parameter named 'anotherValue' cannot be declared in\n this scope because that name is used in an enclosing local scope to define a\n local or parameter\n```", "```cs\nint errorCount = 0;\nif (problem1)\n{\n    errorCount += 1;\n\n    if (problem2)\n    {\n        errorCount += 1;\n    }\n\n    // Imagine that in a real program there was a big\n    // chunk of code here before the following lines.\n\n    int errorCount = GetErrors();  // Compiler error\n    if (problem3)\n    {\n        errorCount += 1;\n    }\n}\n```", "```cs\nint a = 19;\nint b = 23;\nint c;\nc = a + b;\nConsole.WriteLine(c);\n```", "```cs\nint a = 19;\nint b = 23;\n{\n    int c;\n    c = a + b;\n    Console.WriteLine(c);\n}\n```", "```cs\ndouble a = 1, b = 2.5, c = -3;\n`double` `x` `=` `(``-``b` `+` `Math``.``Sqrt``(``b` `*` `b` `-` `4` `*` `a` `*` `c``)``)` `/` `(``2` `*` `a``)``;`\nConsole.WriteLine(x);\n```", "```cs\nConsole.WriteLine(\"Hello, World!\");\nConsole.WriteLine(12 + 30);\nConsole.ReadKey();\nMath.Sqrt(4);\n```", "```cs\nConsole.ReadKey().KeyChar + \"!\";\nMath.Sqrt(4) + 1;\n```", "```cs\nint number;\n`Console``.``WriteLine``(``number` `=` `123``)``;`\nConsole.WriteLine(number);\n\nint x, y;\n`x` `=` `y` `=` `0``;`\nConsole.WriteLine(x);\nConsole.WriteLine(y);\n```", "```cs\nstatic int X(string label, int i)\n{\n    Console.Write(label);\n    return i;\n}\n\nConsole.WriteLine(X(\"a\", 1) + X(\"b\", 1) + X(\"c\", 1) + X(\"d\", 1));\n```", "```cs\nConsole.WriteLine(\n    X(\"a\", 1) +\n    X(\"b\", (X(\"c\", 1) + X(\"d\", 1) + X(\"e\", 1))) +\n    X(\"f\", 1));\n```", "```cs\nConsole.WriteLine(\"Say\");        // This text will be ignored, but the code on\nConsole.WriteLine(\"Anything\");   // the left is still compiled as usual.\n```", "```cs\nConsole.WriteLine(/* Has side effects */ GetLog());\n\n/* Some developers like to use delimited comments for big blocks of text,\n * where they need to explain something particularly complex or odd in the\n * code. The column of asterisks on the left is for decoration - asterisks\n * are necessary only at the start and end of the comment.\n */\n```", "```cs\nConsole.WriteLine(\"This will run\");   /* This comment includes not just the\nConsole.WriteLine(\"This won't\");       * text on the right but also the text\nConsole.WriteLine(\"Nor will this\");   /* on the left except the first and last\nConsole.WriteLine(\"Nor this\");         * lines. */\nConsole.WriteLine(\"This will also run\");\n```", "```cs\nConsole.WriteLine(\"Testing\");\nConsole . WriteLine(   \"Testing\");\nConsole.\n    WriteLine (\"Testing\" )\n  ;\n```", "```cs\n#if DEBUG\n    Console.WriteLine(\"Starting work\");\n#endif\n    DoWork();\n#if DEBUG\n    Console.WriteLine(\"Finished work\");\n#endif\n```", "```cs\n[System.Diagnostics.Conditional(\"DEBUG\")]\nstatic void ShowDebugInfo(object o)\n{\n    Console.WriteLine(o);\n}\n```", "```cs\n#if NETSTANDARD\n  #error .NET Standard is not a supported target for this source file\n#endif\n```", "```cs\n#line 123 \"Foo.cs\"\n    intt x;\n```", "```cs\n#pragma warning disable CS0168\n    int a;\n```", "```cs\nint i = 42;\ndouble di = i;\nConsole.WriteLine(i / 5);\nConsole.WriteLine(di / 5);\nConsole.WriteLine(i / 5.0);\n```", "```cs\n8\n8.4\n8.4\n```", "```cs\nint i = 42;\nint willFail = 42.0;\nint willAlsoFail = i / 1.0;\n```", "```cs\nint i = 42;\nint i2 = (int) 42.0;\nint i3 = (int) (i / 1.0);\n```", "```cs\nint start = Environment.TickCount;\nDoSomeWork();\nint end = Environment.TickCount;\n\nint totalTicks = end - start;\nConsole.WriteLine(totalTicks);\n```", "```cs\nint result = checked(a + b) + c;\n```", "```cs\nchecked\n{\n    int r1 = a + b;\n    int r2 = r1 - (int) c;\n}\n```", "```cs\nusing System.Numerics;\n\nBigInteger i1 = 1;\nBigInteger i2 = 1;\nConsole.WriteLine(i1);\nint count = 0;\nwhile (true)\n{\n    // The % operator returns the remainder of dividing its 1st operand by its\n    // 2nd, so this displays the number only when count is divisible by 100000.\n    if (count++ % 100000 == 0)\n    {\n        Console.WriteLine(i2);\n    }\n    BigInteger next = i1 + i2;\n    i1 = i2;\n    i2 = next;\n}\n```", "```cs\nchar[] chars = { 'c', 'a', 'f', 'e', (char) 0x301, 's' };\nstring text = new string(chars);\n```", "```cs\nstring message = $\"{name} is {age} years old\";\n```", "```cs\ndouble width = 3, height = 4;\nstring info = $\"Hypotenuse: {Math.Sqrt(width * width + height * height)}\";\n```", "```cs\nstring message = string.Format(\"{0} is {1} years old\", name, age);\nstring info = string.Format(\n    \"Hypotenuse: {0}\",\n    Math.Sqrt(width * width + height * height));\n```", "```cs\nDebug.Assert(everythingIsOk, $\"Everything is *not* OK: {myApplicationModel}\");\n```", "```cs\nstring message = $\"{name} is {age:f1} years old\";\n```", "```cs\ndecimal v = 1234567.654m;\nstring i = string.Create(CultureInfo.InvariantCulture, $\"Quantity {v:N}\");\nstring f = string.Create(new CultureInfo(\"fr\"), $\"Quantity {v:N}\");\nstring frc = string.Create(new CultureInfo(\"fr-FR\"), $\"Quantity {v:C}\");\nstring cac = string.Create(new CultureInfo(\"fr-CA\"), $\"Quantity {v:C}\");\n```", "```cs\n(int X, int Y) point = (10, 5);\nConsole.WriteLine($\"X: {point.X}, Y: {point.Y}\");\n```", "```cs\n*type identifier* = *initial-value*;\n```", "```cs\nX: 10, Y: 5\n```", "```cs\nvar point = (X: 10, Y: 5);\nConsole.WriteLine($\"X: {point.X}, Y: {point.Y}\");\n```", "```cs\nint x = 10, y = 5;\nvar point = (x, y);\nConsole.WriteLine($\"X: {point.x}, Y: {point.y}\");\n```", "```cs\n(int, int) point = (10, 5);\nConsole.WriteLine($\"X: {point.Item1}, Y: {point.Item2}\");\n```", "```cs\n(int X, int Y) point = (46, 3);\n(int Width, int Height) dimensions = point;\n(int Age, int NumberOfChildren) person = point;\n```", "```cs\n(int X, int Y) point1 = (40, 6);\n(int X, int Y) point2 = (12, 34);\n\n`(``int` `x``,` `int` `y``)` `=` `point1``;`\nConsole.WriteLine($\"1: {x}, {y}\");\n`(``x``,` `y``)` `=` `point2``;`\nConsole.WriteLine($\"2: {x}, {y}\");\n\n```", "```cs\nint u;\n(u, int v) = point1;\n```", "```cs\n(_, int h) = point1;\n```", "```cs\nif (s != null && s.Length > 10)\n...\n```", "```cs\nint max = (x > y) ? x : y;\n```", "```cs\nint characterCount = s == null ? 0 : s.Length;\n```", "```cs\nstring neverNull = s ?? \"\";\n```", "```cs\nint characterCount = s?.Length ?? 0;\n```", "```cs\nFadeVolume(gateOpen ? MaxVolume : 0.0, FadeDuration, FadeCurve.Linear);\n```", "```cs\ndouble targetVolume;\nif (gateOpen)\n{\n    targetVolume = MaxVolume;\n}\nelse\n{\n    targetVolume = 0.0;\n}\nFadeVolume(targetVolume, FadeDuration, FadeCurve.Linear);\n```", "```cs\nx = x + 1;\n```", "```cs\nx += 1;\n```", "```cs\nif (age < 18)\n{\n    Console.WriteLine(\"You are too young to buy alcohol in a bar in the UK.\");\n}\n```", "```cs\nif (authenticationCodesCorrect)\n    SendTransferConfirmation();\n    TransferFunds();\n```", "```cs\nif (optimistic)\n{\n    Console.WriteLine(\"Glass half full\");\n}\nelse\n{\n    Console.WriteLine(\"Glass half empty\");\n}\n```", "```cs\nif (temperatureInCelsius < 52)\n{\n    Console.WriteLine(\"Too cold\");\n}\nelse if (temperatureInCelsius > 58)\n{\n    Console.WriteLine(\"Too hot\");\n}\nelse\n{\n    Console.WriteLine(\"Just right\");\n}\n```", "```cs\nif (temperatureInCelsius < 52)\n{\n    Console.WriteLine(\"Too cold\");\n}\nelse\n{\n    if (temperatureInCelsius > 58)\n    {\n        Console.WriteLine(\"Too hot\");\n    }\n    else\n    {\n        Console.WriteLine(\"Just right\");\n    }\n}\n```", "```cs\nswitch (workStatus)\n{\ncase \"ManagerInRoom\":\n    WorkDiligently();\n    break;\n\ncase \"HaveNonUrgentDeadline\":\ncase \"HaveImminentDeadline\":\n    CheckTwitter();\n    CheckEmail();\n    CheckTwitter();\n    ContemplateGettingOnWithSomeWork();\n    CheckTwitter();\n    CheckTwitter();\n    break;\n\ncase \"DeadlineOvershot\":\n    WorkFuriously();\n    break;\n\ndefault:\n    CheckTwitter();\n    CheckEmail();\n    break;\n}\n```", "```cs\nswitch (x)\n{\ncase \"One\":\n    Console.WriteLine(\"One\");\ncase \"Two\":  // This line will not compile\n    Console.WriteLine(\"One or two\");\n    break;\n}\n```", "```cs\nswitch (x)\n{\ncase \"One\":\n    Console.WriteLine(\"One\");\n    `goto` `case` `\"Two\"``;`\ncase \"Two\":\n    Console.WriteLine(\"One or two\");\n    break;\n}\n```", "```cs\nwhile (!reader.EndOfStream)\n{\n    Console.WriteLine(reader.ReadLine());\n}\n```", "```cs\nchar k;\ndo\n{\n    Console.WriteLine(\"Press x to exit\");\n    k = Console.ReadKey().KeyChar;\n}\nwhile (k != 'x');\n```", "```cs\nfor (*`initializer`*; *`condition`*; *`iterator`*) *`body`*\n```", "```cs\nfor (int i = 0; i < myArray.Length; i++)\n{\n    myArray[i] *= 2;\n}\n```", "```cs\nfor (int i = 0, j = 0; i < myArray.Length; i++, j++)\n...\n```", "```cs\nfor (int j = 0; j < height; ++j)\n{\n    for (int i = 0; i < width; ++i)\n    {\n        ...\n    }\n}\n```", "```cs\nforeach (*`item``-``type` `iteration``-``variable`* in *`collection`*) *`body`*\n```", "```cs\nstring[] messages = GetMessagesFromSomewhere();\nforeach (string message in messages)\n{\n    Console.WriteLine(message);\n}\n```", "```cs\npublic static void ShowMessages(IEnumerable<string> messages)\n{\n    foreach (string message in messages)\n    {\n        Console.WriteLine(message);\n    }\n}\n```", "```cs\nswitch (o)\n{\ncase string s:\n    Console.WriteLine($\"A piece of string is {s.Length} long\");\n    break;\n\ncase int i:\n    Console.WriteLine($\"That's numberwang! {i}\");\n    break;\n}\n```", "```cs\nswitch (o)\n{\ncase string:\n    Console.WriteLine(\"This is a piece of string\");\n    break;\n\ncase int:\n    Console.WriteLine(\"That's numberwang!\");\n    break;\n}\n```", "```cs\ncase (int x, int y):\n    Console.WriteLine($\"I know where it's at: {x}, {y}\");\n    break;\n```", "```cs\nswitch (p)\n{\ncase (0, 0):\n    Console.WriteLine(\"How original\");\n    break;\n\ncase (0, 1):\ncase (1, 0):\n    Console.WriteLine(\"What an absolute unit\");\n    break;\n\ncase (1, 1):\n    Console.WriteLine(\"Be there and be square\");\n    break;\n}\n```", "```cs\ncase (0, int y):\n    Console.WriteLine($\"This is on the X axis, at height {y}\");\n    break;\n```", "```cs\ncase (var x, var y):\n    Console.WriteLine($\"I know where it's at: {x}, {y}\");\n    break;\n```", "```cs\ncase (int x, _):\n    Console.WriteLine($\"At X: {x}. As for Y, who knows?\");\n    break;\n```", "```cs\ncase string { Length: 0 }:\n    Console.WriteLine(\"How long is a piece of string? Not very!\");\n    break;\n```", "```cs\ncase string { Length: 0 } s:\n    Console.WriteLine($\"How long is a piece of string? This long: {s.Length}\");\n    break;\n```", "```cs\ncase string { Length: int length }:\n    Console.WriteLine($\"How long is a piece of string? This long: {length}\");\n    break;\n```", "```cs\nswitch (Environment.OSVersion)\n{\n    case { Version: { Major: 10 } }:\n        Console.WriteLine(\"Windows 10, 11, or later\");\n        break;\n}\n```", "```cs\ncase { Version.Major: 10 }:\n    Console.WriteLine(\"Windows 10, 11, or later\");\n    break;\n```", "```cs\ncase not null:\n    Console.WriteLine($\"User's middle name is: {middleName}\");\n    break;\n```", "```cs\ncase not null and not \"David\":\n    Console.WriteLine($\"User's middle name is: {middleName}\");\n    break;\n```", "```cs\nswitch (value)\n{\ncase > 0: Console.WriteLine(\"Positive\"); break;\ncase < 0: Console.WriteLine(\"Negative\"); break;\ndefault: Console.WriteLine(\"Neither strictly positive nor negative\"); break;\n};\n```", "```cs\ncase >= 168 and <= 189:\n    Console.WriteLine(\"Is within inner 90 percentiles\");\n    break;\n```", "```cs\ncase (int w, int h) when w > h:\n    Console.WriteLine(\"Landscape\");\n    break;\n```", "```cs\nswitch (shape)\n{\n    case (int w, int h) when w < h: return \"Portrait\";\n    case (int w, int h) when w > h: return \"Landscape\";\n    case (int _, int _): return \"Square\";\n    default: return \"Unknown\";\n}\n```", "```cs\nreturn shape switch\n{\n    (int w, int h) when w < h => \"Portrait\",\n    (int w, int h) when w > h => \"Landscape\",\n    (int _, int _) => \"Square\",\n    _ => \"Unknown\"\n};\n```", "```cs\nbool isPoint = value is (int, int);\n```", "```cs\nif (s is not null)\n{\n    Console.WriteLine(s.Length);\n}\n```", "```cs\nif (value is (int x, int y))\n{\n    Console.WriteLine($\"X: {x}, Y: {y}\");\n}\n```", "```cs\nif (value is (int w, int h) && w < h)\n{\n    Console.WriteLine($\"(Portrait) Width: {w}, Height: {h}\");\n}\n```"]