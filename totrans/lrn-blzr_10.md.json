["```cs\nnamespace Learning.Blazor.Extensions;\n\npublic static class ClaimsPrincipalExtensions\n{\n    /// <summary>\n    /// Gets the first email address (if available) from the \"emails\" claim.\n    /// </summary>\n    public static string? GetFirstEmailAddress(this ClaimsPrincipal? user) => ![1](assets/1.png)\n        user?.GetEmailAddresses()?.FirstOrDefault();\n\n    /// <summary>\n    /// Gets the email addresses (if available) from the \"emails\" claim.\n    /// </summary>\n    public static string[]? GetEmailAddresses(this ClaimsPrincipal? user) ![2](assets/2.png)\n    {\n        if (user is null) return null;\n\n        var emails = user.FindFirst(\"emails\");\n        if (emails is { ValueType: ClaimValueTypes.String }\n            and { Value.Length: > 0 })\n        {\n            return emails.Value.StartsWith(\"[\")\n                ? emails.Value.FromJson<string[]>()\n                : new[] { emails.Value };\n        }\n\n        return null;\n    }\n}\n```", "```cs\nnamespace Learning.Blazor.Extensions.Tests;\n\npublic sealed partial class ClaimsPrincipalExtensionsTests\n{\n    class ClaimsPrincipalBuilder ![1](assets/1.png)\n    {\n        readonly Dictionary<string, string> _claims =\n            new(StringComparer.OrdinalIgnoreCase);\n\n        internal ClaimsPrincipalBuilder WithClaim( ![2](assets/2.png)\n            string claimType, string claimValue)\n        {\n            _claims[claimType] = claimValue ?? \"\";\n            return this;\n        }\n\n        internal ClaimsPrincipal Build() ![3](assets/3.png)\n        {\n            var claims = _claims.Select(\n                kvp => new Claim(kvp.Key, kvp.Value));\n            var identity = new ClaimsIdentity(claims, \"TestIdentity\");\n\n            return new ClaimsPrincipal(identity);\n        }\n    }\n}\n```", "```cs\nnamespace Learning.Blazor.Extensions.Tests;\n\npublic sealed partial class ClaimsPrincipalExtensionsTests\n{\n [Fact]\n    public void GetFirstEmailAddressNull() ![1](assets/1.png)\n    {\n        var sut = new ClaimsPrincipalBuilder()\n            .WithClaim(\n               claimType: \"emails\",\n               claimValue: null!)\n            .Build();\n\n        var actual = sut.GetFirstEmailAddress();\n        Assert.Null(actual);\n    }\n [Fact]\n    public void GetFirstEmailAddressKeyMismatch() ![2](assets/2.png)\n    {\n        var sut = new ClaimsPrincipalBuilder()\n            .WithClaim(\n               claimType: \"email\",\n               claimValue: @\"[\"\"admin@email.org\"\",\"\"test@email.org\"\"]\")\n            .Build();\n\n        var actual = sut.GetFirstEmailAddress();\n        Assert.Null(actual);\n    }\n [Fact]\n    public void GetFirstEmailAddressArrayString() ![3](assets/3.png)\n    {\n        var sut = new ClaimsPrincipalBuilder()\n            .WithClaim(\n               claimType: \"emails\",\n               claimValue: @\"[\"\"admin@email.org\"\",\"\"test@email.org\"\"]\")\n            .Build();\n\n        var expected = \"admin@email.org\";\n        var actual = sut.GetFirstEmailAddress();\n        Assert.Equal(expected, actual);\n    }\n [Fact]\n    public void GetFirstEmailAddressGetSimpleString() ![4](assets/4.png)\n    {\n        var sut = new ClaimsPrincipalBuilder()\n            .WithClaim(\"emails\", \"test@email.org\")\n            .Build();\n\n        var expected = \"test@email.org\";\n        var actual = sut.GetFirstEmailAddress();\n        Assert.Equal(expected, actual);\n    }\n [\n        Theory,\n        InlineData(\n            \"emails\",\n            \"test@email.org\",\n            new[] { \"test@email.org\" }),\n        InlineData(\n            \"emails\",\n            @\"[\"\"admin@email.org\"\",\"\"test@email.org\"\"]\",\n            new[] { \"admin@email.org\", \"test@email.org\" }),\n        InlineData(\n            \"email\",\n            @\"[\"\"admin@email.org\"\",\"\"test@email.org\"\"]\",\n            null),\n        InlineData(\n            \"emails\", null, null),\n    ]\n    public void GetEmailAddressesCorrectlyGetsEmails( ![5](assets/5.png)\n        string claimType, string claimValue, string[]? expected)\n    {\n        var sut = new ClaimsPrincipalBuilder()\n            .WithClaim(claimType, claimValue)\n            .Build();\n\n        var actual = sut.GetEmailAddresses();\n        Assert.Equal(expected, actual);\n    }\n}\n```", "```cs\n@using Learning.Blazor.Components\n@inherits TestContext ![1](assets/1.png)\n@code {\n    public static IEnumerable<object[]> ChatMessageInput ![2](assets/2.png)\n    {\n        get\n        {\n            yield return new object[]\n            {\n                Guid.Parse(\"f08b0096-5301-4f4d-8e19-6cb1514991ea\"),\n                \"Test message... does this work?\",\n                \"David Pine\"\n            };\n            yield return new object[]\n            {\n                Guid.Parse(\"379b3861-0c04-49e9-8287-e5de3a40dcb3\"),\n                \"...\",\n                \"Fake\"\n            };\n            yield return new object[]\n            {\n                Guid.Parse(\"f68386bb-e4d9-4fed-86b3-0fe539640b60\"),\n                \"If a tree falls in the forest, does it make a sound?\",\n                null!\n            };\n            yield return new object[]\n            {\n                Guid.Parse(\"b19ab8b4-7819-438e-a281-56246cd3cda7\"),\n                null!,\n                \"User\"\n            };\n            yield return new object[]\n            {\n                Guid.Parse(\"26ae3eae-b763-4ff1-8160-11aaad0cf078\"),\n                null!,\n                null!\n            };\n        }\n    }\n [Theory, MemberData(nameof(ChatMessageInput))] ![3](assets/3.png)\n    public void ChatMessageComponentRendersUserAndText(\n        Guid guid, string text, string user)\n    {\n        var message = new ActorMessage( ![4](assets/4.png)\n            Id: guid,\n            Text: text,\n            UserName: user);\n\n        var cut = Render( ![5](assets/5.png)\n            @<ChatMessageComponent Message=\"message\"\n                IsEditable=\"true\"\n                EditMessage=\"() => {}\" />);\n\n        cut.MarkupMatches( ![6](assets/6.png)\n            @<a id=@guid class=\"panel-block is-size-5\">\n                <span>@user</span>\n                <span class=\"panel-icon px-4\">\n                    <i class=\"fas fa-chevron-right\" aria-hidden=\"true\"></i>\n                </span>\n                <span class=\"pl-2\">\n                    <span>@text</span>\n                </span>\n            </a>);\n    }\n}\n```", "```cs\nnamespace Web.Client.EndToEndTests;\n\npublic sealed partial class LoginTests ![1](assets/1.png)\n{\n    const string LearningBlazorSite = \"https://webassemblyof.net\";\n    const string LearningBlazorB2CSite = \"https://learningblazor.b2clogin.com\";\n\n    static IBrowserType ToBrowser(BrowserType browser, IPlaywright pw) => ![2](assets/2.png)\n        browser switch\n        {\n            BrowserType.Chromium => pw.Chromium,\n            BrowserType.Firefox => pw.Firefox,\n            _ => throw new ArgumentException($\"Unknown browser: {browser}\")\n        };\n\n    static Credentials GetTestCredentials() ![3](assets/3.png)\n    {\n        var credentials = new Credentials(\n            Username: GetEnvironmentVariable(\"TEST_USERNAME\"),\n            Password: GetEnvironmentVariable(\"TEST_PASSWORD\"));\n\n        Assert.NotNull(credentials.Username);\n        Assert.NotNull(credentials.Password);\n\n        return credentials;\n    }\n\n    readonly record struct Credentials( ![4](assets/4.png)\n        string? Username,\n        string? Password);\n\n    public enum BrowserType ![5](assets/5.png)\n    {\n        Unknown,\n        Chromium,\n        Firefox,\n        WebKit\n    }\n}\n```", "```cs\nnamespace Web.Client.EndToEndTests;\n\npublic sealed partial class LoginTests\n{\n    private static IEnumerable<object[]> ChromiumLoginInputs\n    {\n        get\n        {\n            yield return new object[]\n            {\n                BrowserType.Chromium, 43.04181f, -87.90684f,\n                \"Milwaukee, Wisconsin (US)\"\n            };\n            yield return new object[]\n            {\n                BrowserType.Chromium, 48.864716f, 2.349014f,\n                \"Paris, Île-de-France (FR)\", \"fr-FR\"\n            };\n            yield return new object[]\n            {\n                BrowserType.Chromium, 20.666222f, -103.35209f,\n                \"Guadalajara, Jalisco (MX)\", \"es-MX\"\n            };\n        }\n    }\n}\n```", "```cs\nnamespace Web.Client.EndToEndTests;\n\npublic sealed partial class LoginTests\n{\n    private static IEnumerable<object[]> FirefoxLoginInputs\n    {\n        get\n        {\n            yield return new object[]\n            {\n                BrowserType.Firefox, 43.04181f, -87.90684f,\n                \"Milwaukee, Wisconsin (US)\"\n            };\n            yield return new object[]\n            {\n                BrowserType.Firefox, 48.864716f, 2.349014f,\n                \"Paris, Île-de-France (FR)\", \"fr-FR\"\n            };\n            yield return new object[]\n            {\n                BrowserType.Firefox, 20.666222f, -103.35209f,\n                \"Guadalajara, Jalisco (MX)\", \"es-MX\"\n            };\n        }\n    }\n}\n```", "```cs\nnamespace Web.Client.EndToEndTests;\n\npublic sealed partial class LoginTests\n{\n    private static bool IsDebugging => Debugger.IsAttached; ![1](assets/1.png)\n    private static bool IsHeadless => !IsDebugging;\n\n    public static IEnumerable<object[]> AllLoginTestInput =>\n        ChromiumLoginInputs.Concat(FirefoxLoginInputs);\n [\n        Theory,\n        MemberData(nameof(AllLoginTestInput))\n    ]\n    public async Task CanLoginWithVerifiedCredentials(\n        BrowserType browserType,\n        float lat,\n        float lon,\n        string? expectedText,\n        string? locale = null) ![2](assets/2.png)\n        var (username, password) = GetTestCredentials();\n\n        using var playwright = await Playwright.CreateAsync(); ![3](assets/3.png)\n        await using var browser = await ToBrowser(browserType, playwright)\n            .LaunchAsync(new() { Headless = IsHeadless });\n\n        await using var context = await browser.NewContextAsync( ![4](assets/4.png)\n            new BrowserTypeLaunchOptions()\n            {\n                Permissions = new[] { \"geolocation\" },\n                Geolocation = new Geolocation() // Milwaukee, WI\n                {\n                    Latitude = lat,\n                    Longitude = lon\n                }\n            });\n\n        var loginPage = await context.NewPageAsync(); ![5](assets/5.png)\n        await loginPage.RunAndWaitForNavigationAsync(\n            async () =>\n            {\n                await loginPage.GotoAsync(LearningBlazorSite);\n                if (locale is not null)\n                {\n                    await loginPage.AddInitScriptAsync(@\"(locale => {\n    if (locale) {\n        window.localStorage.setItem(\n            'client-culture-preference', `\"\"${locale}\"\"`);\n    }\n})('\" + locale + \"')\");\n                }\n            },\n            new()\n            {\n                UrlString = $\"{LearningBlazorB2CSite}/**\",\n                WaitUntil = WaitUntilState.NetworkIdle\n            });\n\n        // Enter the test credentials, and \"sign in\".\n        await loginPage.FillAsync(\"#email\", username ?? \"fail\"); ![6](assets/6.png)\n        await loginPage.FillAsync(\"#password\", password ?? \"?!?!\");\n        await loginPage.ClickAsync(\"#next\" /* \"Sign in\" button */);\n\n        // Ensure the real weather data loads.\n        var actualText = await loginPage.Locator(\"#weather-city-state\") ![7](assets/7.png)\n            .InnerTextAsync();\n\n        Assert.Equal(expectedText, actualText);\n    }\n}\n```", "```cs\nname: Build Validation ![1](assets/1.png)\n\non: ![2](assets/2.png)\n  push:\n    branches: [ main ]\n    paths-ignore:\n    - '**.md'\n  pull_request:\n    types: [opened, synchronize, reopened, closed]\n    branches:\n      - main  # only run on main branch\n\nenv: ![3](assets/3.png)\n  TEST_USERNAME: ${{ secrets.TEST_USERNAME }}\n  TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}\n\njobs: ![4](assets/4.png)\n  build:\n    name: build\n    runs-on: ubuntu-latest\n\n    - name: Setup .NET 6.0 ![5](assets/5.png)\n      uses: actions/setup-dotnet@v1\n      with:\n        dotnet-version: 6.0.x\n\n    - name: Build\n      run: |\n        dotnet build --configuration Release\n\n    - uses: actions/setup-node@v1 ![6](assets/6.png)\n      name: 'Setup Node'\n      with:\n        node-version: 18\n        cache: 'npm'\n        cache-dependency-path: subdir/package-lock.json\n\n    - name: 'Install Playwright browser dependencies'\n      run: |\n        npx playwright install-deps\n\n    - name: Test ![7](assets/7.png)\n      run: |\n        dotnet test --verbosity normal\n```"]