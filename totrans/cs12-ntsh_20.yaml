- en: Chapter 20\. Cryptography
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第20章\. 密码学
- en: 'In this chapter, we discuss the major cryptography APIs in .NET:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了.NET中的主要密码学API：
- en: Windows Data Protection API (DPAPI)
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows数据保护API（DPAPI）
- en: Hashing
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哈希
- en: Symmetric encryption
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对称加密
- en: Public key encryption and signing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公钥加密和签名
- en: 'The types covered in this chapter are defined in the following namespaces:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的类型在以下命名空间中定义：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Overview
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: '[Table 20-1](#encryption_and_hashing_options_in_dotne) summarizes the cryptography
    options in .NET. In the remaining sections, we explore each of these.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[表20-1](#encryption_and_hashing_options_in_dotne)总结了.NET中的密码学选项。在接下来的几节中，我们将详细探讨每一种选项。'
- en: Table 20-1\. Encryption and hashing options in .NET
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 表20-1\. .NET中的加密和哈希选项
- en: '| Option | Keys to manage | Speed | Strength | Notes |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 管理的密钥 | 速度 | 强度 | 注释 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| `File.Encrypt` | 0 | Fast | Depends on user’s password | Protects files transparently
    with filesystem support. A key is derived implicitly from the logged-in user’s
    credentials. Windows only. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `File.Encrypt` | 0 | 快速 | 依赖用户的密码 | 通过文件系统支持透明地保护文件。从当前登录用户的凭据隐式派生密钥。仅限Windows操作系统。
    |'
- en: '| Windows Data Protection | 0 | Fast | Depends on user’s password | Encrypts
    and decrypts byte arrays using an implicitly derived key. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| Windows数据保护 | 0 | 快速 | 依赖用户的密码 | 使用隐式派生密钥加密和解密字节数组。 |'
- en: '| Hashing | 0 | Fast | High | One-way (irreversible) transformation. Used for
    storing passwords, comparing files, and checking for data corruption. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 哈希 | 0 | 快速 | 高 | 单向（不可逆）转换。用于存储密码、比较文件和检查数据完整性。 |'
- en: '| Symmetric Encryption | 1 | Fast | High | For general-purpose encryption/decryption.
    The same key encrypts and decrypts. Can be used to secure messages in transit.
    |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 对称加密 | 1 | 快速 | 高 | 用于通用加密/解密。同一密钥加密和解密。可用于安全传输消息。 |'
- en: '| Public Key Encryption | 2 | Slow | High | Encryption and decryption use different
    keys. Used for exchanging a symmetric key in message transmission and for digitally
    signing files. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 公钥加密 | 2 | 慢 | 高 | 加密和解密使用不同的密钥。用于在消息传输中交换对称密钥和数字签名文件。 |'
- en: .NET also provides more specialized support for creating and validating XML-based
    signatures in `System.Security.Cryptography.Xml` and types for working with digital
    certificates in `System.Security.Cryptography.X509Certificates`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: .NET还提供了更专门的支持，用于创建和验证基于XML的签名，位于`System.Security.Cryptography.Xml`命名空间，以及用于处理数字证书的类型，位于`System.Security.Cryptography.X509Certificates`命名空间。
- en: Windows Data Protection
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows数据保护
- en: Note
  id: totrans-20
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Windows Data Protection is available on Windows only, and throws a `PlatformNotSupportedException`
    on other operating systems.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Windows数据保护仅在Windows操作系统上可用，在其他操作系统上会抛出`PlatformNotSupportedException`异常。
- en: 'In the section [“File and Directory Operations”](ch15.html#file_and_directory_operations),
    we described how you could use `File.Encrypt` to request that the operating system
    transparently encrypt a file:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在“文件和目录操作”部分中，我们描述了如何使用`File.Encrypt`请求操作系统透明地加密文件：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The encryption in this case uses a key derived from the logged-in user’s password.
    You can use this same implicitly derived key to encrypt a byte array with the
    Windows Data Protection API (DPAPI). The DPAPI is exposed through the `ProtectedData`
    class—a simple type with two static methods:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下的加密使用从当前登录用户密码派生的密钥。您可以使用同样的隐式派生密钥，通过Windows数据保护API（DPAPI）加密字节数组。DPAPI通过`ProtectedData`类公开——这是一个具有两个静态方法的简单类型：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Whatever you include in `optionalEntropy` is added to the key, thereby increasing
    its security. The `DataProtectionScope` enum argument allows two options: `Curren⁠t​User`
    or `LocalMachine`. With `CurrentUser`, a key is derived from the logged-in user’s
    credentials; with `LocalMachine`, a machine-wide key is used, common to all users.
    This means that with the `CurrentUser` scope, data encrypted by one user cannot
    be decrypted by another. A `LocalMachine` key provides less protection but works
    under a Windows Service or a program needing to operate under a variety of accounts.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您在`optionalEntropy`中包含什么，都会添加到密钥中，从而增加其安全性。`DataProtectionScope`枚举参数允许两个选项：`CurrentUser`或`LocalMachine`。使用`CurrentUser`，密钥从当前登录用户的凭据派生；使用`LocalMachine`，则使用全局的机器密钥，适用于所有用户。这意味着使用`CurrentUser`范围加密的数据不能被其他用户解密。`LocalMachine`密钥提供较少的保护，但适用于需要在多个账户下操作的Windows服务或程序。
- en: 'Here’s a simple encryption and decryption demonstration:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个简单的加密和解密演示：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Windows Data Protection provides moderate security against an attacker with
    full access to the computer, depending on the strength of the user’s password.
    With `LocalMachine` scope, it’s effective only against those with restricted physical
    and electronic access.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Windows数据保护根据用户密码的强度提供了对拥有完全访问权限的攻击者的中等安全性保护。在`LocalMachine`范围内，它仅对那些受限的物理和电子访问者有效。
- en: Hashing
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 哈希计算
- en: A *hashing algorithm* distills a potentially large number of bytes into a small
    fixed-length *hashcode*. Hashing algorithms are designed such that a single-bit
    change anywhere in the source data results in a significantly different hashcode.
    This makes it suitable for comparing files or detecting accidental (or malicious)
    corruption to a file or data stream.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希算法将一个潜在的大量字节压缩为一个固定长度的*哈希码*。哈希算法设计得如此，源数据的任何单比特更改都会导致显著不同的哈希码。这使得它适用于比较文件或检测文件或数据流的意外（或恶意）损坏。
- en: Hashing also acts as one-way encryption, because it’s difficult to impossible
    to convert a hashcode back into the original data. This makes it ideal for storing
    passwords in a database, because should your database become compromised, you
    don’t want the attacker to gain access to plain-text passwords. To authenticate,
    you simply hash what the user types in and compare it to the hash that’s stored
    in the database.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希还充当单向加密，因为很难或不可能将哈希码转换回原始数据。这使其非常适合将密码存储在数据库中，因为如果您的数据库被攻击者入侵，您不希望攻击者能够访问明文密码。要进行身份验证，只需对用户输入的内容进行哈希并将其与数据库中存储的哈希进行比较。
- en: 'To hash, you call `ComputeHash` on one of the `HashAlgorithm` subclasses, such
    as `SHA1` or `SHA256`:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行哈希计算，可以在`HashAlgorithm`的子类（如`SHA1`或`SHA256`）上调用`ComputeHash`：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `ComputeHash` method also accepts a byte array, which is convenient for
    hashing passwords (we describe a more secure technique in [“Hashing Passwords”](#hashing_passwords)):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`ComputeHash`方法还接受字节数组作为参数，这对于哈希密码非常方便（我们在[“哈希密码”](#hashing_passwords)中描述了更安全的技术）：'
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-37
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'The `GetBytes` method on an `Encoding` object converts a string to a byte array;
    the `GetString` method converts it back. An `Encoding` object cannot, however,
    convert an encrypted or hashed byte array to a string, because scrambled data
    usually violates text encoding rules. Instead, use `Convert.ToBase64String` and
    `Convert.FromBase64String`: these convert between any byte array and a legal (and
    XML- or JSON-friendly) string.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Encoding`对象上调用`GetBytes`方法将字符串转换为字节数组；调用`GetString`方法将其转换回来。然而，`Encoding`对象不能将加密或哈希的字节数组转换为字符串，因为乱序的数据通常违反文本编码规则。取而代之的是使用`Convert.ToBase64String`和`Convert.FromBase64String`：它们可以在任何字节数组和合法（且适于XML或JSON）的字符串之间转换。
- en: Hash Algorithms in .NET
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET中的哈希算法
- en: '`SHA1` and `SHA256` are two of the `HashAlgorithm` subtypes provided by .NET.
    Here are the major algorithms, in ascending order of security:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`SHA1`和`SHA256`是.NET提供的`HashAlgorithm`子类型之一。以下是主要算法，按安全性从低到高排序：'
- en: '| Class | Algorithm | Hash length in bytes | Strength |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 类别 | 算法 | 哈希长度（字节） | 强度 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `MD5` | MD5 | 16 | Very poor |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `MD5` | MD5 | 16 | 非常差 |'
- en: '| `SHA1` | SHA-1 | 20 | Poor |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `SHA1` | SHA-1 | 20 | 差 |'
- en: '| `SHA256` | SHA-2 | 32 | Good |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `SHA256` | SHA-2 | 32 | 良好 |'
- en: '| `SHA384` | SHA-2 | 48 | Good |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `SHA384` | SHA-2 | 48 | 良好 |'
- en: '| `SHA512` | SHA-2 | 64 | Good |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `SHA512` | SHA-2 | 64 | 良好 |'
- en: All five algorithms execute at roughly similar speeds in their current implementations,
    with the exception of SHA256, which is 2-3 times faster (this may vary with hardware
    and operating system). To give a ballpark figure, you can expect at least 500
    MB per second on a 2024-era desktop or server with all algorithms. The longer
    hashes decrease the possibility of *collision* (two distinct files yielding the
    same hash).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 所有五种算法在当前实现中执行速度大致相似，除了SHA256，它比其他算法快2-3倍（这可能会随硬件和操作系统的不同而有所变化）。以一个大概的数字为例，您可以期望在2024年的桌面或服务器上，所有算法至少达到每秒500
    MB。较长的哈希值降低了*碰撞*（两个不同的文件产生相同的哈希值）的可能性。
- en: Warning
  id: totrans-49
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: Use *at least* `SHA256` when hashing passwords or other security-sensitive data.
    `MD5` and `SHA1` are considered insecure for this purpose and are suitable to
    protect only against accidental corruption, not deliberate tampering.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 使用至少`SHA256`来哈希密码或其他安全敏感数据。`MD5`和`SHA1`被认为在此目的上不安全，仅适用于防止意外损坏，而非故意篡改。
- en: Note
  id: totrans-51
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: .NET 8 and above also support the latest SHA-3 hashing note via the `SHA3_256`,
    `SHA3_384`, and `SHA3_512` classes. The SHA-3 algorithms are considered even more
    secure (and slower) than the previously listed algorithms, but require Windows
    Build 25324+ or Linux with OpenSSL 1.1.1+. You can test whether OS support is
    available via the static `IsSupported` property on these classes.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 8 及更高版本还通过 `SHA3_256`、`SHA3_384` 和 `SHA3_512` 类支持最新的 SHA-3 哈希算法。SHA-3 算法被认为比前面列出的算法更安全（但更慢），但需要
    Windows Build 25324+ 或具有 OpenSSL 1.1.1+ 的 Linux。可以通过这些类的静态 `IsSupported` 属性来测试操作系统是否支持。
- en: Hashing Passwords
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 密码哈希
- en: The longer SHA algorithms are suitable as a basis for password hashing, if you
    enforce a strong password policy to mitigate a *dictionary attack*—a strategy
    whereby an attacker builds a password lookup table by hashing every word in a
    dictionary.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你要求强密码策略以减轻*字典攻击*（即攻击者通过对字典中的每个单词进行哈希来构建密码查找表的策略），那么更长的 SHA 算法适合用作密码哈希的基础。
- en: 'A standard technique, when hashing passwords, is to incorporate “salt”—a long
    series of bytes that you initially obtain via a random number generator and then
    combine with each password before hashing. This frustrates hackers in two ways:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在哈希密码时的一个标准技术是将“盐”——一系列长字节——合并到每个密码之前，然后再进行哈希。这种做法通过两种方式使黑客感到沮丧：
- en: They must also know the salt bytes.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们还必须知道盐字节。
- en: They cannot use *rainbow tables* (publicly available *precomputed* databases
    of passwords and their hashcodes), although a dictionary attack might still be
    possible with sufficient computing power.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们无法使用*彩虹表*（公开可用的*预计算*密码及其哈希码数据库），尽管使用足够的计算能力可能仍然可以进行字典攻击。
- en: 'You can further strengthen security by “stretching” your password hashes—repeatedly
    rehashing to obtain more computationally intensive byte sequences. If you rehash
    100 times, a dictionary attack that might otherwise take one month would take
    eight years. The `KeyDerivation`, `Rfc2898DeriveBytes`, and `PasswordDeriveBytes`
    classes perform exactly this kind of stretching while also allowing for convenient
    salting. Of these, `KeyDerivation.Pbkdf2` offers the best hashing:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要进一步增强安全性，可以通过“拉伸”密码哈希来实现——重复重新哈希以获得更加计算密集的字节序列。如果重新哈希100次，一个原本需要一个月才能完成的字典攻击将需要八年时间。`KeyDerivation`、`Rfc2898DeriveBytes`
    和 `PasswordDeriveBytes` 类可以执行这种类型的拉伸，并且允许方便的盐化。其中，`KeyDerivation.Pbkdf2` 提供了最佳的哈希算法：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-60
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '`KeyDerivation.Pbkdf2` requires the NuGet package `Microsoft.AspNetCore.Cryptography.KeyDerivation`.
    Though it’s in the ASP.NET Core namespace, any .NET application can use it.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`KeyDerivation.Pbkdf2` 需要 NuGet 包 `Microsoft.AspNetCore.Cryptography.KeyDerivation`。尽管它位于
    ASP.NET Core 命名空间中，但任何 .NET 应用程序都可以使用它。'
- en: Symmetric Encryption
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对称加密
- en: 'Symmetric encryption uses the same key for encryption as for decryption. The
    .NET BCL provides four symmetric algorithms, of which Rijndael (pronounced “Rhine
    Dahl” or “Rain Doll”) is the premium; the other algorithms are intended mainly
    for compatibility with older applications. Rijndael is both fast and secure and
    has two implementations:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对称加密使用相同的密钥进行加密和解密。.NET BCL 提供了四种对称算法，其中 Rijndael（发音为“Rhine Dahl”或“Rain Doll”）是最优秀的；其他算法主要用于与旧应用程序的兼容性。Rijndael
    既快速又安全，并且有两种实现方式：
- en: The `Rijndael` class
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Rijndael` 类'
- en: The `Aes` class
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Aes` 类'
- en: The two are almost identical, except that `Aes` does not let you weaken the
    cipher by changing the block size. `Aes` is recommended by the CLR’s security
    team.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这两者几乎是相同的，唯一的区别在于 `Aes` 不允许通过更改块大小来削弱密码。CLR 安全团队推荐使用 `Aes`。
- en: '`Rijndael` and `Aes` allow symmetric keys of length 16, 24, or 32 bytes: all
    are currently considered secure. Here’s how to encrypt a series of bytes as they’re
    written to a file, using a 16-byte key:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`Rijndael` 和 `Aes` 允许使用长度为 16、24 或 32 字节的对称密钥：所有这些密钥长度目前都被认为是安全的。以下是如何使用 16
    字节密钥将一系列字节加密并写入文件的方法：'
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following code decrypts the file:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码解密文件：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this example, we made up a key of 16 randomly chosen bytes. If the wrong
    key was used in decryption, `CryptoStream` would throw a `CryptographicException`.
    Catching this exception is the only way to test whether a key is correct.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用了 16 个随机选择的字节来生成密钥。如果在解密时使用了错误的密钥，`CryptoStream` 将抛出 `CryptographicException`。捕获此异常是测试密钥是否正确的唯一方法。
- en: As well as a key, we made up an IV, or *Initialization Vector*. This 16-byte
    sequence forms part of the cipher—much like the key—but is not considered *secret*.
    If you’re transmitting an encrypted message, you would send the IV in plain text
    (perhaps in a message header) and then *change it with every message*. This would
    render each encrypted message unrecognizable from any previous one—even if their
    unencrypted versions were similar or identical.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 除了密钥，我们还制定了一个 IV，或*初始化向量*。这个 16 字节的序列是密码的一部分——类似于密钥——但不被视为*机密*。如果您要传输加密的消息，可以在明文中发送
    IV（可能在消息头中），然后*每条消息都更改它*。这将使每条加密消息与任何先前的消息在外观上都不相似，即使它们的未加密版本相似或相同。
- en: Note
  id: totrans-73
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: If you don’t need—or want—the protection of an IV, you can defeat it by using
    the same 16-byte value for both the key and the IV. Sending multiple messages
    with the same IV, though, weakens the cipher and might even make it possible to
    crack.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不需要——或不想要——IV 的保护，可以通过同时使用相同的 16 字节值作为密钥和 IV 来避免它。然而，使用相同 IV 发送多条消息会削弱密码，并且甚至可能使其被破解。
- en: The cryptography work is divided among the classes. `Aes` is the mathematician;
    it applies the cipher algorithm, along with its `encryptor` and `decryptor` transforms.
    `CryptoStream` is the plumber; it takes care of stream plumbing. You can replace
    `Aes` with a different symmetric algorithm yet still use `CryptoStream`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 密码工作分布在不同的类中。`Aes` 是数学家；它应用密码算法，以及它的 `encryptor` 和 `decryptor` 转换。`CryptoStream`
    是管道工；它负责流的管道。您可以用不同的对称算法替换 `Aes`，但仍然可以使用 `CryptoStream`。
- en: '`CryptoStream` is *bidirectional*, meaning you can read or write to the stream
    depending on whether you choose `CryptoStreamMode.Read` or `CryptoStreamMode.Write`.
    Both encryptors and decryptors are read *and* write savvy, yielding four combinations—the
    choice can have you staring at a blank screen for a while! It can be helpful to
    model reading as “pulling” and writing as “pushing.” If in doubt, start with `Write`
    for encryption and `Read` for decryption; this is often the most natural.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`CryptoStream` 是*双向*的，这意味着您可以根据选择的 `CryptoStreamMode.Read` 或 `CryptoStreamMode.Write`
    从流中读取或写入数据。加密器和解密器都具备读取*和*写入的能力，产生四种组合——这个选择可能会让您盯着空白屏幕发呆一段时间！将读取视为“拉取”，写入视为“推送”可能会有所帮助。如果有疑问，可以从加密时选择
    `Write`，解密时选择 `Read` 开始；这通常是最自然的选择。'
- en: 'To generate a random key or IV, use `RandomNumberGenerator` in `System.Cryptography`.
    The numbers it produces are genuinely unpredictable, or *cryptographically strong*
    (the `System.Random` class does not offer the same guarantee). Here’s an example:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成随机的密钥或 IV，请使用 `System.Cryptography` 中的 `RandomNumberGenerator`。它产生的数字是真正不可预测的，或者*密码学强度*（`System.Random`
    类无法提供相同的保证）。以下是一个例子：
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Or, from .NET 6:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，从 .NET 6 开始：
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If you don’t specify a key and IV, cryptographically strong random values are
    generated automatically. You can query these through the `Aes` object’s `Key`
    and `IV` properties.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有指定密钥和 IV，则会自动生成密码学上强大的随机值。您可以通过 `Aes` 对象的 `Key` 和 `IV` 属性查询这些值。
- en: Encrypting in Memory
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在内存中加密
- en: 'From .NET 6, you can utilize the `EncryptCbc` and `DecryptCbc` methods to shortcut
    the process of encrypting and decrypting byte arrays:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 从 .NET 6 开始，您可以利用 `EncryptCbc` 和 `DecryptCbc` 方法来简化字节数组的加密和解密过程：
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here’s an equivalent that works in all.NET versions:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在所有 .NET 版本中都有效的等效方法：
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here, `CryptoStreamMode.Write` works best for both encryption and decryption,
    since in both cases we’re “pushing” into a fresh memory stream.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`CryptoStreamMode.Write` 在加密和解密时都能很好地工作，因为在这两种情况下，我们都在“推送”到一个新的内存流中。
- en: 'Here are overloads that accept and return strings:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有接受和返回字符串的重载：
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following demonstrates their use:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以下演示了它们的使用：
- en: '[PRE14]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Chaining Encryption Streams
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 链式加密流
- en: '`CryptoStream` is a decorator, meaning that you can chain it with other streams.
    In the following example, we write compressed encrypted text to a file and then
    read it back:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`CryptoStream` 是一个装饰器，意味着您可以将它与其他流链接起来。在下面的示例中，我们将压缩加密文本写入文件，然后再读取回来：'
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: (As a final touch, we make our program asynchronous by calling `WriteLineAsync`
    and `ReadLineAsync` and awaiting the result.)
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: （最后一步，通过调用 `WriteLineAsync` 和 `ReadLineAsync` 使我们的程序异步化，并等待结果。）
- en: In this example, all one-letter variables form part of a chain. The mathematicians—`algorithm`,
    `encryptor`, and `decryptor`—are there to assist `CryptoStream` in the cipher
    work, as illustrated in [Figure 20-1](#chaining_encryption_and_compression_str).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，所有单字母变量都是链的一部分。数学家——`algorithm`、`encryptor` 和 `decryptor`——在密码流的工作中起到了辅助作用，正如
    [图 20-1](#chaining_encryption_and_compression_str) 所示。
- en: Chaining streams in this manner demands little memory, regardless of the ultimate
    stream sizes.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式链接流无论最终流的大小如何，都需要很少的内存。
- en: '![Chaining encryption and compression streams](assets/cn10_2001.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![加密和压缩流的链接](assets/cn10_2001.png)'
- en: Figure 20-1\. Chaining encryption and compression streams
  id: totrans-99
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图20-1\. 加密和压缩流的链接
- en: Disposing Encryption Objects
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处置加密对象
- en: Disposing a `CryptoStream` ensures that its internal cache of data is flushed
    to the underlying stream. Internal caching is necessary for encryption algorithms
    because they process data in blocks, rather than one byte at a time.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 处置`CryptoStream`确保其内部数据缓存刷新到底层流中。内部缓存对于加密算法是必需的，因为它们以块而不是逐字节方式处理数据。
- en: '`CryptoStream` is unusual in that its `Flush` method does nothing. To flush
    a stream (without disposing it) you must call `FlushFinalBlock`. In contrast to
    `Flush`, you can call `FlushFinalBlock` only once, and then no further data can
    be written.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`CryptoStream`的不寻常之处在于其`Flush`方法什么也不做。要刷新流（而不是释放它），必须调用`FlushFinalBlock`。与`Flush`相反，只能调用`FlushFinalBlock`一次，然后不能再写入更多数据。'
- en: We also disposed the mathematicians—the `Aes` algorithm and `ICryptoTransform`
    objects (`encryptor` and `decryptor`). When the Rijndael transforms are disposed,
    they wipe the symmetric key and related data from memory, preventing subsequent
    discovery by other software running on the computer (we’re talking malware). You
    can’t rely on the garbage collector for this job, because it merely flags sections
    of memory as available; it doesn’t write zeros over every byte.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还处理了数学家——`Aes`算法和`ICryptoTransform`对象（`encryptor`和`decryptor`）。当Rijndael变换被处理时，它们会从内存中擦除对称密钥和相关数据，防止其他在计算机上运行的软件（我们说的是恶意软件）后续发现。您不能依赖垃圾收集器来执行此任务，因为它仅仅将内存部分标记为可用；它不会在每个字节上写零。
- en: The easiest way to dispose an `Aes` object outside of a `using` statement is
    to call `Clear`. Its `Dispose` method is hidden via explicit implementation (to
    signal its unusual disposal semantics, whereby it clears memory rather than releasing
    unmanaged resources).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在`using`语句外释放`Aes`对象最简单的方法是调用`Clear`方法。它的`Dispose`方法通过显式实现隐藏（用于表示其不寻常的处理语义，即清除内存而不是释放非托管资源）。
- en: Note
  id: totrans-105
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can further reduce your application’s vulnerability to leaking secrets
    via released memory by doing the following:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过以下方法进一步减少应用程序通过释放的内存泄露秘密的风险：
- en: Avoiding strings for security information (being immutable, a string’s value
    can never be cleared once created)
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免使用字符串存储安全信息（由于不可变性，一旦创建，字符串的值就无法清除）
- en: Overwriting buffers as soon as they’re no longer needed (for instance, by calling
    `Array.Clear` on a byte array)
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦不再需要，立即覆盖缓冲区（例如，在字节数组上调用`Array.Clear`）
- en: Key Management
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 密钥管理
- en: 'Key management is a critical element of security: if your keys are exposed,
    so is your data. You need to consider who should have access to keys and how to
    back them up in case of hardware failure while storing them in a manner that prevents
    unauthorized access.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 密钥管理是安全性的关键因素：如果您的密钥暴露了，那么您的数据也暴露了。您需要考虑谁应该访问密钥，以及如何在硬件故障时进行备份，同时以防止未经授权的访问方式存储它们。
- en: It is inadvisable to hardcode encryption keys because popular tools exist to
    decompile assemblies with little expertise required. A better option (on Windows)
    is to manufacture a random key for each installation, storing it securely with
    Windows Data Protection.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 不建议硬编码加密密钥，因为存在流行的工具可以轻松反编译程序集，无需专业知识。更好的选择（在Windows上）是为每个安装制造一个随机密钥，并安全地存储在Windows数据保护中。
- en: For applications deployed to the cloud, Microsoft Azure and Amazon Web Services
    (AWS) offer key-management systems with additional features that can be useful
    in an enterprise environment, such as audit trails. If you’re encrypting a message
    stream, public-key encryption still provides the best option.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 对于部署到云中的应用程序，Microsoft Azure和Amazon Web Services（AWS）提供了具有额外功能的密钥管理系统，这些功能在企业环境中可能非常有用，例如审计跟踪。如果您正在加密消息流，公钥加密仍然提供了最佳选择。
- en: Public-Key Encryption and Signing
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 公钥加密和签名
- en: Public-key cryptography is *asymmetric*, meaning that encryption and decryption
    use different keys.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 公钥加密是*非对称*的，意味着加密和解密使用不同的密钥。
- en: 'Unlike symmetric encryption, for which any arbitrary series of bytes of appropriate
    length can serve as a key, asymmetric cryptography requires specially crafted
    key pairs. A key pair contains a *public key* and *private key* component that
    work together as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 与对称加密不同，对称加密可以使用任意长度的任意字节序列作为密钥，非对称加密需要专门制作的密钥对。密钥对包含一对*公钥*和*私钥*组件，它们如下配合工作：
- en: The public key encrypts messages.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公钥加密消息。
- en: The private key decrypts messages.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 私钥解密消息。
- en: The party “crafting” a key pair keeps the private key secret while distributing
    the public key freely. A special feature of this type of cryptography is that
    you cannot calculate a private key from a public key. So, if the private key is
    lost, encrypted data cannot be recovered; conversely, if a private key is leaked,
    the encryption system becomes useless.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 负责“制作”密钥对的一方会保持私钥保密，同时自由分发公钥。这种加密方式的特殊特性在于无法从公钥计算出私钥。因此，如果私钥丢失，则无法恢复加密数据；相反，如果私钥泄漏，则加密系统变得无用。
- en: 'A public key handshake allows two computers to communicate securely over a
    public network, with no prior contact and no existing shared secret. To see how
    this works, suppose that computer *Origin* wants to send a confidential message
    to computer *Target*:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 公钥握手允许两台计算机在公共网络上进行安全通信，无需先前联系和现有共享秘密。为了看到其工作原理，假设计算机*Origin*想要将机密消息发送给计算机*Target*：
- en: '*Target* generates a public/private key pair and then sends its public key
    to *Origin*.'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*Target*生成一个公钥/私钥对，然后将其公钥发送给*Origin*。'
- en: '*Origin* encrypts the confidential message using *Target*’s public key and
    then sends it to *Target*.'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*Origin*使用*Target*的公钥加密机密消息，然后将其发送给*Target*。'
- en: '*Target* decrypts the confidential message using its private key.'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*Target*使用其私钥解密机密消息。'
- en: 'An eavesdropper will see the following:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 窃听者将看到以下内容：
- en: '*Target*’s public key'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Target*的公钥'
- en: The secret message, encrypted with *Target*’s public key
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用*Target*的公钥加密的秘密消息
- en: But without *Target*’s private key, the message cannot be decrypted.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 但是没有*Target*的私钥，无法解密消息。
- en: Note
  id: totrans-127
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'This doesn’t prevent against a man-in-the-middle attack: in other words, *Origin*
    cannot know that *Target* isn’t some malicious party. To authenticate the recipient,
    the originator needs to already know the recipient’s public key or be able to
    validate its key through a *digital site certificate*.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这不能防止中间人攻击：换句话说，*Origin*无法知道*Target*是否某些恶意方。要对收件人进行身份验证，发起者需要已知收件人的公钥或能够通过*数字站点证书*验证其密钥。
- en: Because public key encryption is relatively slow and its message size limited,
    the secret message sent from *Origin* to *Target* typically contains a fresh key
    for subsequent *symmetric* encryption. This allows public key encryption to be
    abandoned for the remainder of the session, in favor of a symmetric algorithm
    capable of handling larger messages. This protocol is particularly secure if a
    fresh public/private key pair is generated for each session because no keys then
    need to be stored on either computer.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 因为公钥加密速度较慢且消息大小有限，从*Origin*发送到*Target*的秘密消息通常包含用于随后*对称*加密的新密钥。这允许在会话的其余部分放弃公钥加密，转而采用能够处理更大消息的对称算法。如果每个会话生成一个新的公钥/私钥对，则此协议尤其安全，因为然后无需在任何计算机上存储密钥。
- en: Note
  id: totrans-130
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The public key encryption algorithms rely on the message being smaller than
    the key. This makes them suitable for encrypting only small amounts of data, such
    as a key for subsequent symmetric encryption. If you try to encrypt a message
    much larger than half the key size, the provider will throw an exception.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 公钥加密算法依赖于消息大小小于密钥的情况。这使它们适合仅加密少量数据，例如随后对称加密的密钥。如果尝试加密远大于密钥大小一半的消息，则提供程序将引发异常。
- en: The RSA Class
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RSA类
- en: '.NET provides a number of asymmetric algorithms, of which RSA is the most popular.
    Here’s how to encrypt and decrypt with RSA:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: .NET提供多种非对称算法，其中RSA最为流行。以下是如何使用RSA加密和解密的方法：
- en: '[PRE16]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Because we didn’t specify a public or private key, the cryptographic provider
    automatically generated a key pair, using the default length of 1,024 bits; you
    can request longer keys in increments of eight bytes, through the constructor.
    For security-critical applications, it’s prudent to request 2,048 bits:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们没有指定公钥或私钥，加密提供程序会自动使用默认长度为1,024位生成密钥对；您可以通过构造函数请求更长的密钥，以8字节的增量。对于安全关键的应用程序，建议请求2,048位：
- en: '[PRE17]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Generating a key pair is computationally intensive—taking perhaps 10 ms. For
    this reason, the RSA implementation delays this until a key is actually needed,
    such as when calling `Encrypt`. This gives you the chance to load in an existing
    key—or key pair, should it exist.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 生成密钥对的计算密集型操作可能需要约10毫秒。因此，RSA实现推迟到实际需要密钥时才执行，例如在调用`Encrypt`时。这使您有机会加载现有的密钥或密钥对（如果存在）。
- en: 'The methods `ImportCspBlob` and `ExportCspBlob` load and save keys in byte
    array format. `FromXmlString` and `ToXmlString` do the same job in a string format,
    the string containing an XML fragment. A `bool` flag lets you indicate whether
    to include the private key when saving. Here’s how to manufacture a key pair and
    save it to disk:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`ImportCspBlob`和`ExportCspBlob`以字节数组格式加载和保存密钥。`FromXmlString`和`ToXmlString`以字符串格式执行相同的工作，字符串包含XML片段。布尔标志允许您指示在保存时是否包括私钥。以下是如何生成密钥对并将其保存到磁盘上的示例：
- en: '[PRE18]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Because we didn’t provide existing keys, `ToXmlString` forced the manufacture
    of a fresh key pair (on the first call). In the next example, we read back these
    keys and use them to encrypt and decrypt a message:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们没有提供现有密钥，`ToXmlString`强制生成了一个新的密钥对（在第一次调用时）。在下一个示例中，我们将读取这些密钥并使用它们来加密和解密消息。
- en: '[PRE19]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Digital Signing
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数字签名
- en: 'You also can use public key algorithms to digitally sign messages or documents.
    A signature is like a hash, except that its production requires a private key
    and so cannot be forged. The public key is used to verify the signature. Here’s
    an example:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用公钥算法来对消息或文档进行数字签名。签名类似于哈希，但其生成需要私钥，因此无法伪造。公钥用于验证签名。以下是一个示例：
- en: '[PRE20]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Signing works by first hashing the data and then applying the asymmetric algorithm
    to the resultant hash. Because hashes are of a small fixed size, large documents
    can be signed relatively quickly (public key encryption is much more CPU-intensive
    than hashing). If you want, you can do the hashing yourself and then call `SignHash`
    instead of `SignData`:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 签名的工作方式是首先对数据进行哈希处理，然后应用非对称算法到结果哈希上。由于哈希值是固定大小的小块，因此可以相对快速地对大型文档进行签名（与哈希相比，公钥加密需要更多的CPU资源）。如果愿意，您可以自行进行哈希计算，然后调用`SignHash`而不是`SignData`：
- en: '[PRE21]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '`SignHash` still needs to know what hash algorithm you used; `CryptoConfig.Map​Na⁠meToOID`
    provides this information in the correct format from a friendly name such as “SHA1”.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`SignHash`仍然需要知道您使用的哈希算法；`CryptoConfig.Map​Na⁠meToOID`从友好名称（如“SHA1”）提供此信息，以正确的格式提供。'
- en: '`RSACryptoServiceProvider` produces signatures whose size matches that of the
    key. Currently, no mainstream algorithm produces secure signatures significantly
    smaller than 128 bytes (suitable for product activation codes, for instance).'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`RSACryptoServiceProvider`生成的签名大小与密钥大小相匹配。目前，没有主流算法生成比128字节更小的安全签名（适用于产品激活码等）。'
- en: Note
  id: totrans-149
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: For signing to be effective, the recipient must know, and trust, the sender’s
    public key. This can happen via prior communication, preconfiguration, or a site
    certificate. A site certificate is an electronic record of the originator’s public
    key and name—itself signed by an independent trusted authority. The namespace
    `System.Security.Cryptography.X509Certificates` defines the types for working
    with certificates.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 为了签名有效，接收者必须知道并信任发送者的公钥。这可以通过先前的通信、预配置或网站证书来实现。网站证书是发起者公钥和名称的电子记录，由独立可信的机构签名。命名空间`System.Security.Cryptography.X509Certificates`定义了用于处理证书的类型。
