- en: 'Unity Lab #4: User Interfaces'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last Unity Lab you started to build a game, using a prefab to crate GameObject
    instances that appear at random points in your game’s 3D space and fly in circles.
    This Unity Lab picks up where the last one left off, allowing you to apply what
    you’ve learned about interfaces in C# and more.
  prefs: []
  type: TYPE_NORMAL
- en: Your program so far is an interesting visual simulation. The goal of this Unity
    Lab is to **finish building the game**. It starts off with a score of zero. Billiard
    balls will start to appear and fly around the screen. When the player clicks on
    a ball, the score goes up by 1 and the ball disappears. More and more balls appear;
    once 15 balls are flying around the screen, the game ends. For your game to work,
    your players need a way to start it and to play again once the game is over, and
    they’ll want to see their score as they click on the balls. So you’ll add a **user
    interface** that displays the score in the corner of the screen, and shows a button
    to start a new game.
  prefs: []
  type: TYPE_NORMAL
- en: Add a score that goes up when the player clicks a ball
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You’ve got a really interesting simulation. Now it’s time to turn it into a
    game. **Add a new field** to the GameController class to keep track of the score—you
    can add it just below the OneBallPrefab field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, **add a method called ClickedOnBall to the GameController class**. This
    method will get called every time the player clicks on a ball:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Unity makes it really easy for your GameObjects to respond to mouse clicks
    and other input. If you add a method called OnMouseDown to a script, Unity will
    call that method any time the GameObject it’s attached to is clicked. **Add this
    method to the** **OneBallBehaviour** **class**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The first line of the OnMouseDown method gets the instance of the GameController
    class, and the second line calls its ClickedOnBall method, which increments its
    Score field.
  prefs: []
  type: TYPE_NORMAL
- en: Now run your game. Click on Main Camera in the hierarchy and watch its Game
    Controller (Script) component in the Inspector. Click on some of the rotating
    balls—they’ll disappear and the Score will go up.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/454fig01.png)'
  prefs: []
  type: TYPE_IMG
- en: Add two different modes to your game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Start up your favorite game. Do you immediately get dropped into the action?
    Probably not—you’re probably looking at a start menu. Some games let you pause
    the action to look at a map. Many games let you switch between moving the player
    and working with an inventory, or show an animation while the player is dying
    that can’t be interrupted. These are all examples of **game modes**.
  prefs: []
  type: TYPE_NORMAL
- en: '**You’ll add two modes to your game. You already have the “running” mode, so
    now you just need to add a “game over” mode.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Let’s add two different modes to your billiard ball game:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mode #1: The game is running.** Balls are being added to the scene, and clicking
    on them makes them disappear and the score go up.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mode #2: The game is over.** Balls are no longer getting added to the scene,
    clicking on them doesn’t do anything, and a “Game over” banner is displayed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Images](assets/455fig01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here’s how you’ll add the two game modes to your game:'
  prefs: []
  type: TYPE_NORMAL
- en: '***Make GameController.AddABall pay attention to the game mode.***'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your new and improved AddABall method will check if the game is over, and will
    only instantiate a new OneBall prefab if the game is not over.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '***Make OneBallBehaviour.OnMouseDown only work when the game is running.***'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the game is over, we want the game to stop responding to mouse clicks.
    The player should just see the balls that were already added continue to circle
    until the game restarts.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '***Make GameController.AddABall end the game when there are too many balls.***'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AddABall also increments its NumberOfBalls counter, so it goes up by 1 every
    time a ball is added. If the value reaches MaximumBalls, it sets GameOver to true
    to end the game.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**In this lab, you’re building this game in parts, and making changes along
    the way. You can download the code for each part from the book’s GitHub repository:
    [https://github.com/head-first-csharp/fourth-edition](https://github.com/head-first-csharp/fourth-edition).**'
  prefs: []
  type: TYPE_NORMAL
- en: Add game mode to your game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modify your GameController and OneBallBehaviour classes to **add modes to your
    game** by using a Boolean field to keep track of whether or not the game is over.
  prefs: []
  type: TYPE_NORMAL
- en: '***Make GameController.AddABall pay attention to the game mode.***'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We want the GameController to know what mode the game is in. When we need to
    keep track of what an object knows, we use fields. Since there are two modes—running
    and game over—we can use a Boolean field to keep track of the mode. **Add the
    GameOver field** to your GameController class:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The game should only add new balls to the scene if the game is running. Modify
    the AddABall method to add an `if` statement that only calls Instantiate if GameOver
    is not true:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now you can test it out. Start your game, then **click on Main Camera** in the
    Hierarchy window.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Images](assets/pg456-01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Set the GameOver field by unchecking the box in the Script component. The game
    should stop adding balls until you check the box again.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '***Make OneBallBehaviour.OnMouseDown only work when the game is running.***'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your OnMouseDown method already calls the GameController’s ClickedOnBall method.
    Now **modify OnMouseDown in OneBallBehaviour** to use the GameController’s GameOver
    field as well:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run your game again and test that balls disappear and the score goes up only
    when the game is not over.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '***Make GameController.AddABall end the game when there are too many balls.***'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The game needs to keep track of the number of balls in the scene. We’ll do
    this by **adding two fields** to the GameController class to keep track of the
    current number of balls and the maximum number of balls:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Every time the player clicks on a ball, the ball’s OneBallBehaviour script
    calls GameController.ClickedOnBall to increment (add 1 to) the score. Let’s also
    decrement (subtract 1 from) NumberOfBalls:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now **modify the AddABall** method so that it only adds balls if the game is
    running, and ends the game if there are too many balls in the scene:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Images](assets/457fig024.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now test your game one more time by running it and then clicking on Main Camera
    in the Hierarchy window. The game should run normally, but as soon as the NumberOfBalls
    field is equal to the MaximumBalls field, the AddABall method sets its GameOver
    field to true and ends the game.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Images](assets/pg457-01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Once that happens, clicking on the balls doesn’t do anything because OneBallBehaviour.OnMouseDown
    checks the GameOver field and only increments the score and destroys the ball
    if GameOver is false.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Your game needs to keep track of its game mode. Fields are a great way to
    do that.**'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Add a UI to your game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Almost any game you can think of—from Pac Man to Super Mario Brothers to Grand
    Theft Auto 5 to Minecraft—features a **user interface (or UI)**. Some games, like
    Pac Man, have a very simple UI that just shows the score, high score, lives left,
    and current level. Many games feature an intricate UI incorporated into the game’s
    mechanics (like a weapon wheel that lets the player quickly switch between weapons).
    Let’s add a UI to your game.
  prefs: []
  type: TYPE_NORMAL
- en: '**Choose *UI >> Text* from the GameObject menu** to add a 2D Text GameObject
    to your game’s UI. This adds a Canvas to the Hierarchy, and a Text under that
    Canvas:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/458fig01.png)'
  prefs: []
  type: TYPE_IMG
- en: Double-click on Canvas in the Hierarchy window to focus on it. It’s a 2-D rectangle.
    Click on its Move Gizmo and drag it around the scene. It won’t move! The Canvas
    that was just added will always be displayed, scaled to the size of the screen
    and in front of everything else in the game.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/458fig02.png)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Did you notice an EventSystem in the Hierarchy? Unity automatically added it
    when you created the UI. It manages mouse, keyboard, and other inputs and sends
    them back to GameObjects—and it does all of that automatically, so you won’t need
    to work directly with it.
  prefs: []
  type: TYPE_NORMAL
- en: Then double-click on Text to focus on it—the editor will zoom in, but the default
    text (“New Text”) will be backward because the Main Camera is pointing at the
    back of the Canvas.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'A Canvas is a two-dimensional GameObject that lets you lay out your game’s
    UI. Your game’s Canvas will have two GameObjects nested under it: the Text GameObject
    that you just added will be in the upper-right corner to display the score, and
    there’s a Button GameObject to let the player start a new game.'
  prefs: []
  type: TYPE_NORMAL
- en: Use the 2D view to work with the Canvas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **2D button** at the top of the Scene window toggles 2D view on and off:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/458fig03.png)'
  prefs: []
  type: TYPE_IMG
- en: Click the 2D view—the editor flips around its view to shows the canvas head-on.
    **Double-click on Text** in the Hierarchy window to zoom in on it.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/458fig04.png)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Use the mouse wheel to zoom in and out in 2D view
  prefs: []
  type: TYPE_NORMAL
- en: You can **click the 2D button to switch between 2D and 3D**. Click it again
    to return to the 3D view.
  prefs: []
  type: TYPE_NORMAL
- en: Set up the Text that will display the score in the UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your game’s UI will feature one Text GameObject and one Button. Each of those
    GameObjects will be **anchored** to a different part of the UI. For example, the
    Text GameObject that displays the score will show up in the upper-right corner
    of the screen (no matter how big or small the screen is).
  prefs: []
  type: TYPE_NORMAL
- en: Click on Text in the Hierarchy window to select it, then look at the Rect Transform
    component. We want the Text in the upper-right corner, so **click the Anchors
    box** in the Rect Transform panel.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/459fig001.png)'
  prefs: []
  type: TYPE_IMG
- en: The Anchor Presets window lets you anchor your UI GameObjects to various parts
    of the Canvas. **Hold down Alt and Shift** (or Option+Shift on a Mac) and **choose
    the top right anchor preset**. Click the same button you used to bring up the
    Anchor Presets window. The Text is now in the upper-right corner of the Canvas—double-click
    on it again to zoom into it.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/459fig01.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s add a little space above and to the right of the Text. Go back to the
    Rect Transform panel and **set both Pos X and Pos Y to –10** to position the text
    10 units to the left and 10 down from the top-right corner. Then **set the Alignment
    on the Text component to right**, and use the box at the top of the Inspector
    to **change the GameObject’s name to** `**Score**`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/459fig02.png)'
  prefs: []
  type: TYPE_IMG
- en: Your new Text should now show up in the Hierarchy window with the name Score.
    It should now be right-aligned, with a small gap between the edge of the Text
    and the edge of the Canvas.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/459fig03.png)'
  prefs: []
  type: TYPE_IMG
- en: Add a button that calls a method to start the game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When the game is in its “game over” mode, it will display a button labeled
    Play Again that calls a method to restart the game. **Add an empty StartGame method**
    to your GameController class (we’ll add its code later):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Click on Canvas in the Hierarchy window** to focus on it. Then **choose UI
    >> Button** from the GameObject menu to add a Button. Since you’re already focused
    on the Canvas, the Unity editor will add the new Button and anchor it to the center
    of the Canvas. Did you notice that Button has a triangle next to it in the Hierarchy?
    Expand it—there’s a TextGameObject nested under it. Click on it and set its text
    to `Play Again`.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/460fig01.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that the Button is set up, we just need to make it call the StartGame method
    on the GameController object attached to the Main Camera. A UI button is ***just
    a GameObject with a Button component***, and you can use its On Click () box in
    the Inspector to hook it up to an event handler method. Click the ![Images](assets/460fig02.png)
    button at the bottom of the On Click () box to add an event handler, then **drag
    Main Camera onto the None (Object) box**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/460fig03.png)'
  prefs: []
  type: TYPE_IMG
- en: Now the Button knows which GameObject to use for the event handler. Click the
    ![Images](assets/460fig04.png) dropdown and choose **GameController >> StartGame**.
    Now when the player presses the button, it will call the StartGame method on the
    GameController object hooked up to the Main Camera.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/460fig05.png)'
  prefs: []
  type: TYPE_IMG
- en: Make the Play Again button and Score Text work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Your game’s UI will work like this:'
  prefs: []
  type: TYPE_NORMAL
- en: The game starts in the game over mode.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clicking the Play Again button starts the game.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text in the upper-right corner of the screen displays the current score.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You’ll be using the Text and Button classes in your code. They’re in the UnityEngine.UI
    namespace, so **add this** `**using statement**` to the top of your GameController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can add Text and Button fields to your GameController (just above the
    OneBallPrefab field):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**Click on Main Camera** in the Hierarchy window. **Drag the Text GameObject**
    out of the Hierarchy and ***onto*** the Score Text field in the Script component,
    **then drag the Button GameObject** *onto* the Play Again Button field.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/461fig01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Go back to your GameController code and **set the GameController field’s default
    value to true**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Change this from false to true.
  prefs: []
  type: TYPE_NORMAL
- en: Now go back to Unity and check the Script component in the Inspector.
  prefs: []
  type: TYPE_NORMAL
- en: '***Hold on, something’s wrong!***'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/461fig02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Unity editor still shows the Game Over checkbox as unchecked—it didn’t
    change the field value. Make sure to check the box so your game starts in the
    game over mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/461fig03.png)'
  prefs: []
  type: TYPE_IMG
- en: Now the game will start in the game over mode, and the player can click the
    Play Again button to start playing.
  prefs: []
  type: TYPE_NORMAL
- en: Finish the code for the game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The GameController object attached to the Main Camera keeps track of the score
    in its Score field. **Add an Update method to the GameController class** to update
    the Score Text in the UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, **modify your GameController.AddABall method** to enable the Play Again
    button when it ends the game:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Every GameObject has a property called gameObject that lets you manipulate
    it. You’ll use its SetActive method to make the Play Again button visible or invisible.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'There’s just one more thing to do: get your StartGame method working so that
    it starts the game. It needs to do a few things: destroy any balls that are currently
    flying around the scene, disable the Play Again button, reset the score and number
    of balls, and set the mode to “running.” You already know how to do most of those
    things! You just need to be able to find the balls in order to destroy them. **Click
    on the OneBall prefab in the Project window and set its tag**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](assets/462fig01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now you have everything in place to fill in your StartGame method. It uses
    a `foreach` loop to find and destroy any balls left over from the previous game,
    hides the button, resets the score and number of balls, and changes the game mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now run your game. It starts in “game over” mode. Press the button to start
    the game. The score goes up each time you click on a ball. As soon as the 15th
    ball is instantiated, the game ends and the Play Again button appears again.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Did you notice that you *didn’t have to make any changes to the GameController
    class?* That’s because you didn’t make changes to the things that GameController
    does, like managing the UI or the game mode. If you can make a change by modifying
    one class but not touching others, that can be a sign that you designed your classes
    well.**'
  prefs: []
  type: TYPE_NORMAL
- en: Get creative!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Can you find ways to improve your game and get practice writing code? Here
    are some ideas:'
  prefs: []
  type: TYPE_NORMAL
- en: Is the game too easy? Too hard? Try changing the parameters that you pass to
    InvokeRepeating in your GameController.Start method. Try making them fields. Play
    around with the MaximumBalls value, too. Small changes in these values can make
    a big difference in gameplay.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We gave you texture maps for all of the billiard balls. Try adding different
    balls that have different behaviors. Use the scale to make some balls bigger or
    smaller, and change their parameters to make them go faster or slower, or move
    differently.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can you figure out how to make a “shooting star” ball that flies off really
    quickly in one direction and is worth a lot if the player clicks on it? How about
    making a “sudden death” 8 ball that immediately ends the game?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modify your GameController.ClickedOnBall method to take a score parameter instead
    of incrementing the Score field and add the value that you pass. Try giving different
    values to different balls.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***If you change fields in the OneBallBehaviour script, don’t forget to reset
    the Script component of the OneBall prefab! Otherwise, it will remember the old
    values.***'
  prefs: []
  type: TYPE_NORMAL
- en: '**The more practice you get writing C# code, the easier it will get. Getting
    creative with your game is a great opportunity to get some practice!**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
