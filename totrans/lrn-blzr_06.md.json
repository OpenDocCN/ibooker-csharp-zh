["```cs\nnamespace Learning.Blazor.Localization;\n\npublic sealed class CoalescingStringLocalizer<T> ![1](assets/1.png)\n{\n    private readonly IStringLocalizer<T> _localizer = null!;\n    private readonly IStringLocalizer<SharedResource> _sharedLocalizer = null!;\n\n    public CoalescingStringLocalizer( ![2](assets/2.png)\n        IStringLocalizer<T> localizer,\n        IStringLocalizer<SharedResource> sharedLocalizer) =>\n        (_localizer, _sharedLocalizer) = (localizer, sharedLocalizer);\n\n    /// <summary>\n    /// Gets the localized content for the current sub-component,\n    /// relying on the contextually appropriate\n    /// <see cref=\"IStringLocalizer{T}\"/> implementation.\n    /// </summary>\n    internal LocalizedString this[string name] ![3](assets/3.png)\n        => _localizer[name]\n        ?? _sharedLocalizer[name]\n        ?? new(name, name, false);\n\n    /// <summary>\n    /// Gets the localized content for the current sub-component,\n    /// relying on the contextually appropriate\n    /// <see cref=\"IStringLocalizer{T}\"/> implementation.\n    /// </summary>\n    internal LocalizedString this[string name, params object[] arguments] ![4](assets/4.png)\n        => _localizer[name, arguments]\n        ?? _sharedLocalizer[name, arguments]\n        ?? new(name, name, false);\n}\n```", "```cs\n@inherits LocalizableComponentBase<LanguageSelectionComponent>\n\n<ErrorBoundary> ![1](assets/1.png)\n    <ChildContent>\n    <span class=\"navbar-item\">\n        <button class=\"button level-item is-rounded is-warning\"\n            title=@Localizer[\"Language\"] @onclick=ShowAsync>\n            <span class=\"icon\">\n                <i class=\"fas fa-language\"></i>\n            </span>\n        </button>\n    </span>\n    </ChildContent>\n    <ErrorContent>\n    <span class=\"navbar-item\">\n        <button class=\"button level-item is-rounded is-warning\"\n            disabled title=@Localizer[\"Language\"]>\n            <span class=\"icon\">\n                <i class=\"fas fa-language\"></i>\n            </span>\n        </button>\n    </span>\n    </ErrorContent>\n</ErrorBoundary>\n\n<ModalComponent @ref=\"_modal\"> ![2](assets/2.png)\n    <TitleContent>\n        <span class=\"icon pr-2\">\n            <i class=\"fas fa-cogs\"></i>\n        </span>\n        <span>@Localizer[\"ChangeLanguage\"]</span>\n    </TitleContent>\n\n    <BodyContent> ![3](assets/3.png)\n        <form>\n            <div class=\"field\">\n                <p class=\"control has-icons-left\">\n                    <span class=\"select is-medium is-fullwidth\">\n                        <select id=\"languages\" class=\"has-dotnet-scrollbar\"\n                            @bind=_selectedCulture> @if (_supportedCultures?.Any() ?? false)\n                    {\n                        @foreach (var kvp\n                            in _supportedCultures.OrderBy(c => c.Key.Name))\n                        {\n                            var (culture, _) = kvp; <option selected=\"@(lcid == culture.LCID)\"\n                                    value=\"@culture\"> @(ToDisplayName(kvp)) </option> }\n                    } </select>\n                    </span>\n                    <span class=\"icon is-small is-left\">\n                        <i class=\"fas fa-globe\"></i>\n                    </span>\n                </p>\n            </div>\n        </form>\n    </BodyContent>\n\n    <ButtonContent> ![4](assets/4.png)\n        <div class=\"buttons are-large\">\n            <button class=\"button is-success\"\n                @onclick=\"ConfirmAsync\">\n                <span class=\"icon\">\n                    <i class=\"fas fa-check\"></i>\n                </span>\n                <span>@Localizer[\"Okay\"]</span>\n            </button>\n            <button class=\"button is-danger\"\n                @onclick=@(() => _modal.CancelAsync())> <span class=\"icon\">\n                    <i class=\"fas fa-times\"></i>\n                </span>\n                <span>@Localizer[\"Cancel\"]</span>\n            </button>\n        </div>\n    </ButtonContent>\n</ModalComponent>\n```", "```cs\nnamespace Learning.Blazor.Components\n{\n    public partial class LanguageSelectionComponent\n    {\n        private IDictionary<CultureInfo, AzureCulture>? _supportedCultures; ![1](assets/1.png)\n        private CultureInfo _selectedCulture = null!;\n        private ModalComponent _modal = null!;\n [Inject] HttpClient Http { get; set; } = null!;\n [Inject] public NavigationManager Navigation { get; set; } = null!;\n\n        protected override async Task OnInitializedAsync() ![2](assets/2.png)\n        {\n            var azureCultures =\n                await Http.GetFromJsonAsync<AzureTranslationCultures>(\n                    \"api/cultures/all\",\n                    DefaultJsonSerialization.Options);\n\n            _supportedCultures =\n                Culture.MapClientSupportedCultures(azureCultures?.Translation);\n        }\n\n        private static string ToDisplayName( ![3](assets/3.png)\n            KeyValuePair<CultureInfo, AzureCulture> culturePair)\n        {\n            var (culture, azureCulture) = culturePair;\n            return $\"{azureCulture.Name} ({culture.Name})\";\n        }\n\n        private async Task ShowAsync() => await _modal.ShowAsync(); ![4](assets/4.png)\n\n        private async Task ConfirmAsync()\n        {\n            var forceRefresh =\n                _selectedCulture is not null &&\n                _selectedCulture != Culture.CurrentCulture;\n\n            if (forceRefresh)\n            {\n                JavaScript.SetItem(\n                    StorageKeys.ClientCulture, _selectedCulture!.Name);\n            }\n\n            await _modal.ConfirmAsync();\n\n            if (forceRefresh)\n            {\n                Navigation.NavigateTo(Navigation.Uri, forceLoad: true);\n            }\n        }\n    }\n}\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<root>\n    <!-- XML schema omitted for brevity -->\n\n    <data name=\"ChangeLanguage\" xml:space=\"preserve\">\n        <value>Change the current language?</value>\n    </data>\n    <data name=\"Language\" xml:space=\"preserve\">\n        <value>Language</value>\n    </data>\n</root>\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<root>\n    <!-- XML schema omitted for brevity -->\n\n    <data name=\"ChangeLanguage\" xml:space=\"preserve\">\n        <value>Â¿Cambiar el idioma actual?</value>\n    </data>\n    <data name=\"Language\" xml:space=\"preserve\">\n        <value>Idioma</value>\n    </data>\n</root>\n```", "```cs\nname: Azure Translation ![1](assets/1.png)\n\non:\n  push:\n    branches: [ main ]\n    paths:\n    - '**.en.resx'\n    - '**.razor.en.resx'\n\nenv:\n  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\njobs:\n  translate:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Resource translator ![2](assets/2.png)\n        id: translator\n        uses: IEvangelist/resource-translator@main\n        with:\n          subscriptionKey: ${{ secrets.AZURE_TRANSLATOR_SUBSCRIPTION_KEY }}\n          endpoint: ${{ secrets.AZURE_TRANSLATOR_ENDPOINT }}\n          region: ${{ secrets.AZURE_TRANSLATOR_REGION }}\n          sourceLocale: 'en'\n          toLocales: |\n          '[\"af\",\"ar\",\"az\",\"bg\",\"ca\",\"cs\",\"da\",\"de\",\"el\",\"fa\",' +\n          '\"fi\",\"fr\",\"he\",\"hi\",\"hr\",\"hu\",\"id\",\"it\",\"ja\",\"ko\",' +\n          '\"la\",\"lt\",\"mk\",\"nb\",\"nl\",\"pl\",\"pt\",\"ro\",\"ru\",\"sv\",' +\n          '\"sk\",\"sl\",\"es\",\"sr-Cyrl\",\"sr-Latn\",\"th\",\"tr\",\"uk\",' +\n          '\"vi\",\"zh-Hans\",\"zh-Hant\"]'\n\n      - name: Create pull request ![3](assets/3.png)\n        uses: peter-evans/create-pull-request@v3.4.1\n        if: ${{ steps.translator.outputs.has-new-translations }} == 'true'\n        with:\n          title: '${{ steps.translator.outputs.summary-title }}'\n          body: '${{ steps.translator.outputs.summary-details }}'\n```", "```cs\n@page \"/pwned\"\n@attribute [Authorize]\n@inherits LocalizableComponentBase<Pwned>\n\n<PageTitle> ![1](assets/1.png) Pwned </PageTitle>\n\n<div class=\"tile is-ancestor\">\n    <div class=\"tile is-vertical is-centered is-7\">\n        <div class=\"tile\">\n            <div class=\"tile is-parent is-clickable\"\n                @onclick=@NavigateToBreaches>\n                <article class=\"tile is-child notification is-warning\">\n                    <p class=\"title\"><span class=\"is-emoji\">&#x1F92C;</span> @Localizer[\"Breaches\"] ![2](assets/2.png)\n                    </p>\n                </article>\n            </div>\n            <div class=\"tile is-parent is-clickable\"\n                @onclick=@NavigateToPasswords>\n                <article class=\"tile is-child notification is-danger\">\n                    <p class=\"title\"><span class=\"is-emoji\">&#128273;</span> @Localizer[\"Passwords\"] ![3](assets/3.png)\n                    </p>\n                </article>\n            </div>\n        </div>\n    </div>\n</div>\n```", "```cs\nnamespace Learning.Blazor.Pages\n{\n    public partial class Pwned\n    {\n [Inject]\n        public NavigationManager Navigation { get; set; } = null!; ![1](assets/1.png)\n\n        private void NavigateToBreaches() => ![2](assets/2.png)\n            Navigation.NavigateTo(\"pwned/breaches\");\n\n        private void NavigateToPasswords() =>\n            Navigation.NavigateTo(\"pwned/passwords\");\n    }\n}\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<root>\n  <!--\n    Schema omitted for brevity...\n  -->\n\n  <data name=\"Breaches\" xml:space=\"preserve\"> ![1](assets/1.png)\n    <value>Breaches</value>\n  </data>\n  <data name=\"Passwords\" xml:space=\"preserve\"> ![2](assets/2.png)\n    <value>Passwords</value>\n  </data>\n</root>\n```", "```cs\n<InputText @bind-Value=_model.EmailAddress\n    @ref=_emailInput class=\"input is-large\"\n    autocomplete=\"hidden\"\n    placeholder=@Localizer[\"EmailAddress\"] />\n```", "```cs\n<a class=\"panel-block is-size-5\" disabled>\n    <span class=\"panel-icon\">\n        <i class=\"fas fa-check\" aria-hidden=\"true\"></i>\n    </span>\n    @Localizer[\"NoBreachesFormat\", _model.EmailAddress!]\n</a>\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<root>\n  <!--\n Schema omitted for brevity...\n -->\n  <data name=\"Breaches\" xml:space=\"preserve\">\n    <value>Breaches</value>\n  </data>\n  <data name=\"EmailAddress\" xml:space=\"preserve\">\n    <value>Email address</value>\n  </data>\n  <data name=\"Filter\" xml:space=\"preserve\">\n    <value>Apply filter</value>\n  </data>\n  <data name=\"InvalidEmailAddress\" xml:space=\"preserve\">\n    <value>This email is invalid</value>\n  </data>\n  <data name=\"NoBreachesFormat\" xml:space=\"preserve\">\n    <value>No breaches found for {0}.</value>\n  </data>\n</root>\n```", "```cs\n<div class=\"field has-addons\">\n    <p class=\"is-fullwidth control has-icons-left @(loadingClass)\">\n        <InputText id=\"password\" @ref=_passwordInput\n            type=\"password\" autocomplete=\"hidden\"\n            @bind-Value=_model.PlainTextPassword\n            class=\"input is-large\"\n            DisplayName=@Localizer[\"Password\"] ![1](assets/1.png)\n            placeholder=@Localizer[\"Password\"] />\n        <span class=\"icon is-small is-left\">\n            <i class=\"fas fa-key\"></i>\n        </span>\n    </p>\n    <div class=\"control\">\n        <button type=\"submit\" disabled=\"@(_isFormInvalid)\"\n                class=\"button is-danger is-large @(loadingClass)\">\n            <span class=\"icon\">\n                <i class=\"fas fa-question\"></i>\n            </span>\n            <span>pwned</span>\n        </button>\n    </div>\n</div>\n```", "```cs\n<article class=\"panel is-info\">\n    <p class=\"panel-heading has-text-left\">\n        <span> @Localizer[\"Results\"] ![1](assets/1.png)\n        </span>\n        <span class=\"is-pulled-right\"> @if (_pwnedPassword?.IsPwned ?? false) ![2](assets/2.png) { <span class=\"field is-grouped is-grouped-multiline\">\n                    <span class=\"control\">\n                        <span class=\"tags are-medium has-addons\">\n                            <span class=\"tag is-danger\">pwned</span>\n                            <span class=\"tag is-dark\"> @(_pwnedPassword.PwnedCount.ToString( ![3](assets/3.png) \"N0\", Culture.CurrentCulture)) </span>\n                        </span>\n                    </span>\n                    <span class=\"control\">\n                        <span class=\"tags is-clickable\n                            are-medium has-addons\" @onclick=Reset>\n                            <span class=\"tag is-primary\">reset</span>\n                            <span class=\"tag is-dark\">\n                                <i class=\"fas fa-redo-alt\"\n                                    aria-hidden=\"true\">\n                                </i>\n                            </span>\n                        </span>\n                    </span>\n                </span> } </span>\n    </p>\n\n    <!-- The remaining markup is discussed later -->\n</article>\n```", "```cs\n@if (_pwnedPassword?.IsPwned ?? false)\n{ <a class=\"panel-block is-size-5\">\n        <span class=\"panel-icon\">\n            <i class=\"fas has-text-danger\n                fa-exclamation-circle\" aria-hidden=\"true\">\n            </i>\n        </span> @Localizer[\"OhNoFormat\", _pwnedPassword.PwnedCount] ![1](assets/1.png)\n    </a> }\nelse if (_state is ComponentState.Loaded)\n{ <a class=\"panel-block is-size-5\" disabled>\n        <span class=\"panel-icon\">\n            <i class=\"fas has-text-success\n                fa-check\" aria-hidden=\"true\"></i>\n        </span> @Localizer[\"NotPwned\"] ![2](assets/2.png)\n    </a> }\nelse\n{ <a class=\"panel-block is-size-5\" disabled>\n        <span class=\"panel-icon\">\n            <i class=\"fas fa-question-circle\"\n                aria-hidden=\"true\"></i>\n        </span> @Localizer[\"EnterPassword\"] ![3](assets/3.png)\n    </a> }\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<root>\n  <!--\n Schema omitted for brevity...\n -->\n  <data name=\"EnterPassword\" xml:space=\"preserve\">\n    <value>Please enter a password to check if it's been \"pwned\".</value>\n  </data>\n  <data name=\"NotPwned\" xml:space=\"preserve\">\n    <value>Great news, this password has not been \"pwned\"!</value>\n  </data>\n  <data name=\"OhNoFormat\" xml:space=\"preserve\">\n    <value>Sorry, this password has been \"pwned\" {0:N0} times!</value>\n  </data>\n  <data name=\"Password\" xml:space=\"preserve\">\n    <value>Password</value>\n  </data>\n  <data name=\"Passwords\" xml:space=\"preserve\">\n    <value>Passwords</value>\n  </data>\n  <data name=\"Results\" xml:space=\"preserve\">\n    <value>Results</value>\n  </data>\n</root>\n```"]