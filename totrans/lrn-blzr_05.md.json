["```cs\nnamespace Learning.Blazor.Handlers;\n\npublic sealed class ApiAccessAuthorizationMessageHandler ![1](assets/1.png)\n    : AuthorizationMessageHandler\n{\n    public ApiAccessAuthorizationMessageHandler( ![2](assets/2.png)\n        IAccessTokenProvider provider,\n        NavigationManager navigation,      ![3](assets/3.png)\n        IOptions<WebApiOptions> options) : base(provider, navigation) =>\n        ConfigureHandler(\n            authorizedUrls: new[]\n            {\n                options.Value.WebApiServerUrl,\n                options.Value.PwnedWebApiServerUrl,\n                \"https://learningblazor.b2clogin.com\"\n            },\n            scopes: new[] { AzureAuthenticationTenant.ScopeUrl }); ![4](assets/4.png)\n}\n```", "```cs\nnamespace Learning.Blazor;\n\nstatic class AzureAuthenticationTenant\n{\n    const string TenantHost =\n        \"https://learningblazor.onmicrosoft.com\";\n\n    const string TenantPublicAppId =\n        \"ee8868e7-73ad-41f1-88b4-dc698429c8d4\";\n\n    /// <summary>\n    /// Gets a formatted string value\n    /// that represents the scope URL:\n    /// <c>{tenant-host}/{app-id}/User.ApiAccess</c>.\n    /// </summary>\n    internal const string ScopeUrl =\n        $\"{TenantHost}/{TenantPublicAppId}/User.ApiAccess\";\n}\n```", "```cs\n@page \"/authentication/{action}\"\n@inherits LocalizableComponentBase<Authentication>\n\n<div class=\"is-size-3\">\n    <RemoteAuthenticatorView ![1](assets/1.png)\n        Action=@Action\n        LogOut=@LocalizedLogOutFragment\n        LogOutSucceeded=@LocalizedLoggedOutFragment\n        LogOutFailed=@LocalizedLogOutFailedFragment\n        LogInFailed=@LocalizedLogInFailedFragment>\n\n        <LoggingIn> ![2](assets/2.png)\n            <LoadingIndicator Message=@Localizer[\"CheckingLoginState\"]\n                              HideLogo=\"true\" />\n        </LoggingIn>\n        <CompletingLogOut>\n            <LoadingIndicator Message=@Localizer[\"ProcessingLogoutCallback\"]\n                              HideLogo=\"true\" />\n        </CompletingLogOut>\n        <CompletingLoggingIn>\n            <LoadingIndicator Message=@Localizer[\"CompletingLogin\"]\n                              HideLogo=\"true\" />\n        </CompletingLoggingIn>\n\n    </RemoteAuthenticatorView>\n</div>\n```", "```cs\nusing Microsoft.AspNetCore.Components.Rendering; ![1](assets/1.png)\n\nnamespace Learning.Blazor.Pages\n{\n    public sealed partial class Authentication ![2](assets/2.png)\n    {\n [Parameter] public string? Action { get; set; } = null!;\n\n        private void LocalizedLogOutFragment( ![3](assets/3.png)\n            RenderTreeBuilder builder) =>\n            ParagraphElementWithLocalizedContent(\n                builder, Localizer, \"ProcessingLogout\");\n\n        private void LocalizedLoggedOutFragment(\n            RenderTreeBuilder builder) =>\n            ParagraphElementWithLocalizedContent(\n                builder, Localizer, \"YouAreLoggedOut\");\n\n        private RenderFragment LocalizedLogInFailedFragment( ![4](assets/4.png)\n            string errorMessage) =>\n            ParagraphElementWithLocalizedErrorContent(\n                errorMessage, Localizer, \"ErrorLoggingInFormat\");\n\n        private RenderFragment LocalizedLogOutFailedFragment(\n            string errorMessage) =>\n            ParagraphElementWithLocalizedErrorContent(\n                errorMessage, Localizer, \"ErrorLoggingOutFormat\");\n\n        private static void ParagraphElementWithLocalizedContent( ![5](assets/5.png)\n            RenderTreeBuilder builder,\n            CoalescingStringLocalizer<Authentication> localizer,\n            string resourceKey)\n        {\n            builder.OpenElement(0, \"p\");\n            builder.AddContent(1, localizer[resourceKey]);\n            builder.CloseElement();\n        }\n\n        private static RenderFragment ParagraphElementWithLocalizedErrorContent(\n            string errorMessage, ![6](assets/6.png)\n            CoalescingStringLocalizer<Authentication> localizer,\n            string resourceKey) =>\n            builder =>\n            {\n                builder.OpenElement(0, \"p\");\n                builder.AddContent(1, localizer[resourceKey, errorMessage]);\n                builder.CloseElement();\n            };\n    }\n```", "```cs\nnamespace Learning.Blazor.Extensions;\n\ninternal static class WebAssemblyHostBuilderExtensions\n{\n    internal static WebAssemblyHostBuilder ConfigureServices(\n        this WebAssemblyHostBuilder builder)\n    {\n        var (services, configuration) = ![1](assets/1.png)\n            (builder.Services, builder.Configuration);\n\n        services.AddMemoryCache();\n        services.AddScoped<ApiAccessAuthorizationMessageHandler>();\n        services.Configure<WebApiOptions>(\n            configuration.GetSection(nameof(WebApiOptions)));\n\n        static WebApiOptions? GetWebApiOptions(\n            IServiceProvider serviceProvider) =>\n            serviceProvider.GetService<IOptions<WebApiOptions>>()\n                ?.Value;\n\n        var addHttpClient = ![2](assets/2.png)\n            static IHttpClientBuilder (\n                IServiceCollection services, string httpClientName,\n                Func<WebApiOptions?, string?> webApiOptionsUrlFactory) =>\n                services.AddHttpClient(\n                    httpClientName, (serviceProvider, client) =>\n            {\n                var options = GetWebApiOptions(serviceProvider);\n                var apiUrl = webApiOptionsUrlFactory(options);\n                if (apiUrl is { Length: > 0 })\n                    client.BaseAddress = new Uri(apiUrl);\n\n                var cultureService =\n                    serviceProvider.GetRequiredService<CultureService>();\n\n                client.DefaultRequestHeaders.AcceptLanguage.ParseAdd(\n                    cultureService.CurrentCulture.TwoLetterISOLanguageName);\n            })\n            .AddHttpMessageHandler<ApiAccessAuthorizationMessageHandler>();\n\n        _ = addHttpClient(\n            services, HttpClientNames.ServerApi,\n            options => options?.WebApiServerUrl);\n        _ = addHttpClient(\n            services, HttpClientNames.PwnedServerApi,\n            options => options?.PwnedWebApiServerUrl);\n        _ = addHttpClient(\n            services, HttpClientNames.WebFunctionsApi,\n            options => options?.WebFunctionsUrl ??\n                builder.HostEnvironment.BaseAddress);\n\n        services.AddScoped<WeatherFunctionsClientService>();\n        services.AddScoped( ![3](assets/3.png)\n            sp => sp.GetRequiredService<IHttpClientFactory>()\n                .CreateClient(HttpClientNames.ServerApi));\n        services.AddLocalization();\n        services.AddMsalAuthentication(\n            options =>\n            {\n                configuration.Bind(\n                    \"AzureAdB2C\", options.ProviderOptions.Authentication);\n                options.ProviderOptions.LoginMode = \"redirect\";\n                var add = options.ProviderOptions.DefaultAccessTokenScopes.Add;\n\n                add(\"openid\");\n                add(\"offline_access\");\n                add(AzureAuthenticationTenant.ScopeUrl);\n            });\n        services.AddOptions();\n        services.AddAuthorizationCore();\n        services.AddSingleton<SharedHubConnection>();\n        services.AddSingleton<AppInMemoryState>();\n        services.AddSingleton<CultureService>();\n        services.AddSingleton(typeof(CoalescingStringLocalizer<>));\n        services.AddScoped\n            <IWeatherStringFormatterService, WeatherStringFormatterService>();\n        services.AddScoped<GeoLocationService>();\n        services.AddHttpClient<GeoLocationService>(client =>\n        {\n            var apiHost = \"https://api.bigdatacloud.net\"; ![4](assets/4.png)\n            var reverseGeocodeClientRoute = \"data/reverse-geocode-client\";\n            client.BaseAddress =\n                new Uri($\"{apiHost}/{reverseGeocodeClientRoute}\");\n            client.DefaultRequestHeaders.AcceptEncoding.ParseAdd(\"gzip\");\n        });\n        services.AddJokeServices();\n        services.AddLocalStorageServices();\n        services.AddSpeechRecognitionServices();\n\n        return builder;\n    }\n}\n```", "```cs\n@inherits LocalizableComponentBase<AdditiveSpeechComponent>\n\n<div class=\"is-top-right-overlay\">\n    <button class=\"button is-rounded is-theme-aware-button p-4 @_dynamicCSS\"\n        disabled=@_isSpeaking @onclick=OnSpeakButtonClickAsync>\n        <span class=\"icon is-small\">\n            <i class=\"fas fa-volume-up\"></i>\n        </span>\n    </button>\n</div>\n```", "```cs\nnamespace Learning.Blazor.Components\n{\n    public partial class AdditiveSpeechComponent ![1](assets/1.png)\n    {\n        private bool _isSpeaking = false;\n        private string _dynamicCSS\n        {\n            get\n            {\n                return string.Join(\" \", GetStyles()).Trim();\n\n                IEnumerable<string> GetStyles()\n                {\n                    if (string.IsNullOrWhiteSpace(Message))\n                        yield return \"is-hidden\";\n\n                    if (_isSpeaking)\n                        yield return \"is-flashing\";\n                };\n            }\n        }\n [Parameter]\n        public string? Message { get; set; } = null!;\n\n        async Task OnSpeakButtonClickAsync() ![2](assets/2.png)\n        {\n            if (Message is null or { Length: 0 })\n            {\n                return;\n            }\n\n            var (voice, voiceSpeed) = AppState.ClientVoicePreference;\n            var bcp47Tag = Culture.CurrentCulture.Name;\n\n            _isSpeaking = true;\n\n            await JavaScript.SpeakMessageAsync(\n                this,\n                nameof(OnSpokenAsync),\n                Message,\n                voice,\n                voiceSpeed,\n                bcp47Tag);\n        }\n [JSInvokable]\n        public Task OnSpokenAsync(double elapsedTimeInMilliseconds) => ![3](assets/3.png)\n            InvokeAsync(() =>\n            {\n                _isSpeaking = false;\n\n                Logger.LogInformation(\n                    \"Spoke utterance in {ElapsedTime} milliseconds\",\n                    elapsedTimeInMilliseconds);\n\n                StateHasChanged();\n            });\n    }\n}\n```", "```cs\nnamespace Learning.Blazor.Extensions;\n\ninternal static partial class JSRuntimeExtensions\n{\n    internal static ValueTask SpeakMessageAsync<T>(\n        this IJSRuntime jsRuntime,\n        T dotnetObj,\n        string callbackMethodName,\n        string message,\n        string defaultVoice,\n        double voiceSpeed,\n        string lang) where T : class =>\n        jsRuntime.InvokeVoidAsync(\n            \"app.speak\",\n            DotNetObjectReference.Create(dotnetObj),\n            callbackMethodName, message, defaultVoice, voiceSpeed, lang);\n}\n```", "```cs\nconst cancelPendingSpeech = () => { ![1](assets/1.png)\n    if (window.speechSynthesis\n    && window.speechSynthesis.pending === true) {\n        window.speechSynthesis.cancel();\n    }\n};\n\nconst speak = (dotnetObj, callbackMethodName, message, ![2](assets/2.png)\n               defaultVoice, voiceSpeed, lang) => {\n    const utterance = new SpeechSynthesisUtterance(message);\n    utterance.onend = e => {\n        if (dotnetObj) {\n            dotnetObj.invokeMethodAsync(callbackMethodName, e.elapsedTime)\n        }\n    };\n\n    const voices = window.speechSynthesis.getVoices(); ![3](assets/3.png)\n    try {\n        utterance.voice =\n            !!defaultVoice && defaultVoice !== 'Auto'\n                ? voices.find(v => v.name === defaultVoice)\n                : voices.find(v => !!lang &&\n                    v.lang.startsWith(lang)) || voices[0];\n    } catch { }\n    utterance.volume = 1;\n    utterance.rate = voiceSpeed || 1;\n\n    window.speechSynthesis.speak(utterance); ![4](assets/4.png)\n};\n\nwindow.app = Object.assign({}, window.app, {\n    speak,\n    // omitted for brevity... });\n\n// Prevent the client from speaking when the user closes the tab or window. window.addEventListener('beforeunload', _ => { ![5](assets/5.png)\n    cancelPendingSpeech();\n});\n```", "```cs\n<div class=\"modal has-text-left @_isActiveClass\"> ![1](assets/1.png)\n    <div class=\"modal-background\" @onclick=@CancelAsync></div>\n    <div class=\"modal-card\">\n        <header class=\"modal-card-head\">\n            <p class=\"modal-card-title\"> @TitleContent ![2](assets/2.png)\n            </p>\n            <button class=\"delete\" aria-label=\"close\" @onclick=@CancelAsync>\n            </button>\n        </header>\n\n        <section class=\"modal-card-body\"> @BodyContent ![3](assets/3.png)\n        </section>\n\n        <footer class=\"modal-card-foot is-justify-content-flex-end\">\n            <div> @ButtonContent ![4](assets/4.png)\n            </div>\n        </footer>\n    </div>\n</div>\n```", "```cs\nnamespace Learning.Blazor.Components; ![1](assets/1.png)\n\npublic partial class ModalComponent\n{\n    private string _isActiveClass => IsActive ? \"is-active\" : \"\";\n [Parameter]\n    public EventCallback<DismissalReason> Dismissed { get; set; } ![2](assets/2.png)\n [Parameter]\n    public bool IsActive { get; set; }\n [Parameter, EditorRequired]\n    public RenderFragment TitleContent { get; set; } = null!;\n [Parameter, EditorRequired]\n    public RenderFragment BodyContent { get; set; } = null!;\n [Parameter, EditorRequired]\n    public RenderFragment ButtonContent { get; set; } = null!;\n\n    /// <summary>\n    /// Gets the reason that the <see cref=\"ModalComponent\"/> was dismissed.\n    /// </summary>\n    public DismissalReason Reason { get; private set; }\n\n    /// <summary>\n    /// Sets the <see cref=\"ModalComponent\"/> instance's\n    /// <see cref=\"IsActive\"/> value to <c>true</c> and\n    /// <see cref=\"Reason\"/> value as <c>default</c>.\n    /// It then signals for a change of state; this rerender will\n    /// show the modal.\n    /// </summary>\n    public Task ShowAsync() => ![3](assets/3.png)\n        InvokeAsync(() => (IsActive, Reason) = (true, default));\n\n    /// <summary>\n    /// Sets the <see cref=\"ModalComponent\"/> instance's\n    /// <see cref=\"IsActive\"/> value to <c>false</c> and\n    /// <see cref=\"Reason\"/> value as given <paramref name=\"reason\"/>\n    /// value. It then signals for a change of state;\n    /// this rerender will cause the modal to be dismissed.\n    /// </summary>\n    public Task DismissAsync(DismissalReason reason) =>\n        InvokeAsync(async () =>\n        {\n            (IsActive, Reason) = (false, reason);\n            if (Dismissed.HasDelegate)\n            {\n                await Dismissed.InvokeAsync(Reason);\n            }\n        });\n\n    /// <summary>\n    /// Dismisses the shown modal; the <see cref=\"Reason\"/>\n    /// will be set to <see cref=\"DismissalReason.Confirmed\"/>.\n    /// </summary>\n    public Task ConfirmAsync() => DismissAsync(DismissalReason.Confirmed);\n\n    /// <summary>\n    /// Dismisses the shown modal; the <see cref=\"Reason\"/>\n    /// will be set to <see cref=\"DismissalReason.Cancelled\"/>.\n    /// </summary>\n    public Task CancelAsync() => DismissAsync(DismissalReason.Cancelled);\n\n    /// <summary>\n    /// Dismisses the shown modal; the <see cref=\"Reason\"/>\n    /// will be set to <see cref=\"DismissalReason.Verified\"/>.\n    /// </summary>\n    public Task VerifyAsync() => DismissAsync(DismissalReason.Verified);\n}\n\npublic enum DismissalReason ![4](assets/4.png)\n{\n    Unknown, Confirmed, Cancelled, Verified\n};\n```", "```cs\n@inherits LocalizableComponentBase<VerificationModalComponent>\n\n<ModalComponent @ref=\"_modal\" Dismissed=@OnDismissed> ![1](assets/1.png)\n    <TitleContent> ![2](assets/2.png)\n        <span class=\"icon pr-2\">\n            <i class=\"fas fa-robot\"></i>\n        </span>\n        <span>@Localizer[\"AreYouHuman\"]</span>\n    </TitleContent>\n    <BodyContent> ![3](assets/3.png)\n        <form>\n            <div class=\"field\">\n                <label class=\"label\">@_math.HumanizeQuestion()</label>\n                <div class=\"field-body\">\n                    <div class=\"field\">\n                        <p class=\"control is-expanded has-icons-left\"> @{\n                                var inputValidityClass =\n                                    _answeredCorrectly is false\n                                        ? \" invalid\"\n                                        : \"\";\n\n                                var inputClasses = $\"input{inputValidityClass}\";\n                            } <input @bind=\"_attemptedAnswer\" ![4](assets/4.png)\n                                class=@inputClasses\n                                type=\"text\"\n                                placeholder=\"@Localizer[\"AnswerFormat\",\n                                    _math.GetQuestion()]\" />\n                            <span class=\"icon is-small is-left\">\n                                <i class=\"fas fa-info-circle\"></i>\n                            </span>\n                        </p>\n                    </div>\n                </div>\n            </div>\n        </form>\n    </BodyContent>\n    <ButtonContent> ![5](assets/5.png)\n        <button class=\"button is-info is-large is-pulled-left\" @onclick=Refresh>\n            <span class=\"icon\">\n                <i class=\"fas fa-redo\"></i>\n            </span>\n            <span>@Localizer[\"Refresh\"]</span>\n        </button>\n        <button class=\"button is-success is-large\" @onclick=AttemptToVerify>\n            <span class=\"icon\">\n                <i class=\"fas fa-check\"></i>\n            </span>\n            <span>@Localizer[\"Verify\"]</span>\n        </button>\n    </ButtonContent>\n</ModalComponent>\n```", "```cs\nnamespace Learning.Blazor.Components\n{\n    public sealed partial class VerificationModalComponent ![1](assets/1.png)\n    {\n        private AreYouHumanMath _math = AreYouHumanMath.CreateNew();\n        private ModalComponent _modal = null!;\n        private bool? _answeredCorrectly = null!;\n        private string? _attemptedAnswer = null!;\n        private object? _state = null;\n [Parameter, EditorRequired] ![2](assets/2.png)\n        public EventCallback<(bool IsVerified, object? State)>\n            OnVerificationAttempted\n            {\n                get;\n                set;\n            }\n\n        public Task PromptAsync(object? state = null) ![3](assets/3.png)\n        {\n            _state = state;\n            return _modal.ShowAsync();\n        }\n\n        private void Refresh() => ![4](assets/4.png)\n            (_math, _attemptedAnswer) = (AreYouHumanMath.CreateNew(), null);\n\n        private async Task OnDismissed(DismissalReason reason) ![5](assets/5.png)\n        {\n            if (OnVerificationAttempted.HasDelegate)\n            {\n                await OnVerificationAttempted.InvokeAsync(\n                    (reason is DismissalReason.Verified, _state));\n            }\n        }\n\n        private async Task AttemptToVerify() ![6](assets/6.png)\n        {\n            if (int.TryParse(_attemptedAnswer, out var attemptedAnswer))\n            {\n                _answeredCorrectly = _math.IsCorrect(attemptedAnswer);\n                if (_answeredCorrectly is true)\n                {\n                    await _modal.DismissAsync(DismissalReason.Verified);\n                }\n            }\n            else\n            {\n                _answeredCorrectly = false;\n            }\n        }\n    }\n}\n```", "```cs\nnamespace Learning.Blazor.Models;\n\npublic readonly record struct AreYouHumanMath( ![1](assets/1.png)\n    byte LeftOperand,\n    byte RightOperand,\n    MathOperator Operator = MathOperator.Addition)\n{\n    private static readonly Random s_random = Random.Shared;\n\n    /// <summary>\n    /// Determines if the given <paramref name=\"guess\"/> value is correct.\n    /// </summary>\n    /// <param name=\"guess\">The value being evaluated for correctness.</param>\n    /// <returns>\n    /// <c>true</c> when the given <paramref name=\"guess\"/> is correct,\n    /// otherwise <c>false</c>.\n    /// </returns>\n    /// <exception cref=\"ArgumentException\">\n    /// An <see cref=\"ArgumentException\"/> is thrown when\n    /// the current <see cref=\"Operator\"/> value is not defined.\n    /// </exception>\n    public bool IsCorrect(int guess) => guess == Operator switch ![2](assets/2.png)\n    {\n        MathOperator.Addition => LeftOperand + RightOperand,\n        MathOperator.Subtraction => LeftOperand - RightOperand,\n        MathOperator.Multiplication => LeftOperand * RightOperand,\n\n        _ => throw new ArgumentException(\n            $\"The operator is not supported: {Operator}\")\n    };\n\n    /// <summary>\n    /// The string representation of the <see cref=\"AreYouHumanMath\"/> instance.\n    /// <code language=\"cs\">\n    /// <![CDATA[\n    /// var math = new AreYouHumanMath(7, 3);\n    /// math.ToString(); // \"7 + 3 =\"\n    /// ]]>\n    /// </code>\n    /// </summary>\n    /// <exception cref=\"ArgumentException\">\n    /// An <see cref=\"ArgumentException\"/> is thrown when\n    /// the current <see cref=\"Operator\"/> value is not defined.\n    /// </exception>\n    public override string ToString() ![3](assets/3.png)\n    {\n        var operatorStr = Operator switch\n        {\n            MathOperator.Addition => \"+\",\n            MathOperator.Subtraction => \"-\",\n            MathOperator.Multiplication => \"*\",\n\n            _ => throw new ArgumentException(\n                $\"The operator is not supported: {Operator}\")\n        };\n\n        return $\"{LeftOperand} {operatorStr} {RightOperand} =\";\n    }\n\n    public string GetQuestion() => $\"{this} ?\";\n\n    public static AreYouHumanMath CreateNew( ![4](assets/4.png)\n        MathOperator? mathOperator = null)\n    {\n        var mathOp =\n            mathOperator.GetValueOrDefault(RandomOperator());\n\n        var (left, right) = mathOp switch\n        {\n            MathOperator.Addition => (Next(), Next()),\n            MathOperator.Subtraction => (Next(120), Next(120)),\n            _ => (Next(30), Next(30)),\n        };\n\n        (left, right) = (Math.Max(left, right), Math.Min(left, right));\n\n        return new AreYouHumanMath(\n            (byte)left,\n            (byte)right,\n            mathOp);\n\n        static MathOperator RandomOperator()\n        {\n            var values = Enum.GetValues<MathOperator>();\n            return values[s_random.Next(values.Length)];\n        };\n\n        static int Next(byte? maxValue = null) =>\n            s_random.Next(1, maxValue ?? byte.MaxValue);\n    }\n}\n\npublic enum MathOperator { Addition, Subtraction, Multiplication }; ![5](assets/5.png)\n```"]